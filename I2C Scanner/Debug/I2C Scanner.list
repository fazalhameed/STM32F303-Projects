
I2C Scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097d0  080097d0  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  080097d0  080097d0  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097d0  080097d0  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097d4  080097d4  000197d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080097d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          0000137c  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001548  20001548  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010808  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030ad  00000000  00000000  00030a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a1a  00000000  00000000  00034880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f69c  00000000  00000000  0003529a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013ed7  00000000  00000000  00054936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ae3e7  00000000  00000000  0006880d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ae0  00000000  00000000  00116bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0011a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096c0 	.word	0x080096c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	080096c0 	.word	0x080096c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 faa3 	bl	80007d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f89f 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f93d 	bl	800050c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000292:	f000 f8fb 	bl	800048c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000296:	f008 f8a7 	bl	80083e8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  int found = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
	       char charData[20]; // Data holder
	       for(uint16_t i2c=1; i2c<128; i2c++)
 800029e:	2301      	movs	r3, #1
 80002a0:	837b      	strh	r3, [r7, #26]
 80002a2:	e067      	b.n	8000374 <main+0xf4>
	       {
	           if (HAL_I2C_IsDeviceReady(&hi2c1, i2c<<1, 5, 10) == HAL_OK)
 80002a4:	8b7b      	ldrh	r3, [r7, #26]
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	b299      	uxth	r1, r3
 80002aa:	230a      	movs	r3, #10
 80002ac:	2205      	movs	r2, #5
 80002ae:	483f      	ldr	r0, [pc, #252]	; (80003ac <main+0x12c>)
 80002b0:	f000 fe3f 	bl	8000f32 <HAL_I2C_IsDeviceReady>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d156      	bne.n	8000368 <main+0xe8>
	           {
	           found = 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61fb      	str	r3, [r7, #28]
	           sprintf(charData, "%s : ", "i2cdevices.org");
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4a3b      	ldr	r2, [pc, #236]	; (80003b0 <main+0x130>)
 80002c2:	493c      	ldr	r1, [pc, #240]	; (80003b4 <main+0x134>)
 80002c4:	4618      	mov	r0, r3
 80002c6:	f008 fd57 	bl	8008d78 <siprintf>
	               CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff7f 	bl	80001d0 <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4611      	mov	r1, r2
 80002da:	4618      	mov	r0, r3
 80002dc:	f008 f942 	bl	8008564 <CDC_Transmit_FS>
	               HAL_Delay(500);
 80002e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e4:	f000 fada 	bl	800089c <HAL_Delay>
	               sprintf(charData, "%x and ", i2c);
 80002e8:	8b7a      	ldrh	r2, [r7, #26]
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4932      	ldr	r1, [pc, #200]	; (80003b8 <main+0x138>)
 80002ee:	4618      	mov	r0, r3
 80002f0:	f008 fd42 	bl	8008d78 <siprintf>
	               CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff6a 	bl	80001d0 <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	b29a      	uxth	r2, r3
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4611      	mov	r1, r2
 8000304:	4618      	mov	r0, r3
 8000306:	f008 f92d 	bl	8008564 <CDC_Transmit_FS>
	               HAL_Delay(500);
 800030a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800030e:	f000 fac5 	bl	800089c <HAL_Delay>
	               sprintf(charData, "%s : ", "STM32 Address");
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4a29      	ldr	r2, [pc, #164]	; (80003bc <main+0x13c>)
 8000316:	4927      	ldr	r1, [pc, #156]	; (80003b4 <main+0x134>)
 8000318:	4618      	mov	r0, r3
 800031a:	f008 fd2d 	bl	8008d78 <siprintf>
	               CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff55 	bl	80001d0 <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	b29a      	uxth	r2, r3
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f008 f918 	bl	8008564 <CDC_Transmit_FS>
	               HAL_Delay(500);
 8000334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000338:	f000 fab0 	bl	800089c <HAL_Delay>
	               sprintf(charData, "%x\n", i2c<<1);
 800033c:	8b7b      	ldrh	r3, [r7, #26]
 800033e:	005a      	lsls	r2, r3, #1
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	491f      	ldr	r1, [pc, #124]	; (80003c0 <main+0x140>)
 8000344:	4618      	mov	r0, r3
 8000346:	f008 fd17 	bl	8008d78 <siprintf>
	               CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff3f 	bl	80001d0 <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4611      	mov	r1, r2
 800035a:	4618      	mov	r0, r3
 800035c:	f008 f902 	bl	8008564 <CDC_Transmit_FS>
	               HAL_Delay(500);
 8000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000364:	f000 fa9a 	bl	800089c <HAL_Delay>
	            }
	            HAL_Delay(5);
 8000368:	2005      	movs	r0, #5
 800036a:	f000 fa97 	bl	800089c <HAL_Delay>
	       for(uint16_t i2c=1; i2c<128; i2c++)
 800036e:	8b7b      	ldrh	r3, [r7, #26]
 8000370:	3301      	adds	r3, #1
 8000372:	837b      	strh	r3, [r7, #26]
 8000374:	8b7b      	ldrh	r3, [r7, #26]
 8000376:	2b7f      	cmp	r3, #127	; 0x7f
 8000378:	d994      	bls.n	80002a4 <main+0x24>
	        }
	        if (!found)
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d18c      	bne.n	800029a <main+0x1a>
	        {
	             sprintf(charData, "%s", "No devices found!\n");
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <main+0x144>)
 8000384:	4910      	ldr	r1, [pc, #64]	; (80003c8 <main+0x148>)
 8000386:	4618      	mov	r0, r3
 8000388:	f008 fcf6 	bl	8008d78 <siprintf>
	             CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff1e 	bl	80001d0 <strlen>
 8000394:	4603      	mov	r3, r0
 8000396:	b29a      	uxth	r2, r3
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4611      	mov	r1, r2
 800039c:	4618      	mov	r0, r3
 800039e:	f008 f8e1 	bl	8008564 <CDC_Transmit_FS>
	             HAL_Delay(500);/* USER CODE END WHILE */
 80003a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a6:	f000 fa79 	bl	800089c <HAL_Delay>
  {
 80003aa:	e776      	b.n	800029a <main+0x1a>
 80003ac:	200001e8 	.word	0x200001e8
 80003b0:	080096d8 	.word	0x080096d8
 80003b4:	080096e8 	.word	0x080096e8
 80003b8:	080096f0 	.word	0x080096f0
 80003bc:	080096f8 	.word	0x080096f8
 80003c0:	08009708 	.word	0x08009708
 80003c4:	0800970c 	.word	0x0800970c
 80003c8:	08009720 	.word	0x08009720

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09e      	sub	sp, #120	; 0x78
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d6:	2228      	movs	r2, #40	; 0x28
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f008 fcec 	bl	8008db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	223c      	movs	r2, #60	; 0x3c
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f008 fcde 	bl	8008db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003fc:	2303      	movs	r3, #3
 80003fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	2310      	movs	r3, #16
 8000410:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000420:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fd2e 	bl	8002e88 <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000432:	f000 f89b 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000436:	230f      	movs	r3, #15
 8000438:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	2302      	movs	r3, #2
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fd56 	bl	8003f04 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800045e:	f000 f885 	bl	800056c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <SystemClock_Config+0xbc>)
 8000464:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800046a:	2300      	movs	r3, #0
 800046c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046e:	463b      	mov	r3, r7
 8000470:	4618      	mov	r0, r3
 8000472:	f003 ff17 	bl	80042a4 <HAL_RCCEx_PeriphCLKConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800047c:	f000 f876 	bl	800056c <Error_Handler>
  }
}
 8000480:	bf00      	nop
 8000482:	3778      	adds	r7, #120	; 0x78
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	00020020 	.word	0x00020020

0800048c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_I2C1_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <MX_I2C1_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_I2C1_Init+0x74>)
 8000498:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <MX_I2C1_Init+0x7c>)
 800049a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_I2C1_Init+0x74>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_I2C1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_I2C1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_I2C1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c6:	480e      	ldr	r0, [pc, #56]	; (8000500 <MX_I2C1_Init+0x74>)
 80004c8:	f000 fc98 	bl	8000dfc <HAL_I2C_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d2:	f000 f84b 	bl	800056c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004d6:	2100      	movs	r1, #0
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <MX_I2C1_Init+0x74>)
 80004da:	f000 ff73 	bl	80013c4 <HAL_I2CEx_ConfigAnalogFilter>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e4:	f000 f842 	bl	800056c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004e8:	2100      	movs	r1, #0
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_I2C1_Init+0x74>)
 80004ec:	f000 ffb5 	bl	800145a <HAL_I2CEx_ConfigDigitalFilter>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f839 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200001e8 	.word	0x200001e8
 8000504:	40005400 	.word	0x40005400
 8000508:	2000090e 	.word	0x2000090e

0800050c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_GPIO_Init+0x5c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_GPIO_Init+0x5c>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x44>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <HAL_MspInit+0x44>)
 800059c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <HAL_I2C_MspInit+0xb8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d145      	bne.n	800066e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <HAL_I2C_MspInit+0xbc>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <HAL_I2C_MspInit+0xbc>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <HAL_I2C_MspInit+0xbc>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <HAL_I2C_MspInit+0xbc>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <HAL_I2C_MspInit+0xbc>)
 8000600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <HAL_I2C_MspInit+0xbc>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000618:	2312      	movs	r3, #18
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000624:	2304      	movs	r3, #4
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fa69 	bl	8000b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800063a:	2312      	movs	r3, #18
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000646:	2304      	movs	r3, #4
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <HAL_I2C_MspInit+0xc0>)
 8000652:	f000 fa59 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_I2C_MspInit+0xbc>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_I2C_MspInit+0xbc>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0xbc>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000688:	e7fe      	b.n	8000688 <NMI_Handler+0x4>

0800068a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <MemManage_Handler+0x4>

08000696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 f8c4 	bl	800085c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006de:	f000 fff5 	bl	80016cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000f0c 	.word	0x20000f0c

080006ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_sbrk+0x5c>)
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_sbrk+0x60>)
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <_sbrk+0x64>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <_sbrk+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	429a      	cmp	r2, r3
 800071a:	d207      	bcs.n	800072c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800071c:	f008 fb54 	bl	8008dc8 <__errno>
 8000720:	4603      	mov	r3, r0
 8000722:	220c      	movs	r2, #12
 8000724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	e009      	b.n	8000740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <_sbrk+0x64>)
 800073c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000a000 	.word	0x2000a000
 800074c:	00000400 	.word	0x00000400
 8000750:	2000023c 	.word	0x2000023c
 8000754:	20001548 	.word	0x20001548

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000780:	f7ff ffea 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f008 fb13 	bl	8008dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ae:	f7ff fd67 	bl	8000280 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80007c0:	080097d8 	.word	0x080097d8
  ldr r2, =_sbss
 80007c4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80007c8:	20001548 	.word	0x20001548

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 f94f 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f000 f808 	bl	80007fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fec4 	bl	8000578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x54>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_InitTick+0x58>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f967 	bl	8000aee <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e00e      	b.n	8000848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d80a      	bhi.n	8000846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f000 f92f 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <HAL_InitTick+0x5c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e000      	b.n	8000848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x20>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_IncTick+0x24>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <HAL_IncTick+0x24>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008
 8000880:	20000240 	.word	0x20000240

08000884 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;  
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000240 	.word	0x20000240

0800089c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff ffee 	bl	8000884 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b4:	d005      	beq.n	80008c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_Delay+0x44>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008c2:	bf00      	nop
 80008c4:	f7ff ffde 	bl	8000884 <HAL_GetTick>
 80008c8:	4602      	mov	r2, r0
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d8f7      	bhi.n	80008c4 <HAL_Delay+0x28>
  {
  }
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000008 	.word	0x20000008

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0b      	blt.n	8000972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4907      	ldr	r1, [pc, #28]	; (8000980 <__NVIC_EnableIRQ+0x38>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff29 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff3e 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff31 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffa2 	bl	8000a40 <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e154      	b.n	8000dc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8146 	beq.w	8000dbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <HAL_GPIO_Init+0x40>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	f003 0201 	and.w	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d017      	beq.n	8000be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d123      	bne.n	8000c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0203 	and.w	r2, r3, #3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 80a0 	beq.w	8000dbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a57      	ldr	r2, [pc, #348]	; (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6193      	str	r3, [r2, #24]
 8000c88:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c94:	4a53      	ldr	r2, [pc, #332]	; (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cbe:	d019      	beq.n	8000cf4 <HAL_GPIO_Init+0x1ec>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a49      	ldr	r2, [pc, #292]	; (8000de8 <HAL_GPIO_Init+0x2e0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a48      	ldr	r2, [pc, #288]	; (8000dec <HAL_GPIO_Init+0x2e4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1e4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a47      	ldr	r2, [pc, #284]	; (8000df0 <HAL_GPIO_Init+0x2e8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1dc>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e008      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d06:	4937      	ldr	r1, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d38:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_GPIO_Init+0x2f0>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f aea3 	bne.w	8000b18 <HAL_GPIO_Init+0x10>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000c00 	.word	0x48000c00
 8000df4:	48001000 	.word	0x48001000
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e08d      	b.n	8000f2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d106      	bne.n	8000e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fbcc 	bl	80005c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2224      	movs	r2, #36	; 0x24
 8000e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0201 	bic.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d107      	bne.n	8000e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	e006      	b.n	8000e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d108      	bne.n	8000e9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	e007      	b.n	8000eae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6812      	ldr	r2, [r2, #0]
 8000eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ec0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ed0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69d9      	ldr	r1, [r3, #28]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2220      	movs	r2, #32
 8000f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b08a      	sub	sp, #40	; 0x28
 8000f36:	af02      	add	r7, sp, #8
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	f040 80d6 	bne.w	8001100 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f62:	d101      	bne.n	8000f68 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8000f64:	2302      	movs	r3, #2
 8000f66:	e0cc      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_I2C_IsDeviceReady+0x44>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e0c5      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2224      	movs	r2, #36	; 0x24
 8000f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d107      	bne.n	8000fa4 <HAL_I2C_IsDeviceReady+0x72>
 8000f94:	897b      	ldrh	r3, [r7, #10]
 8000f96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa2:	e006      	b.n	8000fb2 <HAL_I2C_IsDeviceReady+0x80>
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fae:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	6812      	ldr	r2, [r2, #0]
 8000fb6:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc64 	bl	8000884 <HAL_GetTick>
 8000fbc:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	2b20      	cmp	r3, #32
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b10      	cmp	r3, #16
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000fea:	e034      	b.n	8001056 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d01a      	beq.n	800102a <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ff4:	f7ff fc46 	bl	8000884 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d302      	bcc.n	800100a <HAL_I2C_IsDeviceReady+0xd8>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10f      	bne.n	800102a <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2220      	movs	r2, #32
 800100e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f043 0220 	orr.w	r2, r3, #32
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e06b      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	2b20      	cmp	r3, #32
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b10      	cmp	r3, #16
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <HAL_I2C_IsDeviceReady+0x130>
 800105c:	7fbb      	ldrb	r3, [r7, #30]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0c4      	beq.n	8000fec <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b10      	cmp	r3, #16
 800106e:	d01a      	beq.n	80010a6 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 f869 	bl	8001152 <I2C_WaitOnFlagUntilTimeout>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e03b      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2220      	movs	r2, #32
 8001090:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2220      	movs	r2, #32
 8001096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e02d      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f000 f84e 	bl	8001152 <I2C_WaitOnFlagUntilTimeout>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e020      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2220      	movs	r2, #32
 80010ce:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	f63f af56 	bhi.w	8000f8c <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2220      	movs	r2, #32
 80010e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f043 0220 	orr.w	r2, r3, #32
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001100:	2302      	movs	r3, #2
  }
}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b02      	cmp	r3, #2
 800111e:	d103      	bne.n	8001128 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d007      	beq.n	8001146 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	619a      	str	r2, [r3, #24]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4613      	mov	r3, r2
 8001160:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001162:	e03b      	b.n	80011dc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	6839      	ldr	r1, [r7, #0]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f84b 	bl	8001204 <I2C_IsErrorOccurred>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e041      	b.n	80011fc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117e:	d02d      	beq.n	80011dc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001180:	f7ff fb80 	bl	8000884 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d302      	bcc.n	8001196 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d122      	bne.n	80011dc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	699a      	ldr	r2, [r3, #24]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4013      	ands	r3, r2
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	bf0c      	ite	eq
 80011a6:	2301      	moveq	r3, #1
 80011a8:	2300      	movne	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d113      	bne.n	80011dc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f043 0220 	orr.w	r2, r3, #32
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2220      	movs	r2, #32
 80011c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e00f      	b.n	80011fc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	4013      	ands	r3, r2
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d0b4      	beq.n	8001164 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d068      	beq.n	8001302 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2210      	movs	r2, #16
 8001236:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001238:	e049      	b.n	80012ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d045      	beq.n	80012ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001242:	f7ff fb1f 	bl	8000884 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d302      	bcc.n	8001258 <I2C_IsErrorOccurred+0x54>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d13a      	bne.n	80012ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800126a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800127a:	d121      	bne.n	80012c0 <I2C_IsErrorOccurred+0xbc>
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001282:	d01d      	beq.n	80012c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	2b20      	cmp	r3, #32
 8001288:	d01a      	beq.n	80012c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001298:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800129a:	f7ff faf3 	bl	8000884 <HAL_GetTick>
 800129e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012a0:	e00e      	b.n	80012c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80012a2:	f7ff faef 	bl	8000884 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b19      	cmp	r3, #25
 80012ae:	d907      	bls.n	80012c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80012be:	e006      	b.n	80012ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d1e9      	bne.n	80012a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	2b20      	cmp	r3, #32
 80012da:	d003      	beq.n	80012e4 <I2C_IsErrorOccurred+0xe0>
 80012dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0aa      	beq.n	800123a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01c      	beq.n	80013b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fec6 	bl	800110a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <I2C_IsErrorOccurred+0x1bc>)
 800138a:	400b      	ands	r3, r1
 800138c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	431a      	orrs	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2220      	movs	r2, #32
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80013b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	fe00e800 	.word	0xfe00e800

080013c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d138      	bne.n	800144c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d101      	bne.n	80013e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e032      	b.n	800144e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2224      	movs	r2, #36	; 0x24
 80013f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001416:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800144c:	2302      	movs	r3, #2
  }
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b20      	cmp	r3, #32
 800146e:	d139      	bne.n	80014e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800147a:	2302      	movs	r3, #2
 800147c:	e033      	b.n	80014e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2220      	movs	r2, #32
 80014d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80014e4:	2302      	movs	r3, #2
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b9      	b.n	8001678 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f007 f959 	bl	80087d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f003 f881 	bl	8004632 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e03e      	b.n	80015b4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	3311      	adds	r3, #17
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3310      	adds	r3, #16
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	440b      	add	r3, r1
 800156c:	3313      	adds	r3, #19
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	3320      	adds	r3, #32
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	3324      	adds	r3, #36	; 0x24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	791b      	ldrb	r3, [r3, #4]
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3bb      	bcc.n	8001536 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e044      	b.n	800164e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015c4:	7bfa      	ldrb	r2, [r7, #15]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	f203 1351 	addw	r3, r3, #337	; 0x151
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	429a      	cmp	r2, r3
 8001656:	d3b5      	bcc.n	80015c4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001664:	f003 f800 	bl	8004668 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_PCD_Start+0x16>
 8001692:	2302      	movs	r3, #2
 8001694:	e016      	b.n	80016c4 <HAL_PCD_Start+0x44>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 ffae 	bl	8004604 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f007 fb2c 	bl	8008d08 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 fa6b 	bl	8006b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 fa64 	bl	8006ba6 <USB_ReadInterrupts>
 80016de:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fab1 	bl	8001c52 <PCD_EP_ISR_Handler>

    return;
 80016f0:	e0bd      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170e:	b292      	uxth	r2, r2
 8001710:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f007 f8fc 	bl	8008912 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8a9 	bl	8001874 <HAL_PCD_SetAddress>

    return;
 8001722:	e0a4      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001736:	b29a      	uxth	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001740:	b292      	uxth	r2, r2
 8001742:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001746:	e092      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001764:	b292      	uxth	r2, r2
 8001766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800176a:	e080      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d027      	beq.n	80017c6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177e:	b29a      	uxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0204 	bic.w	r2, r2, #4
 8001788:	b292      	uxth	r2, r2
 800178a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f007 f8ec 	bl	8008984 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017be:	b292      	uxth	r2, r2
 80017c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80017c4:	e053      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d027      	beq.n	8001820 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0208 	orr.w	r2, r2, #8
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	b292      	uxth	r2, r2
 80017fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0204 	orr.w	r2, r2, #4
 8001812:	b292      	uxth	r2, r2
 8001814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f007 f899 	bl	8008950 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800181e:	e026      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00f      	beq.n	800184a <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f007 f857 	bl	80088f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001848:	e011      	b.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00c      	beq.n	800186e <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001866:	b292      	uxth	r2, r2
 8001868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800186c:	bf00      	nop
  }
}
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_PCD_SetAddress+0x1a>
 800188a:	2302      	movs	r3, #2
 800188c:	e012      	b.n	80018b4 <HAL_PCD_SetAddress+0x40>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 f95f 	bl	8006b68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	70fb      	strb	r3, [r7, #3]
 80018ce:	460b      	mov	r3, r1
 80018d0:	803b      	strh	r3, [r7, #0]
 80018d2:	4613      	mov	r3, r2
 80018d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da0e      	bge.n	8001900 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f003 0207 	and.w	r2, r3, #7
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	3310      	adds	r3, #16
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2201      	movs	r2, #1
 80018fc:	705a      	strb	r2, [r3, #1]
 80018fe:	e00e      	b.n	800191e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 0207 	and.w	r2, r3, #7
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800192a:	883a      	ldrh	r2, [r7, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	78ba      	ldrb	r2, [r7, #2]
 8001934:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001936:	78bb      	ldrb	r3, [r7, #2]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d102      	bne.n	8001942 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_PCD_EP_Open+0x94>
 800194c:	2302      	movs	r3, #2
 800194e:	e00e      	b.n	800196e <HAL_PCD_EP_Open+0xb2>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	4618      	mov	r0, r3
 8001960:	f002 fea0 	bl	80046a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800196c:	7afb      	ldrb	r3, [r7, #11]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da0e      	bge.n	80019a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 0207 	and.w	r2, r3, #7
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	3310      	adds	r3, #16
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	705a      	strb	r2, [r3, #1]
 80019a6:	e00e      	b.n	80019c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	f003 0207 	and.w	r2, r3, #7
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_PCD_EP_Close+0x6a>
 80019dc:	2302      	movs	r3, #2
 80019de:	e00e      	b.n	80019fe <HAL_PCD_EP_Close+0x88>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fa1c 	bl	8004e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	460b      	mov	r3, r1
 8001a14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	f003 0207 	and.w	r2, r3, #7
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a46:	7afb      	ldrb	r3, [r7, #11]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fbd4 	bl	8005206 <USB_EPStartXfer>

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0207 	and.w	r2, r3, #7
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	3310      	adds	r3, #16
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6979      	ldr	r1, [r7, #20]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fb85 	bl	8005206 <USB_EPStartXfer>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	7912      	ldrb	r2, [r2, #4]
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e03e      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da0e      	bge.n	8001b4a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 0207 	and.w	r2, r3, #7
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	705a      	strb	r2, [r3, #1]
 8001b48:	e00c      	b.n	8001b64 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_PCD_EP_SetStall+0x7e>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e00e      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0x9c>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 fee9 	bl	800696a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	7912      	ldrb	r2, [r2, #4]
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da0e      	bge.n	8001bee <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 0207 	and.w	r2, r3, #7
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	3310      	adds	r3, #16
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
 8001bec:	e00e      	b.n	8001c0c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 0207 	and.w	r2, r3, #7
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_EP_ClrStall+0x82>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e00e      	b.n	8001c4a <HAL_PCD_EP_ClrStall+0xa0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68f9      	ldr	r1, [r7, #12]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fee6 	bl	8006a0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b096      	sub	sp, #88	; 0x58
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c5a:	e3bc      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c64:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8001c76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8176 	bne.w	8001f6c <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c80:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d14f      	bne.n	8001d2c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9c:	81fb      	strh	r3, [r7, #14]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3310      	adds	r3, #16
 8001cb4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	441a      	add	r2, r3
 8001cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 fde5 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8369 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x784>
 8001d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 8364 	bne.w	80023d6 <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7b1b      	ldrb	r3, [r3, #12]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	731a      	strb	r2, [r3, #12]
 8001d2a:	e354      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d32:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d034      	beq.n	8001db4 <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3306      	adds	r3, #6
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f004 ff62 	bl	8006c52 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	823b      	strh	r3, [r7, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	8a3a      	ldrh	r2, [r7, #16]
 8001da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da8:	b292      	uxth	r2, r2
 8001daa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f006 fd5b 	bl	8008868 <HAL_PCD_SetupStageCallback>
 8001db2:	e310      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001db4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f280 830c 	bge.w	80023d6 <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dca:	4013      	ands	r3, r2
 8001dcc:	83fb      	strh	r3, [r7, #30]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	8bfa      	ldrh	r2, [r7, #30]
 8001dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	3306      	adds	r3, #6
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d019      	beq.n	8001e44 <PCD_EP_ISR_Handler+0x1f2>
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1e:	6959      	ldr	r1, [r3, #20]
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f004 ff12 	bl	8006c52 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	441a      	add	r2, r3
 8001e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fd24 	bl	800888c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 82bd 	bne.w	80023d6 <PCD_EP_ISR_Handler+0x784>
 8001e5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001e60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e68:	f000 82b5 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <PCD_EP_ISR_Handler+0x268>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e039      	b.n	8001f2e <PCD_EP_ISR_Handler+0x2dc>
 8001eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec0:	d818      	bhi.n	8001ef4 <PCD_EP_ISR_Handler+0x2a2>
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <PCD_EP_ISR_Handler+0x28a>
 8001ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed8:	3301      	adds	r3, #1
 8001eda:	647b      	str	r3, [r7, #68]	; 0x44
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4313      	orrs	r3, r2
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	801a      	strh	r2, [r3, #0]
 8001ef2:	e01c      	b.n	8001f2e <PCD_EP_ISR_Handler+0x2dc>
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	647b      	str	r3, [r7, #68]	; 0x44
 8001efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x2bc>
 8001f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	029b      	lsls	r3, r3, #10
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	827b      	strh	r3, [r7, #18]
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f46:	827b      	strh	r3, [r7, #18]
 8001f48:	8a7b      	ldrh	r3, [r7, #18]
 8001f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f4e:	827b      	strh	r3, [r7, #18]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	8a7b      	ldrh	r3, [r7, #18]
 8001f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	8013      	strh	r3, [r2, #0]
 8001f6a:	e234      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f280 80fc 	bge.w	8002182 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fbc:	b292      	uxth	r2, r2
 8001fbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd8:	7b1b      	ldrb	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d125      	bne.n	800202a <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3306      	adds	r3, #6
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800200a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8092 	beq.w	8002138 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	6959      	ldr	r1, [r3, #20]
 800201c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201e:	88da      	ldrh	r2, [r3, #6]
 8002020:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002024:	f004 fe15 	bl	8006c52 <USB_ReadPMA>
 8002028:	e086      	b.n	8002138 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800202a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202c:	78db      	ldrb	r3, [r3, #3]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d10a      	bne.n	8002048 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002032:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002036:	461a      	mov	r2, r3
 8002038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f9d9 	bl	80023f2 <HAL_PCD_EP_DB_Receive>
 8002040:	4603      	mov	r3, r0
 8002042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002046:	e077      	b.n	8002138 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002062:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	441a      	add	r2, r3
 8002074:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002088:	b29b      	uxth	r3, r3
 800208a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	3302      	adds	r3, #2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80020d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02e      	beq.n	8002138 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e0:	6959      	ldr	r1, [r3, #20]
 80020e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e4:	891a      	ldrh	r2, [r3, #8]
 80020e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020ea:	f004 fdb2 	bl	8006c52 <USB_ReadPMA>
 80020ee:	e023      	b.n	8002138 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	3306      	adds	r3, #6
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002118:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800211c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	6959      	ldr	r1, [r3, #20]
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	895a      	ldrh	r2, [r3, #10]
 8002130:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002134:	f004 fd8d 	bl	8006c52 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002140:	441a      	add	r2, r3
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800214e:	441a      	add	r2, r3
 8002150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002152:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <PCD_EP_ISR_Handler+0x516>
 800215c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d206      	bcs.n	8002176 <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f006 fb8c 	bl	800888c <HAL_PCD_DataOutStageCallback>
 8002174:	e005      	b.n	8002182 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800217c:	4618      	mov	r0, r3
 800217e:	f003 f842 	bl	8005206 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002182:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8123 	beq.w	80023d6 <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8002190:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	3310      	adds	r3, #16
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80021e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f040 80a2 	bne.w	800232e <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80021ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80021f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021f2:	7b1b      	ldrb	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8093 	beq.w	8002320 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d046      	beq.n	8002294 <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	785b      	ldrb	r3, [r3, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d126      	bne.n	800225c <PCD_EP_ISR_Handler+0x60a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	4413      	add	r3, r2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	011a      	lsls	r2, r3, #4
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	4413      	add	r3, r2
 8002230:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002240:	b29a      	uxth	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	801a      	strh	r2, [r3, #0]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002254:	b29a      	uxth	r2, r3
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	e061      	b.n	8002320 <PCD_EP_ISR_Handler+0x6ce>
 800225c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d15d      	bne.n	8002320 <PCD_EP_ISR_Handler+0x6ce>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002272:	b29b      	uxth	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	4413      	add	r3, r2
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	011a      	lsls	r2, r3, #4
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	4413      	add	r3, r2
 8002286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	2200      	movs	r2, #0
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	e045      	b.n	8002320 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d126      	bne.n	80022f0 <PCD_EP_ISR_Handler+0x69e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b6:	4413      	add	r3, r2
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	011a      	lsls	r2, r3, #4
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	4413      	add	r3, r2
 80022c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	801a      	strh	r2, [r3, #0]
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e017      	b.n	8002320 <PCD_EP_ISR_Handler+0x6ce>
 80022f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d113      	bne.n	8002320 <PCD_EP_ISR_Handler+0x6ce>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002306:	4413      	add	r3, r2
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	011a      	lsls	r2, r3, #4
 8002310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002312:	4413      	add	r3, r2
 8002314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 facb 	bl	80088c2 <HAL_PCD_DataInStageCallback>
 800232c:	e053      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800232e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d146      	bne.n	80023c8 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	3302      	adds	r3, #2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002362:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800236e:	429a      	cmp	r2, r3
 8002370:	d907      	bls.n	8002382 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8002372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800237a:	1ad2      	subs	r2, r2, r3
 800237c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237e:	619a      	str	r2, [r3, #24]
 8002380:	e002      	b.n	8002388 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8002382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f006 fa93 	bl	80088c2 <HAL_PCD_DataInStageCallback>
 800239c:	e01b      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800239e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023a6:	441a      	add	r2, r3
 80023a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023aa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80023b4:	441a      	add	r2, r3
 80023b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 ff20 	bl	8005206 <USB_EPStartXfer>
 80023c6:	e006      	b.n	80023d6 <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023cc:	461a      	mov	r2, r3
 80023ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f91b 	bl	800260c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f6ff ac3a 	blt.w	8001c5c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3758      	adds	r7, #88	; 0x58
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b088      	sub	sp, #32
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	4613      	mov	r3, r2
 80023fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07e      	beq.n	8002508 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002412:	b29b      	uxth	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	3302      	adds	r3, #2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	8b7b      	ldrh	r3, [r7, #26]
 800243a:	429a      	cmp	r2, r3
 800243c:	d306      	bcc.n	800244c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	1ad2      	subs	r2, r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	619a      	str	r2, [r3, #24]
 800244a:	e002      	b.n	8002452 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d123      	bne.n	80024a2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	833b      	strh	r3, [r7, #24]
 8002476:	8b3b      	ldrh	r3, [r7, #24]
 8002478:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800247c:	833b      	strh	r3, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	8b3b      	ldrh	r3, [r7, #24]
 800248e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	82fb      	strh	r3, [r7, #22]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	8afb      	ldrh	r3, [r7, #22]
 80024d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024ec:	8b7b      	ldrh	r3, [r7, #26]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	891a      	ldrh	r2, [r3, #8]
 8002500:	8b7b      	ldrh	r3, [r7, #26]
 8002502:	f004 fba6 	bl	8006c52 <USB_ReadPMA>
 8002506:	e07c      	b.n	8002602 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002530:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	8b7b      	ldrh	r3, [r7, #26]
 8002538:	429a      	cmp	r2, r3
 800253a:	d306      	bcc.n	800254a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	8b7b      	ldrh	r3, [r7, #26]
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	e002      	b.n	8002550 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d123      	bne.n	80025a0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	83fb      	strh	r3, [r7, #30]
 8002574:	8bfb      	ldrh	r3, [r7, #30]
 8002576:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257a:	83fb      	strh	r3, [r7, #30]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	441a      	add	r2, r3
 800258a:	8bfb      	ldrh	r3, [r7, #30]
 800258c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	b29b      	uxth	r3, r3
 800259e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11f      	bne.n	80025ea <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	83bb      	strh	r3, [r7, #28]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	441a      	add	r2, r3
 80025d4:	8bbb      	ldrh	r3, [r7, #28]
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	895a      	ldrh	r2, [r3, #10]
 80025fc:	8b7b      	ldrh	r3, [r7, #26]
 80025fe:	f004 fb28 	bl	8006c52 <USB_ReadPMA>
    }
  }

  return count;
 8002602:	8b7b      	ldrh	r3, [r7, #26]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b0a4      	sub	sp, #144	; 0x90
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 81dd 	beq.w	80029e0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	3302      	adds	r3, #2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4413      	add	r3, r2
 8002644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800264e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800265a:	429a      	cmp	r2, r3
 800265c:	d907      	bls.n	800266e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	619a      	str	r2, [r3, #24]
 800266c:	e002      	b.n	8002674 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f040 80b9 	bne.w	80027f0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	785b      	ldrb	r3, [r3, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d126      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002694:	b29b      	uxth	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	4413      	add	r3, r2
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	011a      	lsls	r2, r3, #4
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e01a      	b.n	800270a <HAL_PCD_EP_DB_Transmit+0xfe>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	785b      	ldrb	r3, [r3, #1]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d116      	bne.n	800270a <HAL_PCD_EP_DB_Transmit+0xfe>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	4413      	add	r3, r2
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	011a      	lsls	r2, r3, #4
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d126      	bne.n	8002766 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	011a      	lsls	r2, r3, #4
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800274a:	b29a      	uxth	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800275a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275e:	b29a      	uxth	r2, r3
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	801a      	strh	r2, [r3, #0]
 8002764:	e017      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d113      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x18a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	4413      	add	r3, r2
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	011a      	lsls	r2, r3, #4
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	4413      	add	r3, r2
 800278a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f006 f890 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 82fc 	beq.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c8:	82fb      	strh	r3, [r7, #22]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	441a      	add	r2, r3
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	8013      	strh	r3, [r2, #0]
 80027ee:	e2da      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d021      	beq.n	800283e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800282a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800283a:	b29b      	uxth	r3, r3
 800283c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 82ae 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002852:	441a      	add	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002860:	441a      	add	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	429a      	cmp	r2, r3
 8002870:	d30b      	bcc.n	800288a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	e017      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002892:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028a2:	e00a      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d165      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0x382>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	4413      	add	r3, r2
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002910:	b29a      	uxth	r2, r3
 8002912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	e057      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800291c:	2b3e      	cmp	r3, #62	; 0x3e
 800291e:	d818      	bhi.n	8002952 <HAL_PCD_EP_DB_Transmit+0x346>
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
 8002928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_PCD_EP_DB_Transmit+0x32e>
 8002934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002936:	3301      	adds	r3, #1
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29a      	uxth	r2, r3
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	b29b      	uxth	r3, r3
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	b29b      	uxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b29a      	uxth	r2, r3
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	e03a      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
 800295a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2b00      	cmp	r3, #0
 8002964:	d102      	bne.n	800296c <HAL_PCD_EP_DB_Transmit+0x360>
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002968:	3b01      	subs	r3, #1
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29a      	uxth	r2, r3
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002974:	b29b      	uxth	r3, r3
 8002976:	029b      	lsls	r3, r3, #10
 8002978:	b29b      	uxth	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29a      	uxth	r2, r3
 8002988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e01c      	b.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d118      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	4413      	add	r3, r2
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029bc:	643b      	str	r3, [r7, #64]	; 0x40
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	6959      	ldr	r1, [r3, #20]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	891a      	ldrh	r2, [r3, #8]
 80029d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f004 f8f4 	bl	8006bc6 <USB_WritePMA>
 80029de:	e1e2      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	3306      	adds	r3, #6
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a08:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d307      	bcc.n	8002a28 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	e002      	b.n	8002a2e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80c0 	bne.w	8002bb8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d126      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x482>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a54:	4413      	add	r3, r2
 8002a56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	011a      	lsls	r2, r3, #4
 8002a5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e01a      	b.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d116      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aaa:	4413      	add	r3, r2
 8002aac:	667b      	str	r3, [r7, #100]	; 0x64
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	011a      	lsls	r2, r3, #4
 8002ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002abc:	663b      	str	r3, [r7, #96]	; 0x60
 8002abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	677b      	str	r3, [r7, #116]	; 0x74
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12b      	bne.n	8002b2a <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae6:	4413      	add	r3, r2
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	011a      	lsls	r2, r3, #4
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	e017      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	785b      	ldrb	r3, [r3, #1]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d113      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b40:	4413      	add	r3, r2
 8002b42:	677b      	str	r3, [r7, #116]	; 0x74
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	011a      	lsls	r2, r3, #4
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b52:	673b      	str	r3, [r7, #112]	; 0x70
 8002b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f005 feae 	bl	80088c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 811a 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	441a      	add	r2, r3
 8002b9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]
 8002bb6:	e0f6      	b.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 80ca 	bne.w	8002da6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002c28:	441a      	add	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d30b      	bcc.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a1a      	ldr	r2, [r3, #32]
 8002c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	621a      	str	r2, [r3, #32]
 8002c50:	e017      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002c5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c6a:	e00a      	b.n	8002c82 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	657b      	str	r3, [r7, #84]	; 0x54
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d165      	bne.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x750>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	4413      	add	r3, r2
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x6da>
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e054      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cea:	2b3e      	cmp	r3, #62	; 0x3e
 8002cec:	d818      	bhi.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x714>
 8002cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d04:	3301      	adds	r3, #1
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	029b      	lsls	r3, r3, #10
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	801a      	strh	r2, [r3, #0]
 8002d1e:	e037      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x72e>
 8002d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d36:	3b01      	subs	r3, #1
 8002d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	029b      	lsls	r3, r3, #10
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	e019      	b.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d115      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x784>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d72:	4413      	add	r3, r2
 8002d74:	657b      	str	r3, [r7, #84]	; 0x54
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	011a      	lsls	r2, r3, #4
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	4413      	add	r3, r2
 8002d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6959      	ldr	r1, [r3, #20]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	895a      	ldrh	r2, [r3, #10]
 8002d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f003 ff10 	bl	8006bc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc0:	82bb      	strh	r3, [r7, #20]
 8002dc2:	8abb      	ldrh	r3, [r7, #20]
 8002dc4:	f083 0310 	eor.w	r3, r3, #16
 8002dc8:	82bb      	strh	r3, [r7, #20]
 8002dca:	8abb      	ldrh	r3, [r7, #20]
 8002dcc:	f083 0320 	eor.w	r3, r3, #32
 8002dd0:	82bb      	strh	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	8abb      	ldrh	r3, [r7, #20]
 8002de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3790      	adds	r7, #144	; 0x90
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	f003 0207 	and.w	r2, r3, #7
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e009      	b.n	8002e4a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e36:	897a      	ldrh	r2, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	80da      	strh	r2, [r3, #6]
 8002e5e:	e00b      	b.n	8002e78 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2201      	movs	r2, #1
 8002e64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f001 b823 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 817d 	beq.w	80031be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ec4:	4bbc      	ldr	r3, [pc, #752]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d00c      	beq.n	8002eea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed0:	4bb9      	ldr	r3, [pc, #740]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d15c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x10e>
 8002edc:	4bb6      	ldr	r3, [pc, #728]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d155      	bne.n	8002f96 <HAL_RCC_OscConfig+0x10e>
 8002eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002efe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_RCC_OscConfig+0x94>
 8002f16:	4ba8      	ldr	r3, [pc, #672]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0xc0>
 8002f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f44:	4b9c      	ldr	r3, [pc, #624]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f54:	fa92 f2a2 	rbit	r2, r2
 8002f58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f042 0220 	orr.w	r2, r2, #32
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f002 021f 	and.w	r2, r2, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f202 	lsl.w	r2, r1, r2
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 811f 	beq.w	80031bc <HAL_RCC_OscConfig+0x334>
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8116 	bne.w	80031bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	f000 bfaf 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
 8002fa8:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a82      	ldr	r2, [pc, #520]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e036      	b.n	8003024 <HAL_RCC_OscConfig+0x19c>
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x158>
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7b      	ldr	r2, [pc, #492]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b79      	ldr	r3, [pc, #484]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a78      	ldr	r2, [pc, #480]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e021      	b.n	8003024 <HAL_RCC_OscConfig+0x19c>
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x184>
 8002ff2:	4b71      	ldr	r3, [pc, #452]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a70      	ldr	r2, [pc, #448]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8002ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a6d      	ldr	r2, [pc, #436]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_OscConfig+0x19c>
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a69      	ldr	r2, [pc, #420]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8003012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a66      	ldr	r2, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800301e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003022:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f023 020f 	bic.w	r2, r3, #15
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	495f      	ldr	r1, [pc, #380]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800303a:	4313      	orrs	r3, r2
 800303c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d059      	beq.n	8003102 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd fc19 	bl	8000884 <HAL_GetTick>
 8003052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fd fc14 	bl	8000884 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b64      	cmp	r3, #100	; 0x64
 8003066:	d902      	bls.n	800306e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f000 bf43 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 800306e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003072:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003082:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_RCC_OscConfig+0x218>
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e015      	b.n	80030cc <HAL_RCC_OscConfig+0x244>
 80030a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80030d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80030d8:	fa92 f2a2 	rbit	r2, r2
 80030dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80030e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f042 0220 	orr.w	r2, r2, #32
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f002 021f 	and.w	r2, r2, #31
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ab      	beq.n	8003058 <HAL_RCC_OscConfig+0x1d0>
 8003100:	e05d      	b.n	80031be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fd fbbf 	bl	8000884 <HAL_GetTick>
 8003106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fd fbba 	bl	8000884 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d902      	bls.n	8003122 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	f000 bee9 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003136:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x2cc>
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e015      	b.n	8003180 <HAL_RCC_OscConfig+0x2f8>
 8003154:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003158:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003170:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_RCC_OscConfig+0x330>)
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003184:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003188:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003194:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ab      	bne.n	800310c <HAL_RCC_OscConfig+0x284>
 80031b4:	e003      	b.n	80031be <HAL_RCC_OscConfig+0x336>
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 817d 	beq.w	80034ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031d4:	4ba6      	ldr	r3, [pc, #664]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031e0:	4ba3      	ldr	r3, [pc, #652]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d172      	bne.n	80032d2 <HAL_RCC_OscConfig+0x44a>
 80031ec:	4ba0      	ldr	r3, [pc, #640]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d16c      	bne.n	80032d2 <HAL_RCC_OscConfig+0x44a>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800320a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_RCC_OscConfig+0x3a0>
 8003222:	4b93      	ldr	r3, [pc, #588]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	e013      	b.n	8003250 <HAL_RCC_OscConfig+0x3c8>
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800323a:	2302      	movs	r3, #2
 800323c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003240:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800324c:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2202      	movs	r2, #2
 8003252:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003256:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800325a:	fa92 f2a2 	rbit	r2, r2
 800325e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003262:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003266:	fab2 f282 	clz	r2, r2
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f042 0220 	orr.w	r2, r2, #32
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	f002 021f 	and.w	r2, r2, #31
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f202 	lsl.w	r2, r1, r2
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCC_OscConfig+0x410>
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d002      	beq.n	8003298 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f000 be2e 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b75      	ldr	r3, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	21f8      	movs	r1, #248	; 0xf8
 80032ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032b6:	fa91 f1a1 	rbit	r1, r1
 80032ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032c2:	fab1 f181 	clz	r1, r1
 80032c6:	b2c9      	uxtb	r1, r1
 80032c8:	408b      	lsls	r3, r1
 80032ca:	4969      	ldr	r1, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d0:	e0fd      	b.n	80034ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8088 	beq.w	80033f4 <HAL_RCC_OscConfig+0x56c>
 80032e4:	2301      	movs	r3, #1
 80032e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80032f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	461a      	mov	r2, r3
 800330c:	2301      	movs	r3, #1
 800330e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fd fab8 	bl	8000884 <HAL_GetTick>
 8003314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331a:	f7fd fab3 	bl	8000884 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	f000 bde2 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003330:	2302      	movs	r3, #2
 8003332:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003342:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_RCC_OscConfig+0x4d8>
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e013      	b.n	8003388 <HAL_RCC_OscConfig+0x500>
 8003360:	2302      	movs	r3, #2
 8003362:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003372:	2302      	movs	r3, #2
 8003374:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003378:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2202      	movs	r2, #2
 800338a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800338e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003392:	fa92 f2a2 	rbit	r2, r2
 8003396:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800339a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800339e:	fab2 f282 	clz	r2, r2
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f042 0220 	orr.w	r2, r2, #32
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f002 021f 	and.w	r2, r2, #31
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0af      	beq.n	800331a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	21f8      	movs	r1, #248	; 0xf8
 80033d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80033d8:	fa91 f1a1 	rbit	r1, r1
 80033dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80033e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80033e4:	fab1 f181 	clz	r1, r1
 80033e8:	b2c9      	uxtb	r1, r1
 80033ea:	408b      	lsls	r3, r1
 80033ec:	4920      	ldr	r1, [pc, #128]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
 80033f2:	e06c      	b.n	80034ce <HAL_RCC_OscConfig+0x646>
 80033f4:	2301      	movs	r3, #1
 80033f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003406:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	461a      	mov	r2, r3
 800341c:	2300      	movs	r3, #0
 800341e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fa30 	bl	8000884 <HAL_GetTick>
 8003424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800342a:	f7fd fa2b 	bl	8000884 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d902      	bls.n	8003440 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	f000 bd5a 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003440:	2302      	movs	r3, #2
 8003442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d104      	bne.n	8003474 <HAL_RCC_OscConfig+0x5ec>
 800346a:	4b01      	ldr	r3, [pc, #4]	; (8003470 <HAL_RCC_OscConfig+0x5e8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	e015      	b.n	800349c <HAL_RCC_OscConfig+0x614>
 8003470:	40021000 	.word	0x40021000
 8003474:	2302      	movs	r3, #2
 8003476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003486:	2302      	movs	r3, #2
 8003488:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800348c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003498:	4bc8      	ldr	r3, [pc, #800]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2202      	movs	r2, #2
 800349e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80034a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034a6:	fa92 f2a2 	rbit	r2, r2
 80034aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80034ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034b2:	fab2 f282 	clz	r2, r2
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f042 0220 	orr.w	r2, r2, #32
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	f002 021f 	and.w	r2, r2, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ad      	bne.n	800342a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8110 	beq.w	8003704 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d079      	beq.n	80035e8 <HAL_RCC_OscConfig+0x760>
 80034f4:	2301      	movs	r3, #1
 80034f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4bab      	ldr	r3, [pc, #684]	; (80037c0 <HAL_RCC_OscConfig+0x938>)
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fd f9b1 	bl	8000884 <HAL_GetTick>
 8003522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fd f9ac 	bl	8000884 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d902      	bls.n	800353e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	f000 bcdb 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 800353e:	2302      	movs	r3, #2
 8003540:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003554:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	fa93 f2a3 	rbit	r2, r3
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800357c:	2202      	movs	r2, #2
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003596:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003598:	4b88      	ldr	r3, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 800359a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035a4:	2102      	movs	r1, #2
 80035a6:	6019      	str	r1, [r3, #0]
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f1a3 	rbit	r1, r3
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035be:	6019      	str	r1, [r3, #0]
  return result;
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0a0      	beq.n	8003528 <HAL_RCC_OscConfig+0x6a0>
 80035e6:	e08d      	b.n	8003704 <HAL_RCC_OscConfig+0x87c>
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	fa93 f2a3 	rbit	r2, r3
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800360a:	601a      	str	r2, [r3, #0]
  return result;
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003614:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	4b68      	ldr	r3, [pc, #416]	; (80037c0 <HAL_RCC_OscConfig+0x938>)
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	461a      	mov	r2, r3
 8003626:	2300      	movs	r3, #0
 8003628:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fd f92b 	bl	8000884 <HAL_GetTick>
 800362e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003634:	f7fd f926 	bl	8000884 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d902      	bls.n	800364a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f000 bc55 	b.w	8003ef4 <HAL_RCC_OscConfig+0x106c>
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003652:	2202      	movs	r2, #2
 8003654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800369a:	2202      	movs	r2, #2
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036c2:	2102      	movs	r1, #2
 80036c4:	6019      	str	r1, [r3, #0]
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f1a3 	rbit	r1, r3
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036dc:	6019      	str	r1, [r3, #0]
  return result;
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d197      	bne.n	8003634 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 81a1 	beq.w	8003a5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003736:	61d3      	str	r3, [r2, #28]
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003752:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_OscConfig+0x93c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <HAL_RCC_OscConfig+0x93c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_RCC_OscConfig+0x93c>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fd f887 	bl	8000884 <HAL_GetTick>
 8003776:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd f882 	bl	8000884 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b64      	cmp	r3, #100	; 0x64
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e3b1      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_RCC_OscConfig+0x93c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0ef      	beq.n	800377c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10d      	bne.n	80037c8 <HAL_RCC_OscConfig+0x940>
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_RCC_OscConfig+0x934>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6213      	str	r3, [r2, #32]
 80037b8:	e03c      	b.n	8003834 <HAL_RCC_OscConfig+0x9ac>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	10908120 	.word	0x10908120
 80037c4:	40007000 	.word	0x40007000
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x96a>
 80037d8:	4bc1      	ldr	r3, [pc, #772]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4ac0      	ldr	r2, [pc, #768]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6213      	str	r3, [r2, #32]
 80037e4:	4bbe      	ldr	r3, [pc, #760]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4abd      	ldr	r2, [pc, #756]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6213      	str	r3, [r2, #32]
 80037f0:	e020      	b.n	8003834 <HAL_RCC_OscConfig+0x9ac>
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x994>
 8003802:	4bb7      	ldr	r3, [pc, #732]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4ab6      	ldr	r2, [pc, #728]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	4bb4      	ldr	r3, [pc, #720]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4ab3      	ldr	r2, [pc, #716]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x9ac>
 800381c:	4bb0      	ldr	r3, [pc, #704]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4aaf      	ldr	r2, [pc, #700]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	4bad      	ldr	r3, [pc, #692]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4aac      	ldr	r2, [pc, #688]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8081 	beq.w	8003948 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fd f81d 	bl	8000884 <HAL_GetTick>
 800384a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd f818 	bl	8000884 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e345      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003870:	2202      	movs	r2, #2
 8003872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038ae:	601a      	str	r2, [r3, #0]
  return result;
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_OscConfig+0xa4c>
 80038ce:	4b84      	ldr	r3, [pc, #528]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	e013      	b.n	80038fc <HAL_RCC_OscConfig+0xa74>
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80038dc:	2202      	movs	r2, #2
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	4b79      	ldr	r3, [pc, #484]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003900:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003904:	2102      	movs	r1, #2
 8003906:	6011      	str	r1, [r2, #0]
 8003908:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	fa92 f1a2 	rbit	r1, r2
 8003916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800391e:	6011      	str	r1, [r2, #0]
  return result;
 8003920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003924:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	fab2 f282 	clz	r2, r2
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f002 021f 	and.w	r2, r2, #31
 800393a:	2101      	movs	r1, #1
 800393c:	fa01 f202 	lsl.w	r2, r1, r2
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d084      	beq.n	8003850 <HAL_RCC_OscConfig+0x9c8>
 8003946:	e07f      	b.n	8003a48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7fc ff9c 	bl	8000884 <HAL_GetTick>
 800394c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	e00b      	b.n	800396a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fc ff97 	bl	8000884 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e2c4      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	fa93 f2a3 	rbit	r2, r3
 8003984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003988:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003996:	2202      	movs	r2, #2
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	fa93 f2a3 	rbit	r2, r3
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039b0:	601a      	str	r2, [r3, #0]
  return result;
 80039b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f043 0302 	orr.w	r3, r3, #2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d102      	bne.n	80039d6 <HAL_RCC_OscConfig+0xb4e>
 80039d0:	4b43      	ldr	r3, [pc, #268]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	e013      	b.n	80039fe <HAL_RCC_OscConfig+0xb76>
 80039d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80039de:	2202      	movs	r2, #2
 80039e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a06:	2102      	movs	r1, #2
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	fa92 f1a2 	rbit	r1, r2
 8003a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a20:	6011      	str	r1, [r2, #0]
  return result;
 8003a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	fab2 f282 	clz	r2, r2
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	f002 021f 	and.w	r2, r2, #31
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d184      	bne.n	8003952 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8242 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HAL_RCC_OscConfig+0xc58>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	f000 8213 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	f040 8162 	bne.w	8003d52 <HAL_RCC_OscConfig+0xeca>
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ab2:	601a      	str	r2, [r3, #0]
  return result;
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003abc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fc fed6 	bl	8000884 <HAL_GetTick>
 8003ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003adc:	e00c      	b.n	8003af8 <HAL_RCC_OscConfig+0xc70>
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fc fece 	bl	8000884 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1fd      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b1c:	601a      	str	r2, [r3, #0]
  return result;
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b28:	fab3 f383 	clz	r3, r3
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_OscConfig+0xcba>
 8003b3c:	4bb0      	ldr	r3, [pc, #704]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	e027      	b.n	8003b92 <HAL_RCC_OscConfig+0xd0a>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	fa93 f2a3 	rbit	r2, r3
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	4b9c      	ldr	r3, [pc, #624]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003b9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ba4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	fa92 f1a2 	rbit	r1, r2
 8003bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bb6:	6011      	str	r1, [r2, #0]
  return result;
 8003bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bbc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	fab2 f282 	clz	r2, r2
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f042 0220 	orr.w	r2, r2, #32
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f002 021f 	and.w	r2, r2, #31
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d182      	bne.n	8003ae4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bde:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	497f      	ldr	r1, [pc, #508]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c2a:	601a      	str	r2, [r3, #0]
  return result;
 8003c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	461a      	mov	r2, r3
 8003c48:	2301      	movs	r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fc fe1a 	bl	8000884 <HAL_GetTick>
 8003c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c54:	e009      	b.n	8003c6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c56:	f7fc fe15 	bl	8000884 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e144      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003c8e:	601a      	str	r2, [r3, #0]
  return result;
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xe2c>
 8003cae:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e027      	b.n	8003d04 <HAL_RCC_OscConfig+0xe7c>
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	fa93 f2a3 	rbit	r2, r3
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d10:	6011      	str	r1, [r2, #0]
 8003d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	fa92 f1a2 	rbit	r1, r2
 8003d20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d28:	6011      	str	r1, [r2, #0]
  return result;
 8003d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	fab2 f282 	clz	r2, r2
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f042 0220 	orr.w	r2, r2, #32
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f002 021f 	and.w	r2, r2, #31
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d082      	beq.n	8003c56 <HAL_RCC_OscConfig+0xdce>
 8003d50:	e0cf      	b.n	8003ef2 <HAL_RCC_OscConfig+0x106a>
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	fa93 f2a3 	rbit	r2, r3
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d76:	601a      	str	r2, [r3, #0]
  return result;
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	461a      	mov	r2, r3
 8003d94:	2300      	movs	r3, #0
 8003d96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fc fd74 	bl	8000884 <HAL_GetTick>
 8003d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da0:	e009      	b.n	8003db6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fc fd6f 	bl	8000884 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e09e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f2a3 	rbit	r2, r3
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003dda:	601a      	str	r2, [r3, #0]
  return result;
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003de4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d104      	bne.n	8003e04 <HAL_RCC_OscConfig+0xf7c>
 8003dfa:	4b01      	ldr	r3, [pc, #4]	; (8003e00 <HAL_RCC_OscConfig+0xf78>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	e029      	b.n	8003e54 <HAL_RCC_OscConfig+0xfcc>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e16:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	fa93 f2a3 	rbit	r2, r3
 8003e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	fa93 f2a3 	rbit	r2, r3
 8003e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x1078>)
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e58:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e66:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fa92 f1a2 	rbit	r1, r2
 8003e70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e78:	6011      	str	r1, [r2, #0]
  return result;
 8003e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e7e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	fab2 f282 	clz	r2, r2
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	f042 0220 	orr.w	r2, r2, #32
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f002 021f 	and.w	r2, r2, #31
 8003e94:	2101      	movs	r1, #1
 8003e96:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d180      	bne.n	8003da2 <HAL_RCC_OscConfig+0xf1a>
 8003ea0:	e027      	b.n	8003ef2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e01e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_OscConfig+0x1078>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ebe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ec2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d10b      	bne.n	8003eee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ed6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b09e      	sub	sp, #120	; 0x78
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e162      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b90      	ldr	r3, [pc, #576]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d910      	bls.n	8003f4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	498b      	ldr	r1, [pc, #556]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b89      	ldr	r3, [pc, #548]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e14a      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f58:	4b82      	ldr	r3, [pc, #520]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	497f      	ldr	r1, [pc, #508]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80dc 	beq.w	8004130 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d13c      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xf6>
 8003f80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f90:	fab3 f383 	clz	r3, r3
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <HAL_RCC_ClockConfig+0xa6>
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	e00f      	b.n	8003fca <HAL_RCC_ClockConfig+0xc6>
 8003faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc6:	4b67      	ldr	r3, [pc, #412]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fce:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fd2:	fa92 f2a2 	rbit	r2, r2
 8003fd6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003fd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fda:	fab2 f282 	clz	r2, r2
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f042 0220 	orr.w	r2, r2, #32
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f002 021f 	and.w	r2, r2, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d17b      	bne.n	80040ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0f3      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d13c      	bne.n	800407c <HAL_RCC_ClockConfig+0x178>
 8004002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004006:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d102      	bne.n	800402c <HAL_RCC_ClockConfig+0x128>
 8004026:	4b4f      	ldr	r3, [pc, #316]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	e00f      	b.n	800404c <HAL_RCC_ClockConfig+0x148>
 800402c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	647b      	str	r3, [r7, #68]	; 0x44
 800403a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403e:	643b      	str	r3, [r7, #64]	; 0x40
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004050:	63ba      	str	r2, [r7, #56]	; 0x38
 8004052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800405a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d13a      	bne.n	80040ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b2      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
 800407c:	2302      	movs	r3, #2
 800407e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d102      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x1a0>
 800409e:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	e00d      	b.n	80040c0 <HAL_RCC_ClockConfig+0x1bc>
 80040a4:	2302      	movs	r3, #2
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
 80040b0:	2302      	movs	r3, #2
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2202      	movs	r2, #2
 80040c2:	61ba      	str	r2, [r7, #24]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	617a      	str	r2, [r7, #20]
  return result;
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f042 0220 	orr.w	r2, r2, #32
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f002 021f 	and.w	r2, r2, #31
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e079      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	491a      	ldr	r1, [pc, #104]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fc fbc0 	bl	8000884 <HAL_GetTick>
 8004104:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fc fbbc 	bl	8000884 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e061      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_RCC_ClockConfig+0x260>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d214      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0207 	bic.w	r2, r3, #7
 8004146:	4906      	ldr	r1, [pc, #24]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <HAL_RCC_ClockConfig+0x25c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e040      	b.n	80041e2 <HAL_RCC_ClockConfig+0x2de>
 8004160:	40022000 	.word	0x40022000
 8004164:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b1d      	ldr	r3, [pc, #116]	; (80041ec <HAL_RCC_ClockConfig+0x2e8>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	491a      	ldr	r1, [pc, #104]	; (80041ec <HAL_RCC_ClockConfig+0x2e8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_RCC_ClockConfig+0x2e8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4912      	ldr	r1, [pc, #72]	; (80041ec <HAL_RCC_ClockConfig+0x2e8>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041a6:	f000 f829 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041aa:	4601      	mov	r1, r0
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <HAL_RCC_ClockConfig+0x2e8>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	22f0      	movs	r2, #240	; 0xf0
 80041b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	fa92 f2a2 	rbit	r2, r2
 80041be:	60fa      	str	r2, [r7, #12]
  return result;
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	fab2 f282 	clz	r2, r2
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	40d3      	lsrs	r3, r2
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x2ec>)
 80041cc:	5cd3      	ldrb	r3, [r2, r3]
 80041ce:	fa21 f303 	lsr.w	r3, r1, r3
 80041d2:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <HAL_RCC_ClockConfig+0x2f0>)
 80041d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_ClockConfig+0x2f4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fb0e 	bl	80007fc <HAL_InitTick>
  
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3778      	adds	r7, #120	; 0x78
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800976c 	.word	0x0800976c
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004216:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x30>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x36>
 800422a:	e026      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	e026      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	4a14      	ldr	r2, [pc, #80]	; (800429c <HAL_RCC_GetSysClockFreq+0xa0>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e004      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	613b      	str	r3, [r7, #16]
      break;
 8004278:	e002      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800427c:	613b      	str	r3, [r7, #16]
      break;
 800427e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004280:	693b      	ldr	r3, [r7, #16]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	0800977c 	.word	0x0800977c
 800429c:	0800978c 	.word	0x0800978c
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b092      	sub	sp, #72	; 0x48
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80d4 	beq.w	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c8:	4b4e      	ldr	r3, [pc, #312]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10e      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d4:	4b4b      	ldr	r3, [pc, #300]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	61d3      	str	r3, [r2, #28]
 80042e0:	4b48      	ldr	r3, [pc, #288]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	60bb      	str	r3, [r7, #8]
 80042ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f2:	4b45      	ldr	r3, [pc, #276]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fe:	4b42      	ldr	r3, [pc, #264]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a41      	ldr	r2, [pc, #260]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7fc fabb 	bl	8000884 <HAL_GetTick>
 800430e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7fc fab7 	bl	8000884 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e169      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	4b38      	ldr	r3, [pc, #224]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004330:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8084 	beq.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800434c:	429a      	cmp	r2, r3
 800434e:	d07c      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	461a      	mov	r2, r3
 800437a:	2301      	movs	r3, #1
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043a2:	4a18      	ldr	r2, [pc, #96]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04b      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fc fa67 	bl	8000884 <HAL_GetTick>
 80043b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fc fa63 	bl	8000884 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e113      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80043d0:	2302      	movs	r3, #2
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	2302      	movs	r3, #2
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	61fb      	str	r3, [r7, #28]
  return result;
 80043e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d108      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80043fe:	4b01      	ldr	r3, [pc, #4]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	e00d      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004404:	40021000 	.word	0x40021000
 8004408:	40007000 	.word	0x40007000
 800440c:	10908100 	.word	0x10908100
 8004410:	2302      	movs	r3, #2
 8004412:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	4b78      	ldr	r3, [pc, #480]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2202      	movs	r2, #2
 8004422:	613a      	str	r2, [r7, #16]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	fa92 f2a2 	rbit	r2, r2
 800442a:	60fa      	str	r2, [r7, #12]
  return result;
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	fab2 f282 	clz	r2, r2
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f002 021f 	and.w	r2, r2, #31
 800443e:	2101      	movs	r1, #1
 8004440:	fa01 f202 	lsl.w	r2, r1, r2
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0b7      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	496a      	ldr	r1, [pc, #424]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800445c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004460:	2b01      	cmp	r3, #1
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800447c:	4b60      	ldr	r3, [pc, #384]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f023 0203 	bic.w	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	495d      	ldr	r1, [pc, #372]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800449a:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	4956      	ldr	r1, [pc, #344]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b8:	4b51      	ldr	r3, [pc, #324]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	494e      	ldr	r1, [pc, #312]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	f023 0210 	bic.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4947      	ldr	r1, [pc, #284]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	493f      	ldr	r1, [pc, #252]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	f023 0220 	bic.w	r2, r3, #32
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4938      	ldr	r1, [pc, #224]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	4930      	ldr	r1, [pc, #192]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	4929      	ldr	r1, [pc, #164]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4921      	ldr	r1, [pc, #132]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	491a      	ldr	r1, [pc, #104]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	4912      	ldr	r1, [pc, #72]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	490b      	ldr	r1, [pc, #44]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3748      	adds	r7, #72	; 0x48
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000

08004604 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004614:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004618:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800463a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800463e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	b29b      	uxth	r3, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	4013      	ands	r3, r2
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b09d      	sub	sp, #116	; 0x74
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	78db      	ldrb	r3, [r3, #3]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d81f      	bhi.n	8004716 <USB_ActivateEndpoint+0x72>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <USB_ActivateEndpoint+0x38>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	08004709 	.word	0x08004709
 80046e4:	0800471f 	.word	0x0800471f
 80046e8:	080046fb 	.word	0x080046fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046f8:	e012      	b.n	8004720 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004702:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004706:	e00b      	b.n	8004720 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004708:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800470c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004710:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004714:	e004      	b.n	8004720 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800471c:	e000      	b.n	8004720 <USB_ActivateEndpoint+0x7c>
      break;
 800471e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	b21b      	sxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	b21a      	sxth	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	b21b      	sxth	r3, r3
 8004762:	4313      	orrs	r3, r2
 8004764:	b21b      	sxth	r3, r3
 8004766:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	7b1b      	ldrb	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f040 8178 	bne.w	8004a86 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8084 	beq.w	80048a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	88db      	ldrh	r3, [r3, #6]
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	827b      	strh	r3, [r7, #18]
 80047e2:	8a7b      	ldrh	r3, [r7, #18]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <USB_ActivateEndpoint+0x180>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	823b      	strh	r3, [r7, #16]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8a3b      	ldrh	r3, [r7, #16]
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	78db      	ldrb	r3, [r3, #3]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d020      	beq.n	800486e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	81bb      	strh	r3, [r7, #12]
 8004844:	89bb      	ldrh	r3, [r7, #12]
 8004846:	f083 0320 	eor.w	r3, r3, #32
 800484a:	81bb      	strh	r3, [r7, #12]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	89bb      	ldrh	r3, [r7, #12]
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]
 800486c:	e2d5      	b.n	8004e1a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
 80048a6:	e2b8      	b.n	8004e1a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	4413      	add	r3, r2
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	011a      	lsls	r2, r3, #4
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	88db      	ldrh	r3, [r3, #6]
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	4413      	add	r3, r2
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	011a      	lsls	r2, r3, #4
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	4413      	add	r3, r2
 80048fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490a:	b29a      	uxth	r2, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <USB_ActivateEndpoint+0x28a>
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004926:	b29a      	uxth	r2, r3
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e039      	b.n	80049a2 <USB_ActivateEndpoint+0x2fe>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b3e      	cmp	r3, #62	; 0x3e
 8004934:	d818      	bhi.n	8004968 <USB_ActivateEndpoint+0x2c4>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	66bb      	str	r3, [r7, #104]	; 0x68
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <USB_ActivateEndpoint+0x2ac>
 800494a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800494c:	3301      	adds	r3, #1
 800494e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29a      	uxth	r2, r3
 8004956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004958:	b29b      	uxth	r3, r3
 800495a:	029b      	lsls	r3, r3, #10
 800495c:	b29b      	uxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b29a      	uxth	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e01c      	b.n	80049a2 <USB_ActivateEndpoint+0x2fe>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <USB_ActivateEndpoint+0x2de>
 800497c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800497e:	3b01      	subs	r3, #1
 8004980:	66bb      	str	r3, [r7, #104]	; 0x68
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29a      	uxth	r2, r3
 8004988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800498a:	b29b      	uxth	r3, r3
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	b29b      	uxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80049b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <USB_ActivateEndpoint+0x34e>
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	843b      	strh	r3, [r7, #32]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8c3b      	ldrh	r3, [r7, #32]
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d124      	bne.n	8004a44 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a10:	83bb      	strh	r3, [r7, #28]
 8004a12:	8bbb      	ldrh	r3, [r7, #28]
 8004a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a18:	83bb      	strh	r3, [r7, #28]
 8004a1a:	8bbb      	ldrh	r3, [r7, #28]
 8004a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a20:	83bb      	strh	r3, [r7, #28]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	8bbb      	ldrh	r3, [r7, #28]
 8004a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8013      	strh	r3, [r2, #0]
 8004a42:	e1ea      	b.n	8004e1a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	83fb      	strh	r3, [r7, #30]
 8004a5c:	8bfb      	ldrh	r3, [r7, #30]
 8004a5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a62:	83fb      	strh	r3, [r7, #30]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	8bfb      	ldrh	r3, [r7, #30]
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
 8004a84:	e1c9      	b.n	8004e1a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	78db      	ldrb	r3, [r3, #3]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d11e      	bne.n	8004acc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8013      	strh	r3, [r2, #0]
 8004aca:	e01d      	b.n	8004b08 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	4413      	add	r3, r2
 8004b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	011a      	lsls	r2, r3, #4
 8004b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	891b      	ldrh	r3, [r3, #8]
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4c:	4413      	add	r3, r2
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	011a      	lsls	r2, r3, #4
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8093 	bne.w	8004ca0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <USB_ActivateEndpoint+0x52a>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01b      	beq.n	8004c1e <USB_ActivateEndpoint+0x57a>
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c3c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c44:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	441a      	add	r2, r3
 8004c88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	8013      	strh	r3, [r2, #0]
 8004c9e:	e0bc      	b.n	8004e1a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004cb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01d      	beq.n	8004cf8 <USB_ActivateEndpoint+0x654>
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01d      	beq.n	8004d50 <USB_ActivateEndpoint+0x6ac>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	78db      	ldrb	r3, [r3, #3]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d024      	beq.n	8004da2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d76:	f083 0320 	eor.w	r3, r3, #32
 8004d7a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]
 8004da0:	e01d      	b.n	8004dde <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3774      	adds	r7, #116	; 0x74
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop

08004e2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b08d      	sub	sp, #52	; 0x34
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	7b1b      	ldrb	r3, [r3, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f040 808e 	bne.w	8004f5c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d044      	beq.n	8004ed2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	81bb      	strh	r3, [r7, #12]
 8004e56:	89bb      	ldrh	r3, [r7, #12]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <USB_DeactivateEndpoint+0x6c>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	817b      	strh	r3, [r7, #10]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	897b      	ldrh	r3, [r7, #10]
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eae:	813b      	strh	r3, [r7, #8]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	8013      	strh	r3, [r2, #0]
 8004ed0:	e192      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	827b      	strh	r3, [r7, #18]
 8004ee0:	8a7b      	ldrh	r3, [r7, #18]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01b      	beq.n	8004f22 <USB_DeactivateEndpoint+0xf6>
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f00:	823b      	strh	r3, [r7, #16]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	8a3b      	ldrh	r3, [r7, #16]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	81fb      	strh	r3, [r7, #14]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	89fb      	ldrh	r3, [r7, #14]
 8004f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	8013      	strh	r3, [r2, #0]
 8004f5a:	e14d      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 80a5 	bne.w	80050b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	843b      	strh	r3, [r7, #32]
 8004f74:	8c3b      	ldrh	r3, [r7, #32]
 8004f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <USB_DeactivateEndpoint+0x18a>
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	83fb      	strh	r3, [r7, #30]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	441a      	add	r2, r3
 8004fa0:	8bfb      	ldrh	r3, [r7, #30]
 8004fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004faa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	83bb      	strh	r3, [r7, #28]
 8004fc4:	8bbb      	ldrh	r3, [r7, #28]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01b      	beq.n	8005006 <USB_DeactivateEndpoint+0x1da>
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	837b      	strh	r3, [r7, #26]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8b7b      	ldrh	r3, [r7, #26]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	833b      	strh	r3, [r7, #24]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8b3b      	ldrh	r3, [r7, #24]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005054:	82fb      	strh	r3, [r7, #22]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8afb      	ldrh	r3, [r7, #22]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	82bb      	strh	r3, [r7, #20]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	8abb      	ldrh	r3, [r7, #20]
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
 80050ae:	e0a3      	b.n	80051f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <USB_DeactivateEndpoint+0x2d4>
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800510e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <USB_DeactivateEndpoint+0x324>
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005148:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3734      	adds	r7, #52	; 0x34
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b0c2      	sub	sp, #264	; 0x108
 800520a:	af00      	add	r7, sp, #0
 800520c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005214:	6018      	str	r0, [r3, #0]
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 86b7 	bne.w	8005fa0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	429a      	cmp	r2, r3
 800524c:	d908      	bls.n	8005260 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800524e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800525e:	e007      	b.n	8005270 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	7b1b      	ldrb	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d13a      	bne.n	80052f6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6959      	ldr	r1, [r3, #20]
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	88da      	ldrh	r2, [r3, #6]
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	b29b      	uxth	r3, r3
 800529e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052a6:	6800      	ldr	r0, [r0, #0]
 80052a8:	f001 fc8d 	bl	8006bc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	011a      	lsls	r2, r3, #4
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	f000 be1f 	b.w	8005f34 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	2b02      	cmp	r3, #2
 8005304:	f040 8462 	bne.w	8005bcc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	429a      	cmp	r2, r3
 8005322:	f240 83df 	bls.w	8005ae4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005376:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800537a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005392:	1ad2      	subs	r2, r2, r3
 8005394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 81c7 	beq.w	8005756 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
 80053d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d177      	bne.n	80054d4 <USB_EPStartXfer+0x2ce>
 80053e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053fe:	b29b      	uxth	r3, r3
 8005400:	461a      	mov	r2, r3
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	4413      	add	r3, r2
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
 8005408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	4413      	add	r3, r2
 800541a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800542a:	b29a      	uxth	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	801a      	strh	r2, [r3, #0]
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <USB_EPStartXfer+0x248>
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29a      	uxth	r2, r3
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e067      	b.n	800551e <USB_EPStartXfer+0x318>
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	2b3e      	cmp	r3, #62	; 0x3e
 8005454:	d81c      	bhi.n	8005490 <USB_EPStartXfer+0x28a>
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <USB_EPStartXfer+0x270>
 800546c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
 800547c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29b      	uxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e046      	b.n	800551e <USB_EPStartXfer+0x318>
 8005490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d104      	bne.n	80054b0 <USB_EPStartXfer+0x2aa>
 80054a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054aa:	3b01      	subs	r3, #1
 80054ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	029b      	lsls	r3, r3, #10
 80054be:	b29b      	uxth	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e024      	b.n	800551e <USB_EPStartXfer+0x318>
 80054d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d11c      	bne.n	800551e <USB_EPStartXfer+0x318>
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	4413      	add	r3, r2
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30
 80054fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	011a      	lsls	r2, r3, #4
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	4413      	add	r3, r2
 800550e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005518:	b29a      	uxth	r2, r3
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800551e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	895b      	ldrh	r3, [r3, #10]
 800552a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800552e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6959      	ldr	r1, [r3, #20]
 800553a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800553e:	b29b      	uxth	r3, r3
 8005540:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005544:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005548:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800554c:	6800      	ldr	r0, [r0, #0]
 800554e:	f001 fb3a 	bl	8006bc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695a      	ldr	r2, [r3, #20]
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005562:	441a      	add	r2, r3
 8005564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	429a      	cmp	r2, r3
 800558a:	d90f      	bls.n	80055ac <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800558c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559c:	1ad2      	subs	r2, r2, r3
 800559e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	621a      	str	r2, [r3, #32]
 80055aa:	e00e      	b.n	80055ca <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	785b      	ldrb	r3, [r3, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d177      	bne.n	80056ca <USB_EPStartXfer+0x4c4>
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	4413      	add	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	011a      	lsls	r2, r3, #4
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	4413      	add	r3, r2
 8005610:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005620:	b29a      	uxth	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <USB_EPStartXfer+0x43e>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e06d      	b.n	8005720 <USB_EPStartXfer+0x51a>
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005648:	2b3e      	cmp	r3, #62	; 0x3e
 800564a:	d81c      	bhi.n	8005686 <USB_EPStartXfer+0x480>
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <USB_EPStartXfer+0x466>
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005666:	3301      	adds	r3, #1
 8005668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29b      	uxth	r3, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	b29a      	uxth	r2, r3
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	e04c      	b.n	8005720 <USB_EPStartXfer+0x51a>
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <USB_EPStartXfer+0x4a0>
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a0:	3b01      	subs	r3, #1
 80056a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e02a      	b.n	8005720 <USB_EPStartXfer+0x51a>
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d122      	bne.n	8005720 <USB_EPStartXfer+0x51a>
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	4413      	add	r3, r2
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	4413      	add	r3, r2
 8005710:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571a:	b29a      	uxth	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	891b      	ldrh	r3, [r3, #8]
 800572c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6959      	ldr	r1, [r3, #20]
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005740:	b29b      	uxth	r3, r3
 8005742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005746:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800574a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800574e:	6800      	ldr	r0, [r0, #0]
 8005750:	f001 fa39 	bl	8006bc6 <USB_WritePMA>
 8005754:	e3ee      	b.n	8005f34 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d177      	bne.n	8005856 <USB_EPStartXfer+0x650>
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
 8005772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005786:	4413      	add	r3, r2
 8005788:	64bb      	str	r3, [r7, #72]	; 0x48
 800578a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	011a      	lsls	r2, r3, #4
 8005798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579a:	4413      	add	r3, r2
 800579c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057a0:	647b      	str	r3, [r7, #68]	; 0x44
 80057a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <USB_EPStartXfer+0x5ca>
 80057ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e06d      	b.n	80058ac <USB_EPStartXfer+0x6a6>
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d4:	2b3e      	cmp	r3, #62	; 0x3e
 80057d6:	d81c      	bhi.n	8005812 <USB_EPStartXfer+0x60c>
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <USB_EPStartXfer+0x5f2>
 80057ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057f2:	3301      	adds	r3, #1
 80057f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005802:	b29b      	uxth	r3, r3
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	b29b      	uxth	r3, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	b29a      	uxth	r2, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e04c      	b.n	80058ac <USB_EPStartXfer+0x6a6>
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <USB_EPStartXfer+0x62c>
 8005828:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800582c:	3b01      	subs	r3, #1
 800582e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800583c:	b29b      	uxth	r3, r3
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	b29b      	uxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e02a      	b.n	80058ac <USB_EPStartXfer+0x6a6>
 8005856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d122      	bne.n	80058ac <USB_EPStartXfer+0x6a6>
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	653b      	str	r3, [r7, #80]	; 0x50
 8005872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	4413      	add	r3, r2
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	011a      	lsls	r2, r3, #4
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	4413      	add	r3, r2
 800589c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	891b      	ldrh	r3, [r3, #8]
 80058b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6959      	ldr	r1, [r3, #20]
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	f001 f973 	bl	8006bc6 <USB_WritePMA>
            ep->xfer_buff += len;
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	441a      	add	r2, r3
 80058f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d90f      	bls.n	800593a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800591a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	621a      	str	r2, [r3, #32]
 8005938:	e00e      	b.n	8005958 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800594a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2200      	movs	r2, #0
 8005956:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
 8005964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d177      	bne.n	8005a64 <USB_EPStartXfer+0x85e>
 8005974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	4413      	add	r3, r2
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
 8005998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	4413      	add	r3, r2
 80059aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ae:	637b      	str	r3, [r7, #52]	; 0x34
 80059b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <USB_EPStartXfer+0x7d8>
 80059c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e067      	b.n	8005aae <USB_EPStartXfer+0x8a8>
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e2:	2b3e      	cmp	r3, #62	; 0x3e
 80059e4:	d81c      	bhi.n	8005a20 <USB_EPStartXfer+0x81a>
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ea:	085b      	lsrs	r3, r3, #1
 80059ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <USB_EPStartXfer+0x800>
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	3301      	adds	r3, #1
 8005a02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	029b      	lsls	r3, r3, #10
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e046      	b.n	8005aae <USB_EPStartXfer+0x8a8>
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USB_EPStartXfer+0x83a>
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e024      	b.n	8005aae <USB_EPStartXfer+0x8a8>
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d11c      	bne.n	8005aae <USB_EPStartXfer+0x8a8>
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	4413      	add	r3, r2
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	011a      	lsls	r2, r3, #4
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	895b      	ldrh	r3, [r3, #10]
 8005aba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6959      	ldr	r1, [r3, #20]
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ad4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ad8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f001 f872 	bl	8006bc6 <USB_WritePMA>
 8005ae2:	e227      	b.n	8005f34 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	4413      	add	r3, r2
 8005b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	891b      	ldrh	r3, [r3, #8]
 8005ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6959      	ldr	r1, [r3, #20]
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bc4:	6800      	ldr	r0, [r0, #0]
 8005bc6:	f000 fffe 	bl	8006bc6 <USB_WritePMA>
 8005bca:	e1b3      	b.n	8005f34 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80c6 	beq.w	8005d9e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d177      	bne.n	8005d1e <USB_EPStartXfer+0xb18>
 8005c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4e:	4413      	add	r3, r2
 8005c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	011a      	lsls	r2, r3, #4
 8005c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c62:	4413      	add	r3, r2
 8005c64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c68:	667b      	str	r3, [r7, #100]	; 0x64
 8005c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <USB_EPStartXfer+0xa92>
 8005c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	e067      	b.n	8005d68 <USB_EPStartXfer+0xb62>
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9e:	d81c      	bhi.n	8005cda <USB_EPStartXfer+0xad4>
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <USB_EPStartXfer+0xaba>
 8005cb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e046      	b.n	8005d68 <USB_EPStartXfer+0xb62>
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <USB_EPStartXfer+0xaf4>
 8005cf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e024      	b.n	8005d68 <USB_EPStartXfer+0xb62>
 8005d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d11c      	bne.n	8005d68 <USB_EPStartXfer+0xb62>
 8005d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d42:	4413      	add	r3, r2
 8005d44:	673b      	str	r3, [r7, #112]	; 0x70
 8005d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	011a      	lsls	r2, r3, #4
 8005d54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d56:	4413      	add	r3, r2
 8005d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	895b      	ldrh	r3, [r3, #10]
 8005d74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6959      	ldr	r1, [r3, #20]
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	f000 ff15 	bl	8006bc6 <USB_WritePMA>
 8005d9c:	e0ca      	b.n	8005f34 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d177      	bne.n	8005e9e <USB_EPStartXfer+0xc98>
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dce:	4413      	add	r3, r2
 8005dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	011a      	lsls	r2, r3, #4
 8005de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005de2:	4413      	add	r3, r2
 8005de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <USB_EPStartXfer+0xc12>
 8005e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e073      	b.n	8005f00 <USB_EPStartXfer+0xcfa>
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1e:	d81c      	bhi.n	8005e5a <USB_EPStartXfer+0xc54>
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <USB_EPStartXfer+0xc3a>
 8005e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	029b      	lsls	r3, r3, #10
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e052      	b.n	8005f00 <USB_EPStartXfer+0xcfa>
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <USB_EPStartXfer+0xc74>
 8005e70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e74:	3b01      	subs	r3, #1
 8005e76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e030      	b.n	8005f00 <USB_EPStartXfer+0xcfa>
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d128      	bne.n	8005f00 <USB_EPStartXfer+0xcfa>
 8005eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	011a      	lsls	r2, r3, #4
 8005ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eea:	4413      	add	r3, r2
 8005eec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005efe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	891b      	ldrh	r3, [r3, #8]
 8005f0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6959      	ldr	r1, [r3, #20]
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f2e:	6800      	ldr	r0, [r0, #0]
 8005f30:	f000 fe49 	bl	8006bc6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5a:	817b      	strh	r3, [r7, #10]
 8005f5c:	897b      	ldrh	r3, [r7, #10]
 8005f5e:	f083 0310 	eor.w	r3, r3, #16
 8005f62:	817b      	strh	r3, [r7, #10]
 8005f64:	897b      	ldrh	r3, [r7, #10]
 8005f66:	f083 0320 	eor.w	r3, r3, #32
 8005f6a:	817b      	strh	r3, [r7, #10]
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	441a      	add	r2, r3
 8005f86:	897b      	ldrh	r3, [r7, #10]
 8005f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	8013      	strh	r3, [r2, #0]
 8005f9c:	f000 bcdf 	b.w	800695e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 80bc 	bne.w	800612a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d917      	bls.n	8005ffe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	619a      	str	r2, [r3, #24]
 8005ffc:	e00e      	b.n	800601c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800601c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800602a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006040:	4413      	add	r3, r2
 8006042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006058:	4413      	add	r3, r2
 800605a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800605e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10d      	bne.n	800609a <USB_EPStartXfer+0xe94>
 800607e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	f000 bc28 	b.w	80068ea <USB_EPStartXfer+0x16e4>
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609e:	2b3e      	cmp	r3, #62	; 0x3e
 80060a0:	d81f      	bhi.n	80060e2 <USB_EPStartXfer+0xedc>
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <USB_EPStartXfer+0xebc>
 80060b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060bc:	3301      	adds	r3, #1
 80060be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	4313      	orrs	r3, r2
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	f000 bc04 	b.w	80068ea <USB_EPStartXfer+0x16e4>
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <USB_EPStartXfer+0xefc>
 80060f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060fc:	3b01      	subs	r3, #1
 80060fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29a      	uxth	r2, r3
 800610a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800610e:	b29b      	uxth	r3, r3
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	b29b      	uxth	r3, r3
 8006114:	4313      	orrs	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006120:	b29a      	uxth	r2, r3
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e3df      	b.n	80068ea <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800612a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b02      	cmp	r3, #2
 8006138:	f040 8218 	bne.w	800656c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 809d 	bne.w	8006288 <USB_EPStartXfer+0x1082>
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006172:	4413      	add	r3, r2
 8006174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618a:	4413      	add	r3, r2
 800618c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10c      	bne.n	80061d2 <USB_EPStartXfer+0xfcc>
 80061b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061ce:	801a      	strh	r2, [r3, #0]
 80061d0:	e08f      	b.n	80062f2 <USB_EPStartXfer+0x10ec>
 80061d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b3e      	cmp	r3, #62	; 0x3e
 80061e0:	d826      	bhi.n	8006230 <USB_EPStartXfer+0x102a>
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <USB_EPStartXfer+0x100c>
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	3301      	adds	r3, #1
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006212:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	b29b      	uxth	r3, r3
 8006220:	029b      	lsls	r3, r3, #10
 8006222:	b29b      	uxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e060      	b.n	80062f2 <USB_EPStartXfer+0x10ec>
 8006230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2b00      	cmp	r3, #0
 8006254:	d104      	bne.n	8006260 <USB_EPStartXfer+0x105a>
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	3b01      	subs	r3, #1
 800625c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	b29b      	uxth	r3, r3
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	b29b      	uxth	r3, r3
 8006272:	4313      	orrs	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e034      	b.n	80062f2 <USB_EPStartXfer+0x10ec>
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d12c      	bne.n	80062f2 <USB_EPStartXfer+0x10ec>
 8006298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062bc:	4413      	add	r3, r2
 80062be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	011a      	lsls	r2, r3, #4
 80062d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 809d 	bne.w	800644c <USB_EPStartXfer+0x1246>
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006336:	4413      	add	r3, r2
 8006338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	011a      	lsls	r2, r3, #4
 800634a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634e:	4413      	add	r3, r2
 8006350:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10c      	bne.n	8006396 <USB_EPStartXfer+0x1190>
 800637c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e088      	b.n	80064a8 <USB_EPStartXfer+0x12a2>
 8006396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b3e      	cmp	r3, #62	; 0x3e
 80063a4:	d826      	bhi.n	80063f4 <USB_EPStartXfer+0x11ee>
 80063a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	085b      	lsrs	r3, r3, #1
 80063b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d004      	beq.n	80063d6 <USB_EPStartXfer+0x11d0>
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	3301      	adds	r3, #1
 80063d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	029b      	lsls	r3, r3, #10
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e059      	b.n	80064a8 <USB_EPStartXfer+0x12a2>
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <USB_EPStartXfer+0x121e>
 800641a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641e:	3b01      	subs	r3, #1
 8006420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006430:	b29b      	uxth	r3, r3
 8006432:	029b      	lsls	r3, r3, #10
 8006434:	b29b      	uxth	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	e02d      	b.n	80064a8 <USB_EPStartXfer+0x12a2>
 800644c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d125      	bne.n	80064a8 <USB_EPStartXfer+0x12a2>
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646a:	b29b      	uxth	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006472:	4413      	add	r3, r2
 8006474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	011a      	lsls	r2, r3, #4
 8006486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800648a:	4413      	add	r3, r2
 800648c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006490:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8218 	beq.w	80068ea <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <USB_EPStartXfer+0x12ec>
 80064e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 81f5 	bne.w	80068ea <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006500:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	f040 81ee 	bne.w	80068ea <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800650e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
 800656a:	e1be      	b.n	80068ea <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	f040 81b4 	bne.w	80068e6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800657e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	429a      	cmp	r2, r3
 8006598:	d917      	bls.n	80065ca <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	619a      	str	r2, [r3, #24]
 80065c8:	e00e      	b.n	80065e8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80065da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8085 	bne.w	8006704 <USB_EPStartXfer+0x14fe>
 80065fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006616:	b29b      	uxth	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800661e:	4413      	add	r3, r2
 8006620:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006636:	4413      	add	r3, r2
 8006638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800663c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800664c:	b29a      	uxth	r2, r3
 800664e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <USB_EPStartXfer+0x1470>
 800665c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666c:	b29a      	uxth	r2, r3
 800666e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	e077      	b.n	8006766 <USB_EPStartXfer+0x1560>
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667a:	2b3e      	cmp	r3, #62	; 0x3e
 800667c:	d81e      	bhi.n	80066bc <USB_EPStartXfer+0x14b6>
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <USB_EPStartXfer+0x1498>
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800669e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066b8:	801a      	strh	r2, [r3, #0]
 80066ba:	e054      	b.n	8006766 <USB_EPStartXfer+0x1560>
 80066bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <USB_EPStartXfer+0x14d6>
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d6:	3b01      	subs	r3, #1
 80066d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	029b      	lsls	r3, r3, #10
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e030      	b.n	8006766 <USB_EPStartXfer+0x1560>
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d128      	bne.n	8006766 <USB_EPStartXfer+0x1560>
 8006714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006738:	4413      	add	r3, r2
 800673a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800673e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	011a      	lsls	r2, r3, #4
 800674c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006750:	4413      	add	r3, r2
 8006752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f040 8085 	bne.w	8006890 <USB_EPStartXfer+0x168a>
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067aa:	4413      	add	r3, r2
 80067ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	011a      	lsls	r2, r3, #4
 80067be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067c2:	4413      	add	r3, r2
 80067c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d8:	b29a      	uxth	r2, r3
 80067da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10c      	bne.n	8006802 <USB_EPStartXfer+0x15fc>
 80067e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e073      	b.n	80068ea <USB_EPStartXfer+0x16e4>
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006806:	2b3e      	cmp	r3, #62	; 0x3e
 8006808:	d81e      	bhi.n	8006848 <USB_EPStartXfer+0x1642>
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <USB_EPStartXfer+0x1624>
 8006820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006824:	3301      	adds	r3, #1
 8006826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800682a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006836:	b29b      	uxth	r3, r3
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	b29b      	uxth	r3, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	b29a      	uxth	r2, r3
 8006840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e050      	b.n	80068ea <USB_EPStartXfer+0x16e4>
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <USB_EPStartXfer+0x1662>
 800685e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006862:	3b01      	subs	r3, #1
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006868:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29b      	uxth	r3, r3
 800687e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006886:	b29a      	uxth	r2, r3
 8006888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	e02c      	b.n	80068ea <USB_EPStartXfer+0x16e4>
 8006890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d124      	bne.n	80068ea <USB_EPStartXfer+0x16e4>
 80068a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068b6:	4413      	add	r3, r2
 80068b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	011a      	lsls	r2, r3, #4
 80068ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	e001      	b.n	80068ea <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e03a      	b.n	8006960 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800690c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006910:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006914:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800691c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006920:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006928:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	441a      	add	r2, r3
 8006946:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800694a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006992:	81bb      	strh	r3, [r7, #12]
 8006994:	89bb      	ldrh	r3, [r7, #12]
 8006996:	f083 0310 	eor.w	r3, r3, #16
 800699a:	81bb      	strh	r3, [r7, #12]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	89bb      	ldrh	r3, [r7, #12]
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
 80069bc:	e01f      	b.n	80069fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d4:	81fb      	strh	r3, [r7, #14]
 80069d6:	89fb      	ldrh	r3, [r7, #14]
 80069d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069dc:	81fb      	strh	r3, [r7, #14]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7b1b      	ldrb	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 809d 	bne.w	8006b5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d04c      	beq.n	8006ac2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	823b      	strh	r3, [r7, #16]
 8006a36:	8a3b      	ldrh	r3, [r7, #16]
 8006a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01b      	beq.n	8006a78 <USB_EPClearStall+0x6c>
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	81fb      	strh	r3, [r7, #14]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	89fb      	ldrh	r3, [r7, #14]
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	78db      	ldrb	r3, [r3, #3]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d06c      	beq.n	8006b5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a96:	81bb      	strh	r3, [r7, #12]
 8006a98:	89bb      	ldrh	r3, [r7, #12]
 8006a9a:	f083 0320 	eor.w	r3, r3, #32
 8006a9e:	81bb      	strh	r3, [r7, #12]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	441a      	add	r2, r3
 8006aaa:	89bb      	ldrh	r3, [r7, #12]
 8006aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	8013      	strh	r3, [r2, #0]
 8006ac0:	e04b      	b.n	8006b5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	82fb      	strh	r3, [r7, #22]
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01b      	beq.n	8006b12 <USB_EPClearStall+0x106>
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af0:	82bb      	strh	r3, [r7, #20]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	441a      	add	r2, r3
 8006afc:	8abb      	ldrh	r3, [r7, #20]
 8006afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b28:	827b      	strh	r3, [r7, #18]
 8006b2a:	8a7b      	ldrh	r3, [r7, #18]
 8006b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b30:	827b      	strh	r3, [r7, #18]
 8006b32:	8a7b      	ldrh	r3, [r7, #18]
 8006b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b38:	827b      	strh	r3, [r7, #18]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	441a      	add	r2, r3
 8006b44:	8a7b      	ldrh	r3, [r7, #18]
 8006b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b08b      	sub	sp, #44	; 0x2c
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	80fb      	strh	r3, [r7, #6]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bdc:	88bb      	ldrh	r3, [r7, #4]
 8006bde:	3301      	adds	r3, #1
 8006be0:	085b      	lsrs	r3, r3, #1
 8006be2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	005a      	lsls	r2, r3, #1
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfe:	e01e      	b.n	8006c3e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	b21a      	sxth	r2, r3
 8006c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	8a7a      	ldrh	r2, [r7, #18]
 8006c1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	3302      	adds	r3, #2
 8006c24:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	3301      	adds	r3, #1
 8006c36:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1dd      	bne.n	8006c00 <USB_WritePMA+0x3a>
  }
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	372c      	adds	r7, #44	; 0x2c
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b08b      	sub	sp, #44	; 0x2c
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	460b      	mov	r3, r1
 8006c62:	80fb      	strh	r3, [r7, #6]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c68:	88bb      	ldrh	r3, [r7, #4]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	005a      	lsls	r2, r3, #1
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8a:	e01b      	b.n	8006cc4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	3302      	adds	r3, #2
 8006c98:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e0      	bne.n	8006c8c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006cca:	88bb      	ldrh	r3, [r7, #4]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	701a      	strb	r2, [r3, #0]
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	372c      	adds	r7, #44	; 0x2c
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7c1b      	ldrb	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d115      	bne.n	8006d36 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d0e:	2202      	movs	r2, #2
 8006d10:	2181      	movs	r1, #129	; 0x81
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f001 feb9 	bl	8008a8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d22:	2202      	movs	r2, #2
 8006d24:	2101      	movs	r1, #1
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 feaf 	bl	8008a8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006d34:	e012      	b.n	8006d5c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d36:	2340      	movs	r3, #64	; 0x40
 8006d38:	2202      	movs	r2, #2
 8006d3a:	2181      	movs	r1, #129	; 0x81
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fea4 	bl	8008a8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fe9b 	bl	8008a8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	2203      	movs	r2, #3
 8006d60:	2182      	movs	r1, #130	; 0x82
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fe91 	bl	8008a8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d72:	f001 ffb1 	bl	8008cd8 <USBD_static_malloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e026      	b.n	8006ddc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	7c1b      	ldrb	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 ff51 	bl	8008c6c <USBD_LL_PrepareReceive>
 8006dca:	e007      	b.n	8006ddc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 ff48 	bl	8008c6c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006df6:	2181      	movs	r1, #129	; 0x81
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fe6c 	bl	8008ad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e04:	2101      	movs	r1, #1
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe65 	bl	8008ad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e14:	2182      	movs	r1, #130	; 0x82
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fe5d 	bl	8008ad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00e      	beq.n	8006e4a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 ff59 	bl	8008cf4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e64:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d039      	beq.n	8006ef2 <USBD_CDC_Setup+0x9e>
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d17f      	bne.n	8006f82 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d029      	beq.n	8006ede <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da11      	bge.n	8006eb8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ea0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	88d2      	ldrh	r2, [r2, #6]
 8006ea6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ea8:	6939      	ldr	r1, [r7, #16]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	88db      	ldrh	r3, [r3, #6]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fa14 	bl	80082de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006eb6:	e06b      	b.n	8006f90 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785a      	ldrb	r2, [r3, #1]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ece:	6939      	ldr	r1, [r7, #16]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	88db      	ldrh	r3, [r3, #6]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fa2f 	bl	800833a <USBD_CtlPrepareRx>
      break;
 8006edc:	e058      	b.n	8006f90 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	7850      	ldrb	r0, [r2, #1]
 8006eea:	2200      	movs	r2, #0
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	4798      	blx	r3
      break;
 8006ef0:	e04e      	b.n	8006f90 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b0b      	cmp	r3, #11
 8006ef8:	d02e      	beq.n	8006f58 <USBD_CDC_Setup+0x104>
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	dc38      	bgt.n	8006f70 <USBD_CDC_Setup+0x11c>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <USBD_CDC_Setup+0xb4>
 8006f02:	2b0a      	cmp	r3, #10
 8006f04:	d014      	beq.n	8006f30 <USBD_CDC_Setup+0xdc>
 8006f06:	e033      	b.n	8006f70 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d107      	bne.n	8006f22 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	2202      	movs	r2, #2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 f9df 	bl	80082de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f20:	e02e      	b.n	8006f80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f96f 	bl	8008208 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2e:	e027      	b.n	8006f80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d107      	bne.n	8006f4a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f3a:	f107 030f 	add.w	r3, r7, #15
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f9cb 	bl	80082de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f48:	e01a      	b.n	8006f80 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f95b 	bl	8008208 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	75fb      	strb	r3, [r7, #23]
          break;
 8006f56:	e013      	b.n	8006f80 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d00d      	beq.n	8006f7e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f94f 	bl	8008208 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f6e:	e006      	b.n	8006f7e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f948 	bl	8008208 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7c:	e000      	b.n	8006f80 <USBD_CDC_Setup+0x12c>
          break;
 8006f7e:	bf00      	nop
      }
      break;
 8006f80:	e006      	b.n	8006f90 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f93f 	bl	8008208 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8e:	bf00      	nop
  }

  return ret;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d03a      	beq.n	8007036 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fc0:	78fa      	ldrb	r2, [r7, #3]
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	331c      	adds	r3, #28
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d029      	beq.n	800702a <USBD_CDC_DataIn+0x90>
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	331c      	adds	r3, #28
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	78f9      	ldrb	r1, [r7, #3]
 8006fea:	68b8      	ldr	r0, [r7, #8]
 8006fec:	460b      	mov	r3, r1
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	440b      	add	r3, r1
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4403      	add	r3, r0
 8006ff6:	3320      	adds	r3, #32
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d110      	bne.n	800702a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	331c      	adds	r3, #28
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800701c:	78f9      	ldrb	r1, [r7, #3]
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fdff 	bl	8008c26 <USBD_LL_Transmit>
 8007028:	e003      	b.n	8007032 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007036:	2302      	movs	r3, #2
  }
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fe2a 	bl	8008cb2 <USBD_LL_GetRxDataSize>
 800705e:	4602      	mov	r2, r0
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00d      	beq.n	800708c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007084:	4611      	mov	r1, r2
 8007086:	4798      	blx	r3

    return USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800708c:	2302      	movs	r3, #2
  }
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <USBD_CDC_EP0_RxReady+0x46>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070b6:	2bff      	cmp	r3, #255	; 0xff
 80070b8:	d010      	beq.n	80070dc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80070c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070d0:	b292      	uxth	r2, r2
 80070d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	22ff      	movs	r2, #255	; 0xff
 80070d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2243      	movs	r2, #67	; 0x43
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000094 	.word	0x20000094

08007108 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2243      	movs	r2, #67	; 0x43
 8007114:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	20000050 	.word	0x20000050

08007128 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2243      	movs	r2, #67	; 0x43
 8007134:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007136:	4b03      	ldr	r3, [pc, #12]	; (8007144 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	200000d8 	.word	0x200000d8

08007148 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	220a      	movs	r2, #10
 8007154:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	2000000c 	.word	0x2000000c

08007168 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007172:	2302      	movs	r3, #2
 8007174:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007196:	b480      	push	{r7}
 8007198:	b087      	sub	sp, #28
 800719a:	af00      	add	r7, sp, #0
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	4613      	mov	r3, r2
 80071a2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071aa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071b4:	88fa      	ldrh	r2, [r7, #6]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007200:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01c      	beq.n	8007246 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007212:	2b00      	cmp	r3, #0
 8007214:	d115      	bne.n	8007242 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007234:	b29b      	uxth	r3, r3
 8007236:	2181      	movs	r1, #129	; 0x81
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fcf4 	bl	8008c26 <USBD_LL_Transmit>

      return USBD_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e002      	b.n	8007248 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007246:	2302      	movs	r3, #2
  }
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d017      	beq.n	800729a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fcf4 	bl	8008c6c <USBD_LL_PrepareReceive>
 8007284:	e007      	b.n	8007296 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	2101      	movs	r1, #1
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fceb 	bl	8008c6c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	e000      	b.n	800729c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800729a:	2302      	movs	r3, #2
  }
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	e01a      	b.n	80072f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	79fa      	ldrb	r2, [r7, #7]
 80072e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 fb58 	bl	80089a0 <USBD_LL_Init>

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d006      	beq.n	800731c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
 800731a:	e001      	b.n	8007320 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800731c:	2302      	movs	r3, #2
 800731e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fb8c 	bl	8008a54 <USBD_LL_Start>

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007368:	2302      	movs	r3, #2
 800736a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4611      	mov	r1, r2
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fedb 	bl	800818e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d016      	beq.n	800742a <USBD_LL_SetupStage+0x6a>
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d81c      	bhi.n	800743a <USBD_LL_SetupStage+0x7a>
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <USBD_LL_SetupStage+0x4a>
 8007404:	2b01      	cmp	r3, #1
 8007406:	d008      	beq.n	800741a <USBD_LL_SetupStage+0x5a>
 8007408:	e017      	b.n	800743a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9ce 	bl	80077b4 <USBD_StdDevReq>
      break;
 8007418:	e01a      	b.n	8007450 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa30 	bl	8007888 <USBD_StdItfReq>
      break;
 8007428:	e012      	b.n	8007450 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa70 	bl	8007918 <USBD_StdEPReq>
      break;
 8007438:	e00a      	b.n	8007450 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fb63 	bl	8008b14 <USBD_LL_StallEP>
      break;
 800744e:	bf00      	nop
  }

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	460b      	mov	r3, r1
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d14b      	bne.n	8007506 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007474:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800747c:	2b03      	cmp	r3, #3
 800747e:	d134      	bne.n	80074ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d919      	bls.n	80074c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d203      	bcs.n	80074ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	e002      	b.n	80074b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	461a      	mov	r2, r3
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 ff5c 	bl	8008376 <USBD_CtlContinueRx>
 80074be:	e038      	b.n	8007532 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d105      	bne.n	80074e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 ff59 	bl	800839a <USBD_CtlSendStatus>
 80074e8:	e023      	b.n	8007532 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074f0:	2b05      	cmp	r3, #5
 80074f2:	d11e      	bne.n	8007532 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80074fc:	2100      	movs	r1, #0
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f001 fb08 	bl	8008b14 <USBD_LL_StallEP>
 8007504:	e015      	b.n	8007532 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00d      	beq.n	800752e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007518:	2b03      	cmp	r3, #3
 800751a:	d108      	bne.n	800752e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	7afa      	ldrb	r2, [r7, #11]
 8007526:	4611      	mov	r1, r2
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	4798      	blx	r3
 800752c:	e001      	b.n	8007532 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800752e:	2302      	movs	r3, #2
 8007530:	e000      	b.n	8007534 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	460b      	mov	r3, r1
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d17f      	bne.n	8007650 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3314      	adds	r3, #20
 8007554:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800755c:	2b02      	cmp	r3, #2
 800755e:	d15c      	bne.n	800761a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	429a      	cmp	r2, r3
 800756a:	d915      	bls.n	8007598 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	b29b      	uxth	r3, r3
 8007580:	461a      	mov	r2, r3
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fec6 	bl	8008316 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800758a:	2300      	movs	r3, #0
 800758c:	2200      	movs	r2, #0
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fb6b 	bl	8008c6c <USBD_LL_PrepareReceive>
 8007596:	e04e      	b.n	8007636 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a4:	fb01 f202 	mul.w	r2, r1, r2
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d11c      	bne.n	80075e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d316      	bcc.n	80075e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d20f      	bcs.n	80075e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075c8:	2200      	movs	r2, #0
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fea2 	bl	8008316 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075da:	2300      	movs	r3, #0
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f001 fb43 	bl	8008c6c <USBD_LL_PrepareReceive>
 80075e6:	e026      	b.n	8007636 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d105      	bne.n	800760a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800760a:	2180      	movs	r1, #128	; 0x80
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f001 fa81 	bl	8008b14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fed4 	bl	80083c0 <USBD_CtlReceiveStatus>
 8007618:	e00d      	b.n	8007636 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007620:	2b04      	cmp	r3, #4
 8007622:	d004      	beq.n	800762e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800762e:	2180      	movs	r1, #128	; 0x80
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 fa6f 	bl	8008b14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800763c:	2b01      	cmp	r3, #1
 800763e:	d11d      	bne.n	800767c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fe80 	bl	8007346 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800764e:	e015      	b.n	800767c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00d      	beq.n	8007678 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007662:	2b03      	cmp	r3, #3
 8007664:	d108      	bne.n	8007678 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	7afa      	ldrb	r2, [r7, #11]
 8007670:	4611      	mov	r1, r2
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	4798      	blx	r3
 8007676:	e001      	b.n	800767c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007678:	2302      	movs	r3, #2
 800767a:	e000      	b.n	800767e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800768e:	2340      	movs	r3, #64	; 0x40
 8007690:	2200      	movs	r2, #0
 8007692:	2100      	movs	r1, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 f9f8 	bl	8008a8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2240      	movs	r2, #64	; 0x40
 80076a6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	2200      	movs	r2, #0
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f9ea 	bl	8008a8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2240      	movs	r2, #64	; 0x40
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6852      	ldr	r2, [r2, #4]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	4611      	mov	r1, r2
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	4798      	blx	r3
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	78fa      	ldrb	r2, [r7, #3]
 8007718:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2204      	movs	r2, #4
 8007740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	2b04      	cmp	r3, #4
 8007762:	d105      	bne.n	8007770 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778c:	2b03      	cmp	r3, #3
 800778e:	d10b      	bne.n	80077a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d005      	beq.n	80077da <USBD_StdDevReq+0x26>
 80077ce:	2b40      	cmp	r3, #64	; 0x40
 80077d0:	d84f      	bhi.n	8007872 <USBD_StdDevReq+0xbe>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <USBD_StdDevReq+0x36>
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d14b      	bne.n	8007872 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	4798      	blx	r3
      break;
 80077e8:	e048      	b.n	800787c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d839      	bhi.n	8007866 <USBD_StdDevReq+0xb2>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <USBD_StdDevReq+0x44>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007849 	.word	0x08007849
 80077fc:	0800785d 	.word	0x0800785d
 8007800:	08007867 	.word	0x08007867
 8007804:	08007853 	.word	0x08007853
 8007808:	08007867 	.word	0x08007867
 800780c:	0800782b 	.word	0x0800782b
 8007810:	08007821 	.word	0x08007821
 8007814:	08007867 	.word	0x08007867
 8007818:	0800783f 	.word	0x0800783f
 800781c:	08007835 	.word	0x08007835
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f9dc 	bl	8007be0 <USBD_GetDescriptor>
          break;
 8007828:	e022      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb3f 	bl	8007eb0 <USBD_SetAddress>
          break;
 8007832:	e01d      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fb7e 	bl	8007f38 <USBD_SetConfig>
          break;
 800783c:	e018      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc07 	bl	8008054 <USBD_GetConfig>
          break;
 8007846:	e013      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fc37 	bl	80080be <USBD_GetStatus>
          break;
 8007850:	e00e      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc65 	bl	8008124 <USBD_SetFeature>
          break;
 800785a:	e009      	b.n	8007870 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fc74 	bl	800814c <USBD_ClrFeature>
          break;
 8007864:	e004      	b.n	8007870 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fccd 	bl	8008208 <USBD_CtlError>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e004      	b.n	800787c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fcc7 	bl	8008208 <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d005      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d82e      	bhi.n	8007904 <USBD_StdItfReq+0x7c>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d12a      	bne.n	8007904 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	3b01      	subs	r3, #1
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d81d      	bhi.n	80078f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	889b      	ldrh	r3, [r3, #4]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d813      	bhi.n	80078ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	88db      	ldrh	r3, [r3, #6]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d110      	bne.n	8007900 <USBD_StdItfReq+0x78>
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10d      	bne.n	8007900 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fd58 	bl	800839a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078ea:	e009      	b.n	8007900 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc8a 	bl	8008208 <USBD_CtlError>
          break;
 80078f4:	e004      	b.n	8007900 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc85 	bl	8008208 <USBD_CtlError>
          break;
 80078fe:	e000      	b.n	8007902 <USBD_StdItfReq+0x7a>
          break;
 8007900:	bf00      	nop
      }
      break;
 8007902:	e004      	b.n	800790e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc7e 	bl	8008208 <USBD_CtlError>
      break;
 800790c:	bf00      	nop
  }

  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	889b      	ldrh	r3, [r3, #4]
 800792a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007934:	2b40      	cmp	r3, #64	; 0x40
 8007936:	d007      	beq.n	8007948 <USBD_StdEPReq+0x30>
 8007938:	2b40      	cmp	r3, #64	; 0x40
 800793a:	f200 8146 	bhi.w	8007bca <USBD_StdEPReq+0x2b2>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <USBD_StdEPReq+0x40>
 8007942:	2b20      	cmp	r3, #32
 8007944:	f040 8141 	bne.w	8007bca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
      break;
 8007956:	e13d      	b.n	8007bd4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007960:	2b20      	cmp	r3, #32
 8007962:	d10a      	bne.n	800797a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	e12d      	b.n	8007bd6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b03      	cmp	r3, #3
 8007980:	d007      	beq.n	8007992 <USBD_StdEPReq+0x7a>
 8007982:	2b03      	cmp	r3, #3
 8007984:	f300 811b 	bgt.w	8007bbe <USBD_StdEPReq+0x2a6>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d072      	beq.n	8007a72 <USBD_StdEPReq+0x15a>
 800798c:	2b01      	cmp	r3, #1
 800798e:	d03a      	beq.n	8007a06 <USBD_StdEPReq+0xee>
 8007990:	e115      	b.n	8007bbe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	2b02      	cmp	r3, #2
 800799a:	d002      	beq.n	80079a2 <USBD_StdEPReq+0x8a>
 800799c:	2b03      	cmp	r3, #3
 800799e:	d015      	beq.n	80079cc <USBD_StdEPReq+0xb4>
 80079a0:	e02b      	b.n	80079fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00c      	beq.n	80079c2 <USBD_StdEPReq+0xaa>
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d009      	beq.n	80079c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f8ae 	bl	8008b14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f8aa 	bl	8008b14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c0:	e020      	b.n	8007a04 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc1f 	bl	8008208 <USBD_CtlError>
              break;
 80079ca:	e01b      	b.n	8007a04 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10e      	bne.n	80079f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <USBD_StdEPReq+0xda>
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d008      	beq.n	80079f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	88db      	ldrh	r3, [r3, #6]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f891 	bl	8008b14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fcd1 	bl	800839a <USBD_CtlSendStatus>

              break;
 80079f8:	e004      	b.n	8007a04 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc03 	bl	8008208 <USBD_CtlError>
              break;
 8007a02:	bf00      	nop
          }
          break;
 8007a04:	e0e0      	b.n	8007bc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d002      	beq.n	8007a16 <USBD_StdEPReq+0xfe>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d015      	beq.n	8007a40 <USBD_StdEPReq+0x128>
 8007a14:	e026      	b.n	8007a64 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00c      	beq.n	8007a36 <USBD_StdEPReq+0x11e>
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b80      	cmp	r3, #128	; 0x80
 8007a20:	d009      	beq.n	8007a36 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f874 	bl	8008b14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f870 	bl	8008b14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a34:	e01c      	b.n	8007a70 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fbe5 	bl	8008208 <USBD_CtlError>
              break;
 8007a3e:	e017      	b.n	8007a70 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	885b      	ldrh	r3, [r3, #2]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d112      	bne.n	8007a6e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 f87b 	bl	8008b52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc9c 	bl	800839a <USBD_CtlSendStatus>
              }
              break;
 8007a62:	e004      	b.n	8007a6e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fbce 	bl	8008208 <USBD_CtlError>
              break;
 8007a6c:	e000      	b.n	8007a70 <USBD_StdEPReq+0x158>
              break;
 8007a6e:	bf00      	nop
          }
          break;
 8007a70:	e0aa      	b.n	8007bc8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d002      	beq.n	8007a82 <USBD_StdEPReq+0x16a>
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d032      	beq.n	8007ae6 <USBD_StdEPReq+0x1ce>
 8007a80:	e097      	b.n	8007bb2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <USBD_StdEPReq+0x180>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d004      	beq.n	8007a98 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbb9 	bl	8008208 <USBD_CtlError>
                break;
 8007a96:	e091      	b.n	8007bbc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	da0b      	bge.n	8007ab8 <USBD_StdEPReq+0x1a0>
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	3310      	adds	r3, #16
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	e00b      	b.n	8007ad0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	3304      	adds	r3, #4
 8007ad0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fbfd 	bl	80082de <USBD_CtlSendData>
              break;
 8007ae4:	e06a      	b.n	8007bbc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da11      	bge.n	8007b12 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	f003 020f 	and.w	r2, r3, #15
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	3318      	adds	r3, #24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d117      	bne.n	8007b38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fb7c 	bl	8008208 <USBD_CtlError>
                  break;
 8007b10:	e054      	b.n	8007bbc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	f003 020f 	and.w	r2, r3, #15
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d104      	bne.n	8007b38 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fb69 	bl	8008208 <USBD_CtlError>
                  break;
 8007b36:	e041      	b.n	8007bbc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	da0b      	bge.n	8007b58 <USBD_StdEPReq+0x240>
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	3310      	adds	r3, #16
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	3304      	adds	r3, #4
 8007b56:	e00b      	b.n	8007b70 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <USBD_StdEPReq+0x266>
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	d103      	bne.n	8007b86 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e00e      	b.n	8007ba4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f800 	bl	8008b90 <USBD_LL_IsStallEP>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e002      	b.n	8007ba4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fb97 	bl	80082de <USBD_CtlSendData>
              break;
 8007bb0:	e004      	b.n	8007bbc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fb27 	bl	8008208 <USBD_CtlError>
              break;
 8007bba:	bf00      	nop
          }
          break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fb21 	bl	8008208 <USBD_CtlError>
          break;
 8007bc6:	bf00      	nop
      }
      break;
 8007bc8:	e004      	b.n	8007bd4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb1b 	bl	8008208 <USBD_CtlError>
      break;
 8007bd2:	bf00      	nop
  }

  return ret;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	885b      	ldrh	r3, [r3, #2]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	f200 8128 	bhi.w	8007e56 <USBD_GetDescriptor+0x276>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <USBD_GetDescriptor+0x2c>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c29 	.word	0x08007c29
 8007c10:	08007c41 	.word	0x08007c41
 8007c14:	08007c81 	.word	0x08007c81
 8007c18:	08007e57 	.word	0x08007e57
 8007c1c:	08007e57 	.word	0x08007e57
 8007c20:	08007df7 	.word	0x08007df7
 8007c24:	08007e23 	.word	0x08007e23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
      break;
 8007c3e:	e112      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7c1b      	ldrb	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10d      	bne.n	8007c64 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f107 0208 	add.w	r2, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	2202      	movs	r2, #2
 8007c60:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c62:	e100      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	f107 0208 	add.w	r2, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	701a      	strb	r2, [r3, #0]
      break;
 8007c7e:	e0f2      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	885b      	ldrh	r3, [r3, #2]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b05      	cmp	r3, #5
 8007c88:	f200 80ac 	bhi.w	8007de4 <USBD_GetDescriptor+0x204>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <USBD_GetDescriptor+0xb4>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007ce1 	.word	0x08007ce1
 8007c9c:	08007d15 	.word	0x08007d15
 8007ca0:	08007d49 	.word	0x08007d49
 8007ca4:	08007d7d 	.word	0x08007d7d
 8007ca8:	08007db1 	.word	0x08007db1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cce:	e091      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa98 	bl	8008208 <USBD_CtlError>
            err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cde:	e089      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d02:	e077      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fa7e 	bl	8008208 <USBD_CtlError>
            err++;
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	72fb      	strb	r3, [r7, #11]
          break;
 8007d12:	e06f      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d36:	e05d      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa64 	bl	8008208 <USBD_CtlError>
            err++;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	3301      	adds	r3, #1
 8007d44:	72fb      	strb	r3, [r7, #11]
          break;
 8007d46:	e055      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6a:	e043      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa4a 	bl	8008208 <USBD_CtlError>
            err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7a:	e03b      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9e:	e029      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa30 	bl	8008208 <USBD_CtlError>
            err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
          break;
 8007dae:	e021      	b.n	8007df4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd2:	e00f      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa16 	bl	8008208 <USBD_CtlError>
            err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
          break;
 8007de2:	e007      	b.n	8007df4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa0e 	bl	8008208 <USBD_CtlError>
          err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007df2:	e038      	b.n	8007e66 <USBD_GetDescriptor+0x286>
 8007df4:	e037      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1b      	ldrb	r3, [r3, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d109      	bne.n	8007e12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	f107 0208 	add.w	r2, r7, #8
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	4798      	blx	r3
 8007e0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e10:	e029      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f9f7 	bl	8008208 <USBD_CtlError>
        err++;
 8007e1a:	7afb      	ldrb	r3, [r7, #11]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e20:	e021      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7c1b      	ldrb	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10d      	bne.n	8007e46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	f107 0208 	add.w	r2, r7, #8
 8007e36:	4610      	mov	r0, r2
 8007e38:	4798      	blx	r3
 8007e3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	2207      	movs	r2, #7
 8007e42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e44:	e00f      	b.n	8007e66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9dd 	bl	8008208 <USBD_CtlError>
        err++;
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	3301      	adds	r3, #1
 8007e52:	72fb      	strb	r3, [r7, #11]
      break;
 8007e54:	e007      	b.n	8007e66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9d5 	bl	8008208 <USBD_CtlError>
      err++;
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	3301      	adds	r3, #1
 8007e62:	72fb      	strb	r3, [r7, #11]
      break;
 8007e64:	bf00      	nop
  }

  if (err != 0U)
 8007e66:	7afb      	ldrb	r3, [r7, #11]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d11c      	bne.n	8007ea6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e6c:	893b      	ldrh	r3, [r7, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d011      	beq.n	8007e96 <USBD_GetDescriptor+0x2b6>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	88db      	ldrh	r3, [r3, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00d      	beq.n	8007e96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	88da      	ldrh	r2, [r3, #6]
 8007e7e:	893b      	ldrh	r3, [r7, #8]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	bf28      	it	cs
 8007e84:	4613      	movcs	r3, r2
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e8a:	893b      	ldrh	r3, [r7, #8]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa24 	bl	80082de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	88db      	ldrh	r3, [r3, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d104      	bne.n	8007ea8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa7b 	bl	800839a <USBD_CtlSendStatus>
 8007ea4:	e000      	b.n	8007ea8 <USBD_GetDescriptor+0x2c8>
    return;
 8007ea6:	bf00      	nop
    }
  }
}
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	889b      	ldrh	r3, [r3, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d130      	bne.n	8007f24 <USBD_SetAddress+0x74>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88db      	ldrh	r3, [r3, #6]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d12c      	bne.n	8007f24 <USBD_SetAddress+0x74>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	885b      	ldrh	r3, [r3, #2]
 8007ece:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed0:	d828      	bhi.n	8007f24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007edc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d104      	bne.n	8007ef2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f98c 	bl	8008208 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef0:	e01d      	b.n	8007f2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fe72 	bl	8008be8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa48 	bl	800839a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f18:	e009      	b.n	8007f2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f22:	e004      	b.n	8007f2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f96e 	bl	8008208 <USBD_CtlError>
  }
}
 8007f2c:	bf00      	nop
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885b      	ldrh	r3, [r3, #2]
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	4b41      	ldr	r3, [pc, #260]	; (8008050 <USBD_SetConfig+0x118>)
 8007f4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f4c:	4b40      	ldr	r3, [pc, #256]	; (8008050 <USBD_SetConfig+0x118>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d904      	bls.n	8007f5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f956 	bl	8008208 <USBD_CtlError>
 8007f5c:	e075      	b.n	800804a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d002      	beq.n	8007f6e <USBD_SetConfig+0x36>
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d023      	beq.n	8007fb4 <USBD_SetConfig+0x7c>
 8007f6c:	e062      	b.n	8008034 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f6e:	4b38      	ldr	r3, [pc, #224]	; (8008050 <USBD_SetConfig+0x118>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01a      	beq.n	8007fac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f76:	4b36      	ldr	r3, [pc, #216]	; (8008050 <USBD_SetConfig+0x118>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2203      	movs	r2, #3
 8007f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f88:	4b31      	ldr	r3, [pc, #196]	; (8008050 <USBD_SetConfig+0x118>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff f9e4 	bl	800735c <USBD_SetClassConfig>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d104      	bne.n	8007fa4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f933 	bl	8008208 <USBD_CtlError>
            return;
 8007fa2:	e052      	b.n	800804a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f9f8 	bl	800839a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007faa:	e04e      	b.n	800804a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9f4 	bl	800839a <USBD_CtlSendStatus>
        break;
 8007fb2:	e04a      	b.n	800804a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007fb4:	4b26      	ldr	r3, [pc, #152]	; (8008050 <USBD_SetConfig+0x118>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d112      	bne.n	8007fe2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007fc4:	4b22      	ldr	r3, [pc, #136]	; (8008050 <USBD_SetConfig+0x118>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007fce:	4b20      	ldr	r3, [pc, #128]	; (8008050 <USBD_SetConfig+0x118>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff f9e0 	bl	800739a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f9dd 	bl	800839a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fe0:	e033      	b.n	800804a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007fe2:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <USBD_SetConfig+0x118>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d01d      	beq.n	800802c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff f9ce 	bl	800739a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <USBD_SetConfig+0x118>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008008:	4b11      	ldr	r3, [pc, #68]	; (8008050 <USBD_SetConfig+0x118>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff f9a4 	bl	800735c <USBD_SetClassConfig>
 8008014:	4603      	mov	r3, r0
 8008016:	2b02      	cmp	r3, #2
 8008018:	d104      	bne.n	8008024 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f8f3 	bl	8008208 <USBD_CtlError>
            return;
 8008022:	e012      	b.n	800804a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f9b8 	bl	800839a <USBD_CtlSendStatus>
        break;
 800802a:	e00e      	b.n	800804a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9b4 	bl	800839a <USBD_CtlSendStatus>
        break;
 8008032:	e00a      	b.n	800804a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8e6 	bl	8008208 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <USBD_SetConfig+0x118>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff f9a9 	bl	800739a <USBD_ClrClassConfig>
        break;
 8008048:	bf00      	nop
    }
  }
}
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000244 	.word	0x20000244

08008054 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	88db      	ldrh	r3, [r3, #6]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d004      	beq.n	8008070 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f8cd 	bl	8008208 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800806e:	e022      	b.n	80080b6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008076:	2b02      	cmp	r3, #2
 8008078:	dc02      	bgt.n	8008080 <USBD_GetConfig+0x2c>
 800807a:	2b00      	cmp	r3, #0
 800807c:	dc03      	bgt.n	8008086 <USBD_GetConfig+0x32>
 800807e:	e015      	b.n	80080ac <USBD_GetConfig+0x58>
 8008080:	2b03      	cmp	r3, #3
 8008082:	d00b      	beq.n	800809c <USBD_GetConfig+0x48>
 8008084:	e012      	b.n	80080ac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3308      	adds	r3, #8
 8008090:	2201      	movs	r2, #1
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f922 	bl	80082de <USBD_CtlSendData>
        break;
 800809a:	e00c      	b.n	80080b6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	2201      	movs	r2, #1
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f91a 	bl	80082de <USBD_CtlSendData>
        break;
 80080aa:	e004      	b.n	80080b6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f8aa 	bl	8008208 <USBD_CtlError>
        break;
 80080b4:	bf00      	nop
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d81e      	bhi.n	8008112 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	88db      	ldrh	r3, [r3, #6]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d004      	beq.n	80080e6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f892 	bl	8008208 <USBD_CtlError>
        break;
 80080e4:	e01a      	b.n	800811c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f043 0202 	orr.w	r2, r3, #2
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	330c      	adds	r3, #12
 8008106:	2202      	movs	r2, #2
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f8e7 	bl	80082de <USBD_CtlSendData>
      break;
 8008110:	e004      	b.n	800811c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f877 	bl	8008208 <USBD_CtlError>
      break;
 800811a:	bf00      	nop
  }
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d106      	bne.n	8008144 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f92b 	bl	800839a <USBD_CtlSendStatus>
  }
}
 8008144:	bf00      	nop
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815c:	3b01      	subs	r3, #1
 800815e:	2b02      	cmp	r3, #2
 8008160:	d80b      	bhi.n	800817a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	885b      	ldrh	r3, [r3, #2]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d10c      	bne.n	8008184 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f911 	bl	800839a <USBD_CtlSendStatus>
      }
      break;
 8008178:	e004      	b.n	8008184 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f843 	bl	8008208 <USBD_CtlError>
      break;
 8008182:	e000      	b.n	8008186 <USBD_ClrFeature+0x3a>
      break;
 8008184:	bf00      	nop
  }
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	785a      	ldrb	r2, [r3, #1]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	3302      	adds	r3, #2
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	3303      	adds	r3, #3
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4413      	add	r3, r2
 80081be:	b29a      	uxth	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	3304      	adds	r3, #4
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3305      	adds	r3, #5
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4413      	add	r3, r2
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	3306      	adds	r3, #6
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3307      	adds	r3, #7
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	4413      	add	r3, r2
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	80da      	strh	r2, [r3, #6]

}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc7d 	bl	8008b14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800821a:	2100      	movs	r1, #0
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fc79 	bl	8008b14 <USBD_LL_StallEP>
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b086      	sub	sp, #24
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d032      	beq.n	80082a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f834 	bl	80082ae <USBD_GetLen>
 8008246:	4603      	mov	r3, r0
 8008248:	3301      	adds	r3, #1
 800824a:	b29b      	uxth	r3, r3
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	75fa      	strb	r2, [r7, #23]
 800825a:	461a      	mov	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4413      	add	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	75fa      	strb	r2, [r7, #23]
 800826c:	461a      	mov	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	2203      	movs	r2, #3
 8008274:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008276:	e012      	b.n	800829e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	60fa      	str	r2, [r7, #12]
 800827e:	7dfa      	ldrb	r2, [r7, #23]
 8008280:	1c51      	adds	r1, r2, #1
 8008282:	75f9      	strb	r1, [r7, #23]
 8008284:	4611      	mov	r1, r2
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	440a      	add	r2, r1
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	75fa      	strb	r2, [r7, #23]
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4413      	add	r3, r2
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e8      	bne.n	8008278 <USBD_GetString+0x4e>
    }
  }
}
 80082a6:	bf00      	nop
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082ba:	e005      	b.n	80082c8 <USBD_GetLen+0x1a>
  {
    len++;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	3301      	adds	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3301      	adds	r3, #1
 80082c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f5      	bne.n	80082bc <USBD_GetLen+0xe>
  }

  return len;
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082f4:	88fa      	ldrh	r2, [r7, #6]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80082fa:	88fa      	ldrh	r2, [r7, #6]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fc8d 	bl	8008c26 <USBD_LL_Transmit>

  return USBD_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	4613      	mov	r3, r2
 8008322:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	2100      	movs	r1, #0
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fc7b 	bl	8008c26 <USBD_LL_Transmit>

  return USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	60b9      	str	r1, [r7, #8]
 8008344:	4613      	mov	r3, r2
 8008346:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2203      	movs	r2, #3
 800834c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	2100      	movs	r1, #0
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fc80 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	4613      	mov	r3, r2
 8008382:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fc6e 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2204      	movs	r2, #4
 80083a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083aa:	2300      	movs	r3, #0
 80083ac:	2200      	movs	r2, #0
 80083ae:	2100      	movs	r1, #0
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fc38 	bl	8008c26 <USBD_LL_Transmit>

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2205      	movs	r2, #5
 80083cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d0:	2300      	movs	r3, #0
 80083d2:	2200      	movs	r2, #0
 80083d4:	2100      	movs	r1, #0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fc48 	bl	8008c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083ec:	2200      	movs	r2, #0
 80083ee:	4912      	ldr	r1, [pc, #72]	; (8008438 <MX_USB_DEVICE_Init+0x50>)
 80083f0:	4812      	ldr	r0, [pc, #72]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 80083f2:	f7fe ff57 	bl	80072a4 <USBD_Init>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083fc:	f7f8 f8b6 	bl	800056c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008400:	490f      	ldr	r1, [pc, #60]	; (8008440 <MX_USB_DEVICE_Init+0x58>)
 8008402:	480e      	ldr	r0, [pc, #56]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008404:	f7fe ff79 	bl	80072fa <USBD_RegisterClass>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800840e:	f7f8 f8ad 	bl	800056c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008412:	490c      	ldr	r1, [pc, #48]	; (8008444 <MX_USB_DEVICE_Init+0x5c>)
 8008414:	4809      	ldr	r0, [pc, #36]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008416:	f7fe fea7 	bl	8007168 <USBD_CDC_RegisterInterface>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008420:	f7f8 f8a4 	bl	800056c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <MX_USB_DEVICE_Init+0x54>)
 8008426:	f7fe ff82 	bl	800732e <USBD_Start>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008430:	f7f8 f89c 	bl	800056c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008434:	bf00      	nop
 8008436:	bd80      	pop	{r7, pc}
 8008438:	2000012c 	.word	0x2000012c
 800843c:	20000248 	.word	0x20000248
 8008440:	20000018 	.word	0x20000018
 8008444:	2000011c 	.word	0x2000011c

08008448 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800844c:	2200      	movs	r2, #0
 800844e:	4905      	ldr	r1, [pc, #20]	; (8008464 <CDC_Init_FS+0x1c>)
 8008450:	4805      	ldr	r0, [pc, #20]	; (8008468 <CDC_Init_FS+0x20>)
 8008452:	f7fe fea0 	bl	8007196 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008456:	4905      	ldr	r1, [pc, #20]	; (800846c <CDC_Init_FS+0x24>)
 8008458:	4803      	ldr	r0, [pc, #12]	; (8008468 <CDC_Init_FS+0x20>)
 800845a:	f7fe feb6 	bl	80071ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800845e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	2000090c 	.word	0x2000090c
 8008468:	20000248 	.word	0x20000248
 800846c:	2000050c 	.word	0x2000050c

08008470 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008474:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008476:	4618      	mov	r0, r3
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
 800848c:	4613      	mov	r3, r2
 800848e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b23      	cmp	r3, #35	; 0x23
 8008494:	d84a      	bhi.n	800852c <CDC_Control_FS+0xac>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <CDC_Control_FS+0x1c>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	0800852d 	.word	0x0800852d
 80084a0:	0800852d 	.word	0x0800852d
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	0800852d 	.word	0x0800852d
 80084ac:	0800852d 	.word	0x0800852d
 80084b0:	0800852d 	.word	0x0800852d
 80084b4:	0800852d 	.word	0x0800852d
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	0800852d 	.word	0x0800852d
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	0800852d 	.word	0x0800852d
 80084cc:	0800852d 	.word	0x0800852d
 80084d0:	0800852d 	.word	0x0800852d
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	0800852d 	.word	0x0800852d
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	0800852d 	.word	0x0800852d
 80084ec:	0800852d 	.word	0x0800852d
 80084f0:	0800852d 	.word	0x0800852d
 80084f4:	0800852d 	.word	0x0800852d
 80084f8:	0800852d 	.word	0x0800852d
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	0800852d 	.word	0x0800852d
 8008504:	0800852d 	.word	0x0800852d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	0800852d 	.word	0x0800852d
 8008510:	0800852d 	.word	0x0800852d
 8008514:	0800852d 	.word	0x0800852d
 8008518:	0800852d 	.word	0x0800852d
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800852d 	.word	0x0800852d
 8008524:	0800852d 	.word	0x0800852d
 8008528:	0800852d 	.word	0x0800852d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800852c:	bf00      	nop
  }

  return (USBD_OK);
 800852e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4805      	ldr	r0, [pc, #20]	; (8008560 <CDC_Receive_FS+0x24>)
 800854a:	f7fe fe3e 	bl	80071ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800854e:	4804      	ldr	r0, [pc, #16]	; (8008560 <CDC_Receive_FS+0x24>)
 8008550:	f7fe fe7e 	bl	8007250 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008554:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000248 	.word	0x20000248

08008564 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800857a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008586:	2301      	movs	r3, #1
 8008588:	e00b      	b.n	80085a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	461a      	mov	r2, r3
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4806      	ldr	r0, [pc, #24]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008592:	f7fe fe00 	bl	8007196 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <CDC_Transmit_FS+0x48>)
 8008598:	f7fe fe2b 	bl	80071f2 <USBD_CDC_TransmitPacket>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000248 	.word	0x20000248

080085b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2212      	movs	r2, #18
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000148 	.word	0x20000148

080085d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2204      	movs	r2, #4
 80085e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	2000015c 	.word	0x2000015c

080085f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4907      	ldr	r1, [pc, #28]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800860e:	4808      	ldr	r0, [pc, #32]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 8008610:	f7ff fe0b 	bl	800822a <USBD_GetString>
 8008614:	e004      	b.n	8008620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4904      	ldr	r1, [pc, #16]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 800861c:	f7ff fe05 	bl	800822a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000d0c 	.word	0x20000d0c
 8008630:	08009724 	.word	0x08009724

08008634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008644:	4804      	ldr	r0, [pc, #16]	; (8008658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008646:	f7ff fdf0 	bl	800822a <USBD_GetString>
  return USBD_StrDesc;
 800864a:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20000d0c 	.word	0x20000d0c
 8008658:	0800973c 	.word	0x0800973c

0800865c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	221a      	movs	r2, #26
 800866c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800866e:	f000 f843 	bl	80086f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008672:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000160 	.word	0x20000160

08008680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4907      	ldr	r1, [pc, #28]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008696:	4808      	ldr	r0, [pc, #32]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008698:	f7ff fdc7 	bl	800822a <USBD_GetString>
 800869c:	e004      	b.n	80086a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a4:	f7ff fdc1 	bl	800822a <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000d0c 	.word	0x20000d0c
 80086b8:	08009750 	.word	0x08009750

080086bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d4:	f7ff fda9 	bl	800822a <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e0:	f7ff fda3 	bl	800822a <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000d0c 	.word	0x20000d0c
 80086f4:	0800975c 	.word	0x0800975c

080086f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <Get_SerialNum+0x44>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <Get_SerialNum+0x48>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <Get_SerialNum+0x4c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800871e:	2208      	movs	r2, #8
 8008720:	4909      	ldr	r1, [pc, #36]	; (8008748 <Get_SerialNum+0x50>)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f814 	bl	8008750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008728:	2204      	movs	r2, #4
 800872a:	4908      	ldr	r1, [pc, #32]	; (800874c <Get_SerialNum+0x54>)
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f000 f80f 	bl	8008750 <IntToUnicode>
  }
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	1ffff7ac 	.word	0x1ffff7ac
 8008740:	1ffff7b0 	.word	0x1ffff7b0
 8008744:	1ffff7b4 	.word	0x1ffff7b4
 8008748:	20000162 	.word	0x20000162
 800874c:	20000172 	.word	0x20000172

08008750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e027      	b.n	80087b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	2b09      	cmp	r3, #9
 800876e:	d80b      	bhi.n	8008788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	0f1b      	lsrs	r3, r3, #28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4619      	mov	r1, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	440b      	add	r3, r1
 8008780:	3230      	adds	r2, #48	; 0x30
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e00a      	b.n	800879e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3237      	adds	r2, #55	; 0x37
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	3301      	adds	r3, #1
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
 80087b8:	7dfa      	ldrb	r2, [r7, #23]
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3d3      	bcc.n	8008768 <IntToUnicode+0x18>
  }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <HAL_PCD_MspInit+0x90>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d131      	bne.n	8008856 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <HAL_PCD_MspInit+0x94>)
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	4a1b      	ldr	r2, [pc, #108]	; (8008864 <HAL_PCD_MspInit+0x94>)
 80087f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087fc:	6153      	str	r3, [r2, #20]
 80087fe:	4b19      	ldr	r3, [pc, #100]	; (8008864 <HAL_PCD_MspInit+0x94>)
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800880a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800880e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008810:	2302      	movs	r3, #2
 8008812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008818:	2303      	movs	r3, #3
 800881a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800881c:	230e      	movs	r3, #14
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008820:	f107 0314 	add.w	r3, r7, #20
 8008824:	4619      	mov	r1, r3
 8008826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800882a:	f7f8 f96d 	bl	8000b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800882e:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <HAL_PCD_MspInit+0x94>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4a0c      	ldr	r2, [pc, #48]	; (8008864 <HAL_PCD_MspInit+0x94>)
 8008834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008838:	61d3      	str	r3, [r2, #28]
 800883a:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <HAL_PCD_MspInit+0x94>)
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8008846:	2200      	movs	r2, #0
 8008848:	2100      	movs	r1, #0
 800884a:	2014      	movs	r0, #20
 800884c:	f7f8 f925 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8008850:	2014      	movs	r0, #20
 8008852:	f7f8 f93e 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008856:	bf00      	nop
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40005c00 	.word	0x40005c00
 8008864:	40021000 	.word	0x40021000

08008868 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fe fd9e 	bl	80073c0 <USBD_LL_SetupStage>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	440b      	add	r3, r1
 80088ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	4619      	mov	r1, r3
 80088b6:	f7fe fdd0 	bl	800745a <USBD_LL_DataOutStage>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	440b      	add	r3, r1
 80088e2:	3324      	adds	r3, #36	; 0x24
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7fe fe27 	bl	800753c <USBD_LL_DataInStage>
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe ff3a 	bl	800777e <USBD_LL_SOF>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800891a:	2301      	movs	r3, #1
 800891c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d001      	beq.n	800892a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008926:	f7f7 fe21 	bl	800056c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008930:	7bfa      	ldrb	r2, [r7, #15]
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fee7 	bl	8007708 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fea0 	bl	8007686 <USBD_LL_Reset>
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fee2 	bl	8007728 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7a5b      	ldrb	r3, [r3, #9]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <HAL_PCD_SuspendCallback+0x30>)
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	4a03      	ldr	r2, [pc, #12]	; (8008980 <HAL_PCD_SuspendCallback+0x30>)
 8008972:	f043 0306 	orr.w	r3, r3, #6
 8008976:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	e000ed00 	.word	0xe000ed00

08008984 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fedd 	bl	8007752 <USBD_LL_Resume>
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089a8:	4a28      	ldr	r2, [pc, #160]	; (8008a4c <USBD_LL_Init+0xac>)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a26      	ldr	r2, [pc, #152]	; (8008a4c <USBD_LL_Init+0xac>)
 80089b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80089b8:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <USBD_LL_Init+0xac>)
 80089ba:	4a25      	ldr	r2, [pc, #148]	; (8008a50 <USBD_LL_Init+0xb0>)
 80089bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80089be:	4b23      	ldr	r3, [pc, #140]	; (8008a4c <USBD_LL_Init+0xac>)
 80089c0:	2208      	movs	r2, #8
 80089c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <USBD_LL_Init+0xac>)
 80089c6:	2202      	movs	r2, #2
 80089c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089ca:	4b20      	ldr	r3, [pc, #128]	; (8008a4c <USBD_LL_Init+0xac>)
 80089cc:	2202      	movs	r2, #2
 80089ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80089d0:	4b1e      	ldr	r3, [pc, #120]	; (8008a4c <USBD_LL_Init+0xac>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80089d6:	4b1d      	ldr	r3, [pc, #116]	; (8008a4c <USBD_LL_Init+0xac>)
 80089d8:	2200      	movs	r2, #0
 80089da:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80089dc:	481b      	ldr	r0, [pc, #108]	; (8008a4c <USBD_LL_Init+0xac>)
 80089de:	f7f8 fd88 	bl	80014f2 <HAL_PCD_Init>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80089e8:	f7f7 fdc0 	bl	800056c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089f2:	2318      	movs	r3, #24
 80089f4:	2200      	movs	r2, #0
 80089f6:	2100      	movs	r1, #0
 80089f8:	f7fa fa02 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a02:	2358      	movs	r3, #88	; 0x58
 8008a04:	2200      	movs	r2, #0
 8008a06:	2180      	movs	r1, #128	; 0x80
 8008a08:	f7fa f9fa 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a12:	23c0      	movs	r3, #192	; 0xc0
 8008a14:	2200      	movs	r2, #0
 8008a16:	2181      	movs	r1, #129	; 0x81
 8008a18:	f7fa f9f2 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008a26:	2200      	movs	r2, #0
 8008a28:	2101      	movs	r1, #1
 8008a2a:	f7fa f9e9 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2182      	movs	r1, #130	; 0x82
 8008a3c:	f7fa f9e0 	bl	8002e00 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000f0c 	.word	0x20000f0c
 8008a50:	40005c00 	.word	0x40005c00

08008a54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7f8 fe08 	bl	8001680 <HAL_PCD_Start>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f952 	bl	8008d20 <USBD_Get_USB_Status>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	4608      	mov	r0, r1
 8008a94:	4611      	mov	r1, r2
 8008a96:	461a      	mov	r2, r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	70fb      	strb	r3, [r7, #3]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70bb      	strb	r3, [r7, #2]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ab2:	78bb      	ldrb	r3, [r7, #2]
 8008ab4:	883a      	ldrh	r2, [r7, #0]
 8008ab6:	78f9      	ldrb	r1, [r7, #3]
 8008ab8:	f7f8 ff00 	bl	80018bc <HAL_PCD_EP_Open>
 8008abc:	4603      	mov	r3, r0
 8008abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 f92c 	bl	8008d20 <USBD_Get_USB_Status>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7f8 ff3e 	bl	8001976 <HAL_PCD_EP_Close>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afe:	7bfb      	ldrb	r3, [r7, #15]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 f90d 	bl	8008d20 <USBD_Get_USB_Status>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f8 ffe7 	bl	8001b06 <HAL_PCD_EP_SetStall>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f8ee 	bl	8008d20 <USBD_Get_USB_Status>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7f9 f81a 	bl	8001baa <HAL_PCD_EP_ClrStall>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 f8cf 	bl	8008d20 <USBD_Get_USB_Status>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da0b      	bge.n	8008bc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb2:	68f9      	ldr	r1, [r7, #12]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	440b      	add	r3, r1
 8008bbe:	3312      	adds	r3, #18
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	e00b      	b.n	8008bdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8008bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f8 fe34 	bl	8001874 <HAL_PCD_SetAddress>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f884 	bl	8008d20 <USBD_Get_USB_Status>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b086      	sub	sp, #24
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	461a      	mov	r2, r3
 8008c32:	460b      	mov	r3, r1
 8008c34:	72fb      	strb	r3, [r7, #11]
 8008c36:	4613      	mov	r3, r2
 8008c38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c48:	893b      	ldrh	r3, [r7, #8]
 8008c4a:	7af9      	ldrb	r1, [r7, #11]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f7f8 ff23 	bl	8001a98 <HAL_PCD_EP_Transmit>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 f861 	bl	8008d20 <USBD_Get_USB_Status>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	461a      	mov	r2, r3
 8008c78:	460b      	mov	r3, r1
 8008c7a:	72fb      	strb	r3, [r7, #11]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008c8e:	893b      	ldrh	r3, [r7, #8]
 8008c90:	7af9      	ldrb	r1, [r7, #11]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	f7f8 feb7 	bl	8001a06 <HAL_PCD_EP_Receive>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9c:	7dfb      	ldrb	r3, [r7, #23]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f83e 	bl	8008d20 <USBD_Get_USB_Status>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ca8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7f8 fecd 	bl	8001a68 <HAL_PCD_EP_GetRxCount>
 8008cce:	4603      	mov	r3, r0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_static_malloc+0x18>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	200011e0 	.word	0x200011e0

08008cf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4603      	mov	r3, r0
 8008d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d817      	bhi.n	8008d64 <USBD_Get_USB_Status+0x44>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <USBD_Get_USB_Status+0x1c>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d4d 	.word	0x08008d4d
 8008d40:	08008d53 	.word	0x08008d53
 8008d44:	08008d59 	.word	0x08008d59
 8008d48:	08008d5f 	.word	0x08008d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d50:	e00b      	b.n	8008d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d52:	2302      	movs	r3, #2
 8008d54:	73fb      	strb	r3, [r7, #15]
    break;
 8008d56:	e008      	b.n	8008d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5c:	e005      	b.n	8008d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	73fb      	strb	r3, [r7, #15]
    break;
 8008d62:	e002      	b.n	8008d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d64:	2302      	movs	r3, #2
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	bf00      	nop
  }
  return usb_status;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <siprintf>:
 8008d78:	b40e      	push	{r1, r2, r3}
 8008d7a:	b500      	push	{lr}
 8008d7c:	b09c      	sub	sp, #112	; 0x70
 8008d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	9006      	str	r0, [sp, #24]
 8008d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <siprintf+0x38>)
 8008d8a:	9107      	str	r1, [sp, #28]
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	4909      	ldr	r1, [pc, #36]	; (8008db4 <siprintf+0x3c>)
 8008d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	a902      	add	r1, sp, #8
 8008d9c:	f000 f992 	bl	80090c4 <_svfiprintf_r>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	b01c      	add	sp, #112	; 0x70
 8008da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dac:	b003      	add	sp, #12
 8008dae:	4770      	bx	lr
 8008db0:	200001c8 	.word	0x200001c8
 8008db4:	ffff0208 	.word	0xffff0208

08008db8 <memset>:
 8008db8:	4402      	add	r2, r0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d100      	bne.n	8008dc2 <memset+0xa>
 8008dc0:	4770      	bx	lr
 8008dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc6:	e7f9      	b.n	8008dbc <memset+0x4>

08008dc8 <__errno>:
 8008dc8:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <__errno+0x8>)
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	200001c8 	.word	0x200001c8

08008dd4 <__libc_init_array>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4d0d      	ldr	r5, [pc, #52]	; (8008e0c <__libc_init_array+0x38>)
 8008dd8:	4c0d      	ldr	r4, [pc, #52]	; (8008e10 <__libc_init_array+0x3c>)
 8008dda:	1b64      	subs	r4, r4, r5
 8008ddc:	10a4      	asrs	r4, r4, #2
 8008dde:	2600      	movs	r6, #0
 8008de0:	42a6      	cmp	r6, r4
 8008de2:	d109      	bne.n	8008df8 <__libc_init_array+0x24>
 8008de4:	4d0b      	ldr	r5, [pc, #44]	; (8008e14 <__libc_init_array+0x40>)
 8008de6:	4c0c      	ldr	r4, [pc, #48]	; (8008e18 <__libc_init_array+0x44>)
 8008de8:	f000 fc6a 	bl	80096c0 <_init>
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	2600      	movs	r6, #0
 8008df2:	42a6      	cmp	r6, r4
 8008df4:	d105      	bne.n	8008e02 <__libc_init_array+0x2e>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfc:	4798      	blx	r3
 8008dfe:	3601      	adds	r6, #1
 8008e00:	e7ee      	b.n	8008de0 <__libc_init_array+0xc>
 8008e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e06:	4798      	blx	r3
 8008e08:	3601      	adds	r6, #1
 8008e0a:	e7f2      	b.n	8008df2 <__libc_init_array+0x1e>
 8008e0c:	080097d0 	.word	0x080097d0
 8008e10:	080097d0 	.word	0x080097d0
 8008e14:	080097d0 	.word	0x080097d0
 8008e18:	080097d4 	.word	0x080097d4

08008e1c <__retarget_lock_acquire_recursive>:
 8008e1c:	4770      	bx	lr

08008e1e <__retarget_lock_release_recursive>:
 8008e1e:	4770      	bx	lr

08008e20 <_free_r>:
 8008e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e22:	2900      	cmp	r1, #0
 8008e24:	d044      	beq.n	8008eb0 <_free_r+0x90>
 8008e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e2a:	9001      	str	r0, [sp, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e32:	bfb8      	it	lt
 8008e34:	18e4      	addlt	r4, r4, r3
 8008e36:	f000 f8df 	bl	8008ff8 <__malloc_lock>
 8008e3a:	4a1e      	ldr	r2, [pc, #120]	; (8008eb4 <_free_r+0x94>)
 8008e3c:	9801      	ldr	r0, [sp, #4]
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	b933      	cbnz	r3, 8008e50 <_free_r+0x30>
 8008e42:	6063      	str	r3, [r4, #4]
 8008e44:	6014      	str	r4, [r2, #0]
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e4c:	f000 b8da 	b.w	8009004 <__malloc_unlock>
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	d908      	bls.n	8008e66 <_free_r+0x46>
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1961      	adds	r1, r4, r5
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	bf01      	itttt	eq
 8008e5c:	6819      	ldreq	r1, [r3, #0]
 8008e5e:	685b      	ldreq	r3, [r3, #4]
 8008e60:	1949      	addeq	r1, r1, r5
 8008e62:	6021      	streq	r1, [r4, #0]
 8008e64:	e7ed      	b.n	8008e42 <_free_r+0x22>
 8008e66:	461a      	mov	r2, r3
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	b10b      	cbz	r3, 8008e70 <_free_r+0x50>
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d9fa      	bls.n	8008e66 <_free_r+0x46>
 8008e70:	6811      	ldr	r1, [r2, #0]
 8008e72:	1855      	adds	r5, r2, r1
 8008e74:	42a5      	cmp	r5, r4
 8008e76:	d10b      	bne.n	8008e90 <_free_r+0x70>
 8008e78:	6824      	ldr	r4, [r4, #0]
 8008e7a:	4421      	add	r1, r4
 8008e7c:	1854      	adds	r4, r2, r1
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	6011      	str	r1, [r2, #0]
 8008e82:	d1e0      	bne.n	8008e46 <_free_r+0x26>
 8008e84:	681c      	ldr	r4, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	6053      	str	r3, [r2, #4]
 8008e8a:	440c      	add	r4, r1
 8008e8c:	6014      	str	r4, [r2, #0]
 8008e8e:	e7da      	b.n	8008e46 <_free_r+0x26>
 8008e90:	d902      	bls.n	8008e98 <_free_r+0x78>
 8008e92:	230c      	movs	r3, #12
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	e7d6      	b.n	8008e46 <_free_r+0x26>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	bf04      	itt	eq
 8008ea0:	6819      	ldreq	r1, [r3, #0]
 8008ea2:	685b      	ldreq	r3, [r3, #4]
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	bf04      	itt	eq
 8008ea8:	1949      	addeq	r1, r1, r5
 8008eaa:	6021      	streq	r1, [r4, #0]
 8008eac:	6054      	str	r4, [r2, #4]
 8008eae:	e7ca      	b.n	8008e46 <_free_r+0x26>
 8008eb0:	b003      	add	sp, #12
 8008eb2:	bd30      	pop	{r4, r5, pc}
 8008eb4:	20001540 	.word	0x20001540

08008eb8 <sbrk_aligned>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4e0e      	ldr	r6, [pc, #56]	; (8008ef4 <sbrk_aligned+0x3c>)
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	6831      	ldr	r1, [r6, #0]
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	b911      	cbnz	r1, 8008eca <sbrk_aligned+0x12>
 8008ec4:	f000 fba6 	bl	8009614 <_sbrk_r>
 8008ec8:	6030      	str	r0, [r6, #0]
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 fba1 	bl	8009614 <_sbrk_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d00a      	beq.n	8008eec <sbrk_aligned+0x34>
 8008ed6:	1cc4      	adds	r4, r0, #3
 8008ed8:	f024 0403 	bic.w	r4, r4, #3
 8008edc:	42a0      	cmp	r0, r4
 8008ede:	d007      	beq.n	8008ef0 <sbrk_aligned+0x38>
 8008ee0:	1a21      	subs	r1, r4, r0
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 fb96 	bl	8009614 <_sbrk_r>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d101      	bne.n	8008ef0 <sbrk_aligned+0x38>
 8008eec:	f04f 34ff 	mov.w	r4, #4294967295
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	20001544 	.word	0x20001544

08008ef8 <_malloc_r>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	1ccd      	adds	r5, r1, #3
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	db01      	blt.n	8008f14 <_malloc_r+0x1c>
 8008f10:	42a9      	cmp	r1, r5
 8008f12:	d905      	bls.n	8008f20 <_malloc_r+0x28>
 8008f14:	230c      	movs	r3, #12
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	2600      	movs	r6, #0
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ff4 <_malloc_r+0xfc>
 8008f24:	f000 f868 	bl	8008ff8 <__malloc_lock>
 8008f28:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	bb5c      	cbnz	r4, 8008f88 <_malloc_r+0x90>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ffc0 	bl	8008eb8 <sbrk_aligned>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	d155      	bne.n	8008fea <_malloc_r+0xf2>
 8008f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008f42:	4626      	mov	r6, r4
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	d145      	bne.n	8008fd4 <_malloc_r+0xdc>
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d048      	beq.n	8008fde <_malloc_r+0xe6>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4638      	mov	r0, r7
 8008f52:	eb04 0903 	add.w	r9, r4, r3
 8008f56:	f000 fb5d 	bl	8009614 <_sbrk_r>
 8008f5a:	4581      	cmp	r9, r0
 8008f5c:	d13f      	bne.n	8008fde <_malloc_r+0xe6>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	1a6d      	subs	r5, r5, r1
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa7 	bl	8008eb8 <sbrk_aligned>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d037      	beq.n	8008fde <_malloc_r+0xe6>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	442b      	add	r3, r5
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d038      	beq.n	8008fee <_malloc_r+0xf6>
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	42a2      	cmp	r2, r4
 8008f80:	d12b      	bne.n	8008fda <_malloc_r+0xe2>
 8008f82:	2200      	movs	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	e00f      	b.n	8008fa8 <_malloc_r+0xb0>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	d41f      	bmi.n	8008fce <_malloc_r+0xd6>
 8008f8e:	2a0b      	cmp	r2, #11
 8008f90:	d917      	bls.n	8008fc2 <_malloc_r+0xca>
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	6059      	strne	r1, [r3, #4]
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	bf08      	it	eq
 8008fa0:	f8c8 1000 	streq.w	r1, [r8]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f104 060b 	add.w	r6, r4, #11
 8008fae:	f000 f829 	bl	8009004 <__malloc_unlock>
 8008fb2:	f026 0607 	bic.w	r6, r6, #7
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	1af2      	subs	r2, r6, r3
 8008fba:	d0ae      	beq.n	8008f1a <_malloc_r+0x22>
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	50a3      	str	r3, [r4, r2]
 8008fc0:	e7ab      	b.n	8008f1a <_malloc_r+0x22>
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6862      	ldr	r2, [r4, #4]
 8008fc6:	d1dd      	bne.n	8008f84 <_malloc_r+0x8c>
 8008fc8:	f8c8 2000 	str.w	r2, [r8]
 8008fcc:	e7ec      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fce:	4623      	mov	r3, r4
 8008fd0:	6864      	ldr	r4, [r4, #4]
 8008fd2:	e7ac      	b.n	8008f2e <_malloc_r+0x36>
 8008fd4:	4634      	mov	r4, r6
 8008fd6:	6876      	ldr	r6, [r6, #4]
 8008fd8:	e7b4      	b.n	8008f44 <_malloc_r+0x4c>
 8008fda:	4613      	mov	r3, r2
 8008fdc:	e7cc      	b.n	8008f78 <_malloc_r+0x80>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f000 f80e 	bl	8009004 <__malloc_unlock>
 8008fe8:	e797      	b.n	8008f1a <_malloc_r+0x22>
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	e7dc      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fee:	605b      	str	r3, [r3, #4]
 8008ff0:	deff      	udf	#255	; 0xff
 8008ff2:	bf00      	nop
 8008ff4:	20001540 	.word	0x20001540

08008ff8 <__malloc_lock>:
 8008ff8:	4801      	ldr	r0, [pc, #4]	; (8009000 <__malloc_lock+0x8>)
 8008ffa:	f7ff bf0f 	b.w	8008e1c <__retarget_lock_acquire_recursive>
 8008ffe:	bf00      	nop
 8009000:	2000153c 	.word	0x2000153c

08009004 <__malloc_unlock>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__malloc_unlock+0x8>)
 8009006:	f7ff bf0a 	b.w	8008e1e <__retarget_lock_release_recursive>
 800900a:	bf00      	nop
 800900c:	2000153c 	.word	0x2000153c

08009010 <__ssputs_r>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	688e      	ldr	r6, [r1, #8]
 8009016:	461f      	mov	r7, r3
 8009018:	42be      	cmp	r6, r7
 800901a:	680b      	ldr	r3, [r1, #0]
 800901c:	4682      	mov	sl, r0
 800901e:	460c      	mov	r4, r1
 8009020:	4690      	mov	r8, r2
 8009022:	d82c      	bhi.n	800907e <__ssputs_r+0x6e>
 8009024:	898a      	ldrh	r2, [r1, #12]
 8009026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800902a:	d026      	beq.n	800907a <__ssputs_r+0x6a>
 800902c:	6965      	ldr	r5, [r4, #20]
 800902e:	6909      	ldr	r1, [r1, #16]
 8009030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009034:	eba3 0901 	sub.w	r9, r3, r1
 8009038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800903c:	1c7b      	adds	r3, r7, #1
 800903e:	444b      	add	r3, r9
 8009040:	106d      	asrs	r5, r5, #1
 8009042:	429d      	cmp	r5, r3
 8009044:	bf38      	it	cc
 8009046:	461d      	movcc	r5, r3
 8009048:	0553      	lsls	r3, r2, #21
 800904a:	d527      	bpl.n	800909c <__ssputs_r+0x8c>
 800904c:	4629      	mov	r1, r5
 800904e:	f7ff ff53 	bl	8008ef8 <_malloc_r>
 8009052:	4606      	mov	r6, r0
 8009054:	b360      	cbz	r0, 80090b0 <__ssputs_r+0xa0>
 8009056:	6921      	ldr	r1, [r4, #16]
 8009058:	464a      	mov	r2, r9
 800905a:	f000 faeb 	bl	8009634 <memcpy>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	6126      	str	r6, [r4, #16]
 800906c:	6165      	str	r5, [r4, #20]
 800906e:	444e      	add	r6, r9
 8009070:	eba5 0509 	sub.w	r5, r5, r9
 8009074:	6026      	str	r6, [r4, #0]
 8009076:	60a5      	str	r5, [r4, #8]
 8009078:	463e      	mov	r6, r7
 800907a:	42be      	cmp	r6, r7
 800907c:	d900      	bls.n	8009080 <__ssputs_r+0x70>
 800907e:	463e      	mov	r6, r7
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	4632      	mov	r2, r6
 8009084:	4641      	mov	r1, r8
 8009086:	f000 faab 	bl	80095e0 <memmove>
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	1b9b      	subs	r3, r3, r6
 800908e:	60a3      	str	r3, [r4, #8]
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	4433      	add	r3, r6
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	2000      	movs	r0, #0
 8009098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909c:	462a      	mov	r2, r5
 800909e:	f000 fad7 	bl	8009650 <_realloc_r>
 80090a2:	4606      	mov	r6, r0
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d1e0      	bne.n	800906a <__ssputs_r+0x5a>
 80090a8:	6921      	ldr	r1, [r4, #16]
 80090aa:	4650      	mov	r0, sl
 80090ac:	f7ff feb8 	bl	8008e20 <_free_r>
 80090b0:	230c      	movs	r3, #12
 80090b2:	f8ca 3000 	str.w	r3, [sl]
 80090b6:	89a3      	ldrh	r3, [r4, #12]
 80090b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090bc:	81a3      	strh	r3, [r4, #12]
 80090be:	f04f 30ff 	mov.w	r0, #4294967295
 80090c2:	e7e9      	b.n	8009098 <__ssputs_r+0x88>

080090c4 <_svfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	4698      	mov	r8, r3
 80090ca:	898b      	ldrh	r3, [r1, #12]
 80090cc:	061b      	lsls	r3, r3, #24
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	4607      	mov	r7, r0
 80090d2:	460d      	mov	r5, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	d50e      	bpl.n	80090f6 <_svfiprintf_r+0x32>
 80090d8:	690b      	ldr	r3, [r1, #16]
 80090da:	b963      	cbnz	r3, 80090f6 <_svfiprintf_r+0x32>
 80090dc:	2140      	movs	r1, #64	; 0x40
 80090de:	f7ff ff0b 	bl	8008ef8 <_malloc_r>
 80090e2:	6028      	str	r0, [r5, #0]
 80090e4:	6128      	str	r0, [r5, #16]
 80090e6:	b920      	cbnz	r0, 80090f2 <_svfiprintf_r+0x2e>
 80090e8:	230c      	movs	r3, #12
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295
 80090f0:	e0d0      	b.n	8009294 <_svfiprintf_r+0x1d0>
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	616b      	str	r3, [r5, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9309      	str	r3, [sp, #36]	; 0x24
 80090fa:	2320      	movs	r3, #32
 80090fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009100:	f8cd 800c 	str.w	r8, [sp, #12]
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092ac <_svfiprintf_r+0x1e8>
 800910a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800910e:	f04f 0901 	mov.w	r9, #1
 8009112:	4623      	mov	r3, r4
 8009114:	469a      	mov	sl, r3
 8009116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800911a:	b10a      	cbz	r2, 8009120 <_svfiprintf_r+0x5c>
 800911c:	2a25      	cmp	r2, #37	; 0x25
 800911e:	d1f9      	bne.n	8009114 <_svfiprintf_r+0x50>
 8009120:	ebba 0b04 	subs.w	fp, sl, r4
 8009124:	d00b      	beq.n	800913e <_svfiprintf_r+0x7a>
 8009126:	465b      	mov	r3, fp
 8009128:	4622      	mov	r2, r4
 800912a:	4629      	mov	r1, r5
 800912c:	4638      	mov	r0, r7
 800912e:	f7ff ff6f 	bl	8009010 <__ssputs_r>
 8009132:	3001      	adds	r0, #1
 8009134:	f000 80a9 	beq.w	800928a <_svfiprintf_r+0x1c6>
 8009138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800913a:	445a      	add	r2, fp
 800913c:	9209      	str	r2, [sp, #36]	; 0x24
 800913e:	f89a 3000 	ldrb.w	r3, [sl]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80a1 	beq.w	800928a <_svfiprintf_r+0x1c6>
 8009148:	2300      	movs	r3, #0
 800914a:	f04f 32ff 	mov.w	r2, #4294967295
 800914e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009152:	f10a 0a01 	add.w	sl, sl, #1
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	9307      	str	r3, [sp, #28]
 800915a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800915e:	931a      	str	r3, [sp, #104]	; 0x68
 8009160:	4654      	mov	r4, sl
 8009162:	2205      	movs	r2, #5
 8009164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009168:	4850      	ldr	r0, [pc, #320]	; (80092ac <_svfiprintf_r+0x1e8>)
 800916a:	f7f7 f839 	bl	80001e0 <memchr>
 800916e:	9a04      	ldr	r2, [sp, #16]
 8009170:	b9d8      	cbnz	r0, 80091aa <_svfiprintf_r+0xe6>
 8009172:	06d0      	lsls	r0, r2, #27
 8009174:	bf44      	itt	mi
 8009176:	2320      	movmi	r3, #32
 8009178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800917c:	0711      	lsls	r1, r2, #28
 800917e:	bf44      	itt	mi
 8009180:	232b      	movmi	r3, #43	; 0x2b
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009186:	f89a 3000 	ldrb.w	r3, [sl]
 800918a:	2b2a      	cmp	r3, #42	; 0x2a
 800918c:	d015      	beq.n	80091ba <_svfiprintf_r+0xf6>
 800918e:	9a07      	ldr	r2, [sp, #28]
 8009190:	4654      	mov	r4, sl
 8009192:	2000      	movs	r0, #0
 8009194:	f04f 0c0a 	mov.w	ip, #10
 8009198:	4621      	mov	r1, r4
 800919a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800919e:	3b30      	subs	r3, #48	; 0x30
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d94d      	bls.n	8009240 <_svfiprintf_r+0x17c>
 80091a4:	b1b0      	cbz	r0, 80091d4 <_svfiprintf_r+0x110>
 80091a6:	9207      	str	r2, [sp, #28]
 80091a8:	e014      	b.n	80091d4 <_svfiprintf_r+0x110>
 80091aa:	eba0 0308 	sub.w	r3, r0, r8
 80091ae:	fa09 f303 	lsl.w	r3, r9, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	46a2      	mov	sl, r4
 80091b8:	e7d2      	b.n	8009160 <_svfiprintf_r+0x9c>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d19      	adds	r1, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9103      	str	r1, [sp, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfbb      	ittet	lt
 80091c6:	425b      	neglt	r3, r3
 80091c8:	f042 0202 	orrlt.w	r2, r2, #2
 80091cc:	9307      	strge	r3, [sp, #28]
 80091ce:	9307      	strlt	r3, [sp, #28]
 80091d0:	bfb8      	it	lt
 80091d2:	9204      	strlt	r2, [sp, #16]
 80091d4:	7823      	ldrb	r3, [r4, #0]
 80091d6:	2b2e      	cmp	r3, #46	; 0x2e
 80091d8:	d10c      	bne.n	80091f4 <_svfiprintf_r+0x130>
 80091da:	7863      	ldrb	r3, [r4, #1]
 80091dc:	2b2a      	cmp	r3, #42	; 0x2a
 80091de:	d134      	bne.n	800924a <_svfiprintf_r+0x186>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9203      	str	r2, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfb8      	it	lt
 80091ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80091f0:	3402      	adds	r4, #2
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092bc <_svfiprintf_r+0x1f8>
 80091f8:	7821      	ldrb	r1, [r4, #0]
 80091fa:	2203      	movs	r2, #3
 80091fc:	4650      	mov	r0, sl
 80091fe:	f7f6 ffef 	bl	80001e0 <memchr>
 8009202:	b138      	cbz	r0, 8009214 <_svfiprintf_r+0x150>
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	eba0 000a 	sub.w	r0, r0, sl
 800920a:	2240      	movs	r2, #64	; 0x40
 800920c:	4082      	lsls	r2, r0
 800920e:	4313      	orrs	r3, r2
 8009210:	3401      	adds	r4, #1
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009218:	4825      	ldr	r0, [pc, #148]	; (80092b0 <_svfiprintf_r+0x1ec>)
 800921a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800921e:	2206      	movs	r2, #6
 8009220:	f7f6 ffde 	bl	80001e0 <memchr>
 8009224:	2800      	cmp	r0, #0
 8009226:	d038      	beq.n	800929a <_svfiprintf_r+0x1d6>
 8009228:	4b22      	ldr	r3, [pc, #136]	; (80092b4 <_svfiprintf_r+0x1f0>)
 800922a:	bb1b      	cbnz	r3, 8009274 <_svfiprintf_r+0x1b0>
 800922c:	9b03      	ldr	r3, [sp, #12]
 800922e:	3307      	adds	r3, #7
 8009230:	f023 0307 	bic.w	r3, r3, #7
 8009234:	3308      	adds	r3, #8
 8009236:	9303      	str	r3, [sp, #12]
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	4433      	add	r3, r6
 800923c:	9309      	str	r3, [sp, #36]	; 0x24
 800923e:	e768      	b.n	8009112 <_svfiprintf_r+0x4e>
 8009240:	fb0c 3202 	mla	r2, ip, r2, r3
 8009244:	460c      	mov	r4, r1
 8009246:	2001      	movs	r0, #1
 8009248:	e7a6      	b.n	8009198 <_svfiprintf_r+0xd4>
 800924a:	2300      	movs	r3, #0
 800924c:	3401      	adds	r4, #1
 800924e:	9305      	str	r3, [sp, #20]
 8009250:	4619      	mov	r1, r3
 8009252:	f04f 0c0a 	mov.w	ip, #10
 8009256:	4620      	mov	r0, r4
 8009258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800925c:	3a30      	subs	r2, #48	; 0x30
 800925e:	2a09      	cmp	r2, #9
 8009260:	d903      	bls.n	800926a <_svfiprintf_r+0x1a6>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0c6      	beq.n	80091f4 <_svfiprintf_r+0x130>
 8009266:	9105      	str	r1, [sp, #20]
 8009268:	e7c4      	b.n	80091f4 <_svfiprintf_r+0x130>
 800926a:	fb0c 2101 	mla	r1, ip, r1, r2
 800926e:	4604      	mov	r4, r0
 8009270:	2301      	movs	r3, #1
 8009272:	e7f0      	b.n	8009256 <_svfiprintf_r+0x192>
 8009274:	ab03      	add	r3, sp, #12
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	462a      	mov	r2, r5
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <_svfiprintf_r+0x1f4>)
 800927c:	a904      	add	r1, sp, #16
 800927e:	4638      	mov	r0, r7
 8009280:	f3af 8000 	nop.w
 8009284:	1c42      	adds	r2, r0, #1
 8009286:	4606      	mov	r6, r0
 8009288:	d1d6      	bne.n	8009238 <_svfiprintf_r+0x174>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	065b      	lsls	r3, r3, #25
 800928e:	f53f af2d 	bmi.w	80090ec <_svfiprintf_r+0x28>
 8009292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009294:	b01d      	add	sp, #116	; 0x74
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	ab03      	add	r3, sp, #12
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	462a      	mov	r2, r5
 80092a0:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <_svfiprintf_r+0x1f4>)
 80092a2:	a904      	add	r1, sp, #16
 80092a4:	4638      	mov	r0, r7
 80092a6:	f000 f879 	bl	800939c <_printf_i>
 80092aa:	e7eb      	b.n	8009284 <_svfiprintf_r+0x1c0>
 80092ac:	0800979c 	.word	0x0800979c
 80092b0:	080097a6 	.word	0x080097a6
 80092b4:	00000000 	.word	0x00000000
 80092b8:	08009011 	.word	0x08009011
 80092bc:	080097a2 	.word	0x080097a2

080092c0 <_printf_common>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	4616      	mov	r6, r2
 80092c6:	4699      	mov	r9, r3
 80092c8:	688a      	ldr	r2, [r1, #8]
 80092ca:	690b      	ldr	r3, [r1, #16]
 80092cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092d0:	4293      	cmp	r3, r2
 80092d2:	bfb8      	it	lt
 80092d4:	4613      	movlt	r3, r2
 80092d6:	6033      	str	r3, [r6, #0]
 80092d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092dc:	4607      	mov	r7, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	b10a      	cbz	r2, 80092e6 <_printf_common+0x26>
 80092e2:	3301      	adds	r3, #1
 80092e4:	6033      	str	r3, [r6, #0]
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	0699      	lsls	r1, r3, #26
 80092ea:	bf42      	ittt	mi
 80092ec:	6833      	ldrmi	r3, [r6, #0]
 80092ee:	3302      	addmi	r3, #2
 80092f0:	6033      	strmi	r3, [r6, #0]
 80092f2:	6825      	ldr	r5, [r4, #0]
 80092f4:	f015 0506 	ands.w	r5, r5, #6
 80092f8:	d106      	bne.n	8009308 <_printf_common+0x48>
 80092fa:	f104 0a19 	add.w	sl, r4, #25
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	6832      	ldr	r2, [r6, #0]
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	42ab      	cmp	r3, r5
 8009306:	dc26      	bgt.n	8009356 <_printf_common+0x96>
 8009308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800930c:	1e13      	subs	r3, r2, #0
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	bf18      	it	ne
 8009312:	2301      	movne	r3, #1
 8009314:	0692      	lsls	r2, r2, #26
 8009316:	d42b      	bmi.n	8009370 <_printf_common+0xb0>
 8009318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800931c:	4649      	mov	r1, r9
 800931e:	4638      	mov	r0, r7
 8009320:	47c0      	blx	r8
 8009322:	3001      	adds	r0, #1
 8009324:	d01e      	beq.n	8009364 <_printf_common+0xa4>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	6922      	ldr	r2, [r4, #16]
 800932a:	f003 0306 	and.w	r3, r3, #6
 800932e:	2b04      	cmp	r3, #4
 8009330:	bf02      	ittt	eq
 8009332:	68e5      	ldreq	r5, [r4, #12]
 8009334:	6833      	ldreq	r3, [r6, #0]
 8009336:	1aed      	subeq	r5, r5, r3
 8009338:	68a3      	ldr	r3, [r4, #8]
 800933a:	bf0c      	ite	eq
 800933c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009340:	2500      	movne	r5, #0
 8009342:	4293      	cmp	r3, r2
 8009344:	bfc4      	itt	gt
 8009346:	1a9b      	subgt	r3, r3, r2
 8009348:	18ed      	addgt	r5, r5, r3
 800934a:	2600      	movs	r6, #0
 800934c:	341a      	adds	r4, #26
 800934e:	42b5      	cmp	r5, r6
 8009350:	d11a      	bne.n	8009388 <_printf_common+0xc8>
 8009352:	2000      	movs	r0, #0
 8009354:	e008      	b.n	8009368 <_printf_common+0xa8>
 8009356:	2301      	movs	r3, #1
 8009358:	4652      	mov	r2, sl
 800935a:	4649      	mov	r1, r9
 800935c:	4638      	mov	r0, r7
 800935e:	47c0      	blx	r8
 8009360:	3001      	adds	r0, #1
 8009362:	d103      	bne.n	800936c <_printf_common+0xac>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800936c:	3501      	adds	r5, #1
 800936e:	e7c6      	b.n	80092fe <_printf_common+0x3e>
 8009370:	18e1      	adds	r1, r4, r3
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	2030      	movs	r0, #48	; 0x30
 8009376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800937a:	4422      	add	r2, r4
 800937c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009384:	3302      	adds	r3, #2
 8009386:	e7c7      	b.n	8009318 <_printf_common+0x58>
 8009388:	2301      	movs	r3, #1
 800938a:	4622      	mov	r2, r4
 800938c:	4649      	mov	r1, r9
 800938e:	4638      	mov	r0, r7
 8009390:	47c0      	blx	r8
 8009392:	3001      	adds	r0, #1
 8009394:	d0e6      	beq.n	8009364 <_printf_common+0xa4>
 8009396:	3601      	adds	r6, #1
 8009398:	e7d9      	b.n	800934e <_printf_common+0x8e>
	...

0800939c <_printf_i>:
 800939c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a0:	7e0f      	ldrb	r7, [r1, #24]
 80093a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093a4:	2f78      	cmp	r7, #120	; 0x78
 80093a6:	4691      	mov	r9, r2
 80093a8:	4680      	mov	r8, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	469a      	mov	sl, r3
 80093ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093b2:	d807      	bhi.n	80093c4 <_printf_i+0x28>
 80093b4:	2f62      	cmp	r7, #98	; 0x62
 80093b6:	d80a      	bhi.n	80093ce <_printf_i+0x32>
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	f000 80d4 	beq.w	8009566 <_printf_i+0x1ca>
 80093be:	2f58      	cmp	r7, #88	; 0x58
 80093c0:	f000 80c0 	beq.w	8009544 <_printf_i+0x1a8>
 80093c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093cc:	e03a      	b.n	8009444 <_printf_i+0xa8>
 80093ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093d2:	2b15      	cmp	r3, #21
 80093d4:	d8f6      	bhi.n	80093c4 <_printf_i+0x28>
 80093d6:	a101      	add	r1, pc, #4	; (adr r1, 80093dc <_printf_i+0x40>)
 80093d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093dc:	08009435 	.word	0x08009435
 80093e0:	08009449 	.word	0x08009449
 80093e4:	080093c5 	.word	0x080093c5
 80093e8:	080093c5 	.word	0x080093c5
 80093ec:	080093c5 	.word	0x080093c5
 80093f0:	080093c5 	.word	0x080093c5
 80093f4:	08009449 	.word	0x08009449
 80093f8:	080093c5 	.word	0x080093c5
 80093fc:	080093c5 	.word	0x080093c5
 8009400:	080093c5 	.word	0x080093c5
 8009404:	080093c5 	.word	0x080093c5
 8009408:	0800954d 	.word	0x0800954d
 800940c:	08009475 	.word	0x08009475
 8009410:	08009507 	.word	0x08009507
 8009414:	080093c5 	.word	0x080093c5
 8009418:	080093c5 	.word	0x080093c5
 800941c:	0800956f 	.word	0x0800956f
 8009420:	080093c5 	.word	0x080093c5
 8009424:	08009475 	.word	0x08009475
 8009428:	080093c5 	.word	0x080093c5
 800942c:	080093c5 	.word	0x080093c5
 8009430:	0800950f 	.word	0x0800950f
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	1d1a      	adds	r2, r3, #4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009444:	2301      	movs	r3, #1
 8009446:	e09f      	b.n	8009588 <_printf_i+0x1ec>
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	0607      	lsls	r7, r0, #24
 800944e:	f103 0104 	add.w	r1, r3, #4
 8009452:	6029      	str	r1, [r5, #0]
 8009454:	d501      	bpl.n	800945a <_printf_i+0xbe>
 8009456:	681e      	ldr	r6, [r3, #0]
 8009458:	e003      	b.n	8009462 <_printf_i+0xc6>
 800945a:	0646      	lsls	r6, r0, #25
 800945c:	d5fb      	bpl.n	8009456 <_printf_i+0xba>
 800945e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009462:	2e00      	cmp	r6, #0
 8009464:	da03      	bge.n	800946e <_printf_i+0xd2>
 8009466:	232d      	movs	r3, #45	; 0x2d
 8009468:	4276      	negs	r6, r6
 800946a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800946e:	485a      	ldr	r0, [pc, #360]	; (80095d8 <_printf_i+0x23c>)
 8009470:	230a      	movs	r3, #10
 8009472:	e012      	b.n	800949a <_printf_i+0xfe>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	6820      	ldr	r0, [r4, #0]
 8009478:	1d19      	adds	r1, r3, #4
 800947a:	6029      	str	r1, [r5, #0]
 800947c:	0605      	lsls	r5, r0, #24
 800947e:	d501      	bpl.n	8009484 <_printf_i+0xe8>
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	e002      	b.n	800948a <_printf_i+0xee>
 8009484:	0641      	lsls	r1, r0, #25
 8009486:	d5fb      	bpl.n	8009480 <_printf_i+0xe4>
 8009488:	881e      	ldrh	r6, [r3, #0]
 800948a:	4853      	ldr	r0, [pc, #332]	; (80095d8 <_printf_i+0x23c>)
 800948c:	2f6f      	cmp	r7, #111	; 0x6f
 800948e:	bf0c      	ite	eq
 8009490:	2308      	moveq	r3, #8
 8009492:	230a      	movne	r3, #10
 8009494:	2100      	movs	r1, #0
 8009496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800949a:	6865      	ldr	r5, [r4, #4]
 800949c:	60a5      	str	r5, [r4, #8]
 800949e:	2d00      	cmp	r5, #0
 80094a0:	bfa2      	ittt	ge
 80094a2:	6821      	ldrge	r1, [r4, #0]
 80094a4:	f021 0104 	bicge.w	r1, r1, #4
 80094a8:	6021      	strge	r1, [r4, #0]
 80094aa:	b90e      	cbnz	r6, 80094b0 <_printf_i+0x114>
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	d04b      	beq.n	8009548 <_printf_i+0x1ac>
 80094b0:	4615      	mov	r5, r2
 80094b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094b6:	fb03 6711 	mls	r7, r3, r1, r6
 80094ba:	5dc7      	ldrb	r7, [r0, r7]
 80094bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094c0:	4637      	mov	r7, r6
 80094c2:	42bb      	cmp	r3, r7
 80094c4:	460e      	mov	r6, r1
 80094c6:	d9f4      	bls.n	80094b2 <_printf_i+0x116>
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d10b      	bne.n	80094e4 <_printf_i+0x148>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	07de      	lsls	r6, r3, #31
 80094d0:	d508      	bpl.n	80094e4 <_printf_i+0x148>
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	6861      	ldr	r1, [r4, #4]
 80094d6:	4299      	cmp	r1, r3
 80094d8:	bfde      	ittt	le
 80094da:	2330      	movle	r3, #48	; 0x30
 80094dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094e4:	1b52      	subs	r2, r2, r5
 80094e6:	6122      	str	r2, [r4, #16]
 80094e8:	f8cd a000 	str.w	sl, [sp]
 80094ec:	464b      	mov	r3, r9
 80094ee:	aa03      	add	r2, sp, #12
 80094f0:	4621      	mov	r1, r4
 80094f2:	4640      	mov	r0, r8
 80094f4:	f7ff fee4 	bl	80092c0 <_printf_common>
 80094f8:	3001      	adds	r0, #1
 80094fa:	d14a      	bne.n	8009592 <_printf_i+0x1f6>
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	b004      	add	sp, #16
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	f043 0320 	orr.w	r3, r3, #32
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	4833      	ldr	r0, [pc, #204]	; (80095dc <_printf_i+0x240>)
 8009510:	2778      	movs	r7, #120	; 0x78
 8009512:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	061f      	lsls	r7, r3, #24
 800951c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009520:	d402      	bmi.n	8009528 <_printf_i+0x18c>
 8009522:	065f      	lsls	r7, r3, #25
 8009524:	bf48      	it	mi
 8009526:	b2b6      	uxthmi	r6, r6
 8009528:	07df      	lsls	r7, r3, #31
 800952a:	bf48      	it	mi
 800952c:	f043 0320 	orrmi.w	r3, r3, #32
 8009530:	6029      	str	r1, [r5, #0]
 8009532:	bf48      	it	mi
 8009534:	6023      	strmi	r3, [r4, #0]
 8009536:	b91e      	cbnz	r6, 8009540 <_printf_i+0x1a4>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	2310      	movs	r3, #16
 8009542:	e7a7      	b.n	8009494 <_printf_i+0xf8>
 8009544:	4824      	ldr	r0, [pc, #144]	; (80095d8 <_printf_i+0x23c>)
 8009546:	e7e4      	b.n	8009512 <_printf_i+0x176>
 8009548:	4615      	mov	r5, r2
 800954a:	e7bd      	b.n	80094c8 <_printf_i+0x12c>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	6826      	ldr	r6, [r4, #0]
 8009550:	6961      	ldr	r1, [r4, #20]
 8009552:	1d18      	adds	r0, r3, #4
 8009554:	6028      	str	r0, [r5, #0]
 8009556:	0635      	lsls	r5, r6, #24
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	d501      	bpl.n	8009560 <_printf_i+0x1c4>
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	e002      	b.n	8009566 <_printf_i+0x1ca>
 8009560:	0670      	lsls	r0, r6, #25
 8009562:	d5fb      	bpl.n	800955c <_printf_i+0x1c0>
 8009564:	8019      	strh	r1, [r3, #0]
 8009566:	2300      	movs	r3, #0
 8009568:	6123      	str	r3, [r4, #16]
 800956a:	4615      	mov	r5, r2
 800956c:	e7bc      	b.n	80094e8 <_printf_i+0x14c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	1d1a      	adds	r2, r3, #4
 8009572:	602a      	str	r2, [r5, #0]
 8009574:	681d      	ldr	r5, [r3, #0]
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	2100      	movs	r1, #0
 800957a:	4628      	mov	r0, r5
 800957c:	f7f6 fe30 	bl	80001e0 <memchr>
 8009580:	b108      	cbz	r0, 8009586 <_printf_i+0x1ea>
 8009582:	1b40      	subs	r0, r0, r5
 8009584:	6060      	str	r0, [r4, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	2300      	movs	r3, #0
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009590:	e7aa      	b.n	80094e8 <_printf_i+0x14c>
 8009592:	6923      	ldr	r3, [r4, #16]
 8009594:	462a      	mov	r2, r5
 8009596:	4649      	mov	r1, r9
 8009598:	4640      	mov	r0, r8
 800959a:	47d0      	blx	sl
 800959c:	3001      	adds	r0, #1
 800959e:	d0ad      	beq.n	80094fc <_printf_i+0x160>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	079b      	lsls	r3, r3, #30
 80095a4:	d413      	bmi.n	80095ce <_printf_i+0x232>
 80095a6:	68e0      	ldr	r0, [r4, #12]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	4298      	cmp	r0, r3
 80095ac:	bfb8      	it	lt
 80095ae:	4618      	movlt	r0, r3
 80095b0:	e7a6      	b.n	8009500 <_printf_i+0x164>
 80095b2:	2301      	movs	r3, #1
 80095b4:	4632      	mov	r2, r6
 80095b6:	4649      	mov	r1, r9
 80095b8:	4640      	mov	r0, r8
 80095ba:	47d0      	blx	sl
 80095bc:	3001      	adds	r0, #1
 80095be:	d09d      	beq.n	80094fc <_printf_i+0x160>
 80095c0:	3501      	adds	r5, #1
 80095c2:	68e3      	ldr	r3, [r4, #12]
 80095c4:	9903      	ldr	r1, [sp, #12]
 80095c6:	1a5b      	subs	r3, r3, r1
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	dcf2      	bgt.n	80095b2 <_printf_i+0x216>
 80095cc:	e7eb      	b.n	80095a6 <_printf_i+0x20a>
 80095ce:	2500      	movs	r5, #0
 80095d0:	f104 0619 	add.w	r6, r4, #25
 80095d4:	e7f5      	b.n	80095c2 <_printf_i+0x226>
 80095d6:	bf00      	nop
 80095d8:	080097ad 	.word	0x080097ad
 80095dc:	080097be 	.word	0x080097be

080095e0 <memmove>:
 80095e0:	4288      	cmp	r0, r1
 80095e2:	b510      	push	{r4, lr}
 80095e4:	eb01 0402 	add.w	r4, r1, r2
 80095e8:	d902      	bls.n	80095f0 <memmove+0x10>
 80095ea:	4284      	cmp	r4, r0
 80095ec:	4623      	mov	r3, r4
 80095ee:	d807      	bhi.n	8009600 <memmove+0x20>
 80095f0:	1e43      	subs	r3, r0, #1
 80095f2:	42a1      	cmp	r1, r4
 80095f4:	d008      	beq.n	8009608 <memmove+0x28>
 80095f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095fe:	e7f8      	b.n	80095f2 <memmove+0x12>
 8009600:	4402      	add	r2, r0
 8009602:	4601      	mov	r1, r0
 8009604:	428a      	cmp	r2, r1
 8009606:	d100      	bne.n	800960a <memmove+0x2a>
 8009608:	bd10      	pop	{r4, pc}
 800960a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009612:	e7f7      	b.n	8009604 <memmove+0x24>

08009614 <_sbrk_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_sbrk_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f7 f864 	bl	80006ec <_sbrk>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_sbrk_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_sbrk_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	20001538 	.word	0x20001538

08009634 <memcpy>:
 8009634:	440a      	add	r2, r1
 8009636:	4291      	cmp	r1, r2
 8009638:	f100 33ff 	add.w	r3, r0, #4294967295
 800963c:	d100      	bne.n	8009640 <memcpy+0xc>
 800963e:	4770      	bx	lr
 8009640:	b510      	push	{r4, lr}
 8009642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800964a:	4291      	cmp	r1, r2
 800964c:	d1f9      	bne.n	8009642 <memcpy+0xe>
 800964e:	bd10      	pop	{r4, pc}

08009650 <_realloc_r>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	4680      	mov	r8, r0
 8009656:	4614      	mov	r4, r2
 8009658:	460e      	mov	r6, r1
 800965a:	b921      	cbnz	r1, 8009666 <_realloc_r+0x16>
 800965c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	4611      	mov	r1, r2
 8009662:	f7ff bc49 	b.w	8008ef8 <_malloc_r>
 8009666:	b92a      	cbnz	r2, 8009674 <_realloc_r+0x24>
 8009668:	f7ff fbda 	bl	8008e20 <_free_r>
 800966c:	4625      	mov	r5, r4
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009674:	f000 f81b 	bl	80096ae <_malloc_usable_size_r>
 8009678:	4284      	cmp	r4, r0
 800967a:	4607      	mov	r7, r0
 800967c:	d802      	bhi.n	8009684 <_realloc_r+0x34>
 800967e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009682:	d812      	bhi.n	80096aa <_realloc_r+0x5a>
 8009684:	4621      	mov	r1, r4
 8009686:	4640      	mov	r0, r8
 8009688:	f7ff fc36 	bl	8008ef8 <_malloc_r>
 800968c:	4605      	mov	r5, r0
 800968e:	2800      	cmp	r0, #0
 8009690:	d0ed      	beq.n	800966e <_realloc_r+0x1e>
 8009692:	42bc      	cmp	r4, r7
 8009694:	4622      	mov	r2, r4
 8009696:	4631      	mov	r1, r6
 8009698:	bf28      	it	cs
 800969a:	463a      	movcs	r2, r7
 800969c:	f7ff ffca 	bl	8009634 <memcpy>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff fbbc 	bl	8008e20 <_free_r>
 80096a8:	e7e1      	b.n	800966e <_realloc_r+0x1e>
 80096aa:	4635      	mov	r5, r6
 80096ac:	e7df      	b.n	800966e <_realloc_r+0x1e>

080096ae <_malloc_usable_size_r>:
 80096ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b2:	1f18      	subs	r0, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfbc      	itt	lt
 80096b8:	580b      	ldrlt	r3, [r1, r0]
 80096ba:	18c0      	addlt	r0, r0, r3
 80096bc:	4770      	bx	lr
	...

080096c0 <_init>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr

080096cc <_fini>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr
