
multi chnl led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004868  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a20  08004a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a20  08004a20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a20  08004a20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aff2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019fb  00000000  00000000  0002b071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b10  00000000  00000000  0002ca70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000899  00000000  00000000  0002d580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d3e8  00000000  00000000  0002de19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e738  00000000  00000000  0004b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b6fd0  00000000  00000000  00059939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e3c  00000000  00000000  0011090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00113748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049d8 	.word	0x080049d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080049d8 	.word	0x080049d8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb46 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f8ae 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9fe 	bl	80005d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f900 	bl	80003dc <MX_ADC1_Init>
  MX_TIM2_Init();
 80001dc:	f000 f96e 	bl	80004bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e0:	2104      	movs	r1, #4
 80001e2:	4849      	ldr	r0, [pc, #292]	; (8000308 <main+0x140>)
 80001e4:	f003 fc48 	bl	8003a78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001e8:	2108      	movs	r1, #8
 80001ea:	4847      	ldr	r0, [pc, #284]	; (8000308 <main+0x140>)
 80001ec:	f003 fc44 	bl	8003a78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80001f0:	210c      	movs	r1, #12
 80001f2:	4845      	ldr	r0, [pc, #276]	; (8000308 <main+0x140>)
 80001f4:	f003 fc40 	bl	8003a78 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 80001f8:	4b44      	ldr	r3, [pc, #272]	; (800030c <main+0x144>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	605a      	str	r2, [r3, #4]
	  	  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001fe:	4b43      	ldr	r3, [pc, #268]	; (800030c <main+0x144>)
 8000200:	2200      	movs	r2, #0
 8000202:	609a      	str	r2, [r3, #8]
	  	  sConfigPrivate.Channel = ADC_CHANNEL_9;
 8000204:	4b41      	ldr	r3, [pc, #260]	; (800030c <main+0x144>)
 8000206:	2209      	movs	r2, #9
 8000208:	601a      	str	r2, [r3, #0]
	    	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800020a:	4940      	ldr	r1, [pc, #256]	; (800030c <main+0x144>)
 800020c:	4840      	ldr	r0, [pc, #256]	; (8000310 <main+0x148>)
 800020e:	f000 ffeb 	bl	80011e8 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000212:	483f      	ldr	r0, [pc, #252]	; (8000310 <main+0x148>)
 8000214:	f000 fd8c 	bl	8000d30 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021c:	483c      	ldr	r0, [pc, #240]	; (8000310 <main+0x148>)
 800021e:	f000 fed3 	bl	8000fc8 <HAL_ADC_PollForConversion>
	  	  readValue1 = HAL_ADC_GetValue(&hadc1);
 8000222:	483b      	ldr	r0, [pc, #236]	; (8000310 <main+0x148>)
 8000224:	f000 ffd2 	bl	80011cc <HAL_ADC_GetValue>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	4b39      	ldr	r3, [pc, #228]	; (8000314 <main+0x14c>)
 800022e:	801a      	strh	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000230:	4837      	ldr	r0, [pc, #220]	; (8000310 <main+0x148>)
 8000232:	f000 fe93 	bl	8000f5c <HAL_ADC_Stop>
	  	  sConfigPrivate.Channel = ADC_CHANNEL_8;
 8000236:	4b35      	ldr	r3, [pc, #212]	; (800030c <main+0x144>)
 8000238:	2208      	movs	r2, #8
 800023a:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800023c:	4933      	ldr	r1, [pc, #204]	; (800030c <main+0x144>)
 800023e:	4834      	ldr	r0, [pc, #208]	; (8000310 <main+0x148>)
 8000240:	f000 ffd2 	bl	80011e8 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000244:	4832      	ldr	r0, [pc, #200]	; (8000310 <main+0x148>)
 8000246:	f000 fd73 	bl	8000d30 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800024a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800024e:	4830      	ldr	r0, [pc, #192]	; (8000310 <main+0x148>)
 8000250:	f000 feba 	bl	8000fc8 <HAL_ADC_PollForConversion>
	  	  readValue2 = HAL_ADC_GetValue(&hadc1);
 8000254:	482e      	ldr	r0, [pc, #184]	; (8000310 <main+0x148>)
 8000256:	f000 ffb9 	bl	80011cc <HAL_ADC_GetValue>
 800025a:	4603      	mov	r3, r0
 800025c:	b29a      	uxth	r2, r3
 800025e:	4b2e      	ldr	r3, [pc, #184]	; (8000318 <main+0x150>)
 8000260:	801a      	strh	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000262:	482b      	ldr	r0, [pc, #172]	; (8000310 <main+0x148>)
 8000264:	f000 fe7a 	bl	8000f5c <HAL_ADC_Stop>
	  	  sConfigPrivate.Channel = ADC_CHANNEL_7;
 8000268:	4b28      	ldr	r3, [pc, #160]	; (800030c <main+0x144>)
 800026a:	2207      	movs	r2, #7
 800026c:	601a      	str	r2, [r3, #0]
	  	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800026e:	4927      	ldr	r1, [pc, #156]	; (800030c <main+0x144>)
 8000270:	4827      	ldr	r0, [pc, #156]	; (8000310 <main+0x148>)
 8000272:	f000 ffb9 	bl	80011e8 <HAL_ADC_ConfigChannel>
	  	  HAL_ADC_Start(&hadc1);
 8000276:	4826      	ldr	r0, [pc, #152]	; (8000310 <main+0x148>)
 8000278:	f000 fd5a 	bl	8000d30 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1,1000);
 800027c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000280:	4823      	ldr	r0, [pc, #140]	; (8000310 <main+0x148>)
 8000282:	f000 fea1 	bl	8000fc8 <HAL_ADC_PollForConversion>
	  	  readValue3 = HAL_ADC_GetValue(&hadc1);
 8000286:	4822      	ldr	r0, [pc, #136]	; (8000310 <main+0x148>)
 8000288:	f000 ffa0 	bl	80011cc <HAL_ADC_GetValue>
 800028c:	4603      	mov	r3, r0
 800028e:	b29a      	uxth	r2, r3
 8000290:	4b22      	ldr	r3, [pc, #136]	; (800031c <main+0x154>)
 8000292:	801a      	strh	r2, [r3, #0]
	  	  HAL_ADC_Stop(&hadc1);
 8000294:	481e      	ldr	r0, [pc, #120]	; (8000310 <main+0x148>)
 8000296:	f000 fe61 	bl	8000f5c <HAL_ADC_Stop>
	  	  PWM1 = readValue1/7;
 800029a:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <main+0x14c>)
 800029c:	881a      	ldrh	r2, [r3, #0]
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <main+0x158>)
 80002a0:	fba3 1302 	umull	r1, r3, r3, r2
 80002a4:	1ad2      	subs	r2, r2, r3
 80002a6:	0852      	lsrs	r2, r2, #1
 80002a8:	4413      	add	r3, r2
 80002aa:	089b      	lsrs	r3, r3, #2
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <main+0x15c>)
 80002b0:	801a      	strh	r2, [r3, #0]
	  	  PWM2 = readValue2/7;
 80002b2:	4b19      	ldr	r3, [pc, #100]	; (8000318 <main+0x150>)
 80002b4:	881a      	ldrh	r2, [r3, #0]
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <main+0x158>)
 80002b8:	fba3 1302 	umull	r1, r3, r3, r2
 80002bc:	1ad2      	subs	r2, r2, r3
 80002be:	0852      	lsrs	r2, r2, #1
 80002c0:	4413      	add	r3, r2
 80002c2:	089b      	lsrs	r3, r3, #2
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <main+0x160>)
 80002c8:	801a      	strh	r2, [r3, #0]
	  	  PWM3 = readValue3/7;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <main+0x154>)
 80002cc:	881a      	ldrh	r2, [r3, #0]
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <main+0x158>)
 80002d0:	fba3 1302 	umull	r1, r3, r3, r2
 80002d4:	1ad2      	subs	r2, r2, r3
 80002d6:	0852      	lsrs	r2, r2, #1
 80002d8:	4413      	add	r3, r2
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	b29a      	uxth	r2, r3
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <main+0x164>)
 80002e0:	801a      	strh	r2, [r3, #0]
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, PWM1);
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <main+0x15c>)
 80002e4:	881a      	ldrh	r2, [r3, #0]
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <main+0x140>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	639a      	str	r2, [r3, #56]	; 0x38
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, PWM2);
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <main+0x160>)
 80002ee:	881a      	ldrh	r2, [r3, #0]
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <main+0x140>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4, PWM3);
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0x164>)
 80002f8:	881a      	ldrh	r2, [r3, #0]
 80002fa:	4b03      	ldr	r3, [pc, #12]	; (8000308 <main+0x140>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40
	  	  HAL_Delay(10);
 8000300:	200a      	movs	r0, #10
 8000302:	f000 fb11 	bl	8000928 <HAL_Delay>
	  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000306:	e777      	b.n	80001f8 <main+0x30>
 8000308:	20000078 	.word	0x20000078
 800030c:	200000d0 	.word	0x200000d0
 8000310:	20000028 	.word	0x20000028
 8000314:	200000c4 	.word	0x200000c4
 8000318:	200000c6 	.word	0x200000c6
 800031c:	200000c8 	.word	0x200000c8
 8000320:	24924925 	.word	0x24924925
 8000324:	200000ca 	.word	0x200000ca
 8000328:	200000cc 	.word	0x200000cc
 800032c:	200000ce 	.word	0x200000ce

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09e      	sub	sp, #120	; 0x78
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fb1e 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	463b      	mov	r3, r7
 8000356:	223c      	movs	r2, #60	; 0x3c
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 fb10 	bl	8004980 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2310      	movs	r3, #16
 800036a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000374:	2300      	movs	r3, #0
 8000376:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800037c:	4618      	mov	r0, r3
 800037e:	f001 feef 	bl	8002160 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000388:	f000 f948 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 ff18 	bl	80031dc <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003b2:	f000 f933 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003b6:	2380      	movs	r3, #128	; 0x80
 80003b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f003 f8f0 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80003ce:	f000 f925 	bl	800061c <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3778      	adds	r7, #120	; 0x78
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003e2:	f107 031c 	add.w	r3, r7, #28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fe:	4b2e      	ldr	r3, [pc, #184]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000400:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040c:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000412:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800041a:	2201      	movs	r2, #1
 800041c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000426:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042c:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800042e:	2201      	movs	r2, #1
 8000430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800043a:	2201      	movs	r2, #1
 800043c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000440:	2200      	movs	r2, #0
 8000442:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000448:	2204      	movs	r2, #4
 800044a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800044e:	2200      	movs	r2, #0
 8000450:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000452:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000454:	2200      	movs	r2, #0
 8000456:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000458:	4817      	ldr	r0, [pc, #92]	; (80004b8 <MX_ADC1_Init+0xdc>)
 800045a:	f000 fa89 	bl	8000970 <HAL_ADC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000464:	f000 f8da 	bl	800061c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800046c:	f107 031c 	add.w	r3, r7, #28
 8000470:	4619      	mov	r1, r3
 8000472:	4811      	ldr	r0, [pc, #68]	; (80004b8 <MX_ADC1_Init+0xdc>)
 8000474:	f001 f9a2 	bl	80017bc <HAL_ADCEx_MultiModeConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800047e:	f000 f8cd 	bl	800061c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000482:	2307      	movs	r3, #7
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000486:	2301      	movs	r3, #1
 8000488:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4619      	mov	r1, r3
 800049e:	4806      	ldr	r0, [pc, #24]	; (80004b8 <MX_ADC1_Init+0xdc>)
 80004a0:	f000 fea2 	bl	80011e8 <HAL_ADC_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004aa:	f000 f8b7 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	3728      	adds	r7, #40	; 0x28
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000028 	.word	0x20000028

080004bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	; 0x38
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	f107 031c 	add.w	r3, r7, #28
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ee:	4b38      	ldr	r3, [pc, #224]	; (80005d0 <MX_TIM2_Init+0x114>)
 80004f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_TIM2_Init+0x114>)
 80004f8:	227f      	movs	r2, #127	; 0x7f
 80004fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_TIM2_Init+0x114>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000504:	f240 2271 	movw	r2, #625	; 0x271
 8000508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_TIM2_Init+0x114>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000516:	482e      	ldr	r0, [pc, #184]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000518:	f003 f9f6 	bl	8003908 <HAL_TIM_Base_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000522:	f000 f87b 	bl	800061c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800052c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000530:	4619      	mov	r1, r3
 8000532:	4827      	ldr	r0, [pc, #156]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000534:	f003 fcb4 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800053e:	f000 f86d 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000544:	f003 fa37 	bl	80039b6 <HAL_TIM_PWM_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800054e:	f000 f865 	bl	800061c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	4619      	mov	r1, r3
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000562:	f004 f98d 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800056c:	f000 f856 	bl	800061c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	2204      	movs	r2, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <MX_TIM2_Init+0x114>)
 8000588:	f003 fb76 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000592:	f000 f843 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	2208      	movs	r2, #8
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_TIM2_Init+0x114>)
 800059e:	f003 fb6b 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80005a8:	f000 f838 	bl	800061c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	220c      	movs	r2, #12
 80005b0:	4619      	mov	r1, r3
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <MX_TIM2_Init+0x114>)
 80005b4:	f003 fb60 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80005be:	f000 f82d 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MX_TIM2_Init+0x114>)
 80005c4:	f000 f8b0 	bl	8000728 <HAL_TIM_MspPostInit>

}
 80005c8:	bf00      	nop
 80005ca:	3738      	adds	r7, #56	; 0x38
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000078 	.word	0x20000078

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_GPIO_Init+0x44>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_GPIO_Init+0x44>)
 80005e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_GPIO_Init+0x44>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x44>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x44>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x44>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000690:	d123      	bne.n	80006da <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 80006b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_ADC_MspInit+0x74>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006c2:	230e      	movs	r3, #14
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <HAL_ADC_MspInit+0x78>)
 80006d6:	f001 fbc9 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fc:	d10b      	bne.n	8000716 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_TIM_Base_MspInit+0x38>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_TIM_Base_MspInit+0x38>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_TIM_Base_MspInit+0x38>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000748:	d11c      	bne.n	8000784 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_TIM_MspPostInit+0x64>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_TIM_MspPostInit+0x64>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_TIM_MspPostInit+0x64>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000762:	230e      	movs	r3, #14
 8000764:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f001 fb74 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f884 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <LoopForever+0x6>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	; (8000848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <LoopForever+0xe>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	; (8000854 <LoopForever+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f004 f8ab 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fcc5 	bl	80001c8 <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800084c:	08004a28 	.word	0x08004a28
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000854:	200000ec 	.word	0x200000ec

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f001 fac9 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff fed6 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fad3 	bl	8001e52 <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f001 faa9 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x20>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_IncTick+0x24>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_IncTick+0x24>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	200000e8 	.word	0x200000e8

08000910 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;  
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <HAL_GetTick+0x14>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	200000e8 	.word	0x200000e8

08000928 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000930:	f7ff ffee 	bl	8000910 <HAL_GetTick>
 8000934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000940:	d005      	beq.n	800094e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_Delay+0x44>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800094e:	bf00      	nop
 8000950:	f7ff ffde 	bl	8000910 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8f7      	bhi.n	8000950 <HAL_Delay+0x28>
  {
  }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008

08000970 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	; 0x68
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800097e:	2300      	movs	r3, #0
 8000980:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d101      	bne.n	8000990 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	e1c9      	b.n	8000d24 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d176      	bne.n	8000a90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d152      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fe53 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13b      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f001 f845 	bl	8001a68 <ADC_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d12f      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
 80009f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d12b      	bne.n	8000a50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a2c:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <HAL_ADC_Init+0x2d8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a86      	ldr	r2, [pc, #536]	; (8000c4c <HAL_ADC_Init+0x2dc>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9a      	lsrs	r2, r3, #18
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a42:	e002      	b.n	8000a4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f9      	bne.n	8000a44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a6c:	d110      	bne.n	8000a90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f023 0312 	bic.w	r3, r3, #18
 8000a76:	f043 0210 	orr.w	r2, r3, #16
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	f003 0310 	and.w	r3, r3, #16
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f040 8136 	bne.w	8000d0a <HAL_ADC_Init+0x39a>
 8000a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 8131 	bne.w	8000d0a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8129 	bne.w	8000d0a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ac0:	f043 0202 	orr.w	r2, r3, #2
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ad0:	d004      	beq.n	8000adc <HAL_ADC_Init+0x16c>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a5e      	ldr	r2, [pc, #376]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d101      	bne.n	8000ae0 <HAL_ADC_Init+0x170>
 8000adc:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <HAL_ADC_Init+0x2e4>)
 8000ade:	e000      	b.n	8000ae2 <HAL_ADC_Init+0x172>
 8000ae0:	4b5d      	ldr	r3, [pc, #372]	; (8000c58 <HAL_ADC_Init+0x2e8>)
 8000ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aec:	d102      	bne.n	8000af4 <HAL_ADC_Init+0x184>
 8000aee:	4b58      	ldr	r3, [pc, #352]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e01a      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <HAL_ADC_Init+0x2e0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d103      	bne.n	8000b06 <HAL_ADC_Init+0x196>
 8000afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e011      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a54      	ldr	r2, [pc, #336]	; (8000c5c <HAL_ADC_Init+0x2ec>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d102      	bne.n	8000b16 <HAL_ADC_Init+0x1a6>
 8000b10:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <HAL_ADC_Init+0x2f0>)
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e009      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a51      	ldr	r2, [pc, #324]	; (8000c60 <HAL_ADC_Init+0x2f0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d102      	bne.n	8000b26 <HAL_ADC_Init+0x1b6>
 8000b20:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <HAL_ADC_Init+0x2ec>)
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e001      	b.n	8000b2a <HAL_ADC_Init+0x1ba>
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_ADC_Init+0x1da>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d101      	bne.n	8000b4a <HAL_ADC_Init+0x1da>
 8000b46:	2301      	movs	r3, #1
 8000b48:	e000      	b.n	8000b4c <HAL_ADC_Init+0x1dc>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11c      	bne.n	8000b8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d010      	beq.n	8000b78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d107      	bne.n	8000b72 <HAL_ADC_Init+0x202>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d101      	bne.n	8000b72 <HAL_ADC_Init+0x202>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e000      	b.n	8000b74 <HAL_ADC_Init+0x204>
 8000b72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d108      	bne.n	8000b8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7e5b      	ldrb	r3, [r3, #25]
 8000b8e:	035b      	lsls	r3, r3, #13
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b94:	2a01      	cmp	r2, #1
 8000b96:	d002      	beq.n	8000b9e <HAL_ADC_Init+0x22e>
 8000b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9c:	e000      	b.n	8000ba0 <HAL_ADC_Init+0x230>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d11b      	bne.n	8000bf6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7e5b      	ldrb	r3, [r3, #25]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d109      	bne.n	8000bda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	045a      	lsls	r2, r3, #17
 8000bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8000bd8:	e00d      	b.n	8000bf6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000be2:	f043 0220 	orr.w	r2, r3, #32
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d03a      	beq.n	8000c74 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_ADC_Init+0x2ec>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d004      	beq.n	8000c12 <HAL_ADC_Init+0x2a2>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_ADC_Init+0x2f0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d128      	bne.n	8000c64 <HAL_ADC_Init+0x2f4>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c16:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000c1a:	d012      	beq.n	8000c42 <HAL_ADC_Init+0x2d2>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c24:	d00a      	beq.n	8000c3c <HAL_ADC_Init+0x2cc>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000c2e:	d002      	beq.n	8000c36 <HAL_ADC_Init+0x2c6>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	e018      	b.n	8000c68 <HAL_ADC_Init+0x2f8>
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	e015      	b.n	8000c68 <HAL_ADC_Init+0x2f8>
 8000c3c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000c40:	e012      	b.n	8000c68 <HAL_ADC_Init+0x2f8>
 8000c42:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c46:	e00f      	b.n	8000c68 <HAL_ADC_Init+0x2f8>
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	50000100 	.word	0x50000100
 8000c54:	50000300 	.word	0x50000300
 8000c58:	50000700 	.word	0x50000700
 8000c5c:	50000400 	.word	0x50000400
 8000c60:	50000500 	.word	0x50000500
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c70:	4313      	orrs	r3, r2
 8000c72:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d114      	bne.n	8000cac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c90:	f023 0302 	bic.w	r3, r3, #2
 8000c94:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7e1b      	ldrb	r3, [r3, #24]
 8000c9a:	039a      	lsls	r2, r3, #14
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_ADC_Init+0x3bc>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6812      	ldr	r2, [r2, #0]
 8000cba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f023 010f 	bic.w	r1, r3, #15
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	631a      	str	r2, [r3, #48]	; 0x30
 8000ce0:	e007      	b.n	8000cf2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 020f 	bic.w	r2, r2, #15
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f023 0303 	bic.w	r3, r3, #3
 8000d00:	f043 0201 	orr.w	r2, r3, #1
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
 8000d08:	e00a      	b.n	8000d20 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f023 0312 	bic.w	r3, r3, #18
 8000d12:	f043 0210 	orr.w	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3768      	adds	r7, #104	; 0x68
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	fff0c007 	.word	0xfff0c007

08000d30 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 80f9 	bne.w	8000f3e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d101      	bne.n	8000d5a <HAL_ADC_Start+0x2a>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e0f4      	b.n	8000f44 <HAL_ADC_Start+0x214>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fe1c 	bl	80019a0 <ADC_Enable>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 80e0 	bne.w	8000f34 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d7c:	f023 0301 	bic.w	r3, r3, #1
 8000d80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d90:	d004      	beq.n	8000d9c <HAL_ADC_Start+0x6c>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6d      	ldr	r2, [pc, #436]	; (8000f4c <HAL_ADC_Start+0x21c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d106      	bne.n	8000daa <HAL_ADC_Start+0x7a>
 8000d9c:	4b6c      	ldr	r3, [pc, #432]	; (8000f50 <HAL_ADC_Start+0x220>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 031f 	and.w	r3, r3, #31
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d010      	beq.n	8000dca <HAL_ADC_Start+0x9a>
 8000da8:	e005      	b.n	8000db6 <HAL_ADC_Start+0x86>
 8000daa:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <HAL_ADC_Start+0x224>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d009      	beq.n	8000dca <HAL_ADC_Start+0x9a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dbe:	d004      	beq.n	8000dca <HAL_ADC_Start+0x9a>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a64      	ldr	r2, [pc, #400]	; (8000f58 <HAL_ADC_Start+0x228>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d115      	bne.n	8000df6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d036      	beq.n	8000e52 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000df4:	e02d      	b.n	8000e52 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e0a:	d004      	beq.n	8000e16 <HAL_ADC_Start+0xe6>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_ADC_Start+0x21c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10a      	bne.n	8000e2c <HAL_ADC_Start+0xfc>
 8000e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	bf14      	ite	ne
 8000e24:	2301      	movne	r3, #1
 8000e26:	2300      	moveq	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	e008      	b.n	8000e3e <HAL_ADC_Start+0x10e>
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <HAL_ADC_Start+0x228>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e5e:	d106      	bne.n	8000e6e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f023 0206 	bic.w	r2, r3, #6
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e6c:	e002      	b.n	8000e74 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	221c      	movs	r2, #28
 8000e82:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e8c:	d004      	beq.n	8000e98 <HAL_ADC_Start+0x168>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <HAL_ADC_Start+0x21c>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d106      	bne.n	8000ea6 <HAL_ADC_Start+0x176>
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <HAL_ADC_Start+0x220>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d03e      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000ea4:	e005      	b.n	8000eb2 <HAL_ADC_Start+0x182>
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_ADC_Start+0x224>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d037      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eba:	d004      	beq.n	8000ec6 <HAL_ADC_Start+0x196>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_ADC_Start+0x21c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d106      	bne.n	8000ed4 <HAL_ADC_Start+0x1a4>
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_ADC_Start+0x220>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d027      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000ed2:	e005      	b.n	8000ee0 <HAL_ADC_Start+0x1b0>
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_ADC_Start+0x224>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d020      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee8:	d004      	beq.n	8000ef4 <HAL_ADC_Start+0x1c4>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_ADC_Start+0x21c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d106      	bne.n	8000f02 <HAL_ADC_Start+0x1d2>
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_ADC_Start+0x220>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2b09      	cmp	r3, #9
 8000efe:	d010      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000f00:	e005      	b.n	8000f0e <HAL_ADC_Start+0x1de>
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_ADC_Start+0x224>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2b09      	cmp	r3, #9
 8000f0c:	d009      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f16:	d004      	beq.n	8000f22 <HAL_ADC_Start+0x1f2>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_ADC_Start+0x228>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10f      	bne.n	8000f42 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0204 	orr.w	r2, r2, #4
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	e006      	b.n	8000f42 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000f3c:	e001      	b.n	8000f42 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	50000100 	.word	0x50000100
 8000f50:	50000300 	.word	0x50000300
 8000f54:	50000700 	.word	0x50000700
 8000f58:	50000400 	.word	0x50000400

08000f5c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <HAL_ADC_Stop+0x1a>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e023      	b.n	8000fbe <HAL_ADC_Stop+0x62>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000f7e:	216c      	movs	r1, #108	; 0x6c
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fdd7 	bl	8001b34 <ADC_ConversionStop>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fd69 	bl	8001a68 <ADC_Disable>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d109      	bne.n	8000fb4 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d102      	bne.n	8000fe4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e03a      	b.n	800105a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d004      	beq.n	8000ff8 <HAL_ADC_PollForConversion+0x30>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a72      	ldr	r2, [pc, #456]	; (80011bc <HAL_ADC_PollForConversion+0x1f4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_PollForConversion+0x34>
 8000ff8:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <HAL_ADC_PollForConversion+0x1f8>)
 8000ffa:	e000      	b.n	8000ffe <HAL_ADC_PollForConversion+0x36>
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <HAL_ADC_PollForConversion+0x1fc>)
 8000ffe:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	2b00      	cmp	r3, #0
 800100a:	d112      	bne.n	8001032 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d11d      	bne.n	8001056 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f043 0220 	orr.w	r2, r3, #32
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0bf      	b.n	80011b2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f043 0220 	orr.w	r2, r3, #32
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0ad      	b.n	80011b2 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001062:	d004      	beq.n	800106e <HAL_ADC_PollForConversion+0xa6>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a54      	ldr	r2, [pc, #336]	; (80011bc <HAL_ADC_PollForConversion+0x1f4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <HAL_ADC_PollForConversion+0xb4>
 800106e:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <HAL_ADC_PollForConversion+0x1f8>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	2b00      	cmp	r3, #0
 8001078:	d010      	beq.n	800109c <HAL_ADC_PollForConversion+0xd4>
 800107a:	e005      	b.n	8001088 <HAL_ADC_PollForConversion+0xc0>
 800107c:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_ADC_PollForConversion+0x1fc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <HAL_ADC_PollForConversion+0xd4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001090:	d004      	beq.n	800109c <HAL_ADC_PollForConversion+0xd4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_ADC_PollForConversion+0x200>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d104      	bne.n	80010a6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	e00f      	b.n	80010c6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010ae:	d004      	beq.n	80010ba <HAL_ADC_PollForConversion+0xf2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a41      	ldr	r2, [pc, #260]	; (80011bc <HAL_ADC_PollForConversion+0x1f4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d102      	bne.n	80010c0 <HAL_ADC_PollForConversion+0xf8>
 80010ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010be:	e000      	b.n	80010c2 <HAL_ADC_PollForConversion+0xfa>
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_ADC_PollForConversion+0x200>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010c6:	f7ff fc23 	bl	8000910 <HAL_GetTick>
 80010ca:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010cc:	e021      	b.n	8001112 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d01d      	beq.n	8001112 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_ADC_PollForConversion+0x124>
 80010dc:	f7ff fc18 	bl	8000910 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d212      	bcs.n	8001112 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10b      	bne.n	8001112 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f043 0204 	orr.w	r2, r3, #4
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e04f      	b.n	80011b2 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0d6      	beq.n	80010ce <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001136:	2b00      	cmp	r3, #0
 8001138:	d131      	bne.n	800119e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001140:	2b00      	cmp	r3, #0
 8001142:	d12c      	bne.n	800119e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b08      	cmp	r3, #8
 8001150:	d125      	bne.n	800119e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d112      	bne.n	8001186 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d112      	bne.n	800119e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f043 0201 	orr.w	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
 8001184:	e00b      	b.n	800119e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f043 0220 	orr.w	r2, r3, #32
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	50000100 	.word	0x50000100
 80011c0:	50000300 	.word	0x50000300
 80011c4:	50000700 	.word	0x50000700
 80011c8:	50000400 	.word	0x50000400

080011cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b09b      	sub	sp, #108	; 0x6c
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_ConfigChannel+0x22>
 8001206:	2302      	movs	r3, #2
 8001208:	e2c8      	b.n	800179c <HAL_ADC_ConfigChannel+0x5b4>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 82ac 	bne.w	800177a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b04      	cmp	r3, #4
 8001228:	d81c      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	231f      	movs	r3, #31
 8001240:	4093      	lsls	r3, r2
 8001242:	43db      	mvns	r3, r3
 8001244:	4019      	ands	r1, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6818      	ldr	r0, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	631a      	str	r2, [r3, #48]	; 0x30
 8001262:	e063      	b.n	800132c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d81e      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	3b1e      	subs	r3, #30
 8001280:	221f      	movs	r2, #31
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	4019      	ands	r1, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	3b1e      	subs	r3, #30
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
 80012a8:	e040      	b.n	800132c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b0e      	cmp	r3, #14
 80012b0:	d81e      	bhi.n	80012f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	3b3c      	subs	r3, #60	; 0x3c
 80012c6:	221f      	movs	r2, #31
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4019      	ands	r1, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	3b3c      	subs	r3, #60	; 0x3c
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
 80012ee:	e01d      	b.n	800132c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3b5a      	subs	r3, #90	; 0x5a
 8001304:	221f      	movs	r2, #31
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	4019      	ands	r1, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3b5a      	subs	r3, #90	; 0x5a
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80e5 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d91c      	bls.n	800137e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6999      	ldr	r1, [r3, #24]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	3b1e      	subs	r3, #30
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	4019      	ands	r1, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6898      	ldr	r0, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	3b1e      	subs	r3, #30
 8001370:	fa00 f203 	lsl.w	r2, r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	e019      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6959      	ldr	r1, [r3, #20]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	2207      	movs	r2, #7
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	4019      	ands	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6898      	ldr	r0, [r3, #8]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d84f      	bhi.n	8001474 <HAL_ADC_ConfigChannel+0x28c>
 80013d4:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_ADC_ConfigChannel+0x1f4>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	0800140f 	.word	0x0800140f
 80013e4:	08001431 	.word	0x08001431
 80013e8:	08001453 	.word	0x08001453
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013f2:	4b99      	ldr	r3, [pc, #612]	; (8001658 <HAL_ADC_ConfigChannel+0x470>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	0691      	lsls	r1, r2, #26
 80013fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013fe:	430a      	orrs	r2, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800140a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800140c:	e07b      	b.n	8001506 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001414:	4b90      	ldr	r3, [pc, #576]	; (8001658 <HAL_ADC_ConfigChannel+0x470>)
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	0691      	lsls	r1, r2, #26
 800141e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001420:	430a      	orrs	r2, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800142c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800142e:	e06a      	b.n	8001506 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_ADC_ConfigChannel+0x470>)
 8001438:	4013      	ands	r3, r2
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	0691      	lsls	r1, r2, #26
 8001440:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001442:	430a      	orrs	r2, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800144e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001450:	e059      	b.n	8001506 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001458:	4b7f      	ldr	r3, [pc, #508]	; (8001658 <HAL_ADC_ConfigChannel+0x470>)
 800145a:	4013      	ands	r3, r2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	0691      	lsls	r1, r2, #26
 8001462:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001464:	430a      	orrs	r2, r1
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001470:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001472:	e048      	b.n	8001506 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	069b      	lsls	r3, r3, #26
 8001484:	429a      	cmp	r2, r3
 8001486:	d107      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001496:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800149e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	069b      	lsls	r3, r3, #26
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	069b      	lsls	r3, r3, #26
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d107      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	069b      	lsls	r3, r3, #26
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d107      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001502:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001504:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d108      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x33e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x33e>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_ADC_ConfigChannel+0x340>
 8001526:	2300      	movs	r3, #0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 8131 	bne.w	8001790 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00f      	beq.n	8001556 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43da      	mvns	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	400a      	ands	r2, r1
 8001550:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001554:	e049      	b.n	80015ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	409a      	lsls	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d91c      	bls.n	80015b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6999      	ldr	r1, [r3, #24]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	3b1b      	subs	r3, #27
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	4019      	ands	r1, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	3b1b      	subs	r3, #27
 80015a4:	fa00 f203 	lsl.w	r2, r0, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	e01b      	b.n	80015ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6959      	ldr	r1, [r3, #20]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	2207      	movs	r2, #7
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4019      	ands	r1, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6898      	ldr	r0, [r3, #8]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	fa00 f203 	lsl.w	r2, r0, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015f2:	d004      	beq.n	80015fe <HAL_ADC_ConfigChannel+0x416>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_ADC_ConfigChannel+0x474>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_ConfigChannel+0x41a>
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_ADC_ConfigChannel+0x478>)
 8001600:	e000      	b.n	8001604 <HAL_ADC_ConfigChannel+0x41c>
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_ADC_ConfigChannel+0x47c>)
 8001604:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d105      	bne.n	800161a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800161e:	2b11      	cmp	r3, #17
 8001620:	d105      	bne.n	800162e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001632:	2b12      	cmp	r3, #18
 8001634:	f040 80ac 	bne.w	8001790 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001640:	2b00      	cmp	r3, #0
 8001642:	f040 80a5 	bne.w	8001790 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164e:	d10b      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x480>
 8001650:	4b02      	ldr	r3, [pc, #8]	; (800165c <HAL_ADC_ConfigChannel+0x474>)
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e023      	b.n	800169e <HAL_ADC_ConfigChannel+0x4b6>
 8001656:	bf00      	nop
 8001658:	83fff000 	.word	0x83fff000
 800165c:	50000100 	.word	0x50000100
 8001660:	50000300 	.word	0x50000300
 8001664:	50000700 	.word	0x50000700
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <HAL_ADC_ConfigChannel+0x5c0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d103      	bne.n	800167a <HAL_ADC_ConfigChannel+0x492>
 8001672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e011      	b.n	800169e <HAL_ADC_ConfigChannel+0x4b6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <HAL_ADC_ConfigChannel+0x5c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <HAL_ADC_ConfigChannel+0x4a2>
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e009      	b.n	800169e <HAL_ADC_ConfigChannel+0x4b6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d102      	bne.n	800169a <HAL_ADC_ConfigChannel+0x4b2>
 8001694:	4b45      	ldr	r3, [pc, #276]	; (80017ac <HAL_ADC_ConfigChannel+0x5c4>)
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e001      	b.n	800169e <HAL_ADC_ConfigChannel+0x4b6>
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_ADC_ConfigChannel+0x4d6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x4d6>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x4d8>
 80016be:	2300      	movs	r3, #0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d150      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x4fe>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x4fe>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_ADC_ConfigChannel+0x500>
 80016e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d13c      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d11d      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x548>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fc:	d118      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001708:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a2a      	ldr	r2, [pc, #168]	; (80017b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	0c9a      	lsrs	r2, r3, #18
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001720:	e002      	b.n	8001728 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800172e:	e02e      	b.n	800178e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b11      	cmp	r3, #17
 8001736:	d10b      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x568>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001740:	d106      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800174a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800174e:	e01e      	b.n	800178e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b12      	cmp	r3, #18
 8001756:	d11a      	bne.n	800178e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001762:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001764:	e013      	b.n	800178e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001778:	e00a      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800178c:	e000      	b.n	8001790 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800178e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001798:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800179c:	4618      	mov	r0, r3
 800179e:	376c      	adds	r7, #108	; 0x6c
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	50000100 	.word	0x50000100
 80017ac:	50000400 	.word	0x50000400
 80017b0:	50000500 	.word	0x50000500
 80017b4:	20000000 	.word	0x20000000
 80017b8:	431bde83 	.word	0x431bde83

080017bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80017bc:	b480      	push	{r7}
 80017be:	b099      	sub	sp, #100	; 0x64
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d4:	d102      	bne.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	e01a      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6a      	ldr	r2, [pc, #424]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d103      	bne.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80017e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	e011      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d102      	bne.n	80017fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	e009      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d102      	bne.n	800180e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001808:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e001      	b.n	8001812 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b0      	b.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001826:	2302      	movs	r3, #2
 8001828:	e0a9      	b.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 808d 	bne.w	800195c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 8086 	bne.w	800195c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001866:	e000      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800186a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d040      	beq.n	80018f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6859      	ldr	r1, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001886:	035b      	lsls	r3, r3, #13
 8001888:	430b      	orrs	r3, r1
 800188a:	431a      	orrs	r2, r3
 800188c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80018b0:	2300      	movs	r3, #0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d15c      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80018d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d14b      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6811      	ldr	r1, [r2, #0]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	6892      	ldr	r2, [r2, #8]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018f4:	e03c      	b.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001900:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001922:	2300      	movs	r3, #0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d123      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001944:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001946:	2b00      	cmp	r3, #0
 8001948:	d112      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800194a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001958:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800195a:	e009      	b.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800196e:	e000      	b.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001970:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800197a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800197e:	4618      	mov	r0, r3
 8001980:	3764      	adds	r7, #100	; 0x64
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	50000100 	.word	0x50000100
 8001990:	50000400 	.word	0x50000400
 8001994:	50000500 	.word	0x50000500
 8001998:	50000300 	.word	0x50000300
 800199c:	50000700 	.word	0x50000700

080019a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <ADC_Enable+0x2c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <ADC_Enable+0x2c>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <ADC_Enable+0x2e>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d143      	bne.n	8001a5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <ADC_Enable+0xc4>)
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f043 0210 	orr.w	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e02f      	b.n	8001a5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a0c:	f7fe ff80 	bl	8000910 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a12:	e01b      	b.n	8001a4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a14:	f7fe ff7c 	bl	8000910 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d914      	bls.n	8001a4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d00d      	beq.n	8001a4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e007      	b.n	8001a5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1dc      	bne.n	8001a14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	8000003f 	.word	0x8000003f

08001a68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <ADC_Disable+0x2c>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <ADC_Disable+0x2c>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <ADC_Disable+0x2e>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d047      	beq.n	8001b2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030d 	and.w	r3, r3, #13
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10f      	bne.n	8001ac8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0202 	orr.w	r2, r2, #2
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2203      	movs	r2, #3
 8001abe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ac0:	f7fe ff26 	bl	8000910 <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ac6:	e029      	b.n	8001b1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e023      	b.n	8001b2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ae4:	f7fe ff14 	bl	8000910 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d914      	bls.n	8001b1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10d      	bne.n	8001b1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e007      	b.n	8001b2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d0dc      	beq.n	8001ae4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 809b 	beq.w	8001c90 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b68:	d12a      	bne.n	8001bc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d126      	bne.n	8001bc0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d122      	bne.n	8001bc0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001b7e:	e014      	b.n	8001baa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4a46      	ldr	r2, [pc, #280]	; (8001c9c <ADC_ConversionStop+0x168>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d90d      	bls.n	8001ba4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e076      	b.n	8001c92 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d1e3      	bne.n	8001b80 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b60      	cmp	r3, #96	; 0x60
 8001bc4:	d015      	beq.n	8001bf2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d10e      	bne.n	8001bf2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0210 	orr.w	r2, r2, #16
 8001bf0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d015      	beq.n	8001c24 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d10e      	bne.n	8001c24 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b60      	cmp	r3, #96	; 0x60
 8001c28:	d005      	beq.n	8001c36 <ADC_ConversionStop+0x102>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b6c      	cmp	r3, #108	; 0x6c
 8001c2e:	d105      	bne.n	8001c3c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001c30:	230c      	movs	r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
        break;
 8001c34:	e005      	b.n	8001c42 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001c36:	2308      	movs	r3, #8
 8001c38:	617b      	str	r3, [r7, #20]
        break;
 8001c3a:	e002      	b.n	8001c42 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
        break;
 8001c40:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001c42:	f7fe fe65 	bl	8000910 <HAL_GetTick>
 8001c46:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c48:	e01b      	b.n	8001c82 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001c4a:	f7fe fe61 	bl	8000910 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b0b      	cmp	r3, #11
 8001c56:	d914      	bls.n	8001c82 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f043 0210 	orr.w	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e007      	b.n	8001c92 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1dc      	bne.n	8001c4a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	000993ff 	.word	0x000993ff

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff47 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff5c 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffb0 	bl	8001dc0 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e154      	b.n	8002126 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8146 	beq.w	8002120 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d005      	beq.n	8001eac <HAL_GPIO_Init+0x40>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d130      	bne.n	8001f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 0201 	and.w	r2, r3, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d017      	beq.n	8001f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d123      	bne.n	8001f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	6939      	ldr	r1, [r7, #16]
 8001f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80a0 	beq.w	8002120 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_GPIO_Init+0x2d8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_GPIO_Init+0x2d8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b55      	ldr	r3, [pc, #340]	; (8002144 <HAL_GPIO_Init+0x2d8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff8:	4a53      	ldr	r2, [pc, #332]	; (8002148 <HAL_GPIO_Init+0x2dc>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002022:	d019      	beq.n	8002058 <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a49      	ldr	r2, [pc, #292]	; (800214c <HAL_GPIO_Init+0x2e0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a48      	ldr	r2, [pc, #288]	; (8002150 <HAL_GPIO_Init+0x2e4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00d      	beq.n	8002050 <HAL_GPIO_Init+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a47      	ldr	r2, [pc, #284]	; (8002154 <HAL_GPIO_Init+0x2e8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x1e0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <HAL_GPIO_Init+0x2ec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_GPIO_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e008      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002048:	2305      	movs	r3, #5
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 800204c:	2303      	movs	r3, #3
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002058:	2300      	movs	r3, #0
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800206a:	4937      	ldr	r1, [pc, #220]	; (8002148 <HAL_GPIO_Init+0x2dc>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_GPIO_Init+0x2f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_GPIO_Init+0x2f0>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_GPIO_Init+0x2f0>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_GPIO_Init+0x2f0>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_GPIO_Init+0x2f0>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_GPIO_Init+0x2f0>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_GPIO_Init+0x2f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_GPIO_Init+0x2f0>)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f aea3 	bne.w	8001e7c <HAL_GPIO_Init+0x10>
  }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800
 8002154:	48000c00 	.word	0x48000c00
 8002158:	48001000 	.word	0x48001000
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002166:	af00      	add	r7, sp, #0
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002170:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f001 b823 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 817d 	beq.w	8002496 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800219c:	4bbc      	ldr	r3, [pc, #752]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4bb9      	ldr	r3, [pc, #740]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d15c      	bne.n	800226e <HAL_RCC_OscConfig+0x10e>
 80021b4:	4bb6      	ldr	r3, [pc, #728]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d155      	bne.n	800226e <HAL_RCC_OscConfig+0x10e>
 80021c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_RCC_OscConfig+0x94>
 80021ee:	4ba8      	ldr	r3, [pc, #672]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0xc0>
 80021f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800220c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002210:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800221c:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002224:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002228:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800222c:	fa92 f2a2 	rbit	r2, r2
 8002230:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002234:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	f042 0220 	orr.w	r2, r2, #32
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	f002 021f 	and.w	r2, r2, #31
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f202 	lsl.w	r2, r1, r2
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 811f 	beq.w	8002494 <HAL_RCC_OscConfig+0x334>
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8116 	bne.w	8002494 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	f000 bfaf 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x12e>
 8002280:	4b83      	ldr	r3, [pc, #524]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a82      	ldr	r2, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e036      	b.n	80022fc <HAL_RCC_OscConfig+0x19c>
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x158>
 800229e:	4b7c      	ldr	r3, [pc, #496]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7b      	ldr	r2, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b79      	ldr	r3, [pc, #484]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a78      	ldr	r2, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e021      	b.n	80022fc <HAL_RCC_OscConfig+0x19c>
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x184>
 80022ca:	4b71      	ldr	r3, [pc, #452]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b6e      	ldr	r3, [pc, #440]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6d      	ldr	r2, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0x19c>
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a69      	ldr	r2, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a66      	ldr	r2, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fc:	4b64      	ldr	r3, [pc, #400]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f023 020f 	bic.w	r2, r3, #15
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	495f      	ldr	r1, [pc, #380]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002312:	4313      	orrs	r3, r2
 8002314:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d059      	beq.n	80023da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe faf3 	bl	8000910 <HAL_GetTick>
 800232a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe faee 	bl	8000910 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d902      	bls.n	8002346 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	f000 bf43 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 8002346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800235a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d102      	bne.n	8002378 <HAL_RCC_OscConfig+0x218>
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e015      	b.n	80023a4 <HAL_RCC_OscConfig+0x244>
 8002378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800238c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002390:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002394:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ab      	beq.n	8002330 <HAL_RCC_OscConfig+0x1d0>
 80023d8:	e05d      	b.n	8002496 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fa99 	bl	8000910 <HAL_GetTick>
 80023de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fa94 	bl	8000910 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	; 0x64
 80023f2:	d902      	bls.n	80023fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	f000 bee9 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 80023fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800240e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0x2cc>
 8002426:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e015      	b.n	8002458 <HAL_RCC_OscConfig+0x2f8>
 800242c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002430:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002444:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002448:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCC_OscConfig+0x330>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800245c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002460:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002464:	fa92 f2a2 	rbit	r2, r2
 8002468:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800246c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002470:	fab2 f282 	clz	r2, r2
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f002 021f 	and.w	r2, r2, #31
 8002480:	2101      	movs	r1, #1
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ab      	bne.n	80023e4 <HAL_RCC_OscConfig+0x284>
 800248c:	e003      	b.n	8002496 <HAL_RCC_OscConfig+0x336>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 817d 	beq.w	80027a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024ac:	4ba6      	ldr	r3, [pc, #664]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b8:	4ba3      	ldr	r3, [pc, #652]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d172      	bne.n	80025aa <HAL_RCC_OscConfig+0x44a>
 80024c4:	4ba0      	ldr	r3, [pc, #640]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d16c      	bne.n	80025aa <HAL_RCC_OscConfig+0x44a>
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x3a0>
 80024fa:	4b93      	ldr	r3, [pc, #588]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e013      	b.n	8002528 <HAL_RCC_OscConfig+0x3c8>
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002518:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002524:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2202      	movs	r2, #2
 800252a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800252e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800253a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800253e:	fab2 f282 	clz	r2, r2
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	f042 0220 	orr.w	r2, r2, #32
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f002 021f 	and.w	r2, r2, #31
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCC_OscConfig+0x410>
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f000 be2e 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	21f8      	movs	r1, #248	; 0xf8
 8002586:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800258e:	fa91 f1a1 	rbit	r1, r1
 8002592:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002596:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800259a:	fab1 f181 	clz	r1, r1
 800259e:	b2c9      	uxtb	r1, r1
 80025a0:	408b      	lsls	r3, r1
 80025a2:	4969      	ldr	r1, [pc, #420]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a8:	e0fd      	b.n	80027a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8088 	beq.w	80026cc <HAL_RCC_OscConfig+0x56c>
 80025bc:	2301      	movs	r3, #1
 80025be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	461a      	mov	r2, r3
 80025e4:	2301      	movs	r3, #1
 80025e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe f992 	bl	8000910 <HAL_GetTick>
 80025ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7fe f98d 	bl	8000910 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	f000 bde2 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800261a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x4d8>
 8002632:	4b45      	ldr	r3, [pc, #276]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x500>
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002650:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2202      	movs	r2, #2
 8002662:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002666:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002672:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0220 	orr.w	r2, r2, #32
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0af      	beq.n	80025f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	21f8      	movs	r1, #248	; 0xf8
 80026a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026b0:	fa91 f1a1 	rbit	r1, r1
 80026b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026bc:	fab1 f181 	clz	r1, r1
 80026c0:	b2c9      	uxtb	r1, r1
 80026c2:	408b      	lsls	r3, r1
 80026c4:	4920      	ldr	r1, [pc, #128]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
 80026ca:	e06c      	b.n	80027a6 <HAL_RCC_OscConfig+0x646>
 80026cc:	2301      	movs	r3, #1
 80026ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe f90a 	bl	8000910 <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002702:	f7fe f905 	bl	8000910 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	f000 bd5a 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800272a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d104      	bne.n	800274c <HAL_RCC_OscConfig+0x5ec>
 8002742:	4b01      	ldr	r3, [pc, #4]	; (8002748 <HAL_RCC_OscConfig+0x5e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e015      	b.n	8002774 <HAL_RCC_OscConfig+0x614>
 8002748:	40021000 	.word	0x40021000
 800274c:	2302      	movs	r3, #2
 800274e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002770:	4bc8      	ldr	r3, [pc, #800]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800277a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002786:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f002 021f 	and.w	r2, r2, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ad      	bne.n	8002702 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8110 	beq.w	80029dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d079      	beq.n	80028c0 <HAL_RCC_OscConfig+0x760>
 80027cc:	2301      	movs	r3, #1
 80027ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	4bab      	ldr	r3, [pc, #684]	; (8002a98 <HAL_RCC_OscConfig+0x938>)
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe f88b 	bl	8000910 <HAL_GetTick>
 80027fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe f886 	bl	8000910 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d902      	bls.n	8002816 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	f000 bcdb 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 8002816:	2302      	movs	r3, #2
 8002818:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002854:	2202      	movs	r2, #2
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fa93 f2a3 	rbit	r2, r3
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800286e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002870:	4b88      	ldr	r3, [pc, #544]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800287c:	2102      	movs	r1, #2
 800287e:	6019      	str	r1, [r3, #0]
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f1a3 	rbit	r1, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002896:	6019      	str	r1, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0a0      	beq.n	8002800 <HAL_RCC_OscConfig+0x6a0>
 80028be:	e08d      	b.n	80029dc <HAL_RCC_OscConfig+0x87c>
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028e2:	601a      	str	r2, [r3, #0]
  return result;
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x938>)
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe f805 	bl	8000910 <HAL_GetTick>
 8002906:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe f800 	bl	8000910 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d902      	bls.n	8002922 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	f000 bc55 	b.w	80031cc <HAL_RCC_OscConfig+0x106c>
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800298c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800299a:	2102      	movs	r1, #2
 800299c:	6019      	str	r1, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	fa93 f1a3 	rbit	r1, r3
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029b4:	6019      	str	r1, [r3, #0]
  return result;
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fab3 f383 	clz	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d197      	bne.n	800290c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 81a1 	beq.w	8002d34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	61d3      	str	r3, [r2, #28]
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_OscConfig+0x93c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_RCC_OscConfig+0x93c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_RCC_OscConfig+0x93c>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7fd ff61 	bl	8000910 <HAL_GetTick>
 8002a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	e009      	b.n	8002a68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fd ff5c 	bl	8000910 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e3b1      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_RCC_OscConfig+0x93c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x940>
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a02      	ldr	r2, [pc, #8]	; (8002a94 <HAL_RCC_OscConfig+0x934>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e03c      	b.n	8002b0c <HAL_RCC_OscConfig+0x9ac>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
 8002a98:	10908120 	.word	0x10908120
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <HAL_RCC_OscConfig+0x96a>
 8002ab0:	4bc1      	ldr	r3, [pc, #772]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	4ac0      	ldr	r2, [pc, #768]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6213      	str	r3, [r2, #32]
 8002abc:	4bbe      	ldr	r3, [pc, #760]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4abd      	ldr	r2, [pc, #756]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	e020      	b.n	8002b0c <HAL_RCC_OscConfig+0x9ac>
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x994>
 8002ada:	4bb7      	ldr	r3, [pc, #732]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4ab6      	ldr	r2, [pc, #728]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4bb4      	ldr	r3, [pc, #720]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4ab3      	ldr	r2, [pc, #716]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x9ac>
 8002af4:	4bb0      	ldr	r3, [pc, #704]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4aaf      	ldr	r2, [pc, #700]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6213      	str	r3, [r2, #32]
 8002b00:	4bad      	ldr	r3, [pc, #692]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4aac      	ldr	r2, [pc, #688]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002b06:	f023 0304 	bic.w	r3, r3, #4
 8002b0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8081 	beq.w	8002c20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fd fef7 	bl	8000910 <HAL_GetTick>
 8002b22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fd fef2 	bl	8000910 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e345      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
 8002b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b48:	2202      	movs	r2, #2
 8002b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	fa93 f2a3 	rbit	r2, r3
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b86:	601a      	str	r2, [r3, #0]
  return result;
 8002b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d102      	bne.n	8002bac <HAL_RCC_OscConfig+0xa4c>
 8002ba6:	4b84      	ldr	r3, [pc, #528]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	e013      	b.n	8002bd4 <HAL_RCC_OscConfig+0xa74>
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	fa93 f2a3 	rbit	r2, r3
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bdc:	2102      	movs	r1, #2
 8002bde:	6011      	str	r1, [r2, #0]
 8002be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	fa92 f1a2 	rbit	r1, r2
 8002bee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bf6:	6011      	str	r1, [r2, #0]
  return result;
 8002bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	fab2 f282 	clz	r2, r2
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	f002 021f 	and.w	r2, r2, #31
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d084      	beq.n	8002b28 <HAL_RCC_OscConfig+0x9c8>
 8002c1e:	e07f      	b.n	8002d20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fd fe76 	bl	8000910 <HAL_GetTick>
 8002c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00b      	b.n	8002c42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fd fe71 	bl	8000910 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e2c4      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
 8002c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c88:	601a      	str	r2, [r3, #0]
  return result;
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_OscConfig+0xb4e>
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	e013      	b.n	8002cd6 <HAL_RCC_OscConfig+0xb76>
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cde:	2102      	movs	r1, #2
 8002ce0:	6011      	str	r1, [r2, #0]
 8002ce2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ce6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	fa92 f1a2 	rbit	r1, r2
 8002cf0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cf8:	6011      	str	r1, [r2, #0]
  return result;
 8002cfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cfe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d184      	bne.n	8002c2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8242 	beq.w	80031ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCC_OscConfig+0xc58>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	f000 8213 	beq.w	800317a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f040 8162 	bne.w	800302a <HAL_RCC_OscConfig+0xeca>
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	fa93 f2a3 	rbit	r2, r3
 8002d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fd fdb0 	bl	8000910 <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	e00c      	b.n	8002dd0 <HAL_RCC_OscConfig+0xc70>
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fd fda8 	bl	8000910 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1fd      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	fa93 f2a3 	rbit	r2, r3
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002df4:	601a      	str	r2, [r3, #0]
  return result;
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_OscConfig+0xcba>
 8002e14:	4bb0      	ldr	r3, [pc, #704]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	e027      	b.n	8002e6a <HAL_RCC_OscConfig+0xd0a>
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	fa92 f1a2 	rbit	r1, r2
 8002e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e8e:	6011      	str	r1, [r2, #0]
  return result;
 8002e90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d182      	bne.n	8002dbc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb6:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	497f      	ldr	r1, [pc, #508]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f02:	601a      	str	r2, [r3, #0]
  return result;
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2301      	movs	r3, #1
 8002f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fd fcf4 	bl	8000910 <HAL_GetTick>
 8002f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2c:	e009      	b.n	8002f42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fd fcef 	bl	8000910 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e144      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f66:	601a      	str	r2, [r3, #0]
  return result;
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d102      	bne.n	8002f8c <HAL_RCC_OscConfig+0xe2c>
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	e027      	b.n	8002fdc <HAL_RCC_OscConfig+0xe7c>
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	fa93 f2a3 	rbit	r2, r3
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	fa93 f2a3 	rbit	r2, r3
 8002fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	4b3f      	ldr	r3, [pc, #252]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fe4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	fa92 f1a2 	rbit	r1, r2
 8002ff8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ffc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003000:	6011      	str	r1, [r2, #0]
  return result;
 8003002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003006:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f042 0220 	orr.w	r2, r2, #32
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f202 	lsl.w	r2, r1, r2
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d082      	beq.n	8002f2e <HAL_RCC_OscConfig+0xdce>
 8003028:	e0cf      	b.n	80031ca <HAL_RCC_OscConfig+0x106a>
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	fa93 f2a3 	rbit	r2, r3
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800304e:	601a      	str	r2, [r3, #0]
  return result;
 8003050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003054:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003058:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fd fc4e 	bl	8000910 <HAL_GetTick>
 8003074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e009      	b.n	800308e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fd fc49 	bl	8000910 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e09e      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030b2:	601a      	str	r2, [r3, #0]
  return result;
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d104      	bne.n	80030dc <HAL_RCC_OscConfig+0xf7c>
 80030d2:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCC_OscConfig+0xf78>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e029      	b.n	800312c <HAL_RCC_OscConfig+0xfcc>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800310a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x1078>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003130:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fa92 f1a2 	rbit	r1, r2
 8003148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800314c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003150:	6011      	str	r1, [r2, #0]
  return result;
 8003152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003156:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fab2 f282 	clz	r2, r2
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f042 0220 	orr.w	r2, r2, #32
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d180      	bne.n	800307a <HAL_RCC_OscConfig+0xf1a>
 8003178:	e027      	b.n	80031ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e01e      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_OscConfig+0x1078>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003196:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800319a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b09e      	sub	sp, #120	; 0x78
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e162      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b90      	ldr	r3, [pc, #576]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	498b      	ldr	r1, [pc, #556]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e14a      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003230:	4b82      	ldr	r3, [pc, #520]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	497f      	ldr	r1, [pc, #508]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80dc 	beq.w	8003408 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d13c      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xf6>
 8003258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d102      	bne.n	8003282 <HAL_RCC_ClockConfig+0xa6>
 800327c:	4b6f      	ldr	r3, [pc, #444]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	e00f      	b.n	80032a2 <HAL_RCC_ClockConfig+0xc6>
 8003282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	667b      	str	r3, [r7, #100]	; 0x64
 8003290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003294:	663b      	str	r3, [r7, #96]	; 0x60
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80032a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032aa:	fa92 f2a2 	rbit	r2, r2
 80032ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032b2:	fab2 f282 	clz	r2, r2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f042 0220 	orr.w	r2, r2, #32
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f002 021f 	and.w	r2, r2, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d17b      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0f3      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d13c      	bne.n	8003354 <HAL_RCC_ClockConfig+0x178>
 80032da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_RCC_ClockConfig+0x128>
 80032fe:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	e00f      	b.n	8003324 <HAL_RCC_ClockConfig+0x148>
 8003304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	647b      	str	r3, [r7, #68]	; 0x44
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
 8003318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003328:	63ba      	str	r2, [r7, #56]	; 0x38
 800332a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003334:	fab2 f282 	clz	r2, r2
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	f042 0220 	orr.w	r2, r2, #32
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f002 021f 	and.w	r2, r2, #31
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d13a      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0b2      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
 8003354:	2302      	movs	r3, #2
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d102      	bne.n	800337c <HAL_RCC_ClockConfig+0x1a0>
 8003376:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e00d      	b.n	8003398 <HAL_RCC_ClockConfig+0x1bc>
 800337c:	2302      	movs	r3, #2
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
 8003388:	2302      	movs	r3, #2
 800338a:	623b      	str	r3, [r7, #32]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2202      	movs	r2, #2
 800339a:	61ba      	str	r2, [r7, #24]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	fa92 f2a2 	rbit	r2, r2
 80033a2:	617a      	str	r2, [r7, #20]
  return result;
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0220 	orr.w	r2, r2, #32
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e079      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	491a      	ldr	r1, [pc, #104]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fa9a 	bl	8000910 <HAL_GetTick>
 80033dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd fa96 	bl	8000910 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e061      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_ClockConfig+0x260>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d214      	bcs.n	8003440 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	4906      	ldr	r1, [pc, #24]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_ClockConfig+0x25c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d005      	beq.n	8003440 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e040      	b.n	80034ba <HAL_RCC_ClockConfig+0x2de>
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x2e8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_ClockConfig+0x2e8>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_RCC_ClockConfig+0x2e8>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4912      	ldr	r1, [pc, #72]	; (80034c4 <HAL_RCC_ClockConfig+0x2e8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800347e:	f000 f829 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003482:	4601      	mov	r1, r0
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348c:	22f0      	movs	r2, #240	; 0xf0
 800348e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	fa92 f2a2 	rbit	r2, r2
 8003496:	60fa      	str	r2, [r7, #12]
  return result;
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	fab2 f282 	clz	r2, r2
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	40d3      	lsrs	r3, r2
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x2ec>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	fa21 f303 	lsr.w	r3, r1, r3
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_RCC_ClockConfig+0x2f0>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <HAL_RCC_ClockConfig+0x2f4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd f9e8 	bl	8000888 <HAL_InitTick>
  
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3778      	adds	r7, #120	; 0x78
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000
 80034c8:	080049f0 	.word	0x080049f0
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b08b      	sub	sp, #44	; 0x2c
 80034d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0x30>
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d003      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x36>
 8003502:	e03c      	b.n	800357e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003506:	623b      	str	r3, [r7, #32]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003510:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003514:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	fa92 f2a2 	rbit	r2, r2
 800351c:	607a      	str	r2, [r7, #4]
  return result;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	fab2 f282 	clz	r2, r2
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	40d3      	lsrs	r3, r2
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <HAL_RCC_GetSysClockFreq+0xc8>)
 800352a:	5cd3      	ldrb	r3, [r2, r3]
 800352c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	220f      	movs	r2, #15
 8003538:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	fa92 f2a2 	rbit	r2, r2
 8003540:	60fa      	str	r2, [r7, #12]
  return result;
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	40d3      	lsrs	r3, r2
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	e004      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	623b      	str	r3, [r7, #32]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003580:	623b      	str	r3, [r7, #32]
      break;
 8003582:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003584:	6a3b      	ldr	r3, [r7, #32]
}
 8003586:	4618      	mov	r0, r3
 8003588:	372c      	adds	r7, #44	; 0x2c
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200
 800359c:	08004a00 	.word	0x08004a00
 80035a0:	08004a10 	.word	0x08004a10
 80035a4:	003d0900 	.word	0x003d0900

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b092      	sub	sp, #72	; 0x48
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80d4 	beq.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035cc:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	61d3      	str	r3, [r2, #28]
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f6:	4b45      	ldr	r3, [pc, #276]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d118      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003602:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a41      	ldr	r2, [pc, #260]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360e:	f7fd f97f 	bl	8000910 <HAL_GetTick>
 8003612:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	e008      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003616:	f7fd f97b 	bl	8000910 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b64      	cmp	r3, #100	; 0x64
 8003622:	d901      	bls.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e169      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8084 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003650:	429a      	cmp	r2, r3
 8003652:	d07c      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2301      	movs	r3, #1
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	461a      	mov	r2, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a6:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04b      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b6:	f7fd f92b 	bl	8000910 <HAL_GetTick>
 80036ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd f927 	bl	8000910 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e113      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036d4:	2302      	movs	r3, #2
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
 80036e0:	2302      	movs	r3, #2
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
  return result;
 80036ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d108      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003702:	4b01      	ldr	r3, [pc, #4]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	e00d      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003708:	40021000 	.word	0x40021000
 800370c:	40007000 	.word	0x40007000
 8003710:	10908100 	.word	0x10908100
 8003714:	2302      	movs	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	4b78      	ldr	r3, [pc, #480]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2202      	movs	r2, #2
 8003726:	613a      	str	r2, [r7, #16]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	60fa      	str	r2, [r7, #12]
  return result;
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	fab2 f282 	clz	r2, r2
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f002 021f 	and.w	r2, r2, #31
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0b7      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800374e:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	496a      	ldr	r1, [pc, #424]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375c:	4313      	orrs	r3, r2
 800375e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003760:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003772:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003780:	4b60      	ldr	r3, [pc, #384]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f023 0203 	bic.w	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	495d      	ldr	r1, [pc, #372]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378e:	4313      	orrs	r3, r2
 8003790:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379e:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4956      	ldr	r1, [pc, #344]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037bc:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	494e      	ldr	r1, [pc, #312]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f023 0210 	bic.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4947      	ldr	r1, [pc, #284]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037f8:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	493f      	ldr	r1, [pc, #252]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f023 0220 	bic.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4938      	ldr	r1, [pc, #224]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003824:	4313      	orrs	r3, r2
 8003826:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003834:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4930      	ldr	r1, [pc, #192]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	4929      	ldr	r1, [pc, #164]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	4921      	ldr	r1, [pc, #132]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	491a      	ldr	r1, [pc, #104]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	4912      	ldr	r1, [pc, #72]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	490b      	ldr	r1, [pc, #44]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3748      	adds	r7, #72	; 0x48
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e049      	b.n	80039ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fc fedc 	bl	80006ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fb74 	bl	8004034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e049      	b.n	8003a5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f841 	bl	8003a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fb1d 	bl	8004034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_TIM_PWM_Start+0x24>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	e03c      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d109      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x3e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e02f      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d109      	bne.n	8003ad0 <HAL_TIM_PWM_Start+0x58>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e022      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d109      	bne.n	8003aea <HAL_TIM_PWM_Start+0x72>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	bf14      	ite	ne
 8003ae2:	2301      	movne	r3, #1
 8003ae4:	2300      	moveq	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	e015      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d109      	bne.n	8003b04 <HAL_TIM_PWM_Start+0x8c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_TIM_PWM_Start+0x9e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e097      	b.n	8003c4e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start+0xb6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	e023      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start+0xc6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b3c:	e01b      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0xd6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	e013      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xe6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b5c:	e00b      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0xf6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	e003      	b.n	8003b76 <HAL_TIM_PWM_Start+0xfe>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	6839      	ldr	r1, [r7, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fe58 	bl	8004834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a33      	ldr	r2, [pc, #204]	; (8003c58 <HAL_TIM_PWM_Start+0x1e0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x13e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a32      	ldr	r2, [pc, #200]	; (8003c5c <HAL_TIM_PWM_Start+0x1e4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x13e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <HAL_TIM_PWM_Start+0x1e8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x13e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2f      	ldr	r2, [pc, #188]	; (8003c64 <HAL_TIM_PWM_Start+0x1ec>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x13e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	; (8003c68 <HAL_TIM_PWM_Start+0x1f0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_PWM_Start+0x142>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_TIM_PWM_Start+0x144>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <HAL_TIM_PWM_Start+0x1e0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_TIM_PWM_Start+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be2:	d013      	beq.n	8003c0c <HAL_TIM_PWM_Start+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_TIM_PWM_Start+0x1f4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_TIM_PWM_Start+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <HAL_TIM_PWM_Start+0x1f8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_TIM_PWM_Start+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_TIM_PWM_Start+0x1e4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_TIM_PWM_Start+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIM_PWM_Start+0x1e8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d115      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_TIM_PWM_Start+0x1fc>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d015      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x1d2>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c24:	d011      	beq.n	8003c4a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e000      	b.n	8003c4c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40012c00 	.word	0x40012c00
 8003c5c:	40013400 	.word	0x40013400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40000800 	.word	0x40000800
 8003c74:	00010007 	.word	0x00010007

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0ff      	b.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b14      	cmp	r3, #20
 8003ca2:	f200 80f0 	bhi.w	8003e86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003e87 	.word	0x08003e87
 8003cb4:	08003e87 	.word	0x08003e87
 8003cb8:	08003e87 	.word	0x08003e87
 8003cbc:	08003d41 	.word	0x08003d41
 8003cc0:	08003e87 	.word	0x08003e87
 8003cc4:	08003e87 	.word	0x08003e87
 8003cc8:	08003e87 	.word	0x08003e87
 8003ccc:	08003d83 	.word	0x08003d83
 8003cd0:	08003e87 	.word	0x08003e87
 8003cd4:	08003e87 	.word	0x08003e87
 8003cd8:	08003e87 	.word	0x08003e87
 8003cdc:	08003dc3 	.word	0x08003dc3
 8003ce0:	08003e87 	.word	0x08003e87
 8003ce4:	08003e87 	.word	0x08003e87
 8003ce8:	08003e87 	.word	0x08003e87
 8003cec:	08003e05 	.word	0x08003e05
 8003cf0:	08003e87 	.word	0x08003e87
 8003cf4:	08003e87 	.word	0x08003e87
 8003cf8:	08003e87 	.word	0x08003e87
 8003cfc:	08003e45 	.word	0x08003e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fa24 	bl	8004154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
      break;
 8003d3e:	e0a5      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa94 	bl	8004274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e084      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fafd 	bl	8004388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
      break;
 8003dc0:	e064      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fb65 	bl	8004498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
      break;
 8003e02:	e043      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fbae 	bl	800456c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0208 	orr.w	r2, r2, #8
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e42:	e023      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fbf2 	bl	8004634 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b6      	b.n	800402a <HAL_TIM_ConfigClockSource+0x18a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d03e      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0xd8>
 8003efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efe:	f200 8087 	bhi.w	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f06:	f000 8086 	beq.w	8004016 <HAL_TIM_ConfigClockSource+0x176>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d87f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f10:	2b70      	cmp	r3, #112	; 0x70
 8003f12:	d01a      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0xaa>
 8003f14:	2b70      	cmp	r3, #112	; 0x70
 8003f16:	d87b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f18:	2b60      	cmp	r3, #96	; 0x60
 8003f1a:	d050      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x11e>
 8003f1c:	2b60      	cmp	r3, #96	; 0x60
 8003f1e:	d877      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f20:	2b50      	cmp	r3, #80	; 0x50
 8003f22:	d03c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0xfe>
 8003f24:	2b50      	cmp	r3, #80	; 0x50
 8003f26:	d873      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d058      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x13e>
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d86f      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d064      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d867      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05c      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d05a      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x15e>
 8003f48:	e062      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	f000 fc4b 	bl	80047f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]
      break;
 8003f76:	e04f      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	f000 fc34 	bl	80047f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 fba8 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fc01 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 fbc7 	bl	800475e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fbf1 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 fb88 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fbe1 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f000 fbd8 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800400e:	e003      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      break;
 8004014:	e000      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3c      	ldr	r2, [pc, #240]	; (8004138 <TIM_Base_SetConfig+0x104>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00f      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d00b      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a39      	ldr	r2, [pc, #228]	; (800413c <TIM_Base_SetConfig+0x108>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a38      	ldr	r2, [pc, #224]	; (8004140 <TIM_Base_SetConfig+0x10c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_Base_SetConfig+0x38>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a37      	ldr	r2, [pc, #220]	; (8004144 <TIM_Base_SetConfig+0x110>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d108      	bne.n	800407e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <TIM_Base_SetConfig+0x104>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01b      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d017      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <TIM_Base_SetConfig+0x108>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <TIM_Base_SetConfig+0x10c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <TIM_Base_SetConfig+0x110>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <TIM_Base_SetConfig+0x114>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <TIM_Base_SetConfig+0x118>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_Base_SetConfig+0x11c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <TIM_Base_SetConfig+0x104>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00f      	beq.n	800411c <TIM_Base_SetConfig+0xe8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <TIM_Base_SetConfig+0x110>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0xe8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <TIM_Base_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0xe8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0f      	ldr	r2, [pc, #60]	; (800414c <TIM_Base_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0xe8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <TIM_Base_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	615a      	str	r2, [r3, #20]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40013400 	.word	0x40013400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <TIM_OC1_SetConfig+0x10c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00f      	beq.n	80041d4 <TIM_OC1_SetConfig+0x80>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a2b      	ldr	r2, [pc, #172]	; (8004264 <TIM_OC1_SetConfig+0x110>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_OC1_SetConfig+0x80>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <TIM_OC1_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_OC1_SetConfig+0x80>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <TIM_OC1_SetConfig+0x118>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_OC1_SetConfig+0x80>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a28      	ldr	r2, [pc, #160]	; (8004270 <TIM_OC1_SetConfig+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10c      	bne.n	80041ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0308 	bic.w	r3, r3, #8
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1b      	ldr	r2, [pc, #108]	; (8004260 <TIM_OC1_SetConfig+0x10c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00f      	beq.n	8004216 <TIM_OC1_SetConfig+0xc2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <TIM_OC1_SetConfig+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_OC1_SetConfig+0xc2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_OC1_SetConfig+0x114>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_OC1_SetConfig+0xc2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_OC1_SetConfig+0x118>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC1_SetConfig+0xc2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <TIM_OC1_SetConfig+0x11c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d111      	bne.n	800423a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00
 8004264:	40013400 	.word	0x40013400
 8004268:	40014000 	.word	0x40014000
 800426c:	40014400 	.word	0x40014400
 8004270:	40014800 	.word	0x40014800

08004274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0210 	bic.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0320 	bic.w	r3, r3, #32
 80042c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <TIM_OC2_SetConfig+0x100>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC2_SetConfig+0x6c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a27      	ldr	r2, [pc, #156]	; (8004378 <TIM_OC2_SetConfig+0x104>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10d      	bne.n	80042fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <TIM_OC2_SetConfig+0x100>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00f      	beq.n	8004324 <TIM_OC2_SetConfig+0xb0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <TIM_OC2_SetConfig+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00b      	beq.n	8004324 <TIM_OC2_SetConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <TIM_OC2_SetConfig+0x108>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d007      	beq.n	8004324 <TIM_OC2_SetConfig+0xb0>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <TIM_OC2_SetConfig+0x10c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d003      	beq.n	8004324 <TIM_OC2_SetConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a19      	ldr	r2, [pc, #100]	; (8004384 <TIM_OC2_SetConfig+0x110>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d113      	bne.n	800434c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800432a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004332:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40013400 	.word	0x40013400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800

08004388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a27      	ldr	r2, [pc, #156]	; (8004484 <TIM_OC3_SetConfig+0xfc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC3_SetConfig+0x6a>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a26      	ldr	r2, [pc, #152]	; (8004488 <TIM_OC3_SetConfig+0x100>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d10d      	bne.n	800440e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <TIM_OC3_SetConfig+0xfc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00f      	beq.n	8004436 <TIM_OC3_SetConfig+0xae>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <TIM_OC3_SetConfig+0x100>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_OC3_SetConfig+0xae>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1a      	ldr	r2, [pc, #104]	; (800448c <TIM_OC3_SetConfig+0x104>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_OC3_SetConfig+0xae>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <TIM_OC3_SetConfig+0x108>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC3_SetConfig+0xae>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <TIM_OC3_SetConfig+0x10c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800443c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	621a      	str	r2, [r3, #32]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40013400 	.word	0x40013400
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800

08004498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <TIM_OC4_SetConfig+0xc0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00f      	beq.n	800451c <TIM_OC4_SetConfig+0x84>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <TIM_OC4_SetConfig+0xc4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_OC4_SetConfig+0x84>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a16      	ldr	r2, [pc, #88]	; (8004560 <TIM_OC4_SetConfig+0xc8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_OC4_SetConfig+0x84>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <TIM_OC4_SetConfig+0xcc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_OC4_SetConfig+0x84>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a14      	ldr	r2, [pc, #80]	; (8004568 <TIM_OC4_SetConfig+0xd0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d109      	bne.n	8004530 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40013400 	.word	0x40013400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a17      	ldr	r2, [pc, #92]	; (8004620 <TIM_OC5_SetConfig+0xb4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00f      	beq.n	80045e6 <TIM_OC5_SetConfig+0x7a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a16      	ldr	r2, [pc, #88]	; (8004624 <TIM_OC5_SetConfig+0xb8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <TIM_OC5_SetConfig+0x7a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <TIM_OC5_SetConfig+0xbc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <TIM_OC5_SetConfig+0x7a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC5_SetConfig+0xc0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_OC5_SetConfig+0x7a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <TIM_OC5_SetConfig+0xc4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d109      	bne.n	80045fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	051b      	lsls	r3, r3, #20
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <TIM_OC6_SetConfig+0xb8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_OC6_SetConfig+0x7c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a17      	ldr	r2, [pc, #92]	; (80046f0 <TIM_OC6_SetConfig+0xbc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_OC6_SetConfig+0x7c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <TIM_OC6_SetConfig+0xc0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_OC6_SetConfig+0x7c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <TIM_OC6_SetConfig+0xc4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_OC6_SetConfig+0x7c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <TIM_OC6_SetConfig+0xc8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d109      	bne.n	80046c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	029b      	lsls	r3, r3, #10
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 030a 	bic.w	r3, r3, #10
 800473c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b087      	sub	sp, #28
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0210 	bic.w	r2, r3, #16
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2201      	movs	r2, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1a      	ldr	r2, [r3, #32]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e063      	b.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d013      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4313      	orrs	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40014000 	.word	0x40014000

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f818 	bl	80049d8 <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a20 	.word	0x08004a20
 80049cc:	08004a20 	.word	0x08004a20
 80049d0:	08004a20 	.word	0x08004a20
 80049d4:	08004a24 	.word	0x08004a24

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
