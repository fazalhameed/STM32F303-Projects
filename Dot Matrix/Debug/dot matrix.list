
dot matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002874  08002874  000205b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002874  08002874  000205b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002874  08002874  000205b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b0  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000205b0  2**0
                  CONTENTS
 10 .bss          00000088  200005b0  200005b0  000205b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000638  20000638  000205b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006594  00000000  00000000  00020623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000013ff  00000000  00000000  00026bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000005f8  00000000  00000000  00027fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000046c  00000000  00000000  000285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bd53  00000000  00000000  00028a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007dae  00000000  00000000  0004476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6725  00000000  00000000  0004c51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000016b8  00000000  00000000  000f2c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  000f42fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005b0 	.word	0x200005b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002818 	.word	0x08002818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005b4 	.word	0x200005b4
 80001c4:	08002818 	.word	0x08002818

080001c8 <MAX72_Init>:
		{0xFF,0xE7,0xC3,0xC1,0x81,0x81,0xCB,0xFF},/*HEART OFF*/
};


void MAX72_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	uint8_t i=0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<5;i++)
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
 80001d6:	e02e      	b.n	8000236 <MAX72_Init+0x6e>
	{
		Row_Data[0]=InitCommands[i][0];
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <MAX72_Init+0x80>)
 80001dc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80001e0:	4b1a      	ldr	r3, [pc, #104]	; (800024c <MAX72_Init+0x84>)
 80001e2:	701a      	strb	r2, [r3, #0]
		Row_Data[1]=InitCommands[i][1];
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4a18      	ldr	r2, [pc, #96]	; (8000248 <MAX72_Init+0x80>)
 80001e8:	005b      	lsls	r3, r3, #1
 80001ea:	4413      	add	r3, r2
 80001ec:	785a      	ldrb	r2, [r3, #1]
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <MAX72_Init+0x84>)
 80001f0:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2140      	movs	r1, #64	; 0x40
 80001f6:	4816      	ldr	r0, [pc, #88]	; (8000250 <MAX72_Init+0x88>)
 80001f8:	f000 fd22 	bl	8000c40 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,Row_Data,2, 1000);
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	2202      	movs	r2, #2
 8000202:	4912      	ldr	r1, [pc, #72]	; (800024c <MAX72_Init+0x84>)
 8000204:	4813      	ldr	r0, [pc, #76]	; (8000254 <MAX72_Init+0x8c>)
 8000206:	f002 f802 	bl	800220e <HAL_SPI_Transmit>
		HAL_Delay(10);
 800020a:	200a      	movs	r0, #10
 800020c:	f000 fa94 	bl	8000738 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	480e      	ldr	r0, [pc, #56]	; (8000250 <MAX72_Init+0x88>)
 8000216:	f000 fd13 	bl	8000c40 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800021a:	200a      	movs	r0, #10
 800021c:	f000 fa8c 	bl	8000738 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2140      	movs	r1, #64	; 0x40
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <MAX72_Init+0x88>)
 8000226:	f000 fd0b 	bl	8000c40 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 fa84 	bl	8000738 <HAL_Delay>
	for(i=0;i<5;i++)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	3301      	adds	r3, #1
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b04      	cmp	r3, #4
 800023a:	d9cd      	bls.n	80001d8 <MAX72_Init+0x10>
	}
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	08002830 	.word	0x08002830
 800024c:	200005cc 	.word	0x200005cc
 8000250:	48000400 	.word	0x48000400
 8000254:	200005d0 	.word	0x200005d0

08000258 <Print_Alphanum>:

void Print_Alphanum(int choice)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<=CHAR_MAX;i++)
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	e031      	b.n	80002ca <Print_Alphanum+0x72>
	{
		for(int k=1;k<=8;k++)
 8000266:	2301      	movs	r3, #1
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	e024      	b.n	80002b6 <Print_Alphanum+0x5e>
		{
			Row_Data[0]=k;
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <Print_Alphanum+0x84>)
 8000272:	701a      	strb	r2, [r3, #0]
			Row_Data[1]=LETTERS[i-1][k-1];
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	1e5a      	subs	r2, r3, #1
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	3b01      	subs	r3, #1
 800027c:	4918      	ldr	r1, [pc, #96]	; (80002e0 <Print_Alphanum+0x88>)
 800027e:	2026      	movs	r0, #38	; 0x26
 8000280:	fb00 f202 	mul.w	r2, r0, r2
 8000284:	440a      	add	r2, r1
 8000286:	4413      	add	r3, r2
 8000288:	781a      	ldrb	r2, [r3, #0]
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <Print_Alphanum+0x84>)
 800028c:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	4814      	ldr	r0, [pc, #80]	; (80002e4 <Print_Alphanum+0x8c>)
 8000294:	f000 fcd4 	bl	8000c40 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1,Row_Data,2, HAL_MAX_DELAY);
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2202      	movs	r2, #2
 800029e:	490f      	ldr	r1, [pc, #60]	; (80002dc <Print_Alphanum+0x84>)
 80002a0:	4811      	ldr	r0, [pc, #68]	; (80002e8 <Print_Alphanum+0x90>)
 80002a2:	f001 ffb4 	bl	800220e <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2140      	movs	r1, #64	; 0x40
 80002aa:	480e      	ldr	r0, [pc, #56]	; (80002e4 <Print_Alphanum+0x8c>)
 80002ac:	f000 fcc8 	bl	8000c40 <HAL_GPIO_WritePin>
		for(int k=1;k<=8;k++)
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	3301      	adds	r3, #1
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	ddd7      	ble.n	800026c <Print_Alphanum+0x14>
		}
		HAL_Delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 fa3a 	bl	8000738 <HAL_Delay>
	for(int i=0;i<=CHAR_MAX;i++)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b26      	cmp	r3, #38	; 0x26
 80002ce:	ddca      	ble.n	8000266 <Print_Alphanum+0xe>
	}
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200005cc 	.word	0x200005cc
 80002e0:	20000000 	.word	0x20000000
 80002e4:	48000400 	.word	0x48000400
 80002e8:	200005d0 	.word	0x200005d0

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   int Ch_no=0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 f9b9 	bl	800066c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f000 f817 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f899 	bl	8000434 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000302:	f000 f859 	bl	80003b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MAX72_Init();
 8000306:	f7ff ff5f 	bl	80001c8 <MAX72_Init>
  {
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */
	  for (Ch_no=0;Ch_no<=38;Ch_no++)
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	e009      	b.n	8000324 <main+0x38>
		  {
			  Print_Alphanum (Ch_no);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f7ff ffa1 	bl	8000258 <Print_Alphanum>
			  HAL_Delay(400);
 8000316:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800031a:	f000 fa0d 	bl	8000738 <HAL_Delay>
	  for (Ch_no=0;Ch_no<=38;Ch_no++)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b26      	cmp	r3, #38	; 0x26
 8000328:	ddf2      	ble.n	8000310 <main+0x24>
 800032a:	e7ee      	b.n	800030a <main+0x1e>

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	; 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fa40 	bl	80027c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000356:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0318 	add.w	r3, r7, #24
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fc7b 	bl	8000c70 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000380:	f000 f8a2 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fca4 	bl	8001cec <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 f88d 	bl	80004c8 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3740      	adds	r7, #64	; 0x40
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_SPI1_Init+0x74>)
 80003be:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <MX_SPI1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_SPI1_Init+0x74>)
 80003c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_SPI1_Init+0x74>)
 80003cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d2:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_SPI1_Init+0x74>)
 80003d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_SPI1_Init+0x74>)
 80003e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_SPI1_Init+0x74>)
 80003f0:	2218      	movs	r2, #24
 80003f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_SPI1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_SPI1_Init+0x74>)
 8000408:	2207      	movs	r2, #7
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_SPI1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_SPI1_Init+0x74>)
 8000414:	2208      	movs	r2, #8
 8000416:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_SPI1_Init+0x74>)
 800041a:	f001 fe4d 	bl	80020b8 <HAL_SPI_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000424:	f000 f850 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200005d0 	.word	0x200005d0
 8000430:	40013000 	.word	0x40013000

08000434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_GPIO_Init+0x8c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_GPIO_Init+0x8c>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <MX_GPIO_Init+0x90>)
 8000498:	f000 fbd2 	bl	8000c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800049c:	2340      	movs	r3, #64	; 0x40
 800049e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 030c 	add.w	r3, r7, #12
 80004b0:	4619      	mov	r1, r3
 80004b2:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_GPIO_Init+0x90>)
 80004b4:	f000 fa4a 	bl	800094c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000400 	.word	0x48000400

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_MspInit+0x44>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_MspInit+0x44>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_MspInit+0x44>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a17      	ldr	r2, [pc, #92]	; (8000598 <HAL_SPI_MspInit+0x7c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d128      	bne.n	8000590 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_SPI_MspInit+0x80>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <HAL_SPI_MspInit+0x80>)
 8000544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_SPI_MspInit+0x80>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_SPI_MspInit+0x80>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <HAL_SPI_MspInit+0x80>)
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_SPI_MspInit+0x80>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800056e:	23a0      	movs	r3, #160	; 0xa0
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057a:	2303      	movs	r3, #3
 800057c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800057e:	2305      	movs	r3, #5
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f000 f9de 	bl	800094c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3728      	adds	r7, #40	; 0x28
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013000 	.word	0x40013000
 800059c:	40021000 	.word	0x40021000

080005a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a4:	e7fe      	b.n	80005a4 <NMI_Handler+0x4>

080005a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <MemManage_Handler+0x4>

080005b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <BusFault_Handler+0x4>

080005b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <UsageFault_Handler+0x4>

080005be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f884 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SystemInit+0x20>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <SystemInit+0x20>)
 8000600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff ffea 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f002 f8c3 	bl	80027d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800064a:	f7ff fe4f 	bl	80002ec <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	200005b0 	.word	0x200005b0
  ldr r2, =_sidata
 800065c:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 8000660:	200005b0 	.word	0x200005b0
  ldr r4, =_ebss
 8000664:	20000638 	.word	0x20000638

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_Init+0x28>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_Init+0x28>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 f931 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	200f      	movs	r0, #15
 8000684:	f000 f808 	bl	8000698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff ff24 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40022000 	.word	0x40022000

08000698 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x54>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_InitTick+0x58>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f93b 	bl	8000932 <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f911 	bl	80008fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200005a4 	.word	0x200005a4
 80006f0:	200005ac 	.word	0x200005ac
 80006f4:	200005a8 	.word	0x200005a8

080006f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200005ac 	.word	0x200005ac
 800071c:	20000634 	.word	0x20000634

08000720 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;  
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000634 	.word	0x20000634

08000738 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff ffee 	bl	8000720 <HAL_GetTick>
 8000744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800075e:	bf00      	nop
 8000760:	f7ff ffde 	bl	8000720 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200005ac 	.word	0x200005ac

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db0a      	blt.n	800080e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <__NVIC_SetPriority+0x4c>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080c:	e00a      	b.n	8000824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <__NVIC_SetPriority+0x50>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	3b04      	subs	r3, #4
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	440b      	add	r3, r1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f1c3 0307 	rsb	r3, r3, #7
 8000852:	2b04      	cmp	r3, #4
 8000854:	bf28      	it	cs
 8000856:	2304      	movcs	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	2b06      	cmp	r3, #6
 8000860:	d902      	bls.n	8000868 <NVIC_EncodePriority+0x30>
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3b03      	subs	r3, #3
 8000866:	e000      	b.n	800086a <NVIC_EncodePriority+0x32>
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43da      	mvns	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	4313      	orrs	r3, r2
         );
}
 8000892:	4618      	mov	r0, r3
 8000894:	3724      	adds	r7, #36	; 0x24
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff8e 	bl	80007e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff47 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff5c 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff8e 	bl	8000838 <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5d 	bl	80007e4 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffb0 	bl	80008a0 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800095a:	e154      	b.n	8000c06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	fa01 f303 	lsl.w	r3, r1, r3
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 8146 	beq.w	8000c00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d005      	beq.n	800098c <HAL_GPIO_Init+0x40>
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b02      	cmp	r3, #2
 800098a:	d130      	bne.n	80009ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	2203      	movs	r2, #3
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009c2:	2201      	movs	r2, #1
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	4013      	ands	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	f003 0201 	and.w	r2, r3, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d017      	beq.n	8000a2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	2203      	movs	r2, #3
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d123      	bne.n	8000a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	08da      	lsrs	r2, r3, #3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3208      	adds	r2, #8
 8000a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	08da      	lsrs	r2, r3, #3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3208      	adds	r2, #8
 8000a78:	6939      	ldr	r1, [r7, #16]
 8000a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2203      	movs	r2, #3
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0203 	and.w	r2, r3, #3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 80a0 	beq.w	8000c00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac0:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <HAL_GPIO_Init+0x2d8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a57      	ldr	r2, [pc, #348]	; (8000c24 <HAL_GPIO_Init+0x2d8>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <HAL_GPIO_Init+0x2d8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ad8:	4a53      	ldr	r2, [pc, #332]	; (8000c28 <HAL_GPIO_Init+0x2dc>)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b02:	d019      	beq.n	8000b38 <HAL_GPIO_Init+0x1ec>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a49      	ldr	r2, [pc, #292]	; (8000c2c <HAL_GPIO_Init+0x2e0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d013      	beq.n	8000b34 <HAL_GPIO_Init+0x1e8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_GPIO_Init+0x2e4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d00d      	beq.n	8000b30 <HAL_GPIO_Init+0x1e4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a47      	ldr	r2, [pc, #284]	; (8000c34 <HAL_GPIO_Init+0x2e8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <HAL_GPIO_Init+0x1e0>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a46      	ldr	r2, [pc, #280]	; (8000c38 <HAL_GPIO_Init+0x2ec>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d101      	bne.n	8000b28 <HAL_GPIO_Init+0x1dc>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e008      	b.n	8000b3a <HAL_GPIO_Init+0x1ee>
 8000b28:	2305      	movs	r3, #5
 8000b2a:	e006      	b.n	8000b3a <HAL_GPIO_Init+0x1ee>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e004      	b.n	8000b3a <HAL_GPIO_Init+0x1ee>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_Init+0x1ee>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <HAL_GPIO_Init+0x1ee>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	f002 0203 	and.w	r2, r2, #3
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	4093      	lsls	r3, r2
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b4a:	4937      	ldr	r1, [pc, #220]	; (8000c28 <HAL_GPIO_Init+0x2dc>)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3302      	adds	r3, #2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b7c:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_GPIO_Init+0x2f0>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	3301      	adds	r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f47f aea3 	bne.w	800095c <HAL_GPIO_Init+0x10>
  }
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48000800 	.word	0x48000800
 8000c34:	48000c00 	.word	0x48000c00
 8000c38:	48001000 	.word	0x48001000
 8000c3c:	40010400 	.word	0x40010400

08000c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	787b      	ldrb	r3, [r7, #1]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c56:	887a      	ldrh	r2, [r7, #2]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c5c:	e002      	b.n	8000c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	f001 b823 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 817d 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cac:	4bbc      	ldr	r3, [pc, #752]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d00c      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb8:	4bb9      	ldr	r3, [pc, #740]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d15c      	bne.n	8000d7e <HAL_RCC_OscConfig+0x10e>
 8000cc4:	4bb6      	ldr	r3, [pc, #728]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd0:	d155      	bne.n	8000d7e <HAL_RCC_OscConfig+0x10e>
 8000cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	fab3 f383 	clz	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	095b      	lsrs	r3, r3, #5
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d102      	bne.n	8000d04 <HAL_RCC_OscConfig+0x94>
 8000cfe:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	e015      	b.n	8000d30 <HAL_RCC_OscConfig+0xc0>
 8000d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d2c:	4b9c      	ldr	r3, [pc, #624]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d3c:	fa92 f2a2 	rbit	r2, r2
 8000d40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	f042 0220 	orr.w	r2, r2, #32
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 811f 	beq.w	8000fa4 <HAL_RCC_OscConfig+0x334>
 8000d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8116 	bne.w	8000fa4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f000 bfaf 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d8e:	d106      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12e>
 8000d90:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a82      	ldr	r2, [pc, #520]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	e036      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x158>
 8000dae:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7b      	ldr	r2, [pc, #492]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e021      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x184>
 8000dda:	4b71      	ldr	r3, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a70      	ldr	r2, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a6d      	ldr	r2, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0x19c>
 8000df4:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b67      	ldr	r3, [pc, #412]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a66      	ldr	r2, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e0c:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	f023 020f 	bic.w	r2, r3, #15
 8000e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	495f      	ldr	r1, [pc, #380]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d059      	beq.n	8000eea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fc73 	bl	8000720 <HAL_GetTick>
 8000e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e00a      	b.n	8000e56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fc6e 	bl	8000720 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b64      	cmp	r3, #100	; 0x64
 8000e4e:	d902      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f000 bf43 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8000e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	095b      	lsrs	r3, r3, #5
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <HAL_RCC_OscConfig+0x218>
 8000e82:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	e015      	b.n	8000eb4 <HAL_RCC_OscConfig+0x244>
 8000e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e90:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ea4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ea8:	fa93 f3a3 	rbit	r3, r3
 8000eac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ebc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ec0:	fa92 f2a2 	rbit	r2, r2
 8000ec4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ec8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ecc:	fab2 f282 	clz	r2, r2
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	f042 0220 	orr.w	r2, r2, #32
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	f002 021f 	and.w	r2, r2, #31
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0ab      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1d0>
 8000ee8:	e05d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc19 	bl	8000720 <HAL_GetTick>
 8000eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e00a      	b.n	8000f0a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc14 	bl	8000720 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d902      	bls.n	8000f0a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	f000 bee9 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8000f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d102      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2cc>
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e015      	b.n	8000f68 <HAL_RCC_OscConfig+0x2f8>
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f54:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f58:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_RCC_OscConfig+0x330>)
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f70:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f74:	fa92 f2a2 	rbit	r2, r2
 8000f78:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f7c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f80:	fab2 f282 	clz	r2, r2
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f042 0220 	orr.w	r2, r2, #32
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f002 021f 	and.w	r2, r2, #31
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ab      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x284>
 8000f9c:	e003      	b.n	8000fa6 <HAL_RCC_OscConfig+0x336>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 817d 	beq.w	80012b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fbc:	4ba6      	ldr	r3, [pc, #664]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc8:	4ba3      	ldr	r3, [pc, #652]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d172      	bne.n	80010ba <HAL_RCC_OscConfig+0x44a>
 8000fd4:	4ba0      	ldr	r3, [pc, #640]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d16c      	bne.n	80010ba <HAL_RCC_OscConfig+0x44a>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ff2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	095b      	lsrs	r3, r3, #5
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d102      	bne.n	8001010 <HAL_RCC_OscConfig+0x3a0>
 800100a:	4b93      	ldr	r3, [pc, #588]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	e013      	b.n	8001038 <HAL_RCC_OscConfig+0x3c8>
 8001010:	2302      	movs	r3, #2
 8001012:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001028:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800102c:	fa93 f3a3 	rbit	r3, r3
 8001030:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001034:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2202      	movs	r2, #2
 800103a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800103e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001042:	fa92 f2a2 	rbit	r2, r2
 8001046:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800104a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	f002 021f 	and.w	r2, r2, #31
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <HAL_RCC_OscConfig+0x410>
 800106a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d002      	beq.n	8001080 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	f000 be2e 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	21f8      	movs	r1, #248	; 0xf8
 8001096:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800109e:	fa91 f1a1 	rbit	r1, r1
 80010a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010aa:	fab1 f181 	clz	r1, r1
 80010ae:	b2c9      	uxtb	r1, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	4969      	ldr	r1, [pc, #420]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b8:	e0fd      	b.n	80012b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8088 	beq.w	80011dc <HAL_RCC_OscConfig+0x56c>
 80010cc:	2301      	movs	r3, #1
 80010ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	461a      	mov	r2, r3
 80010f4:	2301      	movs	r3, #1
 80010f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fb12 	bl	8000720 <HAL_GetTick>
 80010fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001102:	f7ff fb0d 	bl	8000720 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d902      	bls.n	8001118 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	f000 bde2 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800112a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x4d8>
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	e013      	b.n	8001170 <HAL_RCC_OscConfig+0x500>
 8001148:	2302      	movs	r3, #2
 800114a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001160:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2202      	movs	r2, #2
 8001172:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001176:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001182:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0af      	beq.n	8001102 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	21f8      	movs	r1, #248	; 0xf8
 80011b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011c0:	fa91 f1a1 	rbit	r1, r1
 80011c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011cc:	fab1 f181 	clz	r1, r1
 80011d0:	b2c9      	uxtb	r1, r1
 80011d2:	408b      	lsls	r3, r1
 80011d4:	4920      	ldr	r1, [pc, #128]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
 80011da:	e06c      	b.n	80012b6 <HAL_RCC_OscConfig+0x646>
 80011dc:	2301      	movs	r3, #1
 80011de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011e6:	fa93 f3a3 	rbit	r3, r3
 80011ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	461a      	mov	r2, r3
 8001204:	2300      	movs	r3, #0
 8001206:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fa8a 	bl	8000720 <HAL_GetTick>
 800120c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001210:	e00a      	b.n	8001228 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fa85 	bl	8000720 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d902      	bls.n	8001228 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	f000 bd5a 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800123a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d104      	bne.n	800125c <HAL_RCC_OscConfig+0x5ec>
 8001252:	4b01      	ldr	r3, [pc, #4]	; (8001258 <HAL_RCC_OscConfig+0x5e8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x614>
 8001258:	40021000 	.word	0x40021000
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001274:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001280:	4bc8      	ldr	r3, [pc, #800]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	2202      	movs	r2, #2
 8001286:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800128a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800128e:	fa92 f2a2 	rbit	r2, r2
 8001292:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001296:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800129a:	fab2 f282 	clz	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	f042 0220 	orr.w	r2, r2, #32
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f002 021f 	and.w	r2, r2, #31
 80012aa:	2101      	movs	r1, #1
 80012ac:	fa01 f202 	lsl.w	r2, r1, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ad      	bne.n	8001212 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8110 	beq.w	80014ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d079      	beq.n	80013d0 <HAL_RCC_OscConfig+0x760>
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4bab      	ldr	r3, [pc, #684]	; (80015a8 <HAL_RCC_OscConfig+0x938>)
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	2301      	movs	r3, #1
 8001304:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fa0b 	bl	8000720 <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fa06 	bl	8000720 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 bcdb 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	fa93 f2a3 	rbit	r2, r3
 8001352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800137e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800138c:	2102      	movs	r1, #2
 800138e:	6019      	str	r1, [r3, #0]
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	fa93 f1a3 	rbit	r1, r3
 800139e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013a6:	6019      	str	r1, [r3, #0]
  return result;
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fab3 f383 	clz	r3, r3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0a0      	beq.n	8001310 <HAL_RCC_OscConfig+0x6a0>
 80013ce:	e08d      	b.n	80014ec <HAL_RCC_OscConfig+0x87c>
 80013d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013f2:	601a      	str	r2, [r3, #0]
  return result;
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x938>)
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	461a      	mov	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff f985 	bl	8000720 <HAL_GetTick>
 8001416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141a:	e00a      	b.n	8001432 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff f980 	bl	8000720 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d902      	bls.n	8001432 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	f000 bc55 	b.w	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001436:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	fa93 f2a3 	rbit	r2, r3
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800149c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 80014a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014aa:	2102      	movs	r1, #2
 80014ac:	6019      	str	r1, [r3, #0]
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f1a3 	rbit	r1, r3
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014c4:	6019      	str	r1, [r3, #0]
  return result;
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d197      	bne.n	800141c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 81a1 	beq.w	8001844 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d116      	bne.n	8001542 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800153a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d11a      	bne.n	8001584 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff f8e1 	bl	8000720 <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	e009      	b.n	8001578 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001564:	f7ff f8dc 	bl	8000720 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e3b1      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x93c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ef      	beq.n	8001564 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_OscConfig+0x940>
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a02      	ldr	r2, [pc, #8]	; (80015a4 <HAL_RCC_OscConfig+0x934>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e03c      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	10908120 	.word	0x10908120
 80015ac:	40007000 	.word	0x40007000
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x96a>
 80015c0:	4bc1      	ldr	r3, [pc, #772]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4ac0      	ldr	r2, [pc, #768]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4bbe      	ldr	r3, [pc, #760]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4abd      	ldr	r2, [pc, #756]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e020      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 80015da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x994>
 80015ea:	4bb7      	ldr	r3, [pc, #732]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4ab6      	ldr	r2, [pc, #728]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4bb4      	ldr	r3, [pc, #720]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4ab3      	ldr	r2, [pc, #716]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x9ac>
 8001604:	4bb0      	ldr	r3, [pc, #704]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4aaf      	ldr	r2, [pc, #700]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	4bad      	ldr	r3, [pc, #692]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4aac      	ldr	r2, [pc, #688]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001616:	f023 0304 	bic.w	r3, r3, #4
 800161a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8081 	beq.w	8001730 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff f877 	bl	8000720 <HAL_GetTick>
 8001632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff f872 	bl	8000720 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e345      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001658:	2202      	movs	r2, #2
 800165a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001696:	601a      	str	r2, [r3, #0]
  return result;
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	095b      	lsrs	r3, r3, #5
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d102      	bne.n	80016bc <HAL_RCC_OscConfig+0xa4c>
 80016b6:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	e013      	b.n	80016e4 <HAL_RCC_OscConfig+0xa74>
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c4:	2202      	movs	r2, #2
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fa93 f2a3 	rbit	r2, r3
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016ec:	2102      	movs	r1, #2
 80016ee:	6011      	str	r1, [r2, #0]
 80016f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	fa92 f1a2 	rbit	r1, r2
 80016fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001702:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001706:	6011      	str	r1, [r2, #0]
  return result;
 8001708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	fab2 f282 	clz	r2, r2
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f002 021f 	and.w	r2, r2, #31
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d084      	beq.n	8001638 <HAL_RCC_OscConfig+0x9c8>
 800172e:	e07f      	b.n	8001830 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7fe fff6 	bl	8000720 <HAL_GetTick>
 8001734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7fe fff1 	bl	8000720 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2c4      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001798:	601a      	str	r2, [r3, #0]
  return result;
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d102      	bne.n	80017be <HAL_RCC_OscConfig+0xb4e>
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	e013      	b.n	80017e6 <HAL_RCC_OscConfig+0xb76>
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017c6:	2202      	movs	r2, #2
 80017c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017ee:	2102      	movs	r1, #2
 80017f0:	6011      	str	r1, [r2, #0]
 80017f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001804:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001808:	6011      	str	r1, [r2, #0]
  return result;
 800180a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d184      	bne.n	800173a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001830:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8242 	beq.w	8001cda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <HAL_RCC_OscConfig+0xc58>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	f000 8213 	beq.w	8001c8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b02      	cmp	r3, #2
 8001872:	f040 8162 	bne.w	8001b3a <HAL_RCC_OscConfig+0xeca>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800187e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800189a:	601a      	str	r2, [r3, #0]
  return result;
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	fab3 f383 	clz	r3, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	461a      	mov	r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7fe ff30 	bl	8000720 <HAL_GetTick>
 80018c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c4:	e00c      	b.n	80018e0 <HAL_RCC_OscConfig+0xc70>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018cc:	f7fe ff28 	bl	8000720 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1fd      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800190e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d102      	bne.n	800192a <HAL_RCC_OscConfig+0xcba>
 8001924:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e027      	b.n	800197a <HAL_RCC_OscConfig+0xd0a>
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4b9c      	ldr	r3, [pc, #624]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800197e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001982:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001986:	6011      	str	r1, [r2, #0]
 8001988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	fa92 f1a2 	rbit	r1, r2
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800199e:	6011      	str	r1, [r2, #0]
  return result;
 80019a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	fab2 f282 	clz	r2, r2
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f042 0220 	orr.w	r2, r2, #32
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f002 021f 	and.w	r2, r2, #31
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d182      	bne.n	80018cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	430b      	orrs	r3, r1
 80019e8:	497f      	ldr	r1, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80019f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a12:	601a      	str	r2, [r3, #0]
  return result;
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2301      	movs	r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7fe fe74 	bl	8000720 <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	e009      	b.n	8001a52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe fe6f 	bl	8000720 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e144      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	fa93 f2a3 	rbit	r2, r3
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a76:	601a      	str	r2, [r3, #0]
  return result;
 8001a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0xe2c>
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e027      	b.n	8001aec <HAL_RCC_OscConfig+0xe7c>
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001af0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001af8:	6011      	str	r1, [r2, #0]
 8001afa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001afe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	fa92 f1a2 	rbit	r1, r2
 8001b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b10:	6011      	str	r1, [r2, #0]
  return result;
 8001b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d082      	beq.n	8001a3e <HAL_RCC_OscConfig+0xdce>
 8001b38:	e0cf      	b.n	8001cda <HAL_RCC_OscConfig+0x106a>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fdce 	bl	8000720 <HAL_GetTick>
 8001b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe fdc9 	bl	8000720 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e09e      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
 8001b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bc2:	601a      	str	r2, [r3, #0]
  return result;
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bcc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d104      	bne.n	8001bec <HAL_RCC_OscConfig+0xf7c>
 8001be2:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <HAL_RCC_OscConfig+0xf78>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	e029      	b.n	8001c3c <HAL_RCC_OscConfig+0xfcc>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x1078>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c40:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c48:	6011      	str	r1, [r2, #0]
 8001c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c4e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	fa92 f1a2 	rbit	r1, r2
 8001c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c60:	6011      	str	r1, [r2, #0]
  return result;
 8001c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	fab2 f282 	clz	r2, r2
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	f042 0220 	orr.w	r2, r2, #32
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f002 021f 	and.w	r2, r2, #31
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d180      	bne.n	8001b8a <HAL_RCC_OscConfig+0xf1a>
 8001c88:	e027      	b.n	8001cda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e01e      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_OscConfig+0x1078>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ca6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001caa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d10b      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b09e      	sub	sp, #120	; 0x78
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e162      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 0207 	bic.w	r2, r3, #7
 8001d1a:	498b      	ldr	r1, [pc, #556]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e14a      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	497f      	ldr	r1, [pc, #508]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80dc 	beq.w	8001f18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d13c      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xf6>
 8001d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xa6>
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	e00f      	b.n	8001db2 <HAL_RCC_ClockConfig+0xc6>
 8001d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
 8001da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001db6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dba:	fa92 f2a2 	rbit	r2, r2
 8001dbe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001dc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dc2:	fab2 f282 	clz	r2, r2
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f042 0220 	orr.w	r2, r2, #32
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f002 021f 	and.w	r2, r2, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d17b      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0f3      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d13c      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x178>
 8001dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x128>
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_ClockConfig+0x148>
 8001e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
 8001e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e26:	643b      	str	r3, [r7, #64]	; 0x40
 8001e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e38:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d13a      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0b2      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001e64:	2302      	movs	r3, #2
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	095b      	lsrs	r3, r3, #5
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x1a0>
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1bc>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	61ba      	str	r2, [r7, #24]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	617a      	str	r2, [r7, #20]
  return result;
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e079      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	491a      	ldr	r1, [pc, #104]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fc1a 	bl	8000720 <HAL_GetTick>
 8001eec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fc16 	bl	8000720 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e061      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCC_ClockConfig+0x260>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d214      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 0207 	bic.w	r2, r3, #7
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e040      	b.n	8001fca <HAL_RCC_ClockConfig+0x2de>
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	491a      	ldr	r1, [pc, #104]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4912      	ldr	r1, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f8e:	f000 f829 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	22f0      	movs	r2, #240	; 0xf0
 8001f9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	40d3      	lsrs	r3, r2
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x2ec>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_ClockConfig+0x2f0>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x2f4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fb68 	bl	8000698 <HAL_InitTick>
  
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3778      	adds	r7, #120	; 0x78
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002844 	.word	0x08002844
 8001fdc:	200005a4 	.word	0x200005a4
 8001fe0:	200005a8 	.word	0x200005a8

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b08b      	sub	sp, #44	; 0x2c
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x30>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x36>
 8002012:	e03c      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e03c      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002020:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002024:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	607a      	str	r2, [r7, #4]
  return result;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	220f      	movs	r2, #15
 8002048:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	fa92 f2a2 	rbit	r2, r2
 8002050:	60fa      	str	r2, [r7, #12]
  return result;
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	40d3      	lsrs	r3, r2
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	fbb2 f2f3 	udiv	r2, r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
 800207c:	e004      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	e002      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002090:	623b      	str	r3, [r7, #32]
      break;
 8002092:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002094:	6a3b      	ldr	r3, [r7, #32]
}
 8002096:	4618      	mov	r0, r3
 8002098:	372c      	adds	r7, #44	; 0x2c
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	007a1200 	.word	0x007a1200
 80020ac:	08002854 	.word	0x08002854
 80020b0:	08002864 	.word	0x08002864
 80020b4:	003d0900 	.word	0x003d0900

080020b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e09d      	b.n	8002206 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020da:	d009      	beq.n	80020f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
 80020e2:	e005      	b.n	80020f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fa06 	bl	800051c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002126:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002130:	d902      	bls.n	8002138 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e002      	b.n	800213e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002146:	d007      	beq.n	8002158 <HAL_SPI_Init+0xa0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002150:	d002      	beq.n	8002158 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	ea42 0103 	orr.w	r1, r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	f003 0204 	and.w	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021d4:	ea42 0103 	orr.w	r1, r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b088      	sub	sp, #32
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_SPI_Transmit+0x22>
 800222c:	2302      	movs	r3, #2
 800222e:	e15f      	b.n	80024f0 <HAL_SPI_Transmit+0x2e2>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002238:	f7fe fa72 	bl	8000720 <HAL_GetTick>
 800223c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800224e:	2302      	movs	r3, #2
 8002250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002252:	e148      	b.n	80024e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_SPI_Transmit+0x52>
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002264:	e13f      	b.n	80024e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2203      	movs	r2, #3
 800226a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	88fa      	ldrh	r2, [r7, #6]
 8002284:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	d10f      	bne.n	80022d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d007      	beq.n	80022f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022f8:	d94f      	bls.n	800239a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_Transmit+0xfa>
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d142      	bne.n	800238e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800232c:	e02f      	b.n	800238e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d112      	bne.n	8002362 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234c:	1c9a      	adds	r2, r3, #2
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002360:	e015      	b.n	800238e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002362:	f7fe f9dd 	bl	8000720 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d803      	bhi.n	800237a <HAL_SPI_Transmit+0x16c>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d102      	bne.n	8002380 <HAL_SPI_Transmit+0x172>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800238c:	e0ab      	b.n	80024e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ca      	bne.n	800232e <HAL_SPI_Transmit+0x120>
 8002398:	e080      	b.n	800249c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <HAL_SPI_Transmit+0x19a>
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d174      	bne.n	8002492 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d912      	bls.n	80023d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	881a      	ldrh	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	1c9a      	adds	r2, r3, #2
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b02      	subs	r3, #2
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023d6:	e05c      	b.n	8002492 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80023fe:	e048      	b.n	8002492 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d12b      	bne.n	8002466 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d912      	bls.n	800243e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	1c9a      	adds	r2, r3, #2
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b02      	subs	r3, #2
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800243c:	e029      	b.n	8002492 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002464:	e015      	b.n	8002492 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002466:	f7fe f95b 	bl	8000720 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_Transmit+0x270>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d102      	bne.n	8002484 <HAL_SPI_Transmit+0x276>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d106      	bne.n	8002492 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002490:	e029      	b.n	80024e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1b1      	bne.n	8002400 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f947 	bl	8002734 <SPI_EndRxTxTransaction>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	77fb      	strb	r3, [r7, #31]
 80024dc:	e003      	b.n	80024e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002508:	f7fe f90a 	bl	8000720 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002518:	f7fe f902 	bl	8000720 <HAL_GetTick>
 800251c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	0d1b      	lsrs	r3, r3, #20
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	e054      	b.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d050      	beq.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002538:	f7fe f8f2 	bl	8000720 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	429a      	cmp	r2, r3
 8002546:	d902      	bls.n	800254e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13d      	bne.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800255c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d111      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002570:	d004      	beq.n	800257c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d107      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	d10f      	bne.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e017      	b.n	80025fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d19b      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200005a4 	.word	0x200005a4

08002608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800261a:	f7fe f881 	bl	8000720 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800262a:	f7fe f879 	bl	8000720 <HAL_GetTick>
 800262e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002638:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	0d1b      	lsrs	r3, r3, #20
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002650:	e060      	b.n	8002714 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002658:	d107      	bne.n	800266a <SPI_WaitFifoStateUntilTimeout+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002668:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d050      	beq.n	8002714 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002672:	f7fe f855 	bl	8000720 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	429a      	cmp	r2, r3
 8002680:	d902      	bls.n	8002688 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d13d      	bne.n	8002704 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a0:	d111      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d004      	beq.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d107      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ce:	d10f      	bne.n	80026f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e010      	b.n	8002726 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3b01      	subs	r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d196      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200005a4 	.word	0x200005a4

08002734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ff5b 	bl	8002608 <SPI_WaitFifoStateUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e027      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fec0 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e014      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff34 	bl	8002608 <SPI_WaitFifoStateUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e000      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <memset>:
 80027c0:	4402      	add	r2, r0
 80027c2:	4603      	mov	r3, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <__libc_init_array>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4d0d      	ldr	r5, [pc, #52]	; (8002808 <__libc_init_array+0x38>)
 80027d4:	4c0d      	ldr	r4, [pc, #52]	; (800280c <__libc_init_array+0x3c>)
 80027d6:	1b64      	subs	r4, r4, r5
 80027d8:	10a4      	asrs	r4, r4, #2
 80027da:	2600      	movs	r6, #0
 80027dc:	42a6      	cmp	r6, r4
 80027de:	d109      	bne.n	80027f4 <__libc_init_array+0x24>
 80027e0:	4d0b      	ldr	r5, [pc, #44]	; (8002810 <__libc_init_array+0x40>)
 80027e2:	4c0c      	ldr	r4, [pc, #48]	; (8002814 <__libc_init_array+0x44>)
 80027e4:	f000 f818 	bl	8002818 <_init>
 80027e8:	1b64      	subs	r4, r4, r5
 80027ea:	10a4      	asrs	r4, r4, #2
 80027ec:	2600      	movs	r6, #0
 80027ee:	42a6      	cmp	r6, r4
 80027f0:	d105      	bne.n	80027fe <__libc_init_array+0x2e>
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
 80027f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f8:	4798      	blx	r3
 80027fa:	3601      	adds	r6, #1
 80027fc:	e7ee      	b.n	80027dc <__libc_init_array+0xc>
 80027fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002802:	4798      	blx	r3
 8002804:	3601      	adds	r6, #1
 8002806:	e7f2      	b.n	80027ee <__libc_init_array+0x1e>
 8002808:	08002874 	.word	0x08002874
 800280c:	08002874 	.word	0x08002874
 8002810:	08002874 	.word	0x08002874
 8002814:	08002878 	.word	0x08002878

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
