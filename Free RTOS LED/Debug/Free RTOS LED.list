
Free RTOS LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d9c  08003d9c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003d9c  08003d9c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d9c  08003d9c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000011a4  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001204  20001204  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f6d6  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002642  00000000  00000000  0002f7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e28  00000000  00000000  00031df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ade  00000000  00000000  00032c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e71c  00000000  00000000  000336f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010893  00000000  00000000  00051e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9d8f  00000000  00000000  000626a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cdc  00000000  00000000  0011c434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00120110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cd4 	.word	0x08003cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08003cd4 	.word	0x08003cd4

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 fa0f 	bl	800062c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f849 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f88d 	bl	8000330 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Redled */
  osThreadDef(Redled, StartRedled, osPriorityNormal, 0, 128);
 8000216:	4b1d      	ldr	r3, [pc, #116]	; (800028c <main+0x88>)
 8000218:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800021c:	461d      	mov	r5, r3
 800021e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000222:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000226:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedledHandle = osThreadCreate(osThread(Redled), NULL);
 800022a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f002 fa24 	bl	800267e <osThreadCreate>
 8000236:	4603      	mov	r3, r0
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <main+0x8c>)
 800023a:	6013      	str	r3, [r2, #0]

  /* definition and creation of greenled */
  osThreadDef(greenled, Startgreenled, osPriorityIdle, 0, 128);
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <main+0x90>)
 800023e:	f107 0420 	add.w	r4, r7, #32
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenledHandle = osThreadCreate(osThread(greenled), NULL);
 8000250:	f107 0320 	add.w	r3, r7, #32
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f002 fa11 	bl	800267e <osThreadCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <main+0x94>)
 8000260:	6013      	str	r3, [r2, #0]

  /* definition and creation of blueled */
  osThreadDef(blueled, Startblueled, osPriorityIdle, 0, 128);
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0x98>)
 8000264:	1d3c      	adds	r4, r7, #4
 8000266:	461d      	mov	r5, r3
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blueledHandle = osThreadCreate(osThread(blueled), NULL);
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f002 fa00 	bl	800267e <osThreadCreate>
 800027e:	4603      	mov	r3, r0
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <main+0x9c>)
 8000282:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000284:	f002 f9f4 	bl	8002670 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	e7fe      	b.n	8000288 <main+0x84>
 800028a:	bf00      	nop
 800028c:	08003cf4 	.word	0x08003cf4
 8000290:	2000031c 	.word	0x2000031c
 8000294:	08003d1c 	.word	0x08003d1c
 8000298:	20000320 	.word	0x20000320
 800029c:	08003d40 	.word	0x08003d40
 80002a0:	20000324 	.word	0x20000324

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f003 fc32 	bl	8003b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c6:	2301      	movs	r3, #1
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d4:	2301      	movs	r3, #1
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0318 	add.w	r3, r7, #24
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fc61 	bl	8000bb4 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f8:	f000 f894 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000300:	2302      	movs	r3, #2
 8000302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2102      	movs	r1, #2
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fc8a 	bl	8001c30 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000322:	f000 f87f 	bl	8000424 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_GPIO_Init+0x78>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <MX_GPIO_Init+0x78>)
 800034c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_GPIO_Init+0x78>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800035a:	60bb      	str	r3, [r7, #8]
 800035c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_GPIO_Init+0x78>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <MX_GPIO_Init+0x78>)
 8000364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_GPIO_Init+0x78>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	211c      	movs	r1, #28
 800037a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037e:	f000 fbe7 	bl	8000b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000382:	231c      	movs	r3, #28
 8000384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fa5e 	bl	800085c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a0:	bf00      	nop
 80003a2:	3720      	adds	r7, #32
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000

080003ac <StartRedled>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRedled */
void StartRedled(void const * argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80003b4:	2104      	movs	r1, #4
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f000 fbe1 	bl	8000b80 <HAL_GPIO_TogglePin>
    osDelay(200);
 80003be:	20c8      	movs	r0, #200	; 0xc8
 80003c0:	f002 f9a9 	bl	8002716 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80003c4:	e7f6      	b.n	80003b4 <StartRedled+0x8>

080003c6 <Startgreenled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startgreenled */
void Startgreenled(void const * argument)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b082      	sub	sp, #8
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startgreenled */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80003ce:	2108      	movs	r1, #8
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f000 fbd4 	bl	8000b80 <HAL_GPIO_TogglePin>
    osDelay(300);
 80003d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003dc:	f002 f99b 	bl	8002716 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80003e0:	e7f5      	b.n	80003ce <Startgreenled+0x8>

080003e2 <Startblueled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startblueled */
void Startblueled(void const * argument)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b082      	sub	sp, #8
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startblueled */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80003ea:	2110      	movs	r1, #16
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f0:	f000 fbc6 	bl	8000b80 <HAL_GPIO_TogglePin>
    osDelay(600);
 80003f4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80003f8:	f002 f98d 	bl	8002716 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80003fc:	e7f5      	b.n	80003ea <Startblueled+0x8>
	...

08000400 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d101      	bne.n	8000416 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000412:	f000 f921 	bl	8000658 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40000400 	.word	0x40000400

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_MspInit+0x4c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a10      	ldr	r2, [pc, #64]	; (800047c <HAL_MspInit+0x4c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HAL_MspInit+0x4c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <HAL_MspInit+0x4c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <HAL_MspInit+0x4c>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_MspInit+0x4c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	210f      	movs	r1, #15
 800046a:	f06f 0001 	mvn.w	r0, #1
 800046e:	f000 f9cb 	bl	8000808 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08e      	sub	sp, #56	; 0x38
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000488:	2300      	movs	r3, #0
 800048a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800048c:	2300      	movs	r3, #0
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000490:	4b33      	ldr	r3, [pc, #204]	; (8000560 <HAL_InitTick+0xe0>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a32      	ldr	r2, [pc, #200]	; (8000560 <HAL_InitTick+0xe0>)
 8000496:	f043 0302 	orr.w	r3, r3, #2
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b30      	ldr	r3, [pc, #192]	; (8000560 <HAL_InitTick+0xe0>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f003 0302 	and.w	r3, r3, #2
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a8:	f107 0210 	add.w	r2, r7, #16
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fdd0 	bl	8002058 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004b8:	6a3b      	ldr	r3, [r7, #32]
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d103      	bne.n	80004ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004c2:	f001 fda7 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80004c6:	6378      	str	r0, [r7, #52]	; 0x34
 80004c8:	e004      	b.n	80004d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004ca:	f001 fda3 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80004ce:	4603      	mov	r3, r0
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004d6:	4a23      	ldr	r2, [pc, #140]	; (8000564 <HAL_InitTick+0xe4>)
 80004d8:	fba2 2303 	umull	r2, r3, r2, r3
 80004dc:	0c9b      	lsrs	r3, r3, #18
 80004de:	3b01      	subs	r3, #1
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <HAL_InitTick+0xe8>)
 80004e4:	4a21      	ldr	r2, [pc, #132]	; (800056c <HAL_InitTick+0xec>)
 80004e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <HAL_InitTick+0xe8>)
 80004ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ee:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <HAL_InitTick+0xe8>)
 80004f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f4:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <HAL_InitTick+0xe8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <HAL_InitTick+0xe8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <HAL_InitTick+0xe8>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000508:	4817      	ldr	r0, [pc, #92]	; (8000568 <HAL_InitTick+0xe8>)
 800050a:	f001 fdd7 	bl	80020bc <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000518:	2b00      	cmp	r3, #0
 800051a:	d11b      	bne.n	8000554 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800051c:	4812      	ldr	r0, [pc, #72]	; (8000568 <HAL_InitTick+0xe8>)
 800051e:	f001 fe2f 	bl	8002180 <HAL_TIM_Base_Start_IT>
 8000522:	4603      	mov	r3, r0
 8000524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000530:	201d      	movs	r0, #29
 8000532:	f000 f985 	bl	8000840 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0f      	cmp	r3, #15
 800053a:	d808      	bhi.n	800054e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	201d      	movs	r0, #29
 8000542:	f000 f961 	bl	8000808 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000546:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <HAL_InitTick+0xf0>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	e002      	b.n	8000554 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000558:	4618      	mov	r0, r3
 800055a:	3738      	adds	r7, #56	; 0x38
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000
 8000564:	431bde83 	.word	0x431bde83
 8000568:	20000328 	.word	0x20000328
 800056c:	40000400 	.word	0x40000400
 8000570:	20000004 	.word	0x20000004

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	e7fe      	b.n	8000578 <NMI_Handler+0x4>

0800057a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <HardFault_Handler+0x4>

08000580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <MemManage_Handler+0x4>

08000586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <UsageFault_Handler+0x4>

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <TIM3_IRQHandler+0x10>)
 80005a6:	f001 fe55 	bl	8002254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000328 	.word	0x20000328

080005b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <SystemInit+0x20>)
 80005ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <SystemInit+0x20>)
 80005c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000610 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff ffea 	bl	80005b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e2:	490d      	ldr	r1, [pc, #52]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f8:	4c0a      	ldr	r4, [pc, #40]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f003 fae7 	bl	8003bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800060a:	f7ff fdfb 	bl	8000204 <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000610:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800061c:	08003da4 	.word	0x08003da4
  ldr r2, =_sbss
 8000620:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000624:	20001204 	.word	0x20001204

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_Init+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <HAL_Init+0x28>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f8d8 	bl	80007f2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	200f      	movs	r0, #15
 8000644:	f7ff ff1c 	bl	8000480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000648:	f7ff fef2 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40022000 	.word	0x40022000

08000658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x20>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x24>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_IncTick+0x24>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000008 	.word	0x20000008
 800067c:	20000374 	.word	0x20000374

08000680 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return uwTick;  
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <HAL_GetTick+0x14>)
 8000686:	681b      	ldr	r3, [r3, #0]
}
 8000688:	4618      	mov	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000374 	.word	0x20000374

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff4c 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800081a:	f7ff ff61 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 800081e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	6978      	ldr	r0, [r7, #20]
 8000826:	f7ff ffb1 	bl	800078c <NVIC_EncodePriority>
 800082a:	4602      	mov	r2, r0
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff80 	bl	8000738 <__NVIC_SetPriority>
}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff54 	bl	80006fc <__NVIC_EnableIRQ>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e154      	b.n	8000b16 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2101      	movs	r1, #1
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 8146 	beq.w	8000b10 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d005      	beq.n	800089c <HAL_GPIO_Init+0x40>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b02      	cmp	r3, #2
 800089a:	d130      	bne.n	80008fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d2:	2201      	movs	r2, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	091b      	lsrs	r3, r3, #4
 80008e8:	f003 0201 	and.w	r2, r3, #1
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f003 0303 	and.w	r3, r3, #3
 8000906:	2b03      	cmp	r3, #3
 8000908:	d017      	beq.n	800093a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2203      	movs	r2, #3
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 0303 	and.w	r3, r3, #3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d123      	bne.n	800098e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	08da      	lsrs	r2, r3, #3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3208      	adds	r2, #8
 800094e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	220f      	movs	r2, #15
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	691a      	ldr	r2, [r3, #16]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	08da      	lsrs	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3208      	adds	r2, #8
 8000988:	6939      	ldr	r1, [r7, #16]
 800098a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 0203 	and.w	r2, r3, #3
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 80a0 	beq.w	8000b10 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x2d8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a57      	ldr	r2, [pc, #348]	; (8000b34 <HAL_GPIO_Init+0x2d8>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b55      	ldr	r3, [pc, #340]	; (8000b34 <HAL_GPIO_Init+0x2d8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e8:	4a53      	ldr	r2, [pc, #332]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a12:	d019      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <HAL_GPIO_Init+0x2e0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_GPIO_Init+0x2e4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a47      	ldr	r2, [pc, #284]	; (8000b44 <HAL_GPIO_Init+0x2e8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a46      	ldr	r2, [pc, #280]	; (8000b48 <HAL_GPIO_Init+0x2ec>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1dc>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e008      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a38:	2305      	movs	r3, #5
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a5a:	4937      	ldr	r1, [pc, #220]	; (8000b38 <HAL_GPIO_Init+0x2dc>)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a68:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a8c:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ab6:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_GPIO_Init+0x2f0>)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f47f aea3 	bne.w	800086c <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	48001000 	.word	0x48001000
 8000b4c:	40010400 	.word	0x40010400

08000b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b60:	787b      	ldrb	r3, [r7, #1]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b6c:	e002      	b.n	8000b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4013      	ands	r3, r2
 8000b98:	041a      	lsls	r2, r3, #16
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	43d9      	mvns	r1, r3
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	400b      	ands	r3, r1
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	619a      	str	r2, [r3, #24]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f001 b823 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 817d 	beq.w	8000eea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bf0:	4bbc      	ldr	r3, [pc, #752]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfc:	4bb9      	ldr	r3, [pc, #740]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d15c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c08:	4bb6      	ldr	r3, [pc, #728]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c14:	d155      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <HAL_RCC_OscConfig+0x94>
 8000c42:	4ba8      	ldr	r3, [pc, #672]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	e015      	b.n	8000c74 <HAL_RCC_OscConfig+0xc0>
 8000c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c60:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c70:	4b9c      	ldr	r3, [pc, #624]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c78:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c80:	fa92 f2a2 	rbit	r2, r2
 8000c84:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	f042 0220 	orr.w	r2, r2, #32
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	f002 021f 	and.w	r2, r2, #31
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 811f 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8116 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f000 bfaf 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
 8000cd4:	4b83      	ldr	r3, [pc, #524]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a82      	ldr	r2, [pc, #520]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e036      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x158>
 8000cf2:	4b7c      	ldr	r3, [pc, #496]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7b      	ldr	r2, [pc, #492]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b79      	ldr	r3, [pc, #484]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a78      	ldr	r2, [pc, #480]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e021      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x184>
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a70      	ldr	r2, [pc, #448]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6d      	ldr	r2, [pc, #436]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d38:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a69      	ldr	r2, [pc, #420]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a66      	ldr	r2, [pc, #408]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d50:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	f023 020f 	bic.w	r2, r3, #15
 8000d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	495f      	ldr	r1, [pc, #380]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d059      	beq.n	8000e2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fc81 	bl	8000680 <HAL_GetTick>
 8000d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	e00a      	b.n	8000d9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fc7c 	bl	8000680 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	; 0x64
 8000d92:	d902      	bls.n	8000d9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f000 bf43 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000dae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	fab3 f383 	clz	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x218>
 8000dc6:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0x244>
 8000dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000de8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000df4:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e04:	fa92 f2a2 	rbit	r2, r2
 8000e08:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	f002 021f 	and.w	r2, r2, #31
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0ab      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1d0>
 8000e2c:	e05d      	b.n	8000eea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc27 	bl	8000680 <HAL_GetTick>
 8000e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fc22 	bl	8000680 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d902      	bls.n	8000e4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f000 bee9 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2cc>
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	e015      	b.n	8000eac <HAL_RCC_OscConfig+0x2f8>
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eb0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000eb4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000eb8:	fa92 f2a2 	rbit	r2, r2
 8000ebc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ec0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	f002 021f 	and.w	r2, r2, #31
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1ab      	bne.n	8000e38 <HAL_RCC_OscConfig+0x284>
 8000ee0:	e003      	b.n	8000eea <HAL_RCC_OscConfig+0x336>
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 817d 	beq.w	80011fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f00:	4ba6      	ldr	r3, [pc, #664]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f0c:	4ba3      	ldr	r3, [pc, #652]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d172      	bne.n	8000ffe <HAL_RCC_OscConfig+0x44a>
 8000f18:	4ba0      	ldr	r3, [pc, #640]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d16c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x44a>
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	095b      	lsrs	r3, r3, #5
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_RCC_OscConfig+0x3a0>
 8000f4e:	4b93      	ldr	r3, [pc, #588]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e013      	b.n	8000f7c <HAL_RCC_OscConfig+0x3c8>
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f78:	4b88      	ldr	r3, [pc, #544]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00a      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x410>
 8000fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 be2e 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc4:	4b75      	ldr	r3, [pc, #468]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	21f8      	movs	r1, #248	; 0xf8
 8000fda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fe2:	fa91 f1a1 	rbit	r1, r1
 8000fe6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fee:	fab1 f181 	clz	r1, r1
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	4969      	ldr	r1, [pc, #420]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffc:	e0fd      	b.n	80011fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8088 	beq.w	8001120 <HAL_RCC_OscConfig+0x56c>
 8001010:	2301      	movs	r3, #1
 8001012:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001022:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	461a      	mov	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb20 	bl	8000680 <HAL_GetTick>
 8001040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fb1b 	bl	8000680 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d902      	bls.n	800105c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	f000 bde2 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800106e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x4d8>
 8001086:	4b45      	ldr	r3, [pc, #276]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e013      	b.n	80010b4 <HAL_RCC_OscConfig+0x500>
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	2202      	movs	r2, #2
 80010b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010be:	fa92 f2a2 	rbit	r2, r2
 80010c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010ca:	fab2 f282 	clz	r2, r2
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f002 021f 	and.w	r2, r2, #31
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0af      	beq.n	8001046 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	21f8      	movs	r1, #248	; 0xf8
 80010fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001104:	fa91 f1a1 	rbit	r1, r1
 8001108:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800110c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001110:	fab1 f181 	clz	r1, r1
 8001114:	b2c9      	uxtb	r1, r1
 8001116:	408b      	lsls	r3, r1
 8001118:	4920      	ldr	r1, [pc, #128]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
 800111e:	e06c      	b.n	80011fa <HAL_RCC_OscConfig+0x646>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	2300      	movs	r3, #0
 800114a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fa98 	bl	8000680 <HAL_GetTick>
 8001150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fa93 	bl	8000680 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d902      	bls.n	800116c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	f000 bd5a 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800117e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d104      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5ec>
 8001196:	4b01      	ldr	r3, [pc, #4]	; (800119c <HAL_RCC_OscConfig+0x5e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e015      	b.n	80011c8 <HAL_RCC_OscConfig+0x614>
 800119c:	40021000 	.word	0x40021000
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011c4:	4bc8      	ldr	r3, [pc, #800]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011de:	fab2 f282 	clz	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ad      	bne.n	8001156 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8110 	beq.w	8001430 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d079      	beq.n	8001314 <HAL_RCC_OscConfig+0x760>
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4bab      	ldr	r3, [pc, #684]	; (80014ec <HAL_RCC_OscConfig+0x938>)
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	461a      	mov	r2, r3
 8001246:	2301      	movs	r3, #1
 8001248:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fa19 	bl	8000680 <HAL_GetTick>
 800124e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fa14 	bl	8000680 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d902      	bls.n	800126a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	f000 bcdb 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800127c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001280:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001284:	2202      	movs	r2, #2
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	fa93 f2a3 	rbit	r2, r3
 80012ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c4:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 80012c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012d0:	2102      	movs	r1, #2
 80012d2:	6019      	str	r1, [r3, #0]
 80012d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fa93 f1a3 	rbit	r1, r3
 80012e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012ea:	6019      	str	r1, [r3, #0]
  return result;
 80012ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0a0      	beq.n	8001254 <HAL_RCC_OscConfig+0x6a0>
 8001312:	e08d      	b.n	8001430 <HAL_RCC_OscConfig+0x87c>
 8001314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001318:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001336:	601a      	str	r2, [r3, #0]
  return result;
 8001338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001340:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4b68      	ldr	r3, [pc, #416]	; (80014ec <HAL_RCC_OscConfig+0x938>)
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	461a      	mov	r2, r3
 8001352:	2300      	movs	r3, #0
 8001354:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff f993 	bl	8000680 <HAL_GetTick>
 800135a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	e00a      	b.n	8001376 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff f98e 	bl	8000680 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d902      	bls.n	8001376 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	f000 bc55 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800137e:	2202      	movs	r2, #2
 8001380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001394:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f2a3 	rbit	r2, r3
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f2a3 	rbit	r2, r3
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013ee:	2102      	movs	r1, #2
 80013f0:	6019      	str	r1, [r3, #0]
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f1a3 	rbit	r1, r3
 8001400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001404:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001408:	6019      	str	r1, [r3, #0]
  return result;
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d197      	bne.n	8001360 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 81a1 	beq.w	8001788 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d116      	bne.n	8001486 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	61d3      	str	r3, [r2, #28]
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800147e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff f8ef 	bl	8000680 <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff f8ea 	bl	8000680 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e3b1      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x93c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ef      	beq.n	80014a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10d      	bne.n	80014f4 <HAL_RCC_OscConfig+0x940>
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a02      	ldr	r2, [pc, #8]	; (80014e8 <HAL_RCC_OscConfig+0x934>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	e03c      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	10908120 	.word	0x10908120
 80014f0:	40007000 	.word	0x40007000
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x96a>
 8001504:	4bc1      	ldr	r3, [pc, #772]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4ac0      	ldr	r2, [pc, #768]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	4bbe      	ldr	r3, [pc, #760]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4abd      	ldr	r2, [pc, #756]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001516:	f023 0304 	bic.w	r3, r3, #4
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e020      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x994>
 800152e:	4bb7      	ldr	r3, [pc, #732]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4ab6      	ldr	r2, [pc, #728]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4bb4      	ldr	r3, [pc, #720]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4ab3      	ldr	r2, [pc, #716]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 8001548:	4bb0      	ldr	r3, [pc, #704]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4aaf      	ldr	r2, [pc, #700]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4bad      	ldr	r3, [pc, #692]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4aac      	ldr	r2, [pc, #688]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8081 	beq.w	8001674 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff f885 	bl	8000680 <HAL_GetTick>
 8001576:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f880 	bl	8000680 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e345      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015da:	601a      	str	r2, [r3, #0]
  return result;
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0xa4c>
 80015fa:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	e013      	b.n	8001628 <HAL_RCC_OscConfig+0xa74>
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800162c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001630:	2102      	movs	r1, #2
 8001632:	6011      	str	r1, [r2, #0]
 8001634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001638:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	fa92 f1a2 	rbit	r1, r2
 8001642:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001646:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800164a:	6011      	str	r1, [r2, #0]
  return result;
 800164c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001650:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d084      	beq.n	800157c <HAL_RCC_OscConfig+0x9c8>
 8001672:	e07f      	b.n	8001774 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff f804 	bl	8000680 <HAL_GetTick>
 8001678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7fe ffff 	bl	8000680 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2c4      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016dc:	601a      	str	r2, [r3, #0]
  return result;
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0xb4e>
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0xb76>
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800172e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001732:	2102      	movs	r1, #2
 8001734:	6011      	str	r1, [r2, #0]
 8001736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800173a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fa92 f1a2 	rbit	r1, r2
 8001744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001748:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800174c:	6011      	str	r1, [r2, #0]
  return result;
 800174e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001752:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d184      	bne.n	800167e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001774:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001786:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8242 	beq.w	8001c1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_RCC_OscConfig+0xc58>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	f000 8213 	beq.w	8001bce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 8162 	bne.w	8001a7e <HAL_RCC_OscConfig+0xeca>
 80017ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017de:	601a      	str	r2, [r3, #0]
  return result;
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe ff3e 	bl	8000680 <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e00c      	b.n	8001824 <HAL_RCC_OscConfig+0xc70>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7fe ff36 	bl	8000680 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1fd      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800182c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001848:	601a      	str	r2, [r3, #0]
  return result;
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001852:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0xcba>
 8001868:	4bb0      	ldr	r3, [pc, #704]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e027      	b.n	80018be <HAL_RCC_OscConfig+0xd0a>
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800189c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b9c      	ldr	r3, [pc, #624]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80018c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018ca:	6011      	str	r1, [r2, #0]
 80018cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fa92 f1a2 	rbit	r1, r2
 80018da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018e2:	6011      	str	r1, [r2, #0]
  return result;
 80018e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d182      	bne.n	8001810 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4b88      	ldr	r3, [pc, #544]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	430b      	orrs	r3, r1
 800192c:	497f      	ldr	r1, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800193a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800193e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001956:	601a      	str	r2, [r3, #0]
  return result;
 8001958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001960:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800196c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	461a      	mov	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7fe fe82 	bl	8000680 <HAL_GetTick>
 800197c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7fe fe7d 	bl	8000680 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e144      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800199e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	095b      	lsrs	r3, r3, #5
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d102      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe2c>
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	e027      	b.n	8001a30 <HAL_RCC_OscConfig+0xe7c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a34:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a3c:	6011      	str	r1, [r2, #0]
 8001a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a42:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fa92 f1a2 	rbit	r1, r2
 8001a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a54:	6011      	str	r1, [r2, #0]
  return result;
 8001a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d082      	beq.n	8001982 <HAL_RCC_OscConfig+0xdce>
 8001a7c:	e0cf      	b.n	8001c1e <HAL_RCC_OscConfig+0x106a>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001aac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fddc 	bl	8000680 <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7fe fdd7 	bl	8000680 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e09e      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <HAL_RCC_OscConfig+0xf7c>
 8001b26:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_RCC_OscConfig+0xf78>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0xfcc>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x1078>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b84:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b92:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001baa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d180      	bne.n	8001ace <HAL_RCC_OscConfig+0xf1a>
 8001bcc:	e027      	b.n	8001c1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e01e      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_OscConfig+0x1078>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b09e      	sub	sp, #120	; 0x78
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e162      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b90      	ldr	r3, [pc, #576]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b8d      	ldr	r3, [pc, #564]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	498b      	ldr	r1, [pc, #556]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e14a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	497f      	ldr	r1, [pc, #508]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80dc 	beq.w	8001e5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d13c      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xf6>
 8001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xa6>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0xc6>
 8001cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8001cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cfe:	fa92 f2a2 	rbit	r2, r2
 8001d02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d17b      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0f3      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d13c      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x178>
 8001d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x128>
 8001d52:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_ClockConfig+0x148>
 8001d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	647b      	str	r3, [r7, #68]	; 0x44
 8001d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d13a      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b2      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
 8001da8:	2302      	movs	r3, #2
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1a0>
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e00d      	b.n	8001dec <HAL_RCC_ClockConfig+0x1bc>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	2202      	movs	r2, #2
 8001dee:	61ba      	str	r2, [r7, #24]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	617a      	str	r2, [r7, #20]
  return result;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e079      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	491a      	ldr	r1, [pc, #104]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fc28 	bl	8000680 <HAL_GetTick>
 8001e30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7fe fc24 	bl	8000680 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e061      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d214      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	4906      	ldr	r1, [pc, #24]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e040      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	491a      	ldr	r1, [pc, #104]	; (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4912      	ldr	r1, [pc, #72]	; (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed2:	f000 f829 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee0:	22f0      	movs	r2, #240	; 0xf0
 8001ee2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	fa92 f2a2 	rbit	r2, r2
 8001eea:	60fa      	str	r2, [r7, #12]
  return result;
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	40d3      	lsrs	r3, r2
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x2ec>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	fa21 f303 	lsr.w	r3, r1, r3
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_RCC_ClockConfig+0x2f0>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x2f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe faba 	bl	8000480 <HAL_InitTick>
  
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3778      	adds	r7, #120	; 0x78
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08003d64 	.word	0x08003d64
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b08b      	sub	sp, #44	; 0x2c
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x30>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x36>
 8001f56:	e03c      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	e03c      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	607a      	str	r2, [r7, #4]
  return result;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	40d3      	lsrs	r3, r2
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	60fa      	str	r2, [r7, #12]
  return result;
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	40d3      	lsrs	r3, r2
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd4:	623b      	str	r3, [r7, #32]
      break;
 8001fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08003d7c 	.word	0x08003d7c
 8001ff4:	08003d8c 	.word	0x08003d8c
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800201a:	f7ff ffef 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002028:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800202c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	603a      	str	r2, [r7, #0]
  return result;
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	40d3      	lsrs	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08003d74 	.word	0x08003d74

08002058 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	220f      	movs	r2, #15
 8002066:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_GetClockConfig+0x5c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCC_GetClockConfig+0x60>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40022000 	.word	0x40022000

080020bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e049      	b.n	8002162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f841 	bl	800216a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f000 f9f2 	bl	80024e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e04a      	b.n	800222e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_TIM_Base_Start_IT+0xbc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d018      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d013      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_TIM_Base_Start_IT+0xc0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00e      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a1c      	ldr	r2, [pc, #112]	; (8002244 <HAL_TIM_Base_Start_IT+0xc4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d009      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <HAL_TIM_Base_Start_IT+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_Base_Start_IT+0x6c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_TIM_Base_Start_IT+0xcc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d115      	bne.n	8002218 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_TIM_Base_Start_IT+0xd0>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d015      	beq.n	800222a <HAL_TIM_Base_Start_IT+0xaa>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d011      	beq.n	800222a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	e008      	b.n	800222a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e000      	b.n	800222c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40013400 	.word	0x40013400
 800224c:	40014000 	.word	0x40014000
 8002250:	00010007 	.word	0x00010007

08002254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b02      	cmp	r3, #2
 8002268:	d122      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	d11b      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0202 	mvn.w	r2, #2
 8002280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f905 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 800229c:	e005      	b.n	80022aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8f7 	bl	8002492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f908 	bl	80024ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0204 	mvn.w	r2, #4
 80022d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2202      	movs	r2, #2
 80022da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8db 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8cd 	bl	8002492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f8de 	bl	80024ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b08      	cmp	r3, #8
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b08      	cmp	r3, #8
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0208 	mvn.w	r2, #8
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2204      	movs	r2, #4
 800232e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8b1 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8a3 	bl	8002492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8b4 	bl	80024ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b10      	cmp	r3, #16
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b10      	cmp	r3, #16
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0210 	mvn.w	r2, #16
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2208      	movs	r2, #8
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f887 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f879 	bl	8002492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f88a 	bl	80024ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10e      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0201 	mvn.w	r2, #1
 80023d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe f814 	bl	8000400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b80      	cmp	r3, #128	; 0x80
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d107      	bne.n	8002404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f90a 	bl	8002618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002412:	d10e      	bne.n	8002432 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	d107      	bne.n	8002432 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800242a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8fd 	bl	800262c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b40      	cmp	r3, #64	; 0x40
 800243e:	d10e      	bne.n	800245e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d107      	bne.n	800245e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f838 	bl	80024ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b20      	cmp	r3, #32
 800246a:	d10e      	bne.n	800248a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b20      	cmp	r3, #32
 8002478:	d107      	bne.n	800248a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0220 	mvn.w	r2, #32
 8002482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8bd 	bl	8002604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <TIM_Base_SetConfig+0x104>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00f      	beq.n	800251c <TIM_Base_SetConfig+0x38>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d00b      	beq.n	800251c <TIM_Base_SetConfig+0x38>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a39      	ldr	r2, [pc, #228]	; (80025ec <TIM_Base_SetConfig+0x108>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_Base_SetConfig+0x38>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <TIM_Base_SetConfig+0x10c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0x38>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <TIM_Base_SetConfig+0x110>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d108      	bne.n	800252e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2d      	ldr	r2, [pc, #180]	; (80025e8 <TIM_Base_SetConfig+0x104>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01b      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253c:	d017      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2a      	ldr	r2, [pc, #168]	; (80025ec <TIM_Base_SetConfig+0x108>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a29      	ldr	r2, [pc, #164]	; (80025f0 <TIM_Base_SetConfig+0x10c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00f      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <TIM_Base_SetConfig+0x110>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00b      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <TIM_Base_SetConfig+0x114>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a26      	ldr	r2, [pc, #152]	; (80025fc <TIM_Base_SetConfig+0x118>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_Base_SetConfig+0x8a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a25      	ldr	r2, [pc, #148]	; (8002600 <TIM_Base_SetConfig+0x11c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <TIM_Base_SetConfig+0x104>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00f      	beq.n	80025cc <TIM_Base_SetConfig+0xe8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <TIM_Base_SetConfig+0x110>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00b      	beq.n	80025cc <TIM_Base_SetConfig+0xe8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <TIM_Base_SetConfig+0x114>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d007      	beq.n	80025cc <TIM_Base_SetConfig+0xe8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <TIM_Base_SetConfig+0x118>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d003      	beq.n	80025cc <TIM_Base_SetConfig+0xe8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <TIM_Base_SetConfig+0x11c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	615a      	str	r2, [r3, #20]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40013400 	.word	0x40013400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800

08002604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800264e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002652:	2b84      	cmp	r3, #132	; 0x84
 8002654:	d005      	beq.n	8002662 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	3303      	adds	r3, #3
 8002660:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002674:	f000 faec 	bl	8002c50 <vTaskStartScheduler>
  
  return osOK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}

0800267e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002680:	b089      	sub	sp, #36	; 0x24
 8002682:	af04      	add	r7, sp, #16
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <osThreadCreate+0x54>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685c      	ldr	r4, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691e      	ldr	r6, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ffc8 	bl	8002640 <makeFreeRtosPriority>
 80026b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ba:	9202      	str	r2, [sp, #8]
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	9100      	str	r1, [sp, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4632      	mov	r2, r6
 80026c4:	4629      	mov	r1, r5
 80026c6:	4620      	mov	r0, r4
 80026c8:	f000 f8ed 	bl	80028a6 <xTaskCreateStatic>
 80026cc:	4603      	mov	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e01c      	b.n	800270c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685c      	ldr	r4, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffaa 	bl	8002640 <makeFreeRtosPriority>
 80026ec:	4602      	mov	r2, r0
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	9200      	str	r2, [sp, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	4632      	mov	r2, r6
 80026fa:	4629      	mov	r1, r5
 80026fc:	4620      	mov	r0, r4
 80026fe:	f000 f92e 	bl	800295e <xTaskCreate>
 8002702:	4603      	mov	r3, r0
 8002704:	2b01      	cmp	r3, #1
 8002706:	d001      	beq.n	800270c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800270c:	68fb      	ldr	r3, [r7, #12]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002716 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <osDelay+0x16>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	e000      	b.n	800272e <osDelay+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa5a 	bl	8002be8 <vTaskDelay>
  
  return osOK;
 8002734:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 0208 	add.w	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0208 	add.w	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0208 	add.w	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f6:	d103      	bne.n	8002800 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e00c      	b.n	800281a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3308      	adds	r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e002      	b.n	800280e <vListInsert+0x2e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d2f6      	bcs.n	8002808 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6852      	ldr	r2, [r2, #4]
 8002872:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d103      	bne.n	8002886 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08e      	sub	sp, #56	; 0x38
 80028aa:	af04      	add	r7, sp, #16
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <xTaskCreateStatic+0x46>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	61fb      	str	r3, [r7, #28]
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ec:	23a0      	movs	r3, #160	; 0xa0
 80028ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2ba0      	cmp	r3, #160	; 0xa0
 80028f4:	d00a      	beq.n	800290c <xTaskCreateStatic+0x66>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61bb      	str	r3, [r7, #24]
}
 8002908:	bf00      	nop
 800290a:	e7fe      	b.n	800290a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01e      	beq.n	8002950 <xTaskCreateStatic+0xaa>
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002920:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	2202      	movs	r2, #2
 8002926:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800292a:	2300      	movs	r3, #0
 800292c:	9303      	str	r3, [sp, #12]
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f850 	bl	80029e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294a:	f000 f8e3 	bl	8002b14 <prvAddNewTaskToReadyList>
 800294e:	e001      	b.n	8002954 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002954:	697b      	ldr	r3, [r7, #20]
	}
 8002956:	4618      	mov	r0, r3
 8002958:	3728      	adds	r7, #40	; 0x28
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800295e:	b580      	push	{r7, lr}
 8002960:	b08c      	sub	sp, #48	; 0x30
 8002962:	af04      	add	r7, sp, #16
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fef8 	bl	8003768 <pvPortMalloc>
 8002978:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002980:	20a0      	movs	r0, #160	; 0xa0
 8002982:	f000 fef1 	bl	8003768 <pvPortMalloc>
 8002986:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
 8002994:	e005      	b.n	80029a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f000 ffaa 	bl	80038f0 <vPortFree>
 800299c:	e001      	b.n	80029a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	2300      	movs	r3, #0
 80029b4:	9303      	str	r3, [sp, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	9302      	str	r3, [sp, #8]
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f80e 	bl	80029e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029cc:	69f8      	ldr	r0, [r7, #28]
 80029ce:	f000 f8a1 	bl	8002b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e002      	b.n	80029de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
 80029dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029de:	69bb      	ldr	r3, [r7, #24]
	}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a00:	3b01      	subs	r3, #1
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	617b      	str	r3, [r7, #20]
}
 8002a2c:	bf00      	nop
 8002a2e:	e7fe      	b.n	8002a2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e012      	b.n	8002a5c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	7819      	ldrb	r1, [r3, #0]
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	3334      	adds	r3, #52	; 0x34
 8002a46:	460a      	mov	r2, r1
 8002a48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d9e9      	bls.n	8002a36 <prvInitialiseNewTask+0x4e>
 8002a62:	e000      	b.n	8002a66 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002a64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d901      	bls.n	8002a78 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a74:	2306      	movs	r3, #6
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	2200      	movs	r2, #0
 8002a88:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fe75 	bl	800277e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	3318      	adds	r3, #24
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fe70 	bl	800277e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	f1c3 0207 	rsb	r2, r3, #7
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	334c      	adds	r3, #76	; 0x4c
 8002ac8:	224c      	movs	r2, #76	; 0x4c
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f825 	bl	8003b1c <memset>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <prvInitialiseNewTask+0x120>)
 8002ad6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <prvInitialiseNewTask+0x124>)
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <prvInitialiseNewTask+0x128>)
 8002ae2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	68f9      	ldr	r1, [r7, #12]
 8002ae8:	69b8      	ldr	r0, [r7, #24]
 8002aea:	f000 fc2b 	bl	8003344 <pxPortInitialiseStack>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b00:	bf00      	nop
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200010c4 	.word	0x200010c4
 8002b0c:	2000112c 	.word	0x2000112c
 8002b10:	20001194 	.word	0x20001194

08002b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b1c:	f000 fd42 	bl	80035a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <prvAddNewTaskToReadyList+0xb8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <prvAddNewTaskToReadyList+0xb8>)
 8002b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <prvAddNewTaskToReadyList+0xbc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <prvAddNewTaskToReadyList+0xbc>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b38:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <prvAddNewTaskToReadyList+0xb8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d110      	bne.n	8002b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b40:	f000 fad2 	bl	80030e8 <prvInitialiseTaskLists>
 8002b44:	e00d      	b.n	8002b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <prvAddNewTaskToReadyList+0xc0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <prvAddNewTaskToReadyList+0xbc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d802      	bhi.n	8002b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <prvAddNewTaskToReadyList+0xbc>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <prvAddNewTaskToReadyList+0xc4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <prvAddNewTaskToReadyList+0xc4>)
 8002b6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <prvAddNewTaskToReadyList+0xc8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <prvAddNewTaskToReadyList+0xc8>)
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <prvAddNewTaskToReadyList+0xcc>)
 8002b8c:	441a      	add	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f7ff fdff 	bl	8002798 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b9a:	f000 fd33 	bl	8003604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <prvAddNewTaskToReadyList+0xc0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <prvAddNewTaskToReadyList+0xbc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d207      	bcs.n	8002bc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <prvAddNewTaskToReadyList+0xd0>)
 8002bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000478 	.word	0x20000478
 8002bd0:	20000378 	.word	0x20000378
 8002bd4:	20000484 	.word	0x20000484
 8002bd8:	20000494 	.word	0x20000494
 8002bdc:	20000480 	.word	0x20000480
 8002be0:	2000037c 	.word	0x2000037c
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d017      	beq.n	8002c2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <vTaskDelay+0x60>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <vTaskDelay+0x30>
	__asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	60bb      	str	r3, [r7, #8]
}
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c18:	f000 f884 	bl	8002d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fb2a 	bl	8003278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c24:	f000 f88c 	bl	8002d40 <xTaskResumeAll>
 8002c28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <vTaskDelay+0x64>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200004a0 	.word	0x200004a0
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c5e:	463a      	mov	r2, r7
 8002c60:	1d39      	adds	r1, r7, #4
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fab2 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c6c:	6839      	ldr	r1, [r7, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	9202      	str	r2, [sp, #8]
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	4921      	ldr	r1, [pc, #132]	; (8002d04 <vTaskStartScheduler+0xb4>)
 8002c80:	4821      	ldr	r0, [pc, #132]	; (8002d08 <vTaskStartScheduler+0xb8>)
 8002c82:	f7ff fe10 	bl	80028a6 <xTaskCreateStatic>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <vTaskStartScheduler+0xbc>)
 8002c8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <vTaskStartScheduler+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c94:	2301      	movs	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e001      	b.n	8002c9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11b      	bne.n	8002cdc <vTaskStartScheduler+0x8c>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	613b      	str	r3, [r7, #16]
}
 8002cb6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <vTaskStartScheduler+0xc0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	334c      	adds	r3, #76	; 0x4c
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <vTaskStartScheduler+0xc4>)
 8002cc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <vTaskStartScheduler+0xc8>)
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <vTaskStartScheduler+0xcc>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <vTaskStartScheduler+0xd0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cd6:	f000 fbc3 	bl	8003460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cda:	e00e      	b.n	8002cfa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d10a      	bne.n	8002cfa <vTaskStartScheduler+0xaa>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	60fb      	str	r3, [r7, #12]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <vTaskStartScheduler+0xa8>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	08003d5c 	.word	0x08003d5c
 8002d08:	080030b9 	.word	0x080030b9
 8002d0c:	2000049c 	.word	0x2000049c
 8002d10:	20000378 	.word	0x20000378
 8002d14:	2000005c 	.word	0x2000005c
 8002d18:	20000498 	.word	0x20000498
 8002d1c:	20000484 	.word	0x20000484
 8002d20:	2000047c 	.word	0x2000047c

08002d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <vTaskSuspendAll+0x18>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <vTaskSuspendAll+0x18>)
 8002d30:	6013      	str	r3, [r2, #0]
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	200004a0 	.word	0x200004a0

08002d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <xTaskResumeAll+0x2c>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	603b      	str	r3, [r7, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d6c:	f000 fc1a 	bl	80035a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7a:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <xTaskResumeAll+0x114>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d161      	bne.n	8002e46 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d82:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <xTaskResumeAll+0x118>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d05d      	beq.n	8002e46 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d8a:	e02e      	b.n	8002dea <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d8c:	4b33      	ldr	r3, [pc, #204]	; (8002e5c <xTaskResumeAll+0x11c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fd5a 	bl	8002852 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd55 	bl	8002852 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2201      	movs	r2, #1
 8002dae:	409a      	lsls	r2, r3
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <xTaskResumeAll+0x120>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <xTaskResumeAll+0x120>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <xTaskResumeAll+0x124>)
 8002dc8:	441a      	add	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f7ff fce1 	bl	8002798 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <xTaskResumeAll+0x128>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002de4:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <xTaskResumeAll+0x11c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1cc      	bne.n	8002d8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002df8:	f000 fa18 	bl	800322c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <xTaskResumeAll+0x130>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e08:	f000 f836 	bl	8002e78 <xTaskIncrementTick>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f1      	bne.n	8002e08 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <xTaskResumeAll+0x130>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTaskResumeAll+0x12c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <xTaskResumeAll+0x134>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e46:	f000 fbdd 	bl	8003604 <vPortExitCritical>

	return xAlreadyYielded;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200004a0 	.word	0x200004a0
 8002e58:	20000478 	.word	0x20000478
 8002e5c:	20000438 	.word	0x20000438
 8002e60:	20000480 	.word	0x20000480
 8002e64:	2000037c 	.word	0x2000037c
 8002e68:	20000378 	.word	0x20000378
 8002e6c:	2000048c 	.word	0x2000048c
 8002e70:	20000488 	.word	0x20000488
 8002e74:	e000ed04 	.word	0xe000ed04

08002e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <xTaskIncrementTick+0x150>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 808d 	bne.w	8002fa6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <xTaskIncrementTick+0x154>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e94:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <xTaskIncrementTick+0x154>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d120      	bne.n	8002ee2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskIncrementTick+0x46>
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <xTaskIncrementTick+0x15c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <xTaskIncrementTick+0x15c>)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <xTaskIncrementTick+0x160>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a3f      	ldr	r2, [pc, #252]	; (8002fd8 <xTaskIncrementTick+0x160>)
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	f000 f9a5 	bl	800322c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d34d      	bcc.n	8002f88 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <xTaskIncrementTick+0x82>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <xTaskIncrementTick+0x84>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f00:	4b36      	ldr	r3, [pc, #216]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002f02:	f04f 32ff 	mov.w	r2, #4294967295
 8002f06:	601a      	str	r2, [r3, #0]
					break;
 8002f08:	e03e      	b.n	8002f88 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f0a:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <xTaskIncrementTick+0x158>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d203      	bcs.n	8002f2a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f22:	4a2e      	ldr	r2, [pc, #184]	; (8002fdc <xTaskIncrementTick+0x164>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6013      	str	r3, [r2, #0]
						break;
 8002f28:	e02e      	b.n	8002f88 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fc8f 	bl	8002852 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fc86 	bl	8002852 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <xTaskIncrementTick+0x168>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <xTaskIncrementTick+0x168>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <xTaskIncrementTick+0x16c>)
 8002f66:	441a      	add	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fc12 	bl	8002798 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <xTaskIncrementTick+0x170>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d3b4      	bcc.n	8002eec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f82:	2301      	movs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f86:	e7b1      	b.n	8002eec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <xTaskIncrementTick+0x170>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	4915      	ldr	r1, [pc, #84]	; (8002fe4 <xTaskIncrementTick+0x16c>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d907      	bls.n	8002fb0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e004      	b.n	8002fb0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <xTaskIncrementTick+0x174>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <xTaskIncrementTick+0x174>)
 8002fae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <xTaskIncrementTick+0x178>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fbc:	697b      	ldr	r3, [r7, #20]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200004a0 	.word	0x200004a0
 8002fcc:	2000047c 	.word	0x2000047c
 8002fd0:	20000430 	.word	0x20000430
 8002fd4:	20000434 	.word	0x20000434
 8002fd8:	20000490 	.word	0x20000490
 8002fdc:	20000498 	.word	0x20000498
 8002fe0:	20000480 	.word	0x20000480
 8002fe4:	2000037c 	.word	0x2000037c
 8002fe8:	20000378 	.word	0x20000378
 8002fec:	20000488 	.word	0x20000488
 8002ff0:	2000048c 	.word	0x2000048c

08002ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ffa:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <vTaskSwitchContext+0xac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003002:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <vTaskSwitchContext+0xb0>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003008:	e044      	b.n	8003094 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <vTaskSwitchContext+0xb0>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <vTaskSwitchContext+0xb4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	f1c3 031f 	rsb	r3, r3, #31
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	4921      	ldr	r1, [pc, #132]	; (80030ac <vTaskSwitchContext+0xb8>)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <vTaskSwitchContext+0x5c>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	607b      	str	r3, [r7, #4]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vTaskSwitchContext+0x5a>
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <vTaskSwitchContext+0xb8>)
 800305c:	4413      	add	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3308      	adds	r3, #8
 8003072:	429a      	cmp	r2, r3
 8003074:	d104      	bne.n	8003080 <vTaskSwitchContext+0x8c>
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <vTaskSwitchContext+0xbc>)
 8003088:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <vTaskSwitchContext+0xbc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	334c      	adds	r3, #76	; 0x4c
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <vTaskSwitchContext+0xc0>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	200004a0 	.word	0x200004a0
 80030a4:	2000048c 	.word	0x2000048c
 80030a8:	20000480 	.word	0x20000480
 80030ac:	2000037c 	.word	0x2000037c
 80030b0:	20000378 	.word	0x20000378
 80030b4:	2000005c 	.word	0x2000005c

080030b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030c0:	f000 f852 	bl	8003168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <prvIdleTask+0x28>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d9f9      	bls.n	80030c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <prvIdleTask+0x2c>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030dc:	e7f0      	b.n	80030c0 <prvIdleTask+0x8>
 80030de:	bf00      	nop
 80030e0:	2000037c 	.word	0x2000037c
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	e00c      	b.n	800310e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <prvInitialiseTaskLists+0x60>)
 8003100:	4413      	add	r3, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fb1b 	bl	800273e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3301      	adds	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b06      	cmp	r3, #6
 8003112:	d9ef      	bls.n	80030f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003114:	480d      	ldr	r0, [pc, #52]	; (800314c <prvInitialiseTaskLists+0x64>)
 8003116:	f7ff fb12 	bl	800273e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <prvInitialiseTaskLists+0x68>)
 800311c:	f7ff fb0f 	bl	800273e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003120:	480c      	ldr	r0, [pc, #48]	; (8003154 <prvInitialiseTaskLists+0x6c>)
 8003122:	f7ff fb0c 	bl	800273e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003126:	480c      	ldr	r0, [pc, #48]	; (8003158 <prvInitialiseTaskLists+0x70>)
 8003128:	f7ff fb09 	bl	800273e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800312c:	480b      	ldr	r0, [pc, #44]	; (800315c <prvInitialiseTaskLists+0x74>)
 800312e:	f7ff fb06 	bl	800273e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <prvInitialiseTaskLists+0x78>)
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <prvInitialiseTaskLists+0x64>)
 8003136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvInitialiseTaskLists+0x7c>)
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <prvInitialiseTaskLists+0x68>)
 800313c:	601a      	str	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000037c 	.word	0x2000037c
 800314c:	20000408 	.word	0x20000408
 8003150:	2000041c 	.word	0x2000041c
 8003154:	20000438 	.word	0x20000438
 8003158:	2000044c 	.word	0x2000044c
 800315c:	20000464 	.word	0x20000464
 8003160:	20000430 	.word	0x20000430
 8003164:	20000434 	.word	0x20000434

08003168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800316e:	e019      	b.n	80031a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003170:	f000 fa18 	bl	80035a4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <prvCheckTasksWaitingTermination+0x50>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fb66 	bl	8002852 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <prvCheckTasksWaitingTermination+0x54>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3b01      	subs	r3, #1
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <prvCheckTasksWaitingTermination+0x54>)
 800318e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <prvCheckTasksWaitingTermination+0x58>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3b01      	subs	r3, #1
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <prvCheckTasksWaitingTermination+0x58>)
 8003198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800319a:	f000 fa33 	bl	8003604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f810 	bl	80031c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <prvCheckTasksWaitingTermination+0x58>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e1      	bne.n	8003170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000044c 	.word	0x2000044c
 80031bc:	20000478 	.word	0x20000478
 80031c0:	20000460 	.word	0x20000460

080031c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	334c      	adds	r3, #76	; 0x4c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fcab 	bl	8003b2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fb83 	bl	80038f0 <vPortFree>
				vPortFree( pxTCB );
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fb80 	bl	80038f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031f0:	e018      	b.n	8003224 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d103      	bne.n	8003204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb77 	bl	80038f0 <vPortFree>
	}
 8003202:	e00f      	b.n	8003224 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800320a:	2b02      	cmp	r3, #2
 800320c:	d00a      	beq.n	8003224 <prvDeleteTCB+0x60>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60fb      	str	r3, [r7, #12]
}
 8003220:	bf00      	nop
 8003222:	e7fe      	b.n	8003222 <prvDeleteTCB+0x5e>
	}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <prvResetNextTaskUnblockTime+0x44>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <prvResetNextTaskUnblockTime+0x14>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <prvResetNextTaskUnblockTime+0x16>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <prvResetNextTaskUnblockTime+0x48>)
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800324e:	e008      	b.n	8003262 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <prvResetNextTaskUnblockTime+0x44>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <prvResetNextTaskUnblockTime+0x48>)
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000430 	.word	0x20000430
 8003274:	20000498 	.word	0x20000498

08003278 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fadf 	bl	8002852 <uxListRemove>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2201      	movs	r2, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4013      	ands	r3, r2
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d10a      	bne.n	80032d0 <prvAddCurrentTaskToDelayedList+0x58>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	481a      	ldr	r0, [pc, #104]	; (8003334 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032ca:	f7ff fa65 	bl	8002798 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ce:	e026      	b.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d209      	bcs.n	80032fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <prvAddCurrentTaskToDelayedList+0xc0>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff fa73 	bl	80027e0 <vListInsert>
}
 80032fa:	e010      	b.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <prvAddCurrentTaskToDelayedList+0xc4>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7ff fa69 	bl	80027e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d202      	bcs.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000047c 	.word	0x2000047c
 800332c:	20000378 	.word	0x20000378
 8003330:	20000480 	.word	0x20000480
 8003334:	20000464 	.word	0x20000464
 8003338:	20000434 	.word	0x20000434
 800333c:	20000430 	.word	0x20000430
 8003340:	20000498 	.word	0x20000498

08003344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3b04      	subs	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800335c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b04      	subs	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b04      	subs	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <pxPortInitialiseStack+0x64>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b14      	subs	r3, #20
 800337e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b04      	subs	r3, #4
 800338a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f06f 0202 	mvn.w	r2, #2
 8003392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b20      	subs	r3, #32
 8003398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	080033ad 	.word	0x080033ad

080033ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <prvTaskExitError+0x54>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d00a      	beq.n	80033d6 <prvTaskExitError+0x2a>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	60fb      	str	r3, [r7, #12]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <prvTaskExitError+0x28>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60bb      	str	r3, [r7, #8]
}
 80033e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033ea:	bf00      	nop
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0fc      	beq.n	80033ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	2000000c 	.word	0x2000000c
	...

08003410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <pxCurrentTCBConst2>)
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341a:	f380 8809 	msr	PSP, r0
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8811 	msr	BASEPRI, r0
 800342a:	4770      	bx	lr
 800342c:	f3af 8000 	nop.w

08003430 <pxCurrentTCBConst2>:
 8003430:	20000378 	.word	0x20000378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop

08003438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003438:	4808      	ldr	r0, [pc, #32]	; (800345c <prvPortStartFirstTask+0x24>)
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	6800      	ldr	r0, [r0, #0]
 800343e:	f380 8808 	msr	MSP, r0
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f380 8814 	msr	CONTROL, r0
 800344a:	b662      	cpsie	i
 800344c:	b661      	cpsie	f
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	df00      	svc	0
 8003458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800345a:	bf00      	nop
 800345c:	e000ed08 	.word	0xe000ed08

08003460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003466:	4b46      	ldr	r3, [pc, #280]	; (8003580 <xPortStartScheduler+0x120>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a46      	ldr	r2, [pc, #280]	; (8003584 <xPortStartScheduler+0x124>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10a      	bne.n	8003486 <xPortStartScheduler+0x26>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <xPortStartScheduler+0x120>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <xPortStartScheduler+0x128>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d10a      	bne.n	80034a6 <xPortStartScheduler+0x46>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	60fb      	str	r3, [r7, #12]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034a6:	4b39      	ldr	r3, [pc, #228]	; (800358c <xPortStartScheduler+0x12c>)
 80034a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b31      	ldr	r3, [pc, #196]	; (8003590 <xPortStartScheduler+0x130>)
 80034cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034ce:	4b31      	ldr	r3, [pc, #196]	; (8003594 <xPortStartScheduler+0x134>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d4:	e009      	b.n	80034ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <xPortStartScheduler+0x134>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	4a2d      	ldr	r2, [pc, #180]	; (8003594 <xPortStartScheduler+0x134>)
 80034de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d0ef      	beq.n	80034d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034f6:	4b27      	ldr	r3, [pc, #156]	; (8003594 <xPortStartScheduler+0x134>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d00a      	beq.n	8003518 <xPortStartScheduler+0xb8>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60bb      	str	r3, [r7, #8]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <xPortStartScheduler+0x134>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <xPortStartScheduler+0x134>)
 8003520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <xPortStartScheduler+0x134>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352a:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <xPortStartScheduler+0x134>)
 800352c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	b2da      	uxtb	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <xPortStartScheduler+0x138>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a17      	ldr	r2, [pc, #92]	; (8003598 <xPortStartScheduler+0x138>)
 800353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <xPortStartScheduler+0x138>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a14      	ldr	r2, [pc, #80]	; (8003598 <xPortStartScheduler+0x138>)
 8003548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800354c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800354e:	f000 f8dd 	bl	800370c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003552:	4b12      	ldr	r3, [pc, #72]	; (800359c <xPortStartScheduler+0x13c>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003558:	f000 f8fc 	bl	8003754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <xPortStartScheduler+0x140>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <xPortStartScheduler+0x140>)
 8003562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003568:	f7ff ff66 	bl	8003438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800356c:	f7ff fd42 	bl	8002ff4 <vTaskSwitchContext>
	prvTaskExitError();
 8003570:	f7ff ff1c 	bl	80033ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	e000ed00 	.word	0xe000ed00
 8003584:	410fc271 	.word	0x410fc271
 8003588:	410fc270 	.word	0x410fc270
 800358c:	e000e400 	.word	0xe000e400
 8003590:	200004a4 	.word	0x200004a4
 8003594:	200004a8 	.word	0x200004a8
 8003598:	e000ed20 	.word	0xe000ed20
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	e000ef34 	.word	0xe000ef34

080035a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	607b      	str	r3, [r7, #4]
}
 80035bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <vPortEnterCritical+0x58>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a0d      	ldr	r2, [pc, #52]	; (80035fc <vPortEnterCritical+0x58>)
 80035c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <vPortEnterCritical+0x58>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10f      	bne.n	80035f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <vPortEnterCritical+0x5c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	603b      	str	r3, [r7, #0]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vPortEnterCritical+0x4a>
	}
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	2000000c 	.word	0x2000000c
 8003600:	e000ed04 	.word	0xe000ed04

08003604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <vPortExitCritical+0x50>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <vPortExitCritical+0x24>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	607b      	str	r3, [r7, #4]
}
 8003624:	bf00      	nop
 8003626:	e7fe      	b.n	8003626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <vPortExitCritical+0x50>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <vPortExitCritical+0x50>)
 8003630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <vPortExitCritical+0x50>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <vPortExitCritical+0x42>
 800363a:	2300      	movs	r3, #0
 800363c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c
	...

08003660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003660:	f3ef 8009 	mrs	r0, PSP
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <pxCurrentTCBConst>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	f01e 0f10 	tst.w	lr, #16
 8003670:	bf08      	it	eq
 8003672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367a:	6010      	str	r0, [r2, #0]
 800367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003684:	f380 8811 	msr	BASEPRI, r0
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f7ff fcb0 	bl	8002ff4 <vTaskSwitchContext>
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f380 8811 	msr	BASEPRI, r0
 800369c:	bc09      	pop	{r0, r3}
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	6808      	ldr	r0, [r1, #0]
 80036a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a6:	f01e 0f10 	tst.w	lr, #16
 80036aa:	bf08      	it	eq
 80036ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036b0:	f380 8809 	msr	PSP, r0
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w

080036c0 <pxCurrentTCBConst>:
 80036c0:	20000378 	.word	0x20000378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	607b      	str	r3, [r7, #4]
}
 80036e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036e2:	f7ff fbc9 	bl	8002e78 <xTaskIncrementTick>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <SysTick_Handler+0x40>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f383 8811 	msr	BASEPRI, r3
}
 80036fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <vPortSetupTimerInterrupt+0x34>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <vPortSetupTimerInterrupt+0x38>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <vPortSetupTimerInterrupt+0x3c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0a      	ldr	r2, [pc, #40]	; (800374c <vPortSetupTimerInterrupt+0x40>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	099b      	lsrs	r3, r3, #6
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <vPortSetupTimerInterrupt+0x44>)
 800372a:	3b01      	subs	r3, #1
 800372c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <vPortSetupTimerInterrupt+0x34>)
 8003730:	2207      	movs	r2, #7
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e010 	.word	0xe000e010
 8003744:	e000e018 	.word	0xe000e018
 8003748:	20000000 	.word	0x20000000
 800374c:	10624dd3 	.word	0x10624dd3
 8003750:	e000e014 	.word	0xe000e014

08003754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003764 <vPortEnableVFP+0x10>
 8003758:	6801      	ldr	r1, [r0, #0]
 800375a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800375e:	6001      	str	r1, [r0, #0]
 8003760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003762:	bf00      	nop
 8003764:	e000ed88 	.word	0xe000ed88

08003768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003774:	f7ff fad6 	bl	8002d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003778:	4b58      	ldr	r3, [pc, #352]	; (80038dc <pvPortMalloc+0x174>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003780:	f000 f910 	bl	80039a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003784:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <pvPortMalloc+0x178>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 808e 	bne.w	80038ae <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01d      	beq.n	80037d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003798:	2208      	movs	r2, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f023 0307 	bic.w	r3, r3, #7
 80037b0:	3308      	adds	r3, #8
 80037b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <pvPortMalloc+0x6c>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	617b      	str	r3, [r7, #20]
}
 80037d0:	bf00      	nop
 80037d2:	e7fe      	b.n	80037d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d069      	beq.n	80038ae <pvPortMalloc+0x146>
 80037da:	4b42      	ldr	r3, [pc, #264]	; (80038e4 <pvPortMalloc+0x17c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d864      	bhi.n	80038ae <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <pvPortMalloc+0x180>)
 80037e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <pvPortMalloc+0x180>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ee:	e004      	b.n	80037fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d903      	bls.n	800380c <pvPortMalloc+0xa4>
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f1      	bne.n	80037f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <pvPortMalloc+0x174>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003812:	429a      	cmp	r2, r3
 8003814:	d04b      	beq.n	80038ae <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2208      	movs	r2, #8
 800381c:	4413      	add	r3, r2
 800381e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1ad2      	subs	r2, r2, r3
 8003830:	2308      	movs	r3, #8
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	429a      	cmp	r2, r3
 8003836:	d91f      	bls.n	8003878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <pvPortMalloc+0xf8>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	613b      	str	r3, [r7, #16]
}
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003872:	69b8      	ldr	r0, [r7, #24]
 8003874:	f000 f8f8 	bl	8003a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003878:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <pvPortMalloc+0x17c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <pvPortMalloc+0x17c>)
 8003884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <pvPortMalloc+0x17c>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <pvPortMalloc+0x184>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d203      	bcs.n	800389a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <pvPortMalloc+0x17c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <pvPortMalloc+0x184>)
 8003898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <pvPortMalloc+0x178>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038ae:	f7ff fa47 	bl	8002d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <pvPortMalloc+0x16a>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <pvPortMalloc+0x168>
	return pvReturn;
 80038d2:	69fb      	ldr	r3, [r7, #28]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200010b4 	.word	0x200010b4
 80038e0:	200010c0 	.word	0x200010c0
 80038e4:	200010b8 	.word	0x200010b8
 80038e8:	200010ac 	.word	0x200010ac
 80038ec:	200010bc 	.word	0x200010bc

080038f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d048      	beq.n	8003994 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003902:	2308      	movs	r3, #8
 8003904:	425b      	negs	r3, r3
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4413      	add	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <vPortFree+0xac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <vPortFree+0x44>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <vPortFree+0x62>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60bb      	str	r3, [r7, #8]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <vPortFree+0xac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d019      	beq.n	8003994 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <vPortFree+0xac>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003978:	f7ff f9d4 	bl	8002d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <vPortFree+0xb0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4413      	add	r3, r2
 8003986:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vPortFree+0xb0>)
 8003988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800398a:	6938      	ldr	r0, [r7, #16]
 800398c:	f000 f86c 	bl	8003a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003990:	f7ff f9d6 	bl	8002d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200010c0 	.word	0x200010c0
 80039a0:	200010b8 	.word	0x200010b8

080039a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80039ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <prvHeapInit+0xac>)
 80039b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3307      	adds	r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <prvHeapInit+0xac>)
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <prvHeapInit+0xb0>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <prvHeapInit+0xb0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039f0:	2208      	movs	r2, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <prvHeapInit+0xb4>)
 8003a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <prvHeapInit+0xb4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <prvHeapInit+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvHeapInit+0xb4>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <prvHeapInit+0xb8>)
 8003a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvHeapInit+0xbc>)
 8003a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <prvHeapInit+0xc0>)
 8003a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	200004ac 	.word	0x200004ac
 8003a54:	200010ac 	.word	0x200010ac
 8003a58:	200010b4 	.word	0x200010b4
 8003a5c:	200010bc 	.word	0x200010bc
 8003a60:	200010b8 	.word	0x200010b8
 8003a64:	200010c0 	.word	0x200010c0

08003a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <prvInsertBlockIntoFreeList+0xac>)
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x14>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8f7      	bhi.n	8003a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d108      	bne.n	8003aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d118      	bne.n	8003af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00d      	beq.n	8003ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e008      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e003      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d002      	beq.n	8003b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	200010ac 	.word	0x200010ac
 8003b18:	200010b4 	.word	0x200010b4

08003b1c <memset>:
 8003b1c:	4402      	add	r2, r0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memset+0xa>
 8003b24:	4770      	bx	lr
 8003b26:	f803 1b01 	strb.w	r1, [r3], #1
 8003b2a:	e7f9      	b.n	8003b20 <memset+0x4>

08003b2c <_reclaim_reent>:
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <_reclaim_reent+0xa8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4283      	cmp	r3, r0
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	4604      	mov	r4, r0
 8003b36:	d04b      	beq.n	8003bd0 <_reclaim_reent+0xa4>
 8003b38:	69c3      	ldr	r3, [r0, #28]
 8003b3a:	b143      	cbz	r3, 8003b4e <_reclaim_reent+0x22>
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d144      	bne.n	8003bcc <_reclaim_reent+0xa0>
 8003b42:	69e3      	ldr	r3, [r4, #28]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	b111      	cbz	r1, 8003b4e <_reclaim_reent+0x22>
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f86b 	bl	8003c24 <_free_r>
 8003b4e:	6961      	ldr	r1, [r4, #20]
 8003b50:	b111      	cbz	r1, 8003b58 <_reclaim_reent+0x2c>
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f866 	bl	8003c24 <_free_r>
 8003b58:	69e1      	ldr	r1, [r4, #28]
 8003b5a:	b111      	cbz	r1, 8003b62 <_reclaim_reent+0x36>
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 f861 	bl	8003c24 <_free_r>
 8003b62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003b64:	b111      	cbz	r1, 8003b6c <_reclaim_reent+0x40>
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 f85c 	bl	8003c24 <_free_r>
 8003b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b6e:	b111      	cbz	r1, 8003b76 <_reclaim_reent+0x4a>
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 f857 	bl	8003c24 <_free_r>
 8003b76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b78:	b111      	cbz	r1, 8003b80 <_reclaim_reent+0x54>
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 f852 	bl	8003c24 <_free_r>
 8003b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003b82:	b111      	cbz	r1, 8003b8a <_reclaim_reent+0x5e>
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 f84d 	bl	8003c24 <_free_r>
 8003b8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003b8c:	b111      	cbz	r1, 8003b94 <_reclaim_reent+0x68>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 f848 	bl	8003c24 <_free_r>
 8003b94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b96:	b111      	cbz	r1, 8003b9e <_reclaim_reent+0x72>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f000 f843 	bl	8003c24 <_free_r>
 8003b9e:	6a23      	ldr	r3, [r4, #32]
 8003ba0:	b1b3      	cbz	r3, 8003bd0 <_reclaim_reent+0xa4>
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ba8:	4718      	bx	r3
 8003baa:	5949      	ldr	r1, [r1, r5]
 8003bac:	b941      	cbnz	r1, 8003bc0 <_reclaim_reent+0x94>
 8003bae:	3504      	adds	r5, #4
 8003bb0:	69e3      	ldr	r3, [r4, #28]
 8003bb2:	2d80      	cmp	r5, #128	; 0x80
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	d1f8      	bne.n	8003baa <_reclaim_reent+0x7e>
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f000 f833 	bl	8003c24 <_free_r>
 8003bbe:	e7c0      	b.n	8003b42 <_reclaim_reent+0x16>
 8003bc0:	680e      	ldr	r6, [r1, #0]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 f82e 	bl	8003c24 <_free_r>
 8003bc8:	4631      	mov	r1, r6
 8003bca:	e7ef      	b.n	8003bac <_reclaim_reent+0x80>
 8003bcc:	2500      	movs	r5, #0
 8003bce:	e7ef      	b.n	8003bb0 <_reclaim_reent+0x84>
 8003bd0:	bd70      	pop	{r4, r5, r6, pc}
 8003bd2:	bf00      	nop
 8003bd4:	2000005c 	.word	0x2000005c

08003bd8 <__libc_init_array>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4d0d      	ldr	r5, [pc, #52]	; (8003c10 <__libc_init_array+0x38>)
 8003bdc:	4c0d      	ldr	r4, [pc, #52]	; (8003c14 <__libc_init_array+0x3c>)
 8003bde:	1b64      	subs	r4, r4, r5
 8003be0:	10a4      	asrs	r4, r4, #2
 8003be2:	2600      	movs	r6, #0
 8003be4:	42a6      	cmp	r6, r4
 8003be6:	d109      	bne.n	8003bfc <__libc_init_array+0x24>
 8003be8:	4d0b      	ldr	r5, [pc, #44]	; (8003c18 <__libc_init_array+0x40>)
 8003bea:	4c0c      	ldr	r4, [pc, #48]	; (8003c1c <__libc_init_array+0x44>)
 8003bec:	f000 f872 	bl	8003cd4 <_init>
 8003bf0:	1b64      	subs	r4, r4, r5
 8003bf2:	10a4      	asrs	r4, r4, #2
 8003bf4:	2600      	movs	r6, #0
 8003bf6:	42a6      	cmp	r6, r4
 8003bf8:	d105      	bne.n	8003c06 <__libc_init_array+0x2e>
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c00:	4798      	blx	r3
 8003c02:	3601      	adds	r6, #1
 8003c04:	e7ee      	b.n	8003be4 <__libc_init_array+0xc>
 8003c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0a:	4798      	blx	r3
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	e7f2      	b.n	8003bf6 <__libc_init_array+0x1e>
 8003c10:	08003d9c 	.word	0x08003d9c
 8003c14:	08003d9c 	.word	0x08003d9c
 8003c18:	08003d9c 	.word	0x08003d9c
 8003c1c:	08003da0 	.word	0x08003da0

08003c20 <__retarget_lock_acquire_recursive>:
 8003c20:	4770      	bx	lr

08003c22 <__retarget_lock_release_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <_free_r>:
 8003c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d044      	beq.n	8003cb4 <_free_r+0x90>
 8003c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c2e:	9001      	str	r0, [sp, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f1a1 0404 	sub.w	r4, r1, #4
 8003c36:	bfb8      	it	lt
 8003c38:	18e4      	addlt	r4, r4, r3
 8003c3a:	f000 f83f 	bl	8003cbc <__malloc_lock>
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <_free_r+0x94>)
 8003c40:	9801      	ldr	r0, [sp, #4]
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	b933      	cbnz	r3, 8003c54 <_free_r+0x30>
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6014      	str	r4, [r2, #0]
 8003c4a:	b003      	add	sp, #12
 8003c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c50:	f000 b83a 	b.w	8003cc8 <__malloc_unlock>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d908      	bls.n	8003c6a <_free_r+0x46>
 8003c58:	6825      	ldr	r5, [r4, #0]
 8003c5a:	1961      	adds	r1, r4, r5
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf01      	itttt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	1949      	addeq	r1, r1, r5
 8003c66:	6021      	streq	r1, [r4, #0]
 8003c68:	e7ed      	b.n	8003c46 <_free_r+0x22>
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b10b      	cbz	r3, 8003c74 <_free_r+0x50>
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	d9fa      	bls.n	8003c6a <_free_r+0x46>
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	1855      	adds	r5, r2, r1
 8003c78:	42a5      	cmp	r5, r4
 8003c7a:	d10b      	bne.n	8003c94 <_free_r+0x70>
 8003c7c:	6824      	ldr	r4, [r4, #0]
 8003c7e:	4421      	add	r1, r4
 8003c80:	1854      	adds	r4, r2, r1
 8003c82:	42a3      	cmp	r3, r4
 8003c84:	6011      	str	r1, [r2, #0]
 8003c86:	d1e0      	bne.n	8003c4a <_free_r+0x26>
 8003c88:	681c      	ldr	r4, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	440c      	add	r4, r1
 8003c90:	6014      	str	r4, [r2, #0]
 8003c92:	e7da      	b.n	8003c4a <_free_r+0x26>
 8003c94:	d902      	bls.n	8003c9c <_free_r+0x78>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6003      	str	r3, [r0, #0]
 8003c9a:	e7d6      	b.n	8003c4a <_free_r+0x26>
 8003c9c:	6825      	ldr	r5, [r4, #0]
 8003c9e:	1961      	adds	r1, r4, r5
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	bf04      	itt	eq
 8003ca4:	6819      	ldreq	r1, [r3, #0]
 8003ca6:	685b      	ldreq	r3, [r3, #4]
 8003ca8:	6063      	str	r3, [r4, #4]
 8003caa:	bf04      	itt	eq
 8003cac:	1949      	addeq	r1, r1, r5
 8003cae:	6021      	streq	r1, [r4, #0]
 8003cb0:	6054      	str	r4, [r2, #4]
 8003cb2:	e7ca      	b.n	8003c4a <_free_r+0x26>
 8003cb4:	b003      	add	sp, #12
 8003cb6:	bd30      	pop	{r4, r5, pc}
 8003cb8:	20001200 	.word	0x20001200

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f7ff bfaf 	b.w	8003c20 <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	200011fc 	.word	0x200011fc

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f7ff bfaa 	b.w	8003c22 <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	200011fc 	.word	0x200011fc

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
