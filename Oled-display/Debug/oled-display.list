
oled-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003944  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002130  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bfc  08005bfc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bfc  08005bfc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bfc  08005bfc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0000047c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000498  20000498  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008b0f  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ac2  00000000  00000000  00028b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000830  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000633  00000000  00000000  0002ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cab8  00000000  00000000  0002b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bce3  00000000  00000000  00047f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a8f1f  00000000  00000000  00053c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000020b8  00000000  00000000  000fcb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000fec38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ab4 	.word	0x08003ab4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003ab4 	.word	0x08003ab4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fff7 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8d5 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f961 	bl	800049c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f921 	bl	8000420 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80001de:	f000 f9ef 	bl	80005c0 <SSD1306_Init>



  SSD1306_GotoXY (0,0);
 80001e2:	2100      	movs	r1, #0
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fb55 	bl	8000894 <SSD1306_GotoXY>
  SSD1306_Puts ("Chipsoul", &Font_11x18, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	495e      	ldr	r1, [pc, #376]	; (8000368 <main+0x1a0>)
 80001ee:	485f      	ldr	r0, [pc, #380]	; (800036c <main+0x1a4>)
 80001f0:	f000 fbe6 	bl	80009c0 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 80001f4:	211e      	movs	r1, #30
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 fb4c 	bl	8000894 <SSD1306_GotoXY>
  SSD1306_Puts ("BY FAZAL", &Font_11x18, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	495a      	ldr	r1, [pc, #360]	; (8000368 <main+0x1a0>)
 8000200:	485b      	ldr	r0, [pc, #364]	; (8000370 <main+0x1a8>)
 8000202:	f000 fbdd 	bl	80009c0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000206:	f000 fa9f 	bl	8000748 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f001 f83d 	bl	800128c <HAL_Delay>
  SSD1306_ScrollRight(0,6);
 8000212:	2106      	movs	r1, #6
 8000214:	2000      	movs	r0, #0
 8000216:	f000 f95e 	bl	80004d6 <SSD1306_ScrollRight>
  HAL_Delay(3000);
 800021a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800021e:	f001 f835 	bl	800128c <HAL_Delay>
  SSD1306_ScrollLeft(0,6);
 8000222:	2106      	movs	r1, #6
 8000224:	2000      	movs	r0, #0
 8000226:	f000 f98c 	bl	8000542 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 800022a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800022e:	f001 f82d 	bl	800128c <HAL_Delay>
  SSD1306_Stopscroll();
 8000232:	f000 f9bc 	bl	80005ae <SSD1306_Stopscroll>
  SSD1306_Clear();
 8000236:	f000 fe52 	bl	8000ede <SSD1306_Clear>

  int num=2024;
 800023a:	f44f 63fd 	mov.w	r3, #2024	; 0x7e8
 800023e:	60bb      	str	r3, [r7, #8]
  char snum[5];
  SSD1306_GotoXY (30,20);
 8000240:	2114      	movs	r1, #20
 8000242:	201e      	movs	r0, #30
 8000244:	f000 fb26 	bl	8000894 <SSD1306_GotoXY>
  itoa(num, snum, 10);
 8000248:	463b      	mov	r3, r7
 800024a:	220a      	movs	r2, #10
 800024c:	4619      	mov	r1, r3
 800024e:	68b8      	ldr	r0, [r7, #8]
 8000250:	f003 fbc0 	bl	80039d4 <itoa>
  SSD1306_Puts (snum, &Font_16x26, 1);
 8000254:	463b      	mov	r3, r7
 8000256:	2201      	movs	r2, #1
 8000258:	4946      	ldr	r1, [pc, #280]	; (8000374 <main+0x1ac>)
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fbb0 	bl	80009c0 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000260:	f000 fa72 	bl	8000748 <SSD1306_UpdateScreen>

  //SSD1306_DrawLine(POINT1 X, POINT1 Y, POINT2 X, POINT2 Y, 1);
  SSD1306_DrawLine(1,54,126,54,1);
 8000264:	2301      	movs	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2336      	movs	r3, #54	; 0x36
 800026a:	227e      	movs	r2, #126	; 0x7e
 800026c:	2136      	movs	r1, #54	; 0x36
 800026e:	2001      	movs	r0, #1
 8000270:	f000 fbcb 	bl	8000a0a <SSD1306_DrawLine>
  SSD1306_UpdateScreen();
 8000274:	f000 fa68 	bl	8000748 <SSD1306_UpdateScreen>
  HAL_Delay (5000);
 8000278:	f241 3088 	movw	r0, #5000	; 0x1388
 800027c:	f001 f806 	bl	800128c <HAL_Delay>
  SSD1306_Clear();
 8000280:	f000 fe2d 	bl	8000ede <SSD1306_Clear>



  // For Rectangle, we need to use two corner points
  // SSD1306_DrawRectangle(POINT1 X, POINT1 Y, POINT2 X, POINT2 Y, 1);
  SSD1306_DrawRectangle(17,1,115,14,1);
 8000284:	2301      	movs	r3, #1
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	230e      	movs	r3, #14
 800028a:	2273      	movs	r2, #115	; 0x73
 800028c:	2101      	movs	r1, #1
 800028e:	2011      	movs	r0, #17
 8000290:	f000 fcb6 	bl	8000c00 <SSD1306_DrawRectangle>
  // SSD1306_DrawTriangle(POINT1X, POINT1Y, POINT2X, POINT2Y, POINT3X, POINT3Y, 1);
  SSD1306_DrawTriangle(73,22,124,62,74,54,1);
 8000294:	2301      	movs	r3, #1
 8000296:	9302      	str	r3, [sp, #8]
 8000298:	2336      	movs	r3, #54	; 0x36
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	234a      	movs	r3, #74	; 0x4a
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	233e      	movs	r3, #62	; 0x3e
 80002a2:	227c      	movs	r2, #124	; 0x7c
 80002a4:	2116      	movs	r1, #22
 80002a6:	2049      	movs	r0, #73	; 0x49
 80002a8:	f000 fd14 	bl	8000cd4 <SSD1306_DrawTriangle>
  // SSD1306_DrawCircle(CENTER POINT X, CENTER POINT Y, RADIUS, 1);
  SSD1306_DrawCircle(34,50,13,1);
 80002ac:	2301      	movs	r3, #1
 80002ae:	220d      	movs	r2, #13
 80002b0:	2132      	movs	r1, #50	; 0x32
 80002b2:	2022      	movs	r0, #34	; 0x22
 80002b4:	f000 fd3f 	bl	8000d36 <SSD1306_DrawCircle>
  SSD1306_UpdateScreen();
 80002b8:	f000 fa46 	bl	8000748 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 ffe4 	bl	800128c <HAL_Delay>
   SSD1306_Clear();
 80002c4:	f000 fe0b 	bl	8000ede <SSD1306_Clear>

   SSD1306_GotoXY (35,0);
 80002c8:	2100      	movs	r1, #0
 80002ca:	2023      	movs	r0, #35	; 0x23
 80002cc:	f000 fae2 	bl	8000894 <SSD1306_GotoXY>
     SSD1306_Puts ("SCORE", &Font_11x18, 1);
 80002d0:	2201      	movs	r2, #1
 80002d2:	4925      	ldr	r1, [pc, #148]	; (8000368 <main+0x1a0>)
 80002d4:	4828      	ldr	r0, [pc, #160]	; (8000378 <main+0x1b0>)
 80002d6:	f000 fb73 	bl	80009c0 <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for ( int x = 1; x <= 10000 ; x++ )
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e03c      	b.n	800035a <main+0x192>
	  	{
	  		itoa(x, snum, 10);
 80002e0:	463b      	mov	r3, r7
 80002e2:	220a      	movs	r2, #10
 80002e4:	4619      	mov	r1, r3
 80002e6:	68f8      	ldr	r0, [r7, #12]
 80002e8:	f003 fb74 	bl	80039d4 <itoa>
	  		SSD1306_GotoXY (0, 30);
 80002ec:	211e      	movs	r1, #30
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 fad0 	bl	8000894 <SSD1306_GotoXY>
	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	491f      	ldr	r1, [pc, #124]	; (8000374 <main+0x1ac>)
 80002f8:	4820      	ldr	r0, [pc, #128]	; (800037c <main+0x1b4>)
 80002fa:	f000 fb61 	bl	80009c0 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 80002fe:	f000 fa23 	bl	8000748 <SSD1306_UpdateScreen>
	  		if(x < 10) {
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	2b09      	cmp	r3, #9
 8000306:	dc04      	bgt.n	8000312 <main+0x14a>
	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8000308:	211e      	movs	r1, #30
 800030a:	2035      	movs	r0, #53	; 0x35
 800030c:	f000 fac2 	bl	8000894 <SSD1306_GotoXY>
 8000310:	e014      	b.n	800033c <main+0x174>
	  		}
	  		else if (x < 100 ) {
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	2b63      	cmp	r3, #99	; 0x63
 8000316:	dc04      	bgt.n	8000322 <main+0x15a>
	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 8000318:	211e      	movs	r1, #30
 800031a:	202d      	movs	r0, #45	; 0x2d
 800031c:	f000 faba 	bl	8000894 <SSD1306_GotoXY>
 8000320:	e00c      	b.n	800033c <main+0x174>
	  		}
	  		else if (x < 1000 ) {
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000328:	da04      	bge.n	8000334 <main+0x16c>
	  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 800032a:	211e      	movs	r1, #30
 800032c:	2025      	movs	r0, #37	; 0x25
 800032e:	f000 fab1 	bl	8000894 <SSD1306_GotoXY>
 8000332:	e003      	b.n	800033c <main+0x174>
	  		}
	  		else {
	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 8000334:	211e      	movs	r1, #30
 8000336:	201e      	movs	r0, #30
 8000338:	f000 faac 	bl	8000894 <SSD1306_GotoXY>
	  		}
	  		SSD1306_Puts (snum, &Font_16x26, 1);
 800033c:	463b      	mov	r3, r7
 800033e:	2201      	movs	r2, #1
 8000340:	490c      	ldr	r1, [pc, #48]	; (8000374 <main+0x1ac>)
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fb3c 	bl	80009c0 <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 8000348:	f000 f9fe 	bl	8000748 <SSD1306_UpdateScreen>
	  		HAL_Delay (500);
 800034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000350:	f000 ff9c 	bl	800128c <HAL_Delay>
	  for ( int x = 1; x <= 10000 ; x++ )
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3301      	adds	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000360:	4293      	cmp	r3, r2
 8000362:	ddbd      	ble.n	80002e0 <main+0x118>
 8000364:	e7b9      	b.n	80002da <main+0x112>
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000
 800036c:	08003acc 	.word	0x08003acc
 8000370:	08003ad8 	.word	0x08003ad8
 8000374:	20000008 	.word	0x20000008
 8000378:	08003ae4 	.word	0x08003ae4
 800037c:	08003aec 	.word	0x08003aec

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09e      	sub	sp, #120	; 0x78
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fb64 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	223c      	movs	r2, #60	; 0x3c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fb56 	bl	8003a5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b0:	2302      	movs	r3, #2
 80003b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b4:	2301      	movs	r3, #1
 80003b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b8:	2310      	movs	r3, #16
 80003ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003bc:	2300      	movs	r3, #0
 80003be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 ff19 	bl	80021fc <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003d0:	f000 f87c 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d8:	2300      	movs	r3, #0
 80003da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 ff42 	bl	8003278 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003fa:	f000 f867 	bl	80004cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fe:	2320      	movs	r3, #32
 8000400:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	463b      	mov	r3, r7
 8000408:	4618      	mov	r0, r3
 800040a:	f003 f91b 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000414:	f000 f85a 	bl	80004cc <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3778      	adds	r7, #120	; 0x78
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_I2C1_Init+0x74>)
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <MX_I2C1_Init+0x78>)
 8000428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_I2C1_Init+0x74>)
 800042c:	f240 220b 	movw	r2, #523	; 0x20b
 8000430:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_I2C1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_I2C1_Init+0x74>)
 800043a:	2201      	movs	r2, #1
 800043c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_I2C1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000444:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <MX_I2C1_Init+0x74>)
 800045e:	f001 f999 	bl	8001794 <HAL_I2C_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000468:	f000 f830 	bl	80004cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046c:	2100      	movs	r1, #0
 800046e:	4809      	ldr	r0, [pc, #36]	; (8000494 <MX_I2C1_Init+0x74>)
 8000470:	f001 fe2c 	bl	80020cc <HAL_I2CEx_ConfigAnalogFilter>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800047a:	f000 f827 	bl	80004cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x74>)
 8000482:	f001 fe6e 	bl	8002162 <HAL_I2CEx_ConfigDigitalFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800048c:	f000 f81e 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000038 	.word	0x20000038
 8000498:	40005400 	.word	0x40005400

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_GPIO_Init+0x2c>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <MX_GPIO_Init+0x2c>)
 80004a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_GPIO_Init+0x2c>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>

080004d6 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	460a      	mov	r2, r1
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	4613      	mov	r3, r2
 80004e4:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80004e6:	2226      	movs	r2, #38	; 0x26
 80004e8:	2100      	movs	r1, #0
 80004ea:	2078      	movs	r0, #120	; 0x78
 80004ec:	f000 fd7c 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	2078      	movs	r0, #120	; 0x78
 80004f6:	f000 fd77 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	461a      	mov	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	; 0x78
 8000502:	f000 fd71 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2078      	movs	r0, #120	; 0x78
 800050c:	f000 fd6c 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000510:	79bb      	ldrb	r3, [r7, #6]
 8000512:	461a      	mov	r2, r3
 8000514:	2100      	movs	r1, #0
 8000516:	2078      	movs	r0, #120	; 0x78
 8000518:	f000 fd66 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2078      	movs	r0, #120	; 0x78
 8000522:	f000 fd61 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	2100      	movs	r1, #0
 800052a:	2078      	movs	r0, #120	; 0x78
 800052c:	f000 fd5c 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000530:	222f      	movs	r2, #47	; 0x2f
 8000532:	2100      	movs	r1, #0
 8000534:	2078      	movs	r0, #120	; 0x78
 8000536:	f000 fd57 	bl	8000fe8 <ssd1306_I2C_Write>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	4603      	mov	r3, r0
 800054a:	460a      	mov	r2, r1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4613      	mov	r3, r2
 8000550:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000552:	2227      	movs	r2, #39	; 0x27
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fd46 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fd41 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	461a      	mov	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 fd3b 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2078      	movs	r0, #120	; 0x78
 8000578:	f000 fd36 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800057c:	79bb      	ldrb	r3, [r7, #6]
 800057e:	461a      	mov	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	; 0x78
 8000584:	f000 fd30 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2078      	movs	r0, #120	; 0x78
 800058e:	f000 fd2b 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000592:	22ff      	movs	r2, #255	; 0xff
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	; 0x78
 8000598:	f000 fd26 	bl	8000fe8 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 800059c:	222f      	movs	r2, #47	; 0x2f
 800059e:	2100      	movs	r1, #0
 80005a0:	2078      	movs	r0, #120	; 0x78
 80005a2:	f000 fd21 	bl	8000fe8 <ssd1306_I2C_Write>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80005b2:	222e      	movs	r2, #46	; 0x2e
 80005b4:	2100      	movs	r1, #0
 80005b6:	2078      	movs	r0, #120	; 0x78
 80005b8:	f000 fd16 	bl	8000fe8 <ssd1306_I2C_Write>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80005c6:	f000 fc93 	bl	8000ef0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005ce:	2201      	movs	r2, #1
 80005d0:	2178      	movs	r1, #120	; 0x78
 80005d2:	485b      	ldr	r0, [pc, #364]	; (8000740 <SSD1306_Init+0x180>)
 80005d4:	f001 fa62 	bl	8001a9c <HAL_I2C_IsDeviceReady>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	e0a9      	b.n	8000736 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80005e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80005e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005e8:	e002      	b.n	80005f0 <SSD1306_Init+0x30>
		p--;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f9      	bne.n	80005ea <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80005f6:	22ae      	movs	r2, #174	; 0xae
 80005f8:	2100      	movs	r1, #0
 80005fa:	2078      	movs	r0, #120	; 0x78
 80005fc:	f000 fcf4 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	2078      	movs	r0, #120	; 0x78
 8000606:	f000 fcef 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800060a:	2210      	movs	r2, #16
 800060c:	2100      	movs	r1, #0
 800060e:	2078      	movs	r0, #120	; 0x78
 8000610:	f000 fcea 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000614:	22b0      	movs	r2, #176	; 0xb0
 8000616:	2100      	movs	r1, #0
 8000618:	2078      	movs	r0, #120	; 0x78
 800061a:	f000 fce5 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800061e:	22c8      	movs	r2, #200	; 0xc8
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	; 0x78
 8000624:	f000 fce0 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2078      	movs	r0, #120	; 0x78
 800062e:	f000 fcdb 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000632:	2210      	movs	r2, #16
 8000634:	2100      	movs	r1, #0
 8000636:	2078      	movs	r0, #120	; 0x78
 8000638:	f000 fcd6 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	2100      	movs	r1, #0
 8000640:	2078      	movs	r0, #120	; 0x78
 8000642:	f000 fcd1 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000646:	2281      	movs	r2, #129	; 0x81
 8000648:	2100      	movs	r1, #0
 800064a:	2078      	movs	r0, #120	; 0x78
 800064c:	f000 fccc 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	2100      	movs	r1, #0
 8000654:	2078      	movs	r0, #120	; 0x78
 8000656:	f000 fcc7 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800065a:	22a1      	movs	r2, #161	; 0xa1
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	; 0x78
 8000660:	f000 fcc2 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000664:	22a6      	movs	r2, #166	; 0xa6
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	; 0x78
 800066a:	f000 fcbd 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800066e:	22a8      	movs	r2, #168	; 0xa8
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	; 0x78
 8000674:	f000 fcb8 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000678:	223f      	movs	r2, #63	; 0x3f
 800067a:	2100      	movs	r1, #0
 800067c:	2078      	movs	r0, #120	; 0x78
 800067e:	f000 fcb3 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000682:	22a4      	movs	r2, #164	; 0xa4
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	; 0x78
 8000688:	f000 fcae 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800068c:	22d3      	movs	r2, #211	; 0xd3
 800068e:	2100      	movs	r1, #0
 8000690:	2078      	movs	r0, #120	; 0x78
 8000692:	f000 fca9 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2078      	movs	r0, #120	; 0x78
 800069c:	f000 fca4 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80006a0:	22d5      	movs	r2, #213	; 0xd5
 80006a2:	2100      	movs	r1, #0
 80006a4:	2078      	movs	r0, #120	; 0x78
 80006a6:	f000 fc9f 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80006aa:	22f0      	movs	r2, #240	; 0xf0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2078      	movs	r0, #120	; 0x78
 80006b0:	f000 fc9a 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80006b4:	22d9      	movs	r2, #217	; 0xd9
 80006b6:	2100      	movs	r1, #0
 80006b8:	2078      	movs	r0, #120	; 0x78
 80006ba:	f000 fc95 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80006be:	2222      	movs	r2, #34	; 0x22
 80006c0:	2100      	movs	r1, #0
 80006c2:	2078      	movs	r0, #120	; 0x78
 80006c4:	f000 fc90 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006c8:	22da      	movs	r2, #218	; 0xda
 80006ca:	2100      	movs	r1, #0
 80006cc:	2078      	movs	r0, #120	; 0x78
 80006ce:	f000 fc8b 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80006d2:	2212      	movs	r2, #18
 80006d4:	2100      	movs	r1, #0
 80006d6:	2078      	movs	r0, #120	; 0x78
 80006d8:	f000 fc86 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80006dc:	22db      	movs	r2, #219	; 0xdb
 80006de:	2100      	movs	r1, #0
 80006e0:	2078      	movs	r0, #120	; 0x78
 80006e2:	f000 fc81 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80006e6:	2220      	movs	r2, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	; 0x78
 80006ec:	f000 fc7c 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80006f0:	228d      	movs	r2, #141	; 0x8d
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	; 0x78
 80006f6:	f000 fc77 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80006fa:	2214      	movs	r2, #20
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	; 0x78
 8000700:	f000 fc72 	bl	8000fe8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000704:	22af      	movs	r2, #175	; 0xaf
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	; 0x78
 800070a:	f000 fc6d 	bl	8000fe8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800070e:	222e      	movs	r2, #46	; 0x2e
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 fc68 	bl	8000fe8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f843 	bl	80007a4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800071e:	f000 f813 	bl	8000748 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SSD1306_Init+0x184>)
 8000724:	2200      	movs	r2, #0
 8000726:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <SSD1306_Init+0x184>)
 800072a:	2200      	movs	r2, #0
 800072c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SSD1306_Init+0x184>)
 8000730:	2201      	movs	r2, #1
 8000732:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000734:	2301      	movs	r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000038 	.word	0x20000038
 8000744:	2000048c 	.word	0x2000048c

08000748 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800074e:	2300      	movs	r3, #0
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	e01d      	b.n	8000790 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3b50      	subs	r3, #80	; 0x50
 8000758:	b2db      	uxtb	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	2100      	movs	r1, #0
 800075e:	2078      	movs	r0, #120	; 0x78
 8000760:	f000 fc42 	bl	8000fe8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2078      	movs	r0, #120	; 0x78
 800076a:	f000 fc3d 	bl	8000fe8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800076e:	2210      	movs	r2, #16
 8000770:	2100      	movs	r1, #0
 8000772:	2078      	movs	r0, #120	; 0x78
 8000774:	f000 fc38 	bl	8000fe8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	01db      	lsls	r3, r3, #7
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <SSD1306_UpdateScreen+0x58>)
 800077e:	441a      	add	r2, r3
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	2140      	movs	r1, #64	; 0x40
 8000784:	2078      	movs	r0, #120	; 0x78
 8000786:	f000 fbc9 	bl	8000f1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	3301      	adds	r3, #1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b07      	cmp	r3, #7
 8000794:	d9de      	bls.n	8000754 <SSD1306_UpdateScreen+0xc>
	}
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000008c 	.word	0x2000008c

080007a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SSD1306_Fill+0x14>
 80007b4:	2300      	movs	r3, #0
 80007b6:	e000      	b.n	80007ba <SSD1306_Fill+0x16>
 80007b8:	23ff      	movs	r3, #255	; 0xff
 80007ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007be:	4619      	mov	r1, r3
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <SSD1306_Fill+0x2c>)
 80007c2:	f003 f94b 	bl	8003a5c <memset>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000008c 	.word	0x2000008c

080007d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	460b      	mov	r3, r1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	70fb      	strb	r3, [r7, #3]
	if (
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	d848      	bhi.n	800087e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80007ec:	88bb      	ldrh	r3, [r7, #4]
 80007ee:	2b3f      	cmp	r3, #63	; 0x3f
 80007f0:	d845      	bhi.n	800087e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <SSD1306_DrawPixel+0xb8>)
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d006      	beq.n	8000808 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf0c      	ite	eq
 8000800:	2301      	moveq	r3, #1
 8000802:	2300      	movne	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d11a      	bne.n	8000844 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800080e:	88fa      	ldrh	r2, [r7, #6]
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	b298      	uxth	r0, r3
 8000816:	4603      	mov	r3, r0
 8000818:	01db      	lsls	r3, r3, #7
 800081a:	4413      	add	r3, r2
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <SSD1306_DrawPixel+0xbc>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	b25a      	sxtb	r2, r3
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	b25b      	sxtb	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b259      	sxtb	r1, r3
 8000834:	88fa      	ldrh	r2, [r7, #6]
 8000836:	4603      	mov	r3, r0
 8000838:	01db      	lsls	r3, r3, #7
 800083a:	4413      	add	r3, r2
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <SSD1306_DrawPixel+0xbc>)
 8000840:	54d1      	strb	r1, [r2, r3]
 8000842:	e01d      	b.n	8000880 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000844:	88fa      	ldrh	r2, [r7, #6]
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	b298      	uxth	r0, r3
 800084c:	4603      	mov	r3, r0
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	4413      	add	r3, r2
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <SSD1306_DrawPixel+0xbc>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	b25a      	sxtb	r2, r3
 8000858:	88bb      	ldrh	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	b25b      	sxtb	r3, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	b25b      	sxtb	r3, r3
 800086a:	4013      	ands	r3, r2
 800086c:	b259      	sxtb	r1, r3
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	4603      	mov	r3, r0
 8000872:	01db      	lsls	r3, r3, #7
 8000874:	4413      	add	r3, r2
 8000876:	b2c9      	uxtb	r1, r1
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <SSD1306_DrawPixel+0xbc>)
 800087a:	54d1      	strb	r1, [r2, r3]
 800087c:	e000      	b.n	8000880 <SSD1306_DrawPixel+0xac>
		return;
 800087e:	bf00      	nop
	}
}
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000048c 	.word	0x2000048c
 8000890:	2000008c 	.word	0x2000008c

08000894 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	80fb      	strh	r3, [r7, #6]
 80008a0:	4613      	mov	r3, r2
 80008a2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SSD1306_GotoXY+0x28>)
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <SSD1306_GotoXY+0x28>)
 80008ac:	88bb      	ldrh	r3, [r7, #4]
 80008ae:	8053      	strh	r3, [r2, #2]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	2000048c 	.word	0x2000048c

080008c0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008d0:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <SSD1306_Putc+0xfc>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4413      	add	r3, r2
	if (
 80008dc:	2b7f      	cmp	r3, #127	; 0x7f
 80008de:	dc07      	bgt.n	80008f0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80008e0:	4b36      	ldr	r3, [pc, #216]	; (80009bc <SSD1306_Putc+0xfc>)
 80008e2:	885b      	ldrh	r3, [r3, #2]
 80008e4:	461a      	mov	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008ec:	2b3f      	cmp	r3, #63	; 0x3f
 80008ee:	dd01      	ble.n	80008f4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e05e      	b.n	80009b2 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e04b      	b.n	8000992 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	3b20      	subs	r3, #32
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	7849      	ldrb	r1, [r1, #1]
 8000906:	fb01 f303 	mul.w	r3, r1, r3
 800090a:	4619      	mov	r1, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	440b      	add	r3, r1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	e030      	b.n	8000980 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092a:	2b00      	cmp	r3, #0
 800092c:	d010      	beq.n	8000950 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <SSD1306_Putc+0xfc>)
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	b29b      	uxth	r3, r3
 8000936:	4413      	add	r3, r2
 8000938:	b298      	uxth	r0, r3
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <SSD1306_Putc+0xfc>)
 800093c:	885a      	ldrh	r2, [r3, #2]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	b29b      	uxth	r3, r3
 8000942:	4413      	add	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	79ba      	ldrb	r2, [r7, #6]
 8000948:	4619      	mov	r1, r3
 800094a:	f7ff ff43 	bl	80007d4 <SSD1306_DrawPixel>
 800094e:	e014      	b.n	800097a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <SSD1306_Putc+0xfc>)
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4413      	add	r3, r2
 800095a:	b298      	uxth	r0, r3
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <SSD1306_Putc+0xfc>)
 800095e:	885a      	ldrh	r2, [r3, #2]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	b29b      	uxth	r3, r3
 8000964:	4413      	add	r3, r2
 8000966:	b299      	uxth	r1, r3
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf0c      	ite	eq
 800096e:	2301      	moveq	r3, #1
 8000970:	2300      	movne	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	f7ff ff2d 	bl	80007d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	3301      	adds	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	4293      	cmp	r3, r2
 800098a:	d3c8      	bcc.n	800091e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	461a      	mov	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	4293      	cmp	r3, r2
 800099c:	d3ad      	bcc.n	80008fa <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <SSD1306_Putc+0xfc>)
 80009a0:	881a      	ldrh	r2, [r3, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4413      	add	r3, r2
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <SSD1306_Putc+0xfc>)
 80009ae:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000048c 	.word	0x2000048c

080009c0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	4613      	mov	r3, r2
 80009cc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009ce:	e012      	b.n	80009f6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	68b9      	ldr	r1, [r7, #8]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff71 	bl	80008c0 <SSD1306_Putc>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d002      	beq.n	80009f0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	e008      	b.n	8000a02 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e8      	bne.n	80009d0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	781b      	ldrb	r3, [r3, #0]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <SSD1306_DrawLine>:


void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b087      	sub	sp, #28
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4604      	mov	r4, r0
 8000a12:	4608      	mov	r0, r1
 8000a14:	4611      	mov	r1, r2
 8000a16:	461a      	mov	r2, r3
 8000a18:	4623      	mov	r3, r4
 8000a1a:	80fb      	strh	r3, [r7, #6]
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	80bb      	strh	r3, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
 8000a24:	4613      	mov	r3, r2
 8000a26:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a2c:	d901      	bls.n	8000a32 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000a2e:	237f      	movs	r3, #127	; 0x7f
 8000a30:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	d901      	bls.n	8000a3c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000a38:	237f      	movs	r3, #127	; 0x7f
 8000a3a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a40:	d901      	bls.n	8000a46 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000a42:	233f      	movs	r3, #63	; 0x3f
 8000a44:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000a46:	883b      	ldrh	r3, [r7, #0]
 8000a48:	2b3f      	cmp	r3, #63	; 0x3f
 8000a4a:	d901      	bls.n	8000a50 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000a4c:	233f      	movs	r3, #63	; 0x3f
 8000a4e:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000a50:	88fa      	ldrh	r2, [r7, #6]
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d205      	bcs.n	8000a64 <SSD1306_DrawLine+0x5a>
 8000a58:	887a      	ldrh	r2, [r7, #2]
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	e004      	b.n	8000a6e <SSD1306_DrawLine+0x64>
 8000a64:	88fa      	ldrh	r2, [r7, #6]
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000a70:	88ba      	ldrh	r2, [r7, #4]
 8000a72:	883b      	ldrh	r3, [r7, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d205      	bcs.n	8000a84 <SSD1306_DrawLine+0x7a>
 8000a78:	883a      	ldrh	r2, [r7, #0]
 8000a7a:	88bb      	ldrh	r3, [r7, #4]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	e004      	b.n	8000a8e <SSD1306_DrawLine+0x84>
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	887b      	ldrh	r3, [r7, #2]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d201      	bcs.n	8000a9c <SSD1306_DrawLine+0x92>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e001      	b.n	8000aa0 <SSD1306_DrawLine+0x96>
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000aa2:	88ba      	ldrh	r2, [r7, #4]
 8000aa4:	883b      	ldrh	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d201      	bcs.n	8000aae <SSD1306_DrawLine+0xa4>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e001      	b.n	8000ab2 <SSD1306_DrawLine+0xa8>
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000ab4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	dd06      	ble.n	8000ace <SSD1306_DrawLine+0xc4>
 8000ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ac4:	0fda      	lsrs	r2, r3, #31
 8000ac6:	4413      	add	r3, r2
 8000ac8:	105b      	asrs	r3, r3, #1
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	e006      	b.n	8000adc <SSD1306_DrawLine+0xd2>
 8000ace:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ad2:	0fda      	lsrs	r2, r3, #31
 8000ad4:	4413      	add	r3, r2
 8000ad6:	105b      	asrs	r3, r3, #1
 8000ad8:	425b      	negs	r3, r3
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000ade:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d129      	bne.n	8000b3a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000ae6:	883a      	ldrh	r2, [r7, #0]
 8000ae8:	88bb      	ldrh	r3, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d205      	bcs.n	8000afa <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000aee:	883b      	ldrh	r3, [r7, #0]
 8000af0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000af2:	88bb      	ldrh	r3, [r7, #4]
 8000af4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000af6:	893b      	ldrh	r3, [r7, #8]
 8000af8:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d205      	bcs.n	8000b0e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000b0a:	893b      	ldrh	r3, [r7, #8]
 8000b0c:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	82bb      	strh	r3, [r7, #20]
 8000b12:	e00c      	b.n	8000b2e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000b14:	8ab9      	ldrh	r1, [r7, #20]
 8000b16:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fe59 	bl	80007d4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000b22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3301      	adds	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	82bb      	strh	r3, [r7, #20]
 8000b2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b32:	883b      	ldrh	r3, [r7, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dded      	ble.n	8000b14 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000b38:	e05f      	b.n	8000bfa <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000b3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d129      	bne.n	8000b96 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000b42:	883a      	ldrh	r2, [r7, #0]
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d205      	bcs.n	8000b56 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000b4a:	883b      	ldrh	r3, [r7, #0]
 8000b4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000b52:	893b      	ldrh	r3, [r7, #8]
 8000b54:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d205      	bcs.n	8000b6a <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000b66:	893b      	ldrh	r3, [r7, #8]
 8000b68:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	82bb      	strh	r3, [r7, #20]
 8000b6e:	e00c      	b.n	8000b8a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000b70:	8abb      	ldrh	r3, [r7, #20]
 8000b72:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b76:	88b9      	ldrh	r1, [r7, #4]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe2b 	bl	80007d4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000b7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	3301      	adds	r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	82bb      	strh	r3, [r7, #20]
 8000b8a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dded      	ble.n	8000b70 <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000b94:	e031      	b.n	8000bfa <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000b96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe18 	bl	80007d4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000ba4:	88fa      	ldrh	r2, [r7, #6]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d103      	bne.n	8000bb4 <SSD1306_DrawLine+0x1aa>
 8000bac:	88ba      	ldrh	r2, [r7, #4]
 8000bae:	883b      	ldrh	r3, [r7, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d021      	beq.n	8000bf8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000bb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bc0:	425b      	negs	r3, r3
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dd08      	ble.n	8000bd8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000bc6:	8afa      	ldrh	r2, [r7, #22]
 8000bc8:	8a3b      	ldrh	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000bd0:	89fa      	ldrh	r2, [r7, #14]
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000bd8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000bdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dad8      	bge.n	8000b96 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000be4:	8afa      	ldrh	r2, [r7, #22]
 8000be6:	8a7b      	ldrh	r3, [r7, #18]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000bee:	89ba      	ldrh	r2, [r7, #12]
 8000bf0:	88bb      	ldrh	r3, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000bf6:	e7ce      	b.n	8000b96 <SSD1306_DrawLine+0x18c>
			break;
 8000bf8:	bf00      	nop
		}
	}
}
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd90      	pop	{r4, r7, pc}

08000c00 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	4604      	mov	r4, r0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4623      	mov	r3, r4
 8000c10:	80fb      	strh	r3, [r7, #6]
 8000c12:	4603      	mov	r3, r0
 8000c14:	80bb      	strh	r3, [r7, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	807b      	strh	r3, [r7, #2]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2b7f      	cmp	r3, #127	; 0x7f
 8000c22:	d853      	bhi.n	8000ccc <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	2b3f      	cmp	r3, #63	; 0x3f
 8000c28:	d850      	bhi.n	8000ccc <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4413      	add	r3, r2
 8000c30:	2b7f      	cmp	r3, #127	; 0x7f
 8000c32:	dd03      	ble.n	8000c3c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000c3a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000c3c:	88ba      	ldrh	r2, [r7, #4]
 8000c3e:	883b      	ldrh	r3, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	2b3f      	cmp	r3, #63	; 0x3f
 8000c44:	dd03      	ble.n	8000c4e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000c4c:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	4413      	add	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	88bc      	ldrh	r4, [r7, #4]
 8000c58:	88b9      	ldrh	r1, [r7, #4]
 8000c5a:	88f8      	ldrh	r0, [r7, #6]
 8000c5c:	7e3b      	ldrb	r3, [r7, #24]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	4623      	mov	r3, r4
 8000c62:	f7ff fed2 	bl	8000a0a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000c66:	88ba      	ldrh	r2, [r7, #4]
 8000c68:	883b      	ldrh	r3, [r7, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	88fa      	ldrh	r2, [r7, #6]
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	4413      	add	r3, r2
 8000c74:	b29c      	uxth	r4, r3
 8000c76:	88ba      	ldrh	r2, [r7, #4]
 8000c78:	883b      	ldrh	r3, [r7, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	88f8      	ldrh	r0, [r7, #6]
 8000c80:	7e3b      	ldrb	r3, [r7, #24]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4613      	mov	r3, r2
 8000c86:	4622      	mov	r2, r4
 8000c88:	f7ff febf 	bl	8000a0a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000c8c:	88ba      	ldrh	r2, [r7, #4]
 8000c8e:	883b      	ldrh	r3, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29c      	uxth	r4, r3
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	88f8      	ldrh	r0, [r7, #6]
 8000c9a:	7e3b      	ldrb	r3, [r7, #24]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4623      	mov	r3, r4
 8000ca0:	f7ff feb3 	bl	8000a0a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000ca4:	88fa      	ldrh	r2, [r7, #6]
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b298      	uxth	r0, r3
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b29c      	uxth	r4, r3
 8000cb4:	88ba      	ldrh	r2, [r7, #4]
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	88b9      	ldrh	r1, [r7, #4]
 8000cbe:	7e3b      	ldrb	r3, [r7, #24]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	4622      	mov	r2, r4
 8000cc6:	f7ff fea0 	bl	8000a0a <SSD1306_DrawLine>
 8000cca:	e000      	b.n	8000cce <SSD1306_DrawRectangle+0xce>
		return;
 8000ccc:	bf00      	nop
}
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <SSD1306_DrawTriangle>:
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
	}
}

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	80fb      	strh	r3, [r7, #6]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80bb      	strh	r3, [r7, #4]
 8000cea:	460b      	mov	r3, r1
 8000cec:	807b      	strh	r3, [r7, #2]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 8000cf2:	883c      	ldrh	r4, [r7, #0]
 8000cf4:	887a      	ldrh	r2, [r7, #2]
 8000cf6:	88b9      	ldrh	r1, [r7, #4]
 8000cf8:	88f8      	ldrh	r0, [r7, #6]
 8000cfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4623      	mov	r3, r4
 8000d02:	f7ff fe82 	bl	8000a0a <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 8000d06:	8bbc      	ldrh	r4, [r7, #28]
 8000d08:	8b3a      	ldrh	r2, [r7, #24]
 8000d0a:	8839      	ldrh	r1, [r7, #0]
 8000d0c:	8878      	ldrh	r0, [r7, #2]
 8000d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f7ff fe78 	bl	8000a0a <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8000d1a:	88bc      	ldrh	r4, [r7, #4]
 8000d1c:	88fa      	ldrh	r2, [r7, #6]
 8000d1e:	8bb9      	ldrh	r1, [r7, #28]
 8000d20:	8b38      	ldrh	r0, [r7, #24]
 8000d22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4623      	mov	r3, r4
 8000d2a:	f7ff fe6e 	bl	8000a0a <SSD1306_DrawLine>
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}

08000d36 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8000d36:	b590      	push	{r4, r7, lr}
 8000d38:	b087      	sub	sp, #28
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	4611      	mov	r1, r2
 8000d42:	461a      	mov	r2, r3
 8000d44:	4623      	mov	r3, r4
 8000d46:	80fb      	strh	r3, [r7, #6]
 8000d48:	4603      	mov	r3, r0
 8000d4a:	80bb      	strh	r3, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
 8000d50:	4613      	mov	r3, r2
 8000d52:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	f1c3 0301 	rsb	r3, r3, #1
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	461a      	mov	r2, r3
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8000d78:	88f8      	ldrh	r0, [r7, #6]
 8000d7a:	88ba      	ldrh	r2, [r7, #4]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	787a      	ldrb	r2, [r7, #1]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fd25 	bl	80007d4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8000d8a:	88f8      	ldrh	r0, [r7, #6]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	787a      	ldrb	r2, [r7, #1]
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fd1c 	bl	80007d4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	88b9      	ldrh	r1, [r7, #4]
 8000da6:	787a      	ldrb	r2, [r7, #1]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd13 	bl	80007d4 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	88b9      	ldrh	r1, [r7, #4]
 8000db8:	787a      	ldrb	r2, [r7, #1]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fd0a 	bl	80007d4 <SSD1306_DrawPixel>

    while (x < y) {
 8000dc0:	e081      	b.n	8000ec6 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8000dc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0e      	blt.n	8000de8 <SSD1306_DrawCircle+0xb2>
            y--;
 8000dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000dd6:	8a7b      	ldrh	r3, [r7, #18]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000dde:	8afa      	ldrh	r2, [r7, #22]
 8000de0:	8a7b      	ldrh	r3, [r7, #18]
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000de8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000df4:	8abb      	ldrh	r3, [r7, #20]
 8000df6:	3302      	adds	r3, #2
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000dfc:	8afa      	ldrh	r2, [r7, #22]
 8000dfe:	8abb      	ldrh	r3, [r7, #20]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8000e06:	88fa      	ldrh	r2, [r7, #6]
 8000e08:	8a3b      	ldrh	r3, [r7, #16]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b298      	uxth	r0, r3
 8000e0e:	88ba      	ldrh	r2, [r7, #4]
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	787a      	ldrb	r2, [r7, #1]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fcdb 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	8a3b      	ldrh	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b298      	uxth	r0, r3
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	787a      	ldrb	r2, [r7, #1]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fccf 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	8a3b      	ldrh	r3, [r7, #16]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	b298      	uxth	r0, r3
 8000e3e:	88ba      	ldrh	r2, [r7, #4]
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	787a      	ldrb	r2, [r7, #1]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fcc3 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	8a3b      	ldrh	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b298      	uxth	r0, r3
 8000e56:	88ba      	ldrh	r2, [r7, #4]
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	787a      	ldrb	r2, [r7, #1]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fcb7 	bl	80007d4 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b298      	uxth	r0, r3
 8000e6e:	88ba      	ldrh	r2, [r7, #4]
 8000e70:	8a3b      	ldrh	r3, [r7, #16]
 8000e72:	4413      	add	r3, r2
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	787a      	ldrb	r2, [r7, #1]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fcab 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8000e7e:	88fa      	ldrh	r2, [r7, #6]
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b298      	uxth	r0, r3
 8000e86:	88ba      	ldrh	r2, [r7, #4]
 8000e88:	8a3b      	ldrh	r3, [r7, #16]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	787a      	ldrb	r2, [r7, #1]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fc9f 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8000e96:	88fa      	ldrh	r2, [r7, #6]
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b298      	uxth	r0, r3
 8000e9e:	88ba      	ldrh	r2, [r7, #4]
 8000ea0:	8a3b      	ldrh	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	787a      	ldrb	r2, [r7, #1]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fc93 	bl	80007d4 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	89fb      	ldrh	r3, [r7, #14]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	b298      	uxth	r0, r3
 8000eb6:	88ba      	ldrh	r2, [r7, #4]
 8000eb8:	8a3b      	ldrh	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	787a      	ldrb	r2, [r7, #1]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fc87 	bl	80007d4 <SSD1306_DrawPixel>
    while (x < y) {
 8000ec6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	f6ff af77 	blt.w	8000dc2 <SSD1306_DrawCircle+0x8c>
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}

08000ede <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fc5e 	bl	80007a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ee8:	f7ff fc2e 	bl	8000748 <SSD1306_UpdateScreen>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <ssd1306_I2C_Init+0x28>)
 8000ef8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000efa:	e002      	b.n	8000f02 <ssd1306_I2C_Init+0x12>
		p--;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f9      	bne.n	8000efc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	0003d090 	.word	0x0003d090

08000f1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b0c7      	sub	sp, #284	; 0x11c
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f2a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f2e:	600a      	str	r2, [r1, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f36:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f42:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f46:	4602      	mov	r2, r0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f52:	460a      	mov	r2, r1
 8000f54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000f5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f62:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f70:	e015      	b.n	8000f9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000f72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f76:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f7a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	441a      	add	r2, r3
 8000f82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f86:	3301      	adds	r3, #1
 8000f88:	7811      	ldrb	r1, [r2, #0]
 8000f8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f8e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000fac:	8812      	ldrh	r2, [r2, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d8df      	bhi.n	8000f72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000fb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f107 020c 	add.w	r2, r7, #12
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	9000      	str	r0, [sp, #0]
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ssd1306_I2C_WriteMulti+0xc8>)
 8000fd6:	f000 fc6d 	bl	80018b4 <HAL_I2C_Master_Transmit>
}
 8000fda:	bf00      	nop
 8000fdc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	20000038 	.word	0x20000038

08000fe8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	b299      	uxth	r1, r3
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	230a      	movs	r3, #10
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <ssd1306_I2C_Write+0x38>)
 8001012:	f000 fc4f 	bl	80018b4 <HAL_I2C_Master_Transmit>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000038 	.word	0x20000038

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x44>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x44>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x44>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x44>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_I2C_MspInit+0x7c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d127      	bne.n	80010de <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_I2C_MspInit+0x80>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_I2C_MspInit+0x80>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6153      	str	r3, [r2, #20]
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_I2C_MspInit+0x80>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010aa:	2312      	movs	r3, #18
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b6:	2304      	movs	r3, #4
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <HAL_I2C_MspInit+0x84>)
 80010c2:	f000 f9ed 	bl	80014a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_I2C_MspInit+0x80>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_I2C_MspInit+0x80>)
 80010cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_I2C_MspInit+0x80>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f884 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001170:	f7ff ffea 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	; (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	; (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f002 fc67 	bl	8003a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800119e:	f7ff f813 	bl	80001c8 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80011b0:	08005c04 	.word	0x08005c04
  ldr r2, =_sbss
 80011b4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011b8:	20000498 	.word	0x20000498

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f931 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	200f      	movs	r0, #15
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff ff22 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f93b 	bl	8001486 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f911 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000010 	.word	0x20000010
 8001244:	20000018 	.word	0x20000018
 8001248:	20000014 	.word	0x20000014

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000018 	.word	0x20000018
 8001270:	20000494 	.word	0x20000494

08001274 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;  
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000494 	.word	0x20000494

0800128c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000018 	.word	0x20000018

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff47 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff5c 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffb0 	bl	80013f4 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e154      	b.n	800175a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8146 	beq.w	8001754 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d005      	beq.n	80014e0 <HAL_GPIO_Init+0x40>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 0201 	and.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b03      	cmp	r3, #3
 800154c:	d017      	beq.n	800157e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d123      	bne.n	80015d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0203 	and.w	r2, r3, #3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a0 	beq.w	8001754 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_GPIO_Init+0x2d8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_GPIO_Init+0x2d8>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b55      	ldr	r3, [pc, #340]	; (8001778 <HAL_GPIO_Init+0x2d8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162c:	4a53      	ldr	r2, [pc, #332]	; (800177c <HAL_GPIO_Init+0x2dc>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001656:	d019      	beq.n	800168c <HAL_GPIO_Init+0x1ec>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a49      	ldr	r2, [pc, #292]	; (8001780 <HAL_GPIO_Init+0x2e0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x1e8>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a48      	ldr	r2, [pc, #288]	; (8001784 <HAL_GPIO_Init+0x2e4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1e4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a47      	ldr	r2, [pc, #284]	; (8001788 <HAL_GPIO_Init+0x2e8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1e0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_GPIO_Init+0x2ec>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1dc>
 8001678:	2304      	movs	r3, #4
 800167a:	e008      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 800167c:	2305      	movs	r3, #5
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001680:	2303      	movs	r3, #3
 8001682:	e004      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001684:	2302      	movs	r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_GPIO_Init+0x1ee>
 800168c:	2300      	movs	r3, #0
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	f002 0203 	and.w	r2, r2, #3
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	4093      	lsls	r3, r2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800169e:	4937      	ldr	r1, [pc, #220]	; (800177c <HAL_GPIO_Init+0x2dc>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d6:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016fa:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	f47f aea3 	bne.w	80014b0 <HAL_GPIO_Init+0x10>
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	48000c00 	.word	0x48000c00
 800178c:	48001000 	.word	0x48001000
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e081      	b.n	80018aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff fc56 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e006      	b.n	800181c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800181a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d104      	bne.n	800182e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69d9      	ldr	r1, [r3, #28]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	817b      	strh	r3, [r7, #10]
 80018c4:	4613      	mov	r3, r2
 80018c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	f040 80da 	bne.w	8001a8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_I2C_Master_Transmit+0x30>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0d3      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ec:	f7ff fcc2 	bl	8001274 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2319      	movs	r3, #25
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 f9f9 	bl	8001cf6 <I2C_WaitOnFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0be      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2221      	movs	r2, #33	; 0x21
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2210      	movs	r2, #16
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	893a      	ldrh	r2, [r7, #8]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2bff      	cmp	r3, #255	; 0xff
 800193e:	d90e      	bls.n	800195e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fb86 	bl	8002068 <I2C_TransferConfig>
 800195c:	e06c      	b.n	8001a38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fb75 	bl	8002068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800197e:	e05b      	b.n	8001a38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	6a39      	ldr	r1, [r7, #32]
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa05 	bl	8001d94 <I2C_WaitOnTXISFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e07b      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d034      	beq.n	8001a38 <HAL_I2C_Master_Transmit+0x184>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d130      	bne.n	8001a38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	2200      	movs	r2, #0
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f988 	bl	8001cf6 <I2C_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04d      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d90e      	bls.n	8001a18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	22ff      	movs	r2, #255	; 0xff
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	8979      	ldrh	r1, [r7, #10]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fb29 	bl	8002068 <I2C_TransferConfig>
 8001a16:	e00f      	b.n	8001a38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 fb18 	bl	8002068 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d19e      	bne.n	8001980 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9eb 	bl	8001e22 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e01a      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_I2C_Master_Transmit+0x1e4>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a8a:	2302      	movs	r3, #2
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	80002000 	.word	0x80002000
 8001a98:	fe00e800 	.word	0xfe00e800

08001a9c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b20      	cmp	r3, #32
 8001aba:	f040 80f3 	bne.w	8001ca4 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001acc:	d101      	bne.n	8001ad2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e0e9      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_I2C_IsDeviceReady+0x44>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e0e2      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_IsDeviceReady+0x72>
 8001afe:	897b      	ldrh	r3, [r7, #10]
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0c:	e006      	b.n	8001b1c <HAL_I2C_IsDeviceReady+0x80>
 8001b0e:	897b      	ldrh	r3, [r7, #10]
 8001b10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b18:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff fba7 	bl	8001274 <HAL_GetTick>
 8001b26:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b54:	e034      	b.n	8001bc0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d01a      	beq.n	8001b94 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff fb89 	bl	8001274 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <HAL_I2C_IsDeviceReady+0xd8>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10f      	bne.n	8001b94 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2220      	movs	r2, #32
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e088      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	bf0c      	ite	eq
 8001ba2:	2301      	moveq	r3, #1
 8001ba4:	2300      	movne	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001bc0:	7ffb      	ldrb	r3, [r7, #31]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <HAL_I2C_IsDeviceReady+0x130>
 8001bc6:	7fbb      	ldrb	r3, [r7, #30]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0c4      	beq.n	8001b56 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d01a      	beq.n	8001c10 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	2120      	movs	r1, #32
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f886 	bl	8001cf6 <I2C_WaitOnFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e058      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e04a      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f86b 	bl	8001cf6 <I2C_WaitOnFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e03d      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2210      	movs	r2, #16
 8001c30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2220      	movs	r2, #32
 8001c38:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d118      	bne.n	8001c74 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c50:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f84a 	bl	8001cf6 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01c      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	f63f af39 	bhi.w	8001af6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f043 0220 	orr.w	r2, r3, #32
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d103      	bne.n	8001ccc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d007      	beq.n	8001cea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	619a      	str	r2, [r3, #24]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d06:	e031      	b.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d02d      	beq.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d10:	f7ff fab0 	bl	8001274 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d302      	bcc.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d122      	bne.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	bf0c      	ite	eq
 8001d36:	2301      	moveq	r3, #1
 8001d38:	2300      	movne	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d113      	bne.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f043 0220 	orr.w	r2, r3, #32
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e00f      	b.n	8001d8c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4013      	ands	r3, r2
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d0be      	beq.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001da0:	e033      	b.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f87e 	bl	8001ea8 <I2C_IsErrorOccurred>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e031      	b.n	8001e1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d025      	beq.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff fa59 	bl	8001274 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d11a      	bne.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d013      	beq.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2220      	movs	r2, #32
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d1c4      	bne.n	8001da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e2e:	e02f      	b.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f837 	bl	8001ea8 <I2C_IsErrorOccurred>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e02d      	b.n	8001ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e44:	f7ff fa16 	bl	8001274 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d302      	bcc.n	8001e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11a      	bne.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d013      	beq.n	8001e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e007      	b.n	8001ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d1c8      	bne.n	8001e30 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d068      	beq.n	8001fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001edc:	e049      	b.n	8001f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d045      	beq.n	8001f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff f9c5 	bl	8001274 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d302      	bcc.n	8001efc <I2C_IsErrorOccurred+0x54>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d13a      	bne.n	8001f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1e:	d121      	bne.n	8001f64 <I2C_IsErrorOccurred+0xbc>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f26:	d01d      	beq.n	8001f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d01a      	beq.n	8001f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f3e:	f7ff f999 	bl	8001274 <HAL_GetTick>
 8001f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f44:	e00e      	b.n	8001f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f46:	f7ff f995 	bl	8001274 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b19      	cmp	r3, #25
 8001f52:	d907      	bls.n	8001f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f043 0320 	orr.w	r3, r3, #32
 8001f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001f62:	e006      	b.n	8001f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d1e9      	bne.n	8001f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d003      	beq.n	8001f88 <I2C_IsErrorOccurred+0xe0>
 8001f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0aa      	beq.n	8001ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2220      	movs	r2, #32
 8001f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01c      	beq.n	8002056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fe46 	bl	8001cae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <I2C_IsErrorOccurred+0x1bc>)
 800202e:	400b      	ands	r3, r1
 8002030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800205a:	4618      	mov	r0, r3
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	4613      	mov	r3, r2
 8002078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	4313      	orrs	r3, r2
 8002092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	0d5b      	lsrs	r3, r3, #21
 80020a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <I2C_TransferConfig+0x60>)
 80020a8:	430b      	orrs	r3, r1
 80020aa:	43db      	mvns	r3, r3
 80020ac:	ea02 0103 	and.w	r1, r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	03ff63ff 	.word	0x03ff63ff

080020cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d138      	bne.n	8002154 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e032      	b.n	8002156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800211e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	d139      	bne.n	80021ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002182:	2302      	movs	r3, #2
 8002184:	e033      	b.n	80021ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2224      	movs	r2, #36	; 0x24
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002202:	af00      	add	r7, sp, #0
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	f001 b823 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 817d 	beq.w	8002532 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002238:	4bbc      	ldr	r3, [pc, #752]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00c      	beq.n	800225e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002244:	4bb9      	ldr	r3, [pc, #740]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d15c      	bne.n	800230a <HAL_RCC_OscConfig+0x10e>
 8002250:	4bb6      	ldr	r3, [pc, #728]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d155      	bne.n	800230a <HAL_RCC_OscConfig+0x10e>
 800225e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002262:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002272:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_RCC_OscConfig+0x94>
 800228a:	4ba8      	ldr	r3, [pc, #672]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	e015      	b.n	80022bc <HAL_RCC_OscConfig+0xc0>
 8002290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002294:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022b8:	4b9c      	ldr	r3, [pc, #624]	; (800252c <HAL_RCC_OscConfig+0x330>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022c8:	fa92 f2a2 	rbit	r2, r2
 80022cc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 811f 	beq.w	8002530 <HAL_RCC_OscConfig+0x334>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8116 	bne.w	8002530 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f000 bfaf 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x12e>
 800231c:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a82      	ldr	r2, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e036      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x158>
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b79      	ldr	r3, [pc, #484]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a78      	ldr	r2, [pc, #480]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e021      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x184>
 8002366:	4b71      	ldr	r3, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a70      	ldr	r2, [pc, #448]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6e      	ldr	r3, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6d      	ldr	r2, [pc, #436]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0x19c>
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b67      	ldr	r3, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002396:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f023 020f 	bic.w	r2, r3, #15
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	495f      	ldr	r1, [pc, #380]	; (800252c <HAL_RCC_OscConfig+0x330>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d059      	beq.n	8002476 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe ff57 	bl	8001274 <HAL_GetTick>
 80023c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe ff52 	bl	8001274 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d902      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	f000 bf43 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80023e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x218>
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x330>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e015      	b.n	8002440 <HAL_RCC_OscConfig+0x244>
 8002414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002418:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002430:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x330>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002444:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002448:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800244c:	fa92 f2a2 	rbit	r2, r2
 8002450:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002454:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0ab      	beq.n	80023cc <HAL_RCC_OscConfig+0x1d0>
 8002474:	e05d      	b.n	8002532 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fefd 	bl	8001274 <HAL_GetTick>
 800247a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fef8 	bl	8001274 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d902      	bls.n	8002496 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	f000 bee9 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 8002496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2cc>
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_RCC_OscConfig+0x330>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e015      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f8>
 80024c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_RCC_OscConfig+0x330>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002500:	fa92 f2a2 	rbit	r2, r2
 8002504:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002508:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ab      	bne.n	8002480 <HAL_RCC_OscConfig+0x284>
 8002528:	e003      	b.n	8002532 <HAL_RCC_OscConfig+0x336>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 817d 	beq.w	8002842 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002548:	4ba6      	ldr	r3, [pc, #664]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002554:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d172      	bne.n	8002646 <HAL_RCC_OscConfig+0x44a>
 8002560:	4ba0      	ldr	r3, [pc, #640]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d16c      	bne.n	8002646 <HAL_RCC_OscConfig+0x44a>
 800256c:	2302      	movs	r3, #2
 800256e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800257e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_OscConfig+0x3a0>
 8002596:	4b93      	ldr	r3, [pc, #588]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e013      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c8>
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025c0:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2202      	movs	r2, #2
 80025c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCC_OscConfig+0x410>
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d002      	beq.n	800260c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 be2e 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	21f8      	movs	r1, #248	; 0xf8
 8002622:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800262a:	fa91 f1a1 	rbit	r1, r1
 800262e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002632:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002636:	fab1 f181 	clz	r1, r1
 800263a:	b2c9      	uxtb	r1, r1
 800263c:	408b      	lsls	r3, r1
 800263e:	4969      	ldr	r1, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	e0fd      	b.n	8002842 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8088 	beq.w	8002768 <HAL_RCC_OscConfig+0x56c>
 8002658:	2301      	movs	r3, #1
 800265a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800266a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fdf6 	bl	8001274 <HAL_GetTick>
 8002688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268e:	f7fe fdf1 	bl	8001274 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d902      	bls.n	80026a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	f000 bde2 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d102      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d8>
 80026ce:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e013      	b.n	80026fc <HAL_RCC_OscConfig+0x500>
 80026d4:	2302      	movs	r3, #2
 80026d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026e6:	2302      	movs	r3, #2
 80026e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	2202      	movs	r2, #2
 80026fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002702:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002706:	fa92 f2a2 	rbit	r2, r2
 800270a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800270e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002712:	fab2 f282 	clz	r2, r2
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	f042 0220 	orr.w	r2, r2, #32
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	f002 021f 	and.w	r2, r2, #31
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0af      	beq.n	800268e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	21f8      	movs	r1, #248	; 0xf8
 8002744:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800274c:	fa91 f1a1 	rbit	r1, r1
 8002750:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002754:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002758:	fab1 f181 	clz	r1, r1
 800275c:	b2c9      	uxtb	r1, r1
 800275e:	408b      	lsls	r3, r1
 8002760:	4920      	ldr	r1, [pc, #128]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
 8002766:	e06c      	b.n	8002842 <HAL_RCC_OscConfig+0x646>
 8002768:	2301      	movs	r3, #1
 800276a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800277a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fd6e 	bl	8001274 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fd69 	bl	8001274 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d902      	bls.n	80027b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	f000 bd5a 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d104      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5ec>
 80027de:	4b01      	ldr	r3, [pc, #4]	; (80027e4 <HAL_RCC_OscConfig+0x5e8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x614>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027fa:	2302      	movs	r3, #2
 80027fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002800:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800280c:	4bc8      	ldr	r3, [pc, #800]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	2202      	movs	r2, #2
 8002812:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002816:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002822:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002826:	fab2 f282 	clz	r2, r2
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f002 021f 	and.w	r2, r2, #31
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ad      	bne.n	800279e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8110 	beq.w	8002a78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d079      	beq.n	800295c <HAL_RCC_OscConfig+0x760>
 8002868:	2301      	movs	r3, #1
 800286a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800287a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	4bab      	ldr	r3, [pc, #684]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2301      	movs	r3, #1
 8002890:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe fcef 	bl	8001274 <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fcea 	bl	8001274 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f000 bcdb 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028cc:	2202      	movs	r2, #2
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f2a3 	rbit	r2, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800290a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290c:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 800290e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002918:	2102      	movs	r1, #2
 800291a:	6019      	str	r1, [r3, #0]
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f1a3 	rbit	r1, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002932:	6019      	str	r1, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0a0      	beq.n	800289c <HAL_RCC_OscConfig+0x6a0>
 800295a:	e08d      	b.n	8002a78 <HAL_RCC_OscConfig+0x87c>
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800297e:	601a      	str	r2, [r3, #0]
  return result;
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002988:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7fe fc69 	bl	8001274 <HAL_GetTick>
 80029a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fc64 	bl	8001274 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d902      	bls.n	80029be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	f000 bc55 	b.w	8003268 <HAL_RCC_OscConfig+0x106c>
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	fa93 f2a3 	rbit	r2, r3
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ea:	2202      	movs	r2, #2
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	fa93 f2a3 	rbit	r2, r3
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a0e:	2202      	movs	r2, #2
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a36:	2102      	movs	r1, #2
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fa93 f1a3 	rbit	r1, r3
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a50:	6019      	str	r1, [r3, #0]
  return result;
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d197      	bne.n	80029a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 81a1 	beq.w	8002dd0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a22      	ldr	r2, [pc, #136]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ac6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe fbc5 	bl	8001274 <HAL_GetTick>
 8002aea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	e009      	b.n	8002b04 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe fbc0 	bl	8001274 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e3b1      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x93c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_OscConfig+0x940>
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e03c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	10908120 	.word	0x10908120
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x96a>
 8002b4c:	4bc1      	ldr	r3, [pc, #772]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4ac0      	ldr	r2, [pc, #768]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	4bbe      	ldr	r3, [pc, #760]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4abd      	ldr	r2, [pc, #756]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e020      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x994>
 8002b76:	4bb7      	ldr	r3, [pc, #732]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4ab6      	ldr	r2, [pc, #728]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4bb4      	ldr	r3, [pc, #720]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4ab3      	ldr	r2, [pc, #716]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x9ac>
 8002b90:	4bb0      	ldr	r3, [pc, #704]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	4aaf      	ldr	r2, [pc, #700]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6213      	str	r3, [r2, #32]
 8002b9c:	4bad      	ldr	r3, [pc, #692]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4aac      	ldr	r2, [pc, #688]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8081 	beq.w	8002cbc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fb5b 	bl	8001274 <HAL_GetTick>
 8002bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fb56 	bl	8001274 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e345      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fa93 f2a3 	rbit	r2, r3
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c22:	601a      	str	r2, [r3, #0]
  return result;
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d102      	bne.n	8002c48 <HAL_RCC_OscConfig+0xa4c>
 8002c42:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0xa74>
 8002c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c78:	2102      	movs	r1, #2
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	fa92 f1a2 	rbit	r1, r2
 8002c8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c92:	6011      	str	r1, [r2, #0]
  return result;
 8002c94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c98:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d084      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x9c8>
 8002cba:	e07f      	b.n	8002dbc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fada 	bl	8001274 <HAL_GetTick>
 8002cc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	e00b      	b.n	8002cde <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fad5 	bl	8001274 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e2c4      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d24:	601a      	str	r2, [r3, #0]
  return result;
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_OscConfig+0xb4e>
 8002d44:	4b43      	ldr	r3, [pc, #268]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	e013      	b.n	8002d72 <HAL_RCC_OscConfig+0xb76>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d52:	2202      	movs	r2, #2
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fa92 f1a2 	rbit	r1, r2
 8002d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d184      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8242 	beq.w	8003266 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <HAL_RCC_OscConfig+0xc58>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	f000 8213 	beq.w	8003216 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f040 8162 	bne.w	80030c6 <HAL_RCC_OscConfig+0xeca>
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	461a      	mov	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fa14 	bl	8001274 <HAL_GetTick>
 8002e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	e00c      	b.n	8002e6c <HAL_RCC_OscConfig+0xc70>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fa0c 	bl	8001274 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e1fd      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	fa93 f2a3 	rbit	r2, r3
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e90:	601a      	str	r2, [r3, #0]
  return result;
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_OscConfig+0xcba>
 8002eb0:	4bb0      	ldr	r3, [pc, #704]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e027      	b.n	8002f06 <HAL_RCC_OscConfig+0xd0a>
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	fa93 f2a3 	rbit	r2, r3
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	4b9c      	ldr	r3, [pc, #624]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f12:	6011      	str	r1, [r2, #0]
 8002f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f18:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fa92 f1a2 	rbit	r1, r2
 8002f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f2a:	6011      	str	r1, [r2, #0]
  return result;
 8002f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	fab2 f282 	clz	r2, r2
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f042 0220 	orr.w	r2, r2, #32
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f002 021f 	and.w	r2, r2, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d182      	bne.n	8002e58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f52:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	430b      	orrs	r3, r1
 8002f74:	497f      	ldr	r1, [pc, #508]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f9e:	601a      	str	r2, [r3, #0]
  return result;
 8002fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002fa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f958 	bl	8001274 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fe f953 	bl	8001274 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e144      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	fa93 f2a3 	rbit	r2, r3
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003002:	601a      	str	r2, [r3, #0]
  return result;
 8003004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003008:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800300c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_RCC_OscConfig+0xe2c>
 8003022:	4b54      	ldr	r3, [pc, #336]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e027      	b.n	8003078 <HAL_RCC_OscConfig+0xe7c>
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003030:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003080:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800308a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	fa92 f1a2 	rbit	r1, r2
 8003094:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003098:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800309c:	6011      	str	r1, [r2, #0]
  return result;
 800309e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d082      	beq.n	8002fca <HAL_RCC_OscConfig+0xdce>
 80030c4:	e0cf      	b.n	8003266 <HAL_RCC_OscConfig+0x106a>
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	fa93 f2a3 	rbit	r2, r3
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030ea:	601a      	str	r2, [r3, #0]
  return result;
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe f8b2 	bl	8001274 <HAL_GetTick>
 8003110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	e009      	b.n	800312a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f8ad 	bl	8001274 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e09e      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800314e:	601a      	str	r2, [r3, #0]
  return result;
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003158:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d104      	bne.n	8003178 <HAL_RCC_OscConfig+0xf7c>
 800316e:	4b01      	ldr	r3, [pc, #4]	; (8003174 <HAL_RCC_OscConfig+0xf78>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e029      	b.n	80031c8 <HAL_RCC_OscConfig+0xfcc>
 8003174:	40021000 	.word	0x40021000
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_OscConfig+0x1078>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031da:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fa92 f1a2 	rbit	r1, r2
 80031e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031ec:	6011      	str	r1, [r2, #0]
  return result;
 80031ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d180      	bne.n	8003116 <HAL_RCC_OscConfig+0xf1a>
 8003214:	e027      	b.n	8003266 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e01e      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_OscConfig+0x1078>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003232:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003236:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	d10b      	bne.n	8003262 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800324a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800324e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b09e      	sub	sp, #120	; 0x78
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e162      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b90      	ldr	r3, [pc, #576]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d910      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b8d      	ldr	r3, [pc, #564]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 0207 	bic.w	r2, r3, #7
 80032a6:	498b      	ldr	r1, [pc, #556]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e14a      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b82      	ldr	r3, [pc, #520]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	497f      	ldr	r1, [pc, #508]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80dc 	beq.w	80034a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d13c      	bne.n	800336e <HAL_RCC_ClockConfig+0xf6>
 80032f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_RCC_ClockConfig+0xa6>
 8003318:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	e00f      	b.n	800333e <HAL_RCC_ClockConfig+0xc6>
 800331e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003322:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	667b      	str	r3, [r7, #100]	; 0x64
 800332c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003330:	663b      	str	r3, [r7, #96]	; 0x60
 8003332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333a:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003342:	65ba      	str	r2, [r7, #88]	; 0x58
 8003344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003346:	fa92 f2a2 	rbit	r2, r2
 800334a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800334c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d17b      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0f3      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d13c      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x178>
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x128>
 800339a:	4b4f      	ldr	r3, [pc, #316]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e00f      	b.n	80033c0 <HAL_RCC_ClockConfig+0x148>
 80033a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	647b      	str	r3, [r7, #68]	; 0x44
 80033ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
 80033b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80033c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c8:	fa92 f2a2 	rbit	r2, r2
 80033cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d0:	fab2 f282 	clz	r2, r2
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f042 0220 	orr.w	r2, r2, #32
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	f002 021f 	and.w	r2, r2, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f202 	lsl.w	r2, r1, r2
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d13a      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b2      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_RCC_ClockConfig+0x1a0>
 8003412:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e00d      	b.n	8003434 <HAL_RCC_ClockConfig+0x1bc>
 8003418:	2302      	movs	r3, #2
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	2302      	movs	r3, #2
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2202      	movs	r2, #2
 8003436:	61ba      	str	r2, [r7, #24]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	fa92 f2a2 	rbit	r2, r2
 800343e:	617a      	str	r2, [r7, #20]
  return result;
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0220 	orr.w	r2, r2, #32
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e079      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	491a      	ldr	r1, [pc, #104]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fd fefe 	bl	8001274 <HAL_GetTick>
 8003478:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fd fefa 	bl	8001274 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e061      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_RCC_ClockConfig+0x260>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d214      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	4906      	ldr	r1, [pc, #24]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_RCC_ClockConfig+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e040      	b.n	8003556 <HAL_RCC_ClockConfig+0x2de>
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	491a      	ldr	r1, [pc, #104]	; (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4912      	ldr	r1, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800351a:	f000 f829 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800351e:	4601      	mov	r1, r0
 8003520:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_RCC_ClockConfig+0x2e8>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003528:	22f0      	movs	r2, #240	; 0xf0
 800352a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	60fa      	str	r2, [r7, #12]
  return result;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	40d3      	lsrs	r3, r2
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x2ec>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	fa21 f303 	lsr.w	r3, r1, r3
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <HAL_RCC_ClockConfig+0x2f0>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800354a:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_RCC_ClockConfig+0x2f4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fd fe4c 	bl	80011ec <HAL_InitTick>
  
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3778      	adds	r7, #120	; 0x78
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	08005ba4 	.word	0x08005ba4
 8003568:	20000010 	.word	0x20000010
 800356c:	20000014 	.word	0x20000014

08003570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b08b      	sub	sp, #44	; 0x2c
 8003574:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x30>
 800359a:	2b08      	cmp	r3, #8
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x36>
 800359e:	e03c      	b.n	800361a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035a2:	623b      	str	r3, [r7, #32]
      break;
 80035a4:	e03c      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80035ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80035b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	607a      	str	r2, [r7, #4]
  return result;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	40d3      	lsrs	r3, r2
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035c6:	5cd3      	ldrb	r3, [r2, r3]
 80035c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	220f      	movs	r2, #15
 80035d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	fa92 f2a2 	rbit	r2, r2
 80035dc:	60fa      	str	r2, [r7, #12]
  return result;
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	40d3      	lsrs	r3, r2
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	e004      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <HAL_RCC_GetSysClockFreq+0xd0>)
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	623b      	str	r3, [r7, #32]
      break;
 8003618:	e002      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetSysClockFreq+0xc4>)
 800361c:	623b      	str	r3, [r7, #32]
      break;
 800361e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003620:	6a3b      	ldr	r3, [r7, #32]
}
 8003622:	4618      	mov	r0, r3
 8003624:	372c      	adds	r7, #44	; 0x2c
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	007a1200 	.word	0x007a1200
 8003638:	08005bb4 	.word	0x08005bb4
 800363c:	08005bc4 	.word	0x08005bc4
 8003640:	003d0900 	.word	0x003d0900

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b092      	sub	sp, #72	; 0x48
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80d4 	beq.w	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10e      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a4a      	ldr	r2, [pc, #296]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a41      	ldr	r2, [pc, #260]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fd fde3 	bl	8001274 <HAL_GetTick>
 80036ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fd fddf 	bl	8001274 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e169      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d0:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8084 	beq.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d07c      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	4b26      	ldr	r3, [pc, #152]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2301      	movs	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	461a      	mov	r2, r3
 800373e:	2300      	movs	r3, #0
 8003740:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04b      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd fd8f 	bl	8001274 <HAL_GetTick>
 8003756:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fd8b 	bl	8001274 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e113      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003770:	2302      	movs	r3, #2
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	2302      	movs	r3, #2
 800377e:	623b      	str	r3, [r7, #32]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	61fb      	str	r3, [r7, #28]
  return result;
 8003788:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d108      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800379e:	4b01      	ldr	r3, [pc, #4]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	e00d      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	10908100 	.word	0x10908100
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	4b78      	ldr	r3, [pc, #480]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	2202      	movs	r2, #2
 80037c2:	613a      	str	r2, [r7, #16]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fa92 f2a2 	rbit	r2, r2
 80037ca:	60fa      	str	r2, [r7, #12]
  return result;
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f002 021f 	and.w	r2, r2, #31
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0b7      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	496a      	ldr	r1, [pc, #424]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381c:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f023 0203 	bic.w	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	495d      	ldr	r1, [pc, #372]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800383a:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4956      	ldr	r1, [pc, #344]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003858:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	494e      	ldr	r1, [pc, #312]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f023 0210 	bic.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4947      	ldr	r1, [pc, #284]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	493f      	ldr	r1, [pc, #252]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f023 0220 	bic.w	r2, r3, #32
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4938      	ldr	r1, [pc, #224]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	4930      	ldr	r1, [pc, #192]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4929      	ldr	r1, [pc, #164]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4921      	ldr	r1, [pc, #132]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	491a      	ldr	r1, [pc, #104]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	4912      	ldr	r1, [pc, #72]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	4313      	orrs	r3, r2
 8003958:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	490b      	ldr	r1, [pc, #44]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3748      	adds	r7, #72	; 0x48
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000

080039a4 <__itoa>:
 80039a4:	1e93      	subs	r3, r2, #2
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	b510      	push	{r4, lr}
 80039aa:	460c      	mov	r4, r1
 80039ac:	d904      	bls.n	80039b8 <__itoa+0x14>
 80039ae:	2300      	movs	r3, #0
 80039b0:	700b      	strb	r3, [r1, #0]
 80039b2:	461c      	mov	r4, r3
 80039b4:	4620      	mov	r0, r4
 80039b6:	bd10      	pop	{r4, pc}
 80039b8:	2a0a      	cmp	r2, #10
 80039ba:	d109      	bne.n	80039d0 <__itoa+0x2c>
 80039bc:	2800      	cmp	r0, #0
 80039be:	da07      	bge.n	80039d0 <__itoa+0x2c>
 80039c0:	232d      	movs	r3, #45	; 0x2d
 80039c2:	700b      	strb	r3, [r1, #0]
 80039c4:	4240      	negs	r0, r0
 80039c6:	2101      	movs	r1, #1
 80039c8:	4421      	add	r1, r4
 80039ca:	f000 f805 	bl	80039d8 <__utoa>
 80039ce:	e7f1      	b.n	80039b4 <__itoa+0x10>
 80039d0:	2100      	movs	r1, #0
 80039d2:	e7f9      	b.n	80039c8 <__itoa+0x24>

080039d4 <itoa>:
 80039d4:	f7ff bfe6 	b.w	80039a4 <__itoa>

080039d8 <__utoa>:
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	4c1f      	ldr	r4, [pc, #124]	; (8003a58 <__utoa+0x80>)
 80039dc:	b08b      	sub	sp, #44	; 0x2c
 80039de:	4605      	mov	r5, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	466e      	mov	r6, sp
 80039e4:	f104 0c20 	add.w	ip, r4, #32
 80039e8:	6820      	ldr	r0, [r4, #0]
 80039ea:	6861      	ldr	r1, [r4, #4]
 80039ec:	4637      	mov	r7, r6
 80039ee:	c703      	stmia	r7!, {r0, r1}
 80039f0:	3408      	adds	r4, #8
 80039f2:	4564      	cmp	r4, ip
 80039f4:	463e      	mov	r6, r7
 80039f6:	d1f7      	bne.n	80039e8 <__utoa+0x10>
 80039f8:	7921      	ldrb	r1, [r4, #4]
 80039fa:	7139      	strb	r1, [r7, #4]
 80039fc:	1e91      	subs	r1, r2, #2
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	6038      	str	r0, [r7, #0]
 8003a02:	2922      	cmp	r1, #34	; 0x22
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	d904      	bls.n	8003a14 <__utoa+0x3c>
 8003a0a:	7019      	strb	r1, [r3, #0]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	b00b      	add	sp, #44	; 0x2c
 8003a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a14:	1e58      	subs	r0, r3, #1
 8003a16:	4684      	mov	ip, r0
 8003a18:	fbb5 f7f2 	udiv	r7, r5, r2
 8003a1c:	fb02 5617 	mls	r6, r2, r7, r5
 8003a20:	3628      	adds	r6, #40	; 0x28
 8003a22:	446e      	add	r6, sp
 8003a24:	460c      	mov	r4, r1
 8003a26:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003a2a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003a2e:	462e      	mov	r6, r5
 8003a30:	42b2      	cmp	r2, r6
 8003a32:	f101 0101 	add.w	r1, r1, #1
 8003a36:	463d      	mov	r5, r7
 8003a38:	d9ee      	bls.n	8003a18 <__utoa+0x40>
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	545a      	strb	r2, [r3, r1]
 8003a3e:	1919      	adds	r1, r3, r4
 8003a40:	1aa5      	subs	r5, r4, r2
 8003a42:	42aa      	cmp	r2, r5
 8003a44:	dae3      	bge.n	8003a0e <__utoa+0x36>
 8003a46:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003a4a:	780e      	ldrb	r6, [r1, #0]
 8003a4c:	7006      	strb	r6, [r0, #0]
 8003a4e:	3201      	adds	r2, #1
 8003a50:	f801 5901 	strb.w	r5, [r1], #-1
 8003a54:	e7f4      	b.n	8003a40 <__utoa+0x68>
 8003a56:	bf00      	nop
 8003a58:	08005bd4 	.word	0x08005bd4

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <__libc_init_array>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	4d0d      	ldr	r5, [pc, #52]	; (8003aa4 <__libc_init_array+0x38>)
 8003a70:	4c0d      	ldr	r4, [pc, #52]	; (8003aa8 <__libc_init_array+0x3c>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	2600      	movs	r6, #0
 8003a78:	42a6      	cmp	r6, r4
 8003a7a:	d109      	bne.n	8003a90 <__libc_init_array+0x24>
 8003a7c:	4d0b      	ldr	r5, [pc, #44]	; (8003aac <__libc_init_array+0x40>)
 8003a7e:	4c0c      	ldr	r4, [pc, #48]	; (8003ab0 <__libc_init_array+0x44>)
 8003a80:	f000 f818 	bl	8003ab4 <_init>
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	2600      	movs	r6, #0
 8003a8a:	42a6      	cmp	r6, r4
 8003a8c:	d105      	bne.n	8003a9a <__libc_init_array+0x2e>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a94:	4798      	blx	r3
 8003a96:	3601      	adds	r6, #1
 8003a98:	e7ee      	b.n	8003a78 <__libc_init_array+0xc>
 8003a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9e:	4798      	blx	r3
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	e7f2      	b.n	8003a8a <__libc_init_array+0x1e>
 8003aa4:	08005bfc 	.word	0x08005bfc
 8003aa8:	08005bfc 	.word	0x08005bfc
 8003aac:	08005bfc 	.word	0x08005bfc
 8003ab0:	08005c00 	.word	0x08005c00

08003ab4 <_init>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr

08003ac0 <_fini>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr
