
Blutooth Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003814  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a543  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a8c  00000000  00000000  0002a5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a3  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c396  00000000  00000000  0002cd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000acdf  00000000  00000000  000490e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a9672  00000000  00000000  00053dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001cb0  00000000  00000000  000fd43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000ff0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003984 	.word	0x08003984

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003984 	.word	0x08003984

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9e2 	bl	8000594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f88c 	bl	80002f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d8:	f000 f85a 	bl	8000290 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 80001dc:	2201      	movs	r2, #1
 80001de:	4902      	ldr	r1, [pc, #8]	; (80001e8 <main+0x20>)
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <main+0x24>)
 80001e2:	f002 f9c9 	bl	8002578 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x1e>
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	20000028 	.word	0x20000028

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b09e      	sub	sp, #120	; 0x78
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 fb94 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	223c      	movs	r2, #60	; 0x3c
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fb86 	bl	800392c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fd2d 	bl	8000c94 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f8c2 	bl	80003c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fd56 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026a:	f000 f8ad 	bl	80003c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800026e:	2301      	movs	r3, #1
 8000270:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	463b      	mov	r3, r7
 8000278:	4618      	mov	r0, r3
 800027a:	f001 ff7f 	bl	800217c <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000284:	f000 f8a0 	bl	80003c8 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3778      	adds	r7, #120	; 0x78
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <MX_USART1_UART_Init+0x5c>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 800029c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002d4:	f002 f902 	bl	80024dc <HAL_UART_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002de:	f000 f873 	bl	80003c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b088      	sub	sp, #32
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <MX_GPIO_Init+0x78>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a17      	ldr	r2, [pc, #92]	; (8000368 <MX_GPIO_Init+0x78>)
 800030c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <MX_GPIO_Init+0x78>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <MX_GPIO_Init+0x78>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a11      	ldr	r2, [pc, #68]	; (8000368 <MX_GPIO_Init+0x78>)
 8000324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <MX_GPIO_Init+0x78>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2102      	movs	r1, #2
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fc91 	bl	8000c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000342:	2302      	movs	r3, #2
 8000344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000346:	2301      	movs	r3, #1
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fb08 	bl	8000970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000360:	bf00      	nop
 8000362:	3720      	adds	r7, #32
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40021000 	.word	0x40021000

0800036c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a10      	ldr	r2, [pc, #64]	; (80003bc <HAL_UART_RxCpltCallback+0x50>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d119      	bne.n	80003b2 <HAL_UART_RxCpltCallback+0x46>
  {
    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <HAL_UART_RxCpltCallback+0x54>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b4e      	cmp	r3, #78	; 0x4e
 8000384:	d106      	bne.n	8000394 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800038e:	f000 fc69 	bl	8000c64 <HAL_GPIO_WritePin>
 8000392:	e009      	b.n	80003a8 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <HAL_UART_RxCpltCallback+0x54>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b59      	cmp	r3, #89	; 0x59
 800039a:	d105      	bne.n	80003a8 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	2102      	movs	r1, #2
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f000 fc5e 	bl	8000c64 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 80003a8:	2201      	movs	r2, #1
 80003aa:	4905      	ldr	r1, [pc, #20]	; (80003c0 <HAL_UART_RxCpltCallback+0x54>)
 80003ac:	4805      	ldr	r0, [pc, #20]	; (80003c4 <HAL_UART_RxCpltCallback+0x58>)
 80003ae:	f002 f8e3 	bl	8002578 <HAL_UART_Receive_IT>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40013800 	.word	0x40013800
 80003c0:	200000b0 	.word	0x200000b0
 80003c4:	20000028 	.word	0x20000028

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x44>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x44>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x44>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <HAL_MspInit+0x44>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <HAL_MspInit+0x44>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_MspInit+0x44>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <HAL_UART_MspInit+0x8c>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d12f      	bne.n	800049e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <HAL_UART_MspInit+0x90>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a1a      	ldr	r2, [pc, #104]	; (80004ac <HAL_UART_MspInit+0x90>)
 8000444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <HAL_UART_MspInit+0x90>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_UART_MspInit+0x90>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a14      	ldr	r2, [pc, #80]	; (80004ac <HAL_UART_MspInit+0x90>)
 800045c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_UART_MspInit+0x90>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800046e:	2330      	movs	r3, #48	; 0x30
 8000470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000472:	2302      	movs	r3, #2
 8000474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800047a:	2303      	movs	r3, #3
 800047c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800047e:	2307      	movs	r3, #7
 8000480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4619      	mov	r1, r3
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <HAL_UART_MspInit+0x94>)
 800048a:	f000 fa71 	bl	8000970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	2025      	movs	r0, #37	; 0x25
 8000494:	f000 f9bf 	bl	8000816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000498:	2025      	movs	r0, #37	; 0x25
 800049a:	f000 f9d8 	bl	800084e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800049e:	bf00      	nop
 80004a0:	3728      	adds	r7, #40	; 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40013800 	.word	0x40013800
 80004ac:	40021000 	.word	0x40021000
 80004b0:	48000800 	.word	0x48000800

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000500:	f000 f88e 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <USART1_IRQHandler+0x10>)
 800050e:	f002 f877 	bl	8002600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028

0800051c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <SystemInit+0x20>)
 8000522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <SystemInit+0x20>)
 8000528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800052c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000544:	f7ff ffea 	bl	800051c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	; (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056e:	f003 f9e5 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000572:	f7ff fe29 	bl	80001c8 <main>

08000576 <LoopForever>:

LoopForever:
    b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000578:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000584:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8000588:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800058c:	200000b8 	.word	0x200000b8

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x28>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x28>)
 800059e:	f043 0310 	orr.w	r3, r3, #16
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f92b 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f808 	bl	80005c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f7ff ff10 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40022000 	.word	0x40022000

080005c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x54>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x58>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f943 	bl	800086a <HAL_SYSTICK_Config>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00e      	b.n	800060c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d80a      	bhi.n	800060a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	2200      	movs	r2, #0
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295
 80005fc:	f000 f90b 	bl	8000816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <HAL_InitTick+0x5c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000000 	.word	0x20000000
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x20>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_IncTick+0x24>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000008 	.word	0x20000008
 8000644:	200000b4 	.word	0x200000b4

08000648 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;  
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000b4 	.word	0x200000b4

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <__NVIC_EnableIRQ+0x38>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e100 	.word	0xe000e100

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	; (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff8e 	bl	8000700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff29 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff3e 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff8e 	bl	8000754 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5d 	bl	8000700 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff31 	bl	80006c4 <__NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffa2 	bl	80007bc <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000890:	2b02      	cmp	r3, #2
 8000892:	d008      	beq.n	80008a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2204      	movs	r2, #4
 8000898:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e020      	b.n	80008e8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f022 020e 	bic.w	r2, r2, #14
 80008b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0201 	bic.w	r2, r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000906:	2b02      	cmp	r3, #2
 8000908:	d005      	beq.n	8000916 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2204      	movs	r2, #4
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e027      	b.n	8000966 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 020e 	bic.w	r2, r2, #14
 8000924:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 0201 	bic.w	r2, r2, #1
 8000934:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	2101      	movs	r1, #1
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	4798      	blx	r3
    } 
  }
  return status;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b087      	sub	sp, #28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800097e:	e154      	b.n	8000c2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	2101      	movs	r1, #1
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 8146 	beq.w	8000c24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d005      	beq.n	80009b0 <HAL_GPIO_Init+0x40>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	f003 0201 	and.w	r2, r3, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 0303 	and.w	r3, r3, #3
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d017      	beq.n	8000a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d123      	bne.n	8000aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3208      	adds	r2, #8
 8000a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	220f      	movs	r2, #15
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43db      	mvns	r3, r3
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	691a      	ldr	r2, [r3, #16]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	08da      	lsrs	r2, r3, #3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3208      	adds	r2, #8
 8000a9c:	6939      	ldr	r1, [r7, #16]
 8000a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0203 	and.w	r2, r3, #3
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80a0 	beq.w	8000c24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae4:	4b58      	ldr	r3, [pc, #352]	; (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a57      	ldr	r2, [pc, #348]	; (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b55      	ldr	r3, [pc, #340]	; (8000c48 <HAL_GPIO_Init+0x2d8>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000afc:	4a53      	ldr	r2, [pc, #332]	; (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b26:	d019      	beq.n	8000b5c <HAL_GPIO_Init+0x1ec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a49      	ldr	r2, [pc, #292]	; (8000c50 <HAL_GPIO_Init+0x2e0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d013      	beq.n	8000b58 <HAL_GPIO_Init+0x1e8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a48      	ldr	r2, [pc, #288]	; (8000c54 <HAL_GPIO_Init+0x2e4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00d      	beq.n	8000b54 <HAL_GPIO_Init+0x1e4>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	; (8000c58 <HAL_GPIO_Init+0x2e8>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d007      	beq.n	8000b50 <HAL_GPIO_Init+0x1e0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a46      	ldr	r2, [pc, #280]	; (8000c5c <HAL_GPIO_Init+0x2ec>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <HAL_GPIO_Init+0x1dc>
 8000b48:	2304      	movs	r3, #4
 8000b4a:	e008      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e006      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b54:	2302      	movs	r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1ee>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b6e:	4937      	ldr	r1, [pc, #220]	; (8000c4c <HAL_GPIO_Init+0x2dc>)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b7c:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bca:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_GPIO_Init+0x2f0>)
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f aea3 	bne.w	8000980 <HAL_GPIO_Init+0x10>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48000800 	.word	0x48000800
 8000c58:	48000c00 	.word	0x48000c00
 8000c5c:	48001000 	.word	0x48001000
 8000c60:	40010400 	.word	0x40010400

08000c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c74:	787b      	ldrb	r3, [r7, #1]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ca4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f001 b823 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 817d 	beq.w	8000fca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd0:	4bbc      	ldr	r3, [pc, #752]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d00c      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cdc:	4bb9      	ldr	r3, [pc, #740]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d15c      	bne.n	8000da2 <HAL_RCC_OscConfig+0x10e>
 8000ce8:	4bb6      	ldr	r3, [pc, #728]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf4:	d155      	bne.n	8000da2 <HAL_RCC_OscConfig+0x10e>
 8000cf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	095b      	lsrs	r3, r3, #5
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <HAL_RCC_OscConfig+0x94>
 8000d22:	4ba8      	ldr	r3, [pc, #672]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	e015      	b.n	8000d54 <HAL_RCC_OscConfig+0xc0>
 8000d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d50:	4b9c      	ldr	r3, [pc, #624]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d60:	fa92 f2a2 	rbit	r2, r2
 8000d64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	f042 0220 	orr.w	r2, r2, #32
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	f002 021f 	and.w	r2, r2, #31
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	4013      	ands	r3, r2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 811f 	beq.w	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8116 	bne.w	8000fc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f000 bfaf 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db2:	d106      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
 8000db4:	4b83      	ldr	r3, [pc, #524]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a82      	ldr	r2, [pc, #520]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e036      	b.n	8000e30 <HAL_RCC_OscConfig+0x19c>
 8000dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x158>
 8000dd2:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a7b      	ldr	r2, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b79      	ldr	r3, [pc, #484]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a78      	ldr	r2, [pc, #480]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e021      	b.n	8000e30 <HAL_RCC_OscConfig+0x19c>
 8000dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x184>
 8000dfe:	4b71      	ldr	r3, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a70      	ldr	r2, [pc, #448]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6d      	ldr	r2, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0x19c>
 8000e18:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b67      	ldr	r3, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e34:	f023 020f 	bic.w	r2, r3, #15
 8000e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	495f      	ldr	r1, [pc, #380]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d059      	beq.n	8000f0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fbf5 	bl	8000648 <HAL_GetTick>
 8000e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	e00a      	b.n	8000e7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fbf0 	bl	8000648 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b64      	cmp	r3, #100	; 0x64
 8000e72:	d902      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f000 bf43 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 8000e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	095b      	lsrs	r3, r3, #5
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d102      	bne.n	8000eac <HAL_RCC_OscConfig+0x218>
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	e015      	b.n	8000ed8 <HAL_RCC_OscConfig+0x244>
 8000eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ec8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ee0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000eec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	f002 021f 	and.w	r2, r2, #31
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0ab      	beq.n	8000e64 <HAL_RCC_OscConfig+0x1d0>
 8000f0c:	e05d      	b.n	8000fca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fb9b 	bl	8000648 <HAL_GetTick>
 8000f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e00a      	b.n	8000f2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fb96 	bl	8000648 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	d902      	bls.n	8000f2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f000 bee9 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x2cc>
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_OscConfig+0x2f8>
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f98:	fa92 f2a2 	rbit	r2, r2
 8000f9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fa0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f042 0220 	orr.w	r2, r2, #32
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1ab      	bne.n	8000f18 <HAL_RCC_OscConfig+0x284>
 8000fc0:	e003      	b.n	8000fca <HAL_RCC_OscConfig+0x336>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 817d 	beq.w	80012da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe0:	4ba6      	ldr	r3, [pc, #664]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fec:	4ba3      	ldr	r3, [pc, #652]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d172      	bne.n	80010de <HAL_RCC_OscConfig+0x44a>
 8000ff8:	4ba0      	ldr	r3, [pc, #640]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d16c      	bne.n	80010de <HAL_RCC_OscConfig+0x44a>
 8001004:	2302      	movs	r3, #2
 8001006:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001016:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d102      	bne.n	8001034 <HAL_RCC_OscConfig+0x3a0>
 800102e:	4b93      	ldr	r3, [pc, #588]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	e013      	b.n	800105c <HAL_RCC_OscConfig+0x3c8>
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800104c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001058:	4b88      	ldr	r3, [pc, #544]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	2202      	movs	r2, #2
 800105e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001062:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800106e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <HAL_RCC_OscConfig+0x410>
 800108e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d002      	beq.n	80010a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f000 be2e 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b75      	ldr	r3, [pc, #468]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	21f8      	movs	r1, #248	; 0xf8
 80010ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010c2:	fa91 f1a1 	rbit	r1, r1
 80010c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80010ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80010ce:	fab1 f181 	clz	r1, r1
 80010d2:	b2c9      	uxtb	r1, r1
 80010d4:	408b      	lsls	r3, r1
 80010d6:	4969      	ldr	r1, [pc, #420]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010dc:	e0fd      	b.n	80012da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8088 	beq.w	8001200 <HAL_RCC_OscConfig+0x56c>
 80010f0:	2301      	movs	r3, #1
 80010f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001102:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001106:	fab3 f383 	clz	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	461a      	mov	r2, r3
 8001118:	2301      	movs	r3, #1
 800111a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fa94 	bl	8000648 <HAL_GetTick>
 8001120:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fa8f 	bl	8000648 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d902      	bls.n	800113c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	f000 bde2 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800114e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x4d8>
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	e013      	b.n	8001194 <HAL_RCC_OscConfig+0x500>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001184:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	2202      	movs	r2, #2
 8001196:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800119a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800119e:	fa92 f2a2 	rbit	r2, r2
 80011a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f002 021f 	and.w	r2, r2, #31
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	4013      	ands	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0af      	beq.n	8001126 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	21f8      	movs	r1, #248	; 0xf8
 80011dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011e4:	fa91 f1a1 	rbit	r1, r1
 80011e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011f0:	fab1 f181 	clz	r1, r1
 80011f4:	b2c9      	uxtb	r1, r1
 80011f6:	408b      	lsls	r3, r1
 80011f8:	4920      	ldr	r1, [pc, #128]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e06c      	b.n	80012da <HAL_RCC_OscConfig+0x646>
 8001200:	2301      	movs	r3, #1
 8001202:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001212:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	461a      	mov	r2, r3
 8001228:	2300      	movs	r3, #0
 800122a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fa0c 	bl	8000648 <HAL_GetTick>
 8001230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fa07 	bl	8000648 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d902      	bls.n	800124c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	f000 bd5a 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800125e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d104      	bne.n	8001280 <HAL_RCC_OscConfig+0x5ec>
 8001276:	4b01      	ldr	r3, [pc, #4]	; (800127c <HAL_RCC_OscConfig+0x5e8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x614>
 800127c:	40021000 	.word	0x40021000
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001298:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012a4:	4bc8      	ldr	r3, [pc, #800]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	2202      	movs	r2, #2
 80012aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012b2:	fa92 f2a2 	rbit	r2, r2
 80012b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012be:	fab2 f282 	clz	r2, r2
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	f002 021f 	and.w	r2, r2, #31
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ad      	bne.n	8001236 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8110 	beq.w	8001510 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d079      	beq.n	80013f4 <HAL_RCC_OscConfig+0x760>
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4bab      	ldr	r3, [pc, #684]	; (80015cc <HAL_RCC_OscConfig+0x938>)
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	461a      	mov	r2, r3
 8001326:	2301      	movs	r3, #1
 8001328:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff f98d 	bl	8000648 <HAL_GetTick>
 800132e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e00a      	b.n	800134a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff f988 	bl	8000648 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d902      	bls.n	800134a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	f000 bcdb 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	fa93 f2a3 	rbit	r2, r3
 800139a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 80013a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013b0:	2102      	movs	r1, #2
 80013b2:	6019      	str	r1, [r3, #0]
 80013b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f1a3 	rbit	r1, r3
 80013c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ca:	6019      	str	r1, [r3, #0]
  return result;
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0a0      	beq.n	8001334 <HAL_RCC_OscConfig+0x6a0>
 80013f2:	e08d      	b.n	8001510 <HAL_RCC_OscConfig+0x87c>
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001404:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fa93 f2a3 	rbit	r2, r3
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001416:	601a      	str	r2, [r3, #0]
  return result;
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001420:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <HAL_RCC_OscConfig+0x938>)
 800142c:	4413      	add	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	2300      	movs	r3, #0
 8001434:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff f907 	bl	8000648 <HAL_GetTick>
 800143a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	e00a      	b.n	8001456 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff f902 	bl	8000648 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	f000 bc55 	b.w	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	fa93 f2a3 	rbit	r2, r3
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f2a3 	rbit	r2, r3
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 80014c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ce:	2102      	movs	r1, #2
 80014d0:	6019      	str	r1, [r3, #0]
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f1a3 	rbit	r1, r3
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014e8:	6019      	str	r1, [r3, #0]
  return result;
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d197      	bne.n	8001440 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 81a1 	beq.w	8001868 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	61d3      	str	r3, [r2, #28]
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800155e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_RCC_OscConfig+0x93c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_RCC_OscConfig+0x93c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x93c>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff f863 	bl	8000648 <HAL_GetTick>
 8001582:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	e009      	b.n	800159c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff f85e 	bl	8000648 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e3b1      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_RCC_OscConfig+0x93c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ef      	beq.n	8001588 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x940>
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	4a02      	ldr	r2, [pc, #8]	; (80015c8 <HAL_RCC_OscConfig+0x934>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6213      	str	r3, [r2, #32]
 80015c4:	e03c      	b.n	8001640 <HAL_RCC_OscConfig+0x9ac>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	10908120 	.word	0x10908120
 80015d0:	40007000 	.word	0x40007000
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_OscConfig+0x96a>
 80015e4:	4bc1      	ldr	r3, [pc, #772]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4ac0      	ldr	r2, [pc, #768]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4abd      	ldr	r2, [pc, #756]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e020      	b.n	8001640 <HAL_RCC_OscConfig+0x9ac>
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x994>
 800160e:	4bb7      	ldr	r3, [pc, #732]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4ab6      	ldr	r2, [pc, #728]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4bb4      	ldr	r3, [pc, #720]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4ab3      	ldr	r2, [pc, #716]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e00b      	b.n	8001640 <HAL_RCC_OscConfig+0x9ac>
 8001628:	4bb0      	ldr	r3, [pc, #704]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4aaf      	ldr	r2, [pc, #700]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4bad      	ldr	r3, [pc, #692]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4aac      	ldr	r2, [pc, #688]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8081 	beq.w	8001754 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7fe fff9 	bl	8000648 <HAL_GetTick>
 8001656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7fe fff4 	bl	8000648 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e345      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001678:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800167c:	2202      	movs	r2, #2
 800167e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001684:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	fa93 f2a3 	rbit	r2, r3
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016a0:	2202      	movs	r2, #2
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ba:	601a      	str	r2, [r3, #0]
  return result;
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d102      	bne.n	80016e0 <HAL_RCC_OscConfig+0xa4c>
 80016da:	4b84      	ldr	r3, [pc, #528]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	e013      	b.n	8001708 <HAL_RCC_OscConfig+0xa74>
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e8:	2202      	movs	r2, #2
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800170c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001710:	2102      	movs	r1, #2
 8001712:	6011      	str	r1, [r2, #0]
 8001714:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001718:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	fa92 f1a2 	rbit	r1, r2
 8001722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001726:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800172a:	6011      	str	r1, [r2, #0]
  return result;
 800172c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001730:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	fab2 f282 	clz	r2, r2
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d084      	beq.n	800165c <HAL_RCC_OscConfig+0x9c8>
 8001752:	e07f      	b.n	8001854 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7fe ff78 	bl	8000648 <HAL_GetTick>
 8001758:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7fe ff73 	bl	8000648 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2c4      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d102      	bne.n	80017e2 <HAL_RCC_OscConfig+0xb4e>
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	e013      	b.n	800180a <HAL_RCC_OscConfig+0xb76>
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001812:	2102      	movs	r1, #2
 8001814:	6011      	str	r1, [r2, #0]
 8001816:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800181a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	fa92 f1a2 	rbit	r1, r2
 8001824:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001828:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800182c:	6011      	str	r1, [r2, #0]
  return result;
 800182e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001832:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	fab2 f282 	clz	r2, r2
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f002 021f 	and.w	r2, r2, #31
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d184      	bne.n	800175e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001854:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8242 	beq.w	8001cfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RCC_OscConfig+0xc58>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	f000 8213 	beq.w	8001cae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	f040 8162 	bne.w	8001b5e <HAL_RCC_OscConfig+0xeca>
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	fa93 f2a3 	rbit	r2, r3
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018be:	601a      	str	r2, [r3, #0]
  return result;
 80018c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	461a      	mov	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7fe feb2 	bl	8000648 <HAL_GetTick>
 80018e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e8:	e00c      	b.n	8001904 <HAL_RCC_OscConfig+0xc70>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f0:	f7fe feaa 	bl	8000648 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1fd      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800190c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001928:	601a      	str	r2, [r3, #0]
  return result;
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001932:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	fab3 f383 	clz	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0xcba>
 8001948:	4bb0      	ldr	r3, [pc, #704]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	e027      	b.n	800199e <HAL_RCC_OscConfig+0xd0a>
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800197c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	4b9c      	ldr	r3, [pc, #624]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019aa:	6011      	str	r1, [r2, #0]
 80019ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	fa92 f1a2 	rbit	r1, r2
 80019ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019c2:	6011      	str	r1, [r2, #0]
  return result;
 80019c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d182      	bne.n	80018f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ea:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	430b      	orrs	r3, r1
 8001a0c:	497f      	ldr	r1, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
 8001a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a36:	601a      	str	r2, [r3, #0]
  return result;
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a42:	fab3 f383 	clz	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	461a      	mov	r2, r3
 8001a54:	2301      	movs	r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe fdf6 	bl	8000648 <HAL_GetTick>
 8001a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe fdf1 	bl	8000648 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e144      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a9a:	601a      	str	r2, [r3, #0]
  return result;
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d102      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xe2c>
 8001aba:	4b54      	ldr	r3, [pc, #336]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e027      	b.n	8001b10 <HAL_RCC_OscConfig+0xe7c>
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b1c:	6011      	str	r1, [r2, #0]
 8001b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fa92 f1a2 	rbit	r1, r2
 8001b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b34:	6011      	str	r1, [r2, #0]
  return result;
 8001b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fab2 f282 	clz	r2, r2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f002 021f 	and.w	r2, r2, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d082      	beq.n	8001a62 <HAL_RCC_OscConfig+0xdce>
 8001b5c:	e0cf      	b.n	8001cfe <HAL_RCC_OscConfig+0x106a>
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b82:	601a      	str	r2, [r3, #0]
  return result;
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe fd50 	bl	8000648 <HAL_GetTick>
 8001ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bae:	f7fe fd4b 	bl	8000648 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e09e      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001be6:	601a      	str	r2, [r3, #0]
  return result;
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d104      	bne.n	8001c10 <HAL_RCC_OscConfig+0xf7c>
 8001c06:	4b01      	ldr	r3, [pc, #4]	; (8001c0c <HAL_RCC_OscConfig+0xf78>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e029      	b.n	8001c60 <HAL_RCC_OscConfig+0xfcc>
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x1078>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c84:	6011      	str	r1, [r2, #0]
  return result;
 8001c86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fab2 f282 	clz	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f002 021f 	and.w	r2, r2, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d180      	bne.n	8001bae <HAL_RCC_OscConfig+0xf1a>
 8001cac:	e027      	b.n	8001cfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e01e      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_OscConfig+0x1078>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b09e      	sub	sp, #120	; 0x78
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e162      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d28:	4b90      	ldr	r3, [pc, #576]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d910      	bls.n	8001d58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b8d      	ldr	r3, [pc, #564]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	498b      	ldr	r1, [pc, #556]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b89      	ldr	r3, [pc, #548]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e14a      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	497f      	ldr	r1, [pc, #508]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80dc 	beq.w	8001f3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d13c      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xf6>
 8001d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xa6>
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	e00f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0xc6>
 8001db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d17b      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0f3      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d13c      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x178>
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x128>
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	e00f      	b.n	8001e58 <HAL_RCC_ClockConfig+0x148>
 8001e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	647b      	str	r3, [r7, #68]	; 0x44
 8001e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e54:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e68:	fab2 f282 	clz	r2, r2
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f042 0220 	orr.w	r2, r2, #32
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	f002 021f 	and.w	r2, r2, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d13a      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b2      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x1a0>
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e00d      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1bc>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	2202      	movs	r2, #2
 8001ece:	61ba      	str	r2, [r7, #24]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	fa92 f2a2 	rbit	r2, r2
 8001ed6:	617a      	str	r2, [r7, #20]
  return result;
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f042 0220 	orr.w	r2, r2, #32
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f002 021f 	and.w	r2, r2, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e079      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	491a      	ldr	r1, [pc, #104]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fb9c 	bl	8000648 <HAL_GetTick>
 8001f10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fb98 	bl	8000648 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e061      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d214      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4906      	ldr	r1, [pc, #24]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_ClockConfig+0x25c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e040      	b.n	8001fee <HAL_RCC_ClockConfig+0x2de>
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	491a      	ldr	r1, [pc, #104]	; (8001ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4912      	ldr	r1, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb2:	f000 f829 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_ClockConfig+0x2e8>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc0:	22f0      	movs	r2, #240	; 0xf0
 8001fc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	fa92 f2a2 	rbit	r2, r2
 8001fca:	60fa      	str	r2, [r7, #12]
  return result;
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	40d3      	lsrs	r3, r2
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x2ec>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	fa21 f303 	lsr.w	r3, r1, r3
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_RCC_ClockConfig+0x2f0>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_RCC_ClockConfig+0x2f4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe faea 	bl	80005c0 <HAL_InitTick>
  
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3778      	adds	r7, #120	; 0x78
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	0800399c 	.word	0x0800399c
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b08b      	sub	sp, #44	; 0x2c
 800200c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d002      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x30>
 8002032:	2b08      	cmp	r3, #8
 8002034:	d003      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0x36>
 8002036:	e03c      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800203a:	623b      	str	r3, [r7, #32]
      break;
 800203c:	e03c      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002044:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002048:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	fa92 f2a2 	rbit	r2, r2
 8002050:	607a      	str	r2, [r7, #4]
  return result;
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	fab2 f282 	clz	r2, r2
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	40d3      	lsrs	r3, r2
 800205c:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	220f      	movs	r2, #15
 800206c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	fa92 f2a2 	rbit	r2, r2
 8002074:	60fa      	str	r2, [r7, #12]
  return result;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	fab2 f282 	clz	r2, r2
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	40d3      	lsrs	r3, r2
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	fbb2 f2f3 	udiv	r2, r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
 80020a0:	e004      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	623b      	str	r3, [r7, #32]
      break;
 80020b0:	e002      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b4:	623b      	str	r3, [r7, #32]
      break;
 80020b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	372c      	adds	r7, #44	; 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	007a1200 	.word	0x007a1200
 80020d0:	080039b4 	.word	0x080039b4
 80020d4:	080039c4 	.word	0x080039c4
 80020d8:	003d0900 	.word	0x003d0900

080020dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020fa:	f7ff ffef 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020fe:	4601      	mov	r1, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002108:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800210c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	603a      	str	r2, [r7, #0]
  return result;
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	40d3      	lsrs	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002122:	5cd3      	ldrb	r3, [r2, r3]
 8002124:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	080039ac 	.word	0x080039ac

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800213e:	f7ff ffcd 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800214c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002150:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fa92 f2a2 	rbit	r2, r2
 8002158:	603a      	str	r2, [r7, #0]
  return result;
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	40d3      	lsrs	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	080039ac 	.word	0x080039ac

0800217c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b092      	sub	sp, #72	; 0x48
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80d4 	beq.w	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a0:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10e      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b4b      	ldr	r3, [pc, #300]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a41      	ldr	r2, [pc, #260]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7fe fa31 	bl	8000648 <HAL_GetTick>
 80021e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	e008      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ea:	f7fe fa2d 	bl	8000648 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b64      	cmp	r3, #100	; 0x64
 80021f6:	d901      	bls.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e169      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8084 	beq.w	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002224:	429a      	cmp	r2, r3
 8002226:	d07c      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002228:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	2301      	movs	r3, #1
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	2300      	movs	r3, #0
 8002278:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800227a:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04b      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228a:	f7fe f9dd 	bl	8000648 <HAL_GetTick>
 800228e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe f9d9 	bl	8000648 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e113      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80022a8:	2302      	movs	r3, #2
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
 80022b4:	2302      	movs	r3, #2
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	61fb      	str	r3, [r7, #28]
  return result;
 80022c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d108      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022d6:	4b01      	ldr	r3, [pc, #4]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	e00d      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	10908100 	.word	0x10908100
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	613a      	str	r2, [r7, #16]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	60fa      	str	r2, [r7, #12]
  return result;
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	fab2 f282 	clz	r2, r2
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f002 021f 	and.w	r2, r2, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0b7      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002322:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	496a      	ldr	r1, [pc, #424]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002346:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002354:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	f023 0203 	bic.w	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	495d      	ldr	r1, [pc, #372]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002372:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4956      	ldr	r1, [pc, #344]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002390:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	494e      	ldr	r1, [pc, #312]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ae:	4b4a      	ldr	r3, [pc, #296]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f023 0210 	bic.w	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4947      	ldr	r1, [pc, #284]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	493f      	ldr	r1, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f023 0220 	bic.w	r2, r3, #32
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4938      	ldr	r1, [pc, #224]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002408:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	4930      	ldr	r1, [pc, #192]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002426:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4929      	ldr	r1, [pc, #164]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	4921      	ldr	r1, [pc, #132]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	491a      	ldr	r1, [pc, #104]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	4912      	ldr	r1, [pc, #72]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3748      	adds	r7, #72	; 0x48
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e040      	b.n	8002570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fd ff8c 	bl	800041c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fb76 	bl	8002c0c <UART_SetConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fd3e 	bl	8002fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fdc5 	bl	80030f8 <UART_CheckIdleState>
 800256e:	4603      	mov	r3, r0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258c:	2b20      	cmp	r3, #32
 800258e:	d132      	bne.n	80025f6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_UART_Receive_IT+0x24>
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e02b      	b.n	80025f8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	e853 3f00 	ldrex	r3, [r3]
 80025c0:	613b      	str	r3, [r7, #16]
   return(result);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	69f9      	ldr	r1, [r7, #28]
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	61bb      	str	r3, [r7, #24]
   return(result);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e6      	bne.n	80025b4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fe93 	bl	8003318 <UART_Start_Receive_IT>
 80025f2:	4603      	mov	r3, r0
 80025f4:	e000      	b.n	80025f8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0ba      	sub	sp, #232	; 0xe8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800262a:	f640 030f 	movw	r3, #2063	; 0x80f
 800262e:	4013      	ands	r3, r2
 8002630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800263c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00f      	beq.n	8002668 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 82ab 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
      }
      return;
 8002666:	e2a5      	b.n	8002bb4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8117 	beq.w	80028a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800267e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002682:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_UART_IRQHandler+0x298>)
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 810a 	beq.w	80028a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800268c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <HAL_UART_IRQHandler+0xbc>
 8002698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d011      	beq.n	80026ec <HAL_UART_IRQHandler+0xec>
 80026c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2202      	movs	r2, #2
 80026da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e2:	f043 0204 	orr.w	r2, r3, #4
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d011      	beq.n	800271c <HAL_UART_IRQHandler+0x11c>
 80026f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2204      	movs	r2, #4
 800270a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002712:	f043 0202 	orr.w	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800271c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274e:	f043 0208 	orr.w	r2, r3, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_UART_IRQHandler+0x18a>
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00c      	beq.n	800278a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8211 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d005      	beq.n	80027e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04f      	beq.n	8002882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fe4c 	bl	8003480 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d141      	bne.n	800287a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3308      	adds	r3, #8
 80027fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800280c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3308      	adds	r3, #8
 800281e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800282e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800283a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1d9      	bne.n	80027f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_UART_IRQHandler+0x29c>)
 8002850:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe f84c 	bl	80008f4 <HAL_DMA_Abort_IT>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d017      	beq.n	8002892 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	e00f      	b.n	8002892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f9b4 	bl	8002be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	e00b      	b.n	8002892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f9b0 	bl	8002be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e007      	b.n	8002892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f9ac 	bl	8002be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002890:	e192      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002892:	bf00      	nop
    return;
 8002894:	e190      	b.n	8002bb8 <HAL_UART_IRQHandler+0x5b8>
 8002896:	bf00      	nop
 8002898:	04000120 	.word	0x04000120
 800289c:	08003549 	.word	0x08003549

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 814b 	bne.w	8002b40 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8144 	beq.w	8002b40 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 813d 	beq.w	8002b40 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	f040 80b5 	bne.w	8002a48 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8164 	beq.w	8002bbc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80028fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028fe:	429a      	cmp	r2, r3
 8002900:	f080 815c 	bcs.w	8002bbc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b20      	cmp	r3, #32
 8002916:	f000 8086 	beq.w	8002a26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800292e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002948:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800295c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1da      	bne.n	800291a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	e853 3f00 	ldrex	r3, [r3]
 8002972:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	3308      	adds	r3, #8
 8002984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002988:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800298c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800299a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e1      	bne.n	8002964 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3308      	adds	r3, #8
 80029a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3308      	adds	r3, #8
 80029c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029cc:	e841 2300 	strex	r3, r2, [r1]
 80029d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1e3      	bne.n	80029a0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	f023 0310 	bic.w	r3, r3, #16
 80029fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e4      	bne.n	80029e6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd ff2e 	bl	8000882 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8d7 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a46:	e0b9      	b.n	8002bbc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ab 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002a6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80a6 	beq.w	8002bc0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	e853 3f00 	ldrex	r3, [r3]
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a96:	647b      	str	r3, [r7, #68]	; 0x44
 8002a98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1e4      	bne.n	8002a74 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ace:	633a      	str	r2, [r7, #48]	; 0x30
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e3      	bne.n	8002aaa <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	e853 3f00 	ldrex	r3, [r3]
 8002b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0310 	bic.w	r3, r3, #16
 8002b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	69b9      	ldr	r1, [r7, #24]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	617b      	str	r3, [r7, #20]
   return(result);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e4      	bne.n	8002af6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f85b 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b3e:	e03f      	b.n	8002bc0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <HAL_UART_IRQHandler+0x56a>
 8002b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fed8 	bl	8003918 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b68:	e02d      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00e      	beq.n	8002b94 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
    }
    return;
 8002b92:	e017      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d012      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fce1 	bl	8003574 <UART_EndTransmit_IT>
    return;
 8002bb2:	e008      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bb4:	bf00      	nop
 8002bb6:	e006      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002bb8:	bf00      	nop
 8002bba:	e004      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bbc:	bf00      	nop
 8002bbe:	e002      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002bc0:	bf00      	nop
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002bc4:	bf00      	nop
  }

}
 8002bc6:	37e8      	adds	r7, #232	; 0xe8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c3a:	f023 030c 	bic.w	r3, r3, #12
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	430b      	orrs	r3, r1
 8002c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4aa7      	ldr	r2, [pc, #668]	; (8002f24 <UART_SetConfig+0x318>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d120      	bne.n	8002cce <UART_SetConfig+0xc2>
 8002c8c:	4ba6      	ldr	r3, [pc, #664]	; (8002f28 <UART_SetConfig+0x31c>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d817      	bhi.n	8002cc8 <UART_SetConfig+0xbc>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <UART_SetConfig+0x94>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cbd 	.word	0x08002cbd
 8002ca8:	08002cc3 	.word	0x08002cc3
 8002cac:	08002cb7 	.word	0x08002cb7
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e0b5      	b.n	8002e22 <UART_SetConfig+0x216>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	77fb      	strb	r3, [r7, #31]
 8002cba:	e0b2      	b.n	8002e22 <UART_SetConfig+0x216>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e0af      	b.n	8002e22 <UART_SetConfig+0x216>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e0ac      	b.n	8002e22 <UART_SetConfig+0x216>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e0a9      	b.n	8002e22 <UART_SetConfig+0x216>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a96      	ldr	r2, [pc, #600]	; (8002f2c <UART_SetConfig+0x320>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d124      	bne.n	8002d22 <UART_SetConfig+0x116>
 8002cd8:	4b93      	ldr	r3, [pc, #588]	; (8002f28 <UART_SetConfig+0x31c>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ce4:	d011      	beq.n	8002d0a <UART_SetConfig+0xfe>
 8002ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cea:	d817      	bhi.n	8002d1c <UART_SetConfig+0x110>
 8002cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf0:	d011      	beq.n	8002d16 <UART_SetConfig+0x10a>
 8002cf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf6:	d811      	bhi.n	8002d1c <UART_SetConfig+0x110>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <UART_SetConfig+0xf8>
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d006      	beq.n	8002d10 <UART_SetConfig+0x104>
 8002d02:	e00b      	b.n	8002d1c <UART_SetConfig+0x110>
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e08b      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e088      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d10:	2304      	movs	r3, #4
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e085      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d16:	2308      	movs	r3, #8
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e082      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e07f      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a82      	ldr	r2, [pc, #520]	; (8002f30 <UART_SetConfig+0x324>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d124      	bne.n	8002d76 <UART_SetConfig+0x16a>
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <UART_SetConfig+0x31c>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002d34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d38:	d011      	beq.n	8002d5e <UART_SetConfig+0x152>
 8002d3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d3e:	d817      	bhi.n	8002d70 <UART_SetConfig+0x164>
 8002d40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d44:	d011      	beq.n	8002d6a <UART_SetConfig+0x15e>
 8002d46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d4a:	d811      	bhi.n	8002d70 <UART_SetConfig+0x164>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <UART_SetConfig+0x14c>
 8002d50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d54:	d006      	beq.n	8002d64 <UART_SetConfig+0x158>
 8002d56:	e00b      	b.n	8002d70 <UART_SetConfig+0x164>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e061      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e05e      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d64:	2304      	movs	r3, #4
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e05b      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e058      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d70:	2310      	movs	r3, #16
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e055      	b.n	8002e22 <UART_SetConfig+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <UART_SetConfig+0x328>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d124      	bne.n	8002dca <UART_SetConfig+0x1be>
 8002d80:	4b69      	ldr	r3, [pc, #420]	; (8002f28 <UART_SetConfig+0x31c>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d8c:	d011      	beq.n	8002db2 <UART_SetConfig+0x1a6>
 8002d8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d92:	d817      	bhi.n	8002dc4 <UART_SetConfig+0x1b8>
 8002d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d98:	d011      	beq.n	8002dbe <UART_SetConfig+0x1b2>
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d811      	bhi.n	8002dc4 <UART_SetConfig+0x1b8>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <UART_SetConfig+0x1a0>
 8002da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da8:	d006      	beq.n	8002db8 <UART_SetConfig+0x1ac>
 8002daa:	e00b      	b.n	8002dc4 <UART_SetConfig+0x1b8>
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e037      	b.n	8002e22 <UART_SetConfig+0x216>
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e034      	b.n	8002e22 <UART_SetConfig+0x216>
 8002db8:	2304      	movs	r3, #4
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e031      	b.n	8002e22 <UART_SetConfig+0x216>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e02e      	b.n	8002e22 <UART_SetConfig+0x216>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e02b      	b.n	8002e22 <UART_SetConfig+0x216>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <UART_SetConfig+0x32c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d124      	bne.n	8002e1e <UART_SetConfig+0x212>
 8002dd4:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <UART_SetConfig+0x31c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002ddc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de0:	d011      	beq.n	8002e06 <UART_SetConfig+0x1fa>
 8002de2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002de6:	d817      	bhi.n	8002e18 <UART_SetConfig+0x20c>
 8002de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dec:	d011      	beq.n	8002e12 <UART_SetConfig+0x206>
 8002dee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002df2:	d811      	bhi.n	8002e18 <UART_SetConfig+0x20c>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <UART_SetConfig+0x1f4>
 8002df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfc:	d006      	beq.n	8002e0c <UART_SetConfig+0x200>
 8002dfe:	e00b      	b.n	8002e18 <UART_SetConfig+0x20c>
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e00d      	b.n	8002e22 <UART_SetConfig+0x216>
 8002e06:	2302      	movs	r3, #2
 8002e08:	77fb      	strb	r3, [r7, #31]
 8002e0a:	e00a      	b.n	8002e22 <UART_SetConfig+0x216>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	77fb      	strb	r3, [r7, #31]
 8002e10:	e007      	b.n	8002e22 <UART_SetConfig+0x216>
 8002e12:	2308      	movs	r3, #8
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e004      	b.n	8002e22 <UART_SetConfig+0x216>
 8002e18:	2310      	movs	r3, #16
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e001      	b.n	8002e22 <UART_SetConfig+0x216>
 8002e1e:	2310      	movs	r3, #16
 8002e20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d15b      	bne.n	8002ee4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d827      	bhi.n	8002e82 <UART_SetConfig+0x276>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <UART_SetConfig+0x22c>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e65 	.word	0x08002e65
 8002e40:	08002e6d 	.word	0x08002e6d
 8002e44:	08002e83 	.word	0x08002e83
 8002e48:	08002e73 	.word	0x08002e73
 8002e4c:	08002e83 	.word	0x08002e83
 8002e50:	08002e83 	.word	0x08002e83
 8002e54:	08002e83 	.word	0x08002e83
 8002e58:	08002e7b 	.word	0x08002e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7ff f94a 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002e60:	61b8      	str	r0, [r7, #24]
        break;
 8002e62:	e013      	b.n	8002e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e64:	f7ff f968 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002e68:	61b8      	str	r0, [r7, #24]
        break;
 8002e6a:	e00f      	b.n	8002e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <UART_SetConfig+0x330>)
 8002e6e:	61bb      	str	r3, [r7, #24]
        break;
 8002e70:	e00c      	b.n	8002e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e72:	f7ff f8c9 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8002e76:	61b8      	str	r0, [r7, #24]
        break;
 8002e78:	e008      	b.n	8002e8c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e004      	b.n	8002e8c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	77bb      	strb	r3, [r7, #30]
        break;
 8002e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8082 	beq.w	8002f98 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	005a      	lsls	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d916      	bls.n	8002ede <UART_SetConfig+0x2d2>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d212      	bcs.n	8002ede <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f023 030f 	bic.w	r3, r3, #15
 8002ec0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	89fa      	ldrh	r2, [r7, #14]
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e05c      	b.n	8002f98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	77bb      	strb	r3, [r7, #30]
 8002ee2:	e059      	b.n	8002f98 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d835      	bhi.n	8002f56 <UART_SetConfig+0x34a>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <UART_SetConfig+0x2e4>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f15 	.word	0x08002f15
 8002ef4:	08002f1d 	.word	0x08002f1d
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f57 	.word	0x08002f57
 8002f00:	08002f47 	.word	0x08002f47
 8002f04:	08002f57 	.word	0x08002f57
 8002f08:	08002f57 	.word	0x08002f57
 8002f0c:	08002f57 	.word	0x08002f57
 8002f10:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff f8ee 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8002f18:	61b8      	str	r0, [r7, #24]
        break;
 8002f1a:	e021      	b.n	8002f60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f1c:	f7ff f90c 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8002f20:	61b8      	str	r0, [r7, #24]
        break;
 8002f22:	e01d      	b.n	8002f60 <UART_SetConfig+0x354>
 8002f24:	40013800 	.word	0x40013800
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40004400 	.word	0x40004400
 8002f30:	40004800 	.word	0x40004800
 8002f34:	40004c00 	.word	0x40004c00
 8002f38:	40005000 	.word	0x40005000
 8002f3c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <UART_SetConfig+0x3a4>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff f85f 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d018      	beq.n	8002f98 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	085a      	lsrs	r2, r3, #1
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d909      	bls.n	8002f94 <UART_SetConfig+0x388>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	d205      	bcs.n	8002f94 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e001      	b.n	8002f98 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002fa4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01a      	beq.n	80030ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d10a      	bne.n	80030ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
  }
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b098      	sub	sp, #96	; 0x60
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003108:	f7fd fa9e 	bl	8000648 <HAL_GetTick>
 800310c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d12e      	bne.n	800317a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f88c 	bl	8003248 <UART_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d021      	beq.n	800317a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314a:	653b      	str	r3, [r7, #80]	; 0x50
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
 8003156:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800315a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e6      	bne.n	8003136 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e062      	b.n	8003240 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d149      	bne.n	800321c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003190:	2200      	movs	r2, #0
 8003192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f856 	bl	8003248 <UART_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03c      	beq.n	800321c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	623b      	str	r3, [r7, #32]
   return(result);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
 80031c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e6      	bne.n	80031a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3308      	adds	r3, #8
 80031da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3308      	adds	r3, #8
 80031f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f4:	61fa      	str	r2, [r7, #28]
 80031f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	617b      	str	r3, [r7, #20]
   return(result);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e5      	bne.n	80031d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e011      	b.n	8003240 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3758      	adds	r7, #88	; 0x58
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003258:	e049      	b.n	80032ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d045      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fd f9f1 	bl	8000648 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <UART_WaitOnFlagUntilTimeout+0x30>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e048      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d031      	beq.n	80032ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d110      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f8ed 	bl	8003480 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2208      	movs	r2, #8
 80032aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e029      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c8:	d111      	bne.n	80032ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f8d3 	bl	8003480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e00f      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4013      	ands	r3, r2
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	bf0c      	ite	eq
 80032fe:	2301      	moveq	r3, #1
 8003300:	2300      	movne	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	429a      	cmp	r2, r3
 800330a:	d0a6      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003318:	b480      	push	{r7}
 800331a:	b097      	sub	sp, #92	; 0x5c
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d10e      	bne.n	800336a <UART_Start_Receive_IT+0x52>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <UART_Start_Receive_IT+0x48>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f240 12ff 	movw	r2, #511	; 0x1ff
 800335a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800335e:	e01a      	b.n	8003396 <UART_Start_Receive_IT+0x7e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	; 0xff
 8003364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003368:	e015      	b.n	8003396 <UART_Start_Receive_IT+0x7e>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <UART_Start_Receive_IT+0x76>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <UART_Start_Receive_IT+0x6c>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003382:	e008      	b.n	8003396 <UART_Start_Receive_IT+0x7e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	227f      	movs	r2, #127	; 0x7f
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800338c:	e003      	b.n	8003396 <UART_Start_Receive_IT+0x7e>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2222      	movs	r2, #34	; 0x22
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3308      	adds	r3, #8
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3308      	adds	r3, #8
 80033c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80033c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d107      	bne.n	80033f4 <UART_Start_Receive_IT+0xdc>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <UART_Start_Receive_IT+0x160>)
 80033f0:	669a      	str	r2, [r3, #104]	; 0x68
 80033f2:	e002      	b.n	80033fa <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <UART_Start_Receive_IT+0x164>)
 80033f8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d019      	beq.n	8003436 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
 8003422:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e6      	bne.n	8003402 <UART_Start_Receive_IT+0xea>
 8003434:	e018      	b.n	8003468 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	e853 3f00 	ldrex	r3, [r3]
 8003442:	613b      	str	r3, [r7, #16]
   return(result);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f043 0320 	orr.w	r3, r3, #32
 800344a:	653b      	str	r3, [r7, #80]	; 0x50
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	6a3a      	ldr	r2, [r7, #32]
 800345c:	e841 2300 	strex	r3, r2, [r1]
 8003460:	61bb      	str	r3, [r7, #24]
   return(result);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1e6      	bne.n	8003436 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	375c      	adds	r7, #92	; 0x5c
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	08003771 	.word	0x08003771
 800347c:	080035c9 	.word	0x080035c9

08003480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b095      	sub	sp, #84	; 0x54
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
 80034a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e6      	bne.n	8003488 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3308      	adds	r3, #8
 80034d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d118      	bne.n	8003528 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	60bb      	str	r3, [r7, #8]
   return(result);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 0310 	bic.w	r3, r3, #16
 800350a:	647b      	str	r3, [r7, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	613b      	str	r3, [r7, #16]
   return(result);
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e6      	bne.n	80034f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800353c:	bf00      	nop
 800353e:	3754      	adds	r7, #84	; 0x54
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fb3a 	bl	8002be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	60bb      	str	r3, [r7, #8]
   return(result);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359e:	6979      	ldr	r1, [r7, #20]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	613b      	str	r3, [r7, #16]
   return(result);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1e6      	bne.n	800357c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fb06 	bl	8002bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c0:	bf00      	nop
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b09c      	sub	sp, #112	; 0x70
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e0:	2b22      	cmp	r3, #34	; 0x22
 80035e2:	f040 80b9 	bne.w	8003758 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80035f4:	b2d9      	uxtb	r1, r3
 80035f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	400a      	ands	r2, r1
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 809c 	bne.w	8003768 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800363e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003640:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800364e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003650:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800365c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e6      	bne.n	8003630 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	667b      	str	r3, [r7, #100]	; 0x64
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3308      	adds	r3, #8
 8003680:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003682:	647a      	str	r2, [r7, #68]	; 0x44
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e5      	bne.n	8003662 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	623b      	str	r3, [r7, #32]
   return(result);
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036cc:	663b      	str	r3, [r7, #96]	; 0x60
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
 80036d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e6      	bne.n	80036b8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d12e      	bne.n	8003750 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	60fb      	str	r3, [r7, #12]
   return(result);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	69b9      	ldr	r1, [r7, #24]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	617b      	str	r3, [r7, #20]
   return(result);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d103      	bne.n	8003740 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2210      	movs	r2, #16
 800373e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fa53 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800374e:	e00b      	b.n	8003768 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fc fe0b 	bl	800036c <HAL_UART_RxCpltCallback>
}
 8003756:	e007      	b.n	8003768 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0208 	orr.w	r2, r2, #8
 8003766:	619a      	str	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	3770      	adds	r7, #112	; 0x70
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b09c      	sub	sp, #112	; 0x70
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800377e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003788:	2b22      	cmp	r3, #34	; 0x22
 800378a:	f040 80b9 	bne.w	8003900 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003794:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800379e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80037a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80037a6:	4013      	ands	r3, r2
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 809c 	bne.w	8003910 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ec:	667b      	str	r3, [r7, #100]	; 0x64
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f6:	657b      	str	r3, [r7, #84]	; 0x54
 80037f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e6      	bne.n	80037d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3308      	adds	r3, #8
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	663b      	str	r3, [r7, #96]	; 0x60
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800382a:	643a      	str	r2, [r7, #64]	; 0x40
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e5      	bne.n	800380a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d018      	beq.n	8003892 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	61fb      	str	r3, [r7, #28]
   return(result);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003880:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e6      	bne.n	8003860 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	2b01      	cmp	r3, #1
 8003898:	d12e      	bne.n	80038f8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 0310 	bic.w	r3, r3, #16
 80038b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	613b      	str	r3, [r7, #16]
   return(result);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d103      	bne.n	80038e8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2210      	movs	r2, #16
 80038e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff f97f 	bl	8002bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038f6:	e00b      	b.n	8003910 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fc fd37 	bl	800036c <HAL_UART_RxCpltCallback>
}
 80038fe:	e007      	b.n	8003910 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0208 	orr.w	r2, r2, #8
 800390e:	619a      	str	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	3770      	adds	r7, #112	; 0x70
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <memset>:
 800392c:	4402      	add	r2, r0
 800392e:	4603      	mov	r3, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	f803 1b01 	strb.w	r1, [r3], #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4d0d      	ldr	r5, [pc, #52]	; (8003974 <__libc_init_array+0x38>)
 8003940:	4c0d      	ldr	r4, [pc, #52]	; (8003978 <__libc_init_array+0x3c>)
 8003942:	1b64      	subs	r4, r4, r5
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	2600      	movs	r6, #0
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	4d0b      	ldr	r5, [pc, #44]	; (800397c <__libc_init_array+0x40>)
 800394e:	4c0c      	ldr	r4, [pc, #48]	; (8003980 <__libc_init_array+0x44>)
 8003950:	f000 f818 	bl	8003984 <_init>
 8003954:	1b64      	subs	r4, r4, r5
 8003956:	10a4      	asrs	r4, r4, #2
 8003958:	2600      	movs	r6, #0
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	f855 3b04 	ldr.w	r3, [r5], #4
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	f855 3b04 	ldr.w	r3, [r5], #4
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	080039d4 	.word	0x080039d4
 8003978:	080039d4 	.word	0x080039d4
 800397c:	080039d4 	.word	0x080039d4
 8003980:	080039d8 	.word	0x080039d8

08003984 <_init>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

08003990 <_fini>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	bf00      	nop
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr
