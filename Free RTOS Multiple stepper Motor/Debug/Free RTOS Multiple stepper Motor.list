
Free RTOS Multiple stepper Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000498c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004ba4  08004ba4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ba4  08004ba4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00001238  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001298  20001298  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001066f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000296d  00000000  00000000  00030742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea0  00000000  00000000  000330b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b3a  00000000  00000000  00033f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e927  00000000  00000000  00034a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001196f  00000000  00000000  000533b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba0ca  00000000  00000000  00064d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ec4  00000000  00000000  0011edec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00122cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b04 	.word	0x08004b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004b04 	.word	0x08004b04

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	2000011c 	.word	0x2000011c

08000204 <microDelay1>:
#define IN4_PIN GPIO_PIN_3  // for motor2
#define IN4_PORT GPIOA      // for motor2

// micro seconds delay for motor1
void microDelay1 (uint16_t delay)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <microDelay1+0x30>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000216:	bf00      	nop
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <microDelay1+0x30>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	429a      	cmp	r2, r3
 8000222:	d3f9      	bcc.n	8000218 <microDelay1+0x14>
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	2000031c 	.word	0x2000031c

08000238 <microDelay2>:

// micro seconds delay for motor2
void microDelay2 (uint16_t delay)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <microDelay2+0x30>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2200      	movs	r2, #0
 8000248:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 800024a:	bf00      	nop
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <microDelay2+0x30>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	429a      	cmp	r2, r3
 8000256:	d3f9      	bcc.n	800024c <microDelay2+0x14>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000368 	.word	0x20000368

0800026c <step>:

// motor1 for both directions
void step (int steps, uint8_t direction, uint16_t delay)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	70fb      	strb	r3, [r7, #3]
 8000278:	4613      	mov	r3, r2
 800027a:	803b      	strh	r3, [r7, #0]
  int x;
  if (direction == 0)
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d106      	bne.n	8000290 <step+0x24>
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2102      	movs	r1, #2
 8000286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028a:	f000 ffad 	bl	80011e8 <HAL_GPIO_WritePin>
 800028e:	e005      	b.n	800029c <step+0x30>
  else
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2102      	movs	r1, #2
 8000294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000298:	f000 ffa6 	bl	80011e8 <HAL_GPIO_WritePin>
  for(x=0; x<steps; x=x+1)
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e016      	b.n	80002d0 <step+0x64>
  {
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2104      	movs	r1, #4
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002aa:	f000 ff9d 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay1(delay);
 80002ae:	883b      	ldrh	r3, [r7, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffa7 	bl	8000204 <microDelay1>
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f000 ff93 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay1(delay);
 80002c2:	883b      	ldrh	r3, [r7, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff9d 	bl	8000204 <microDelay1>
  for(x=0; x<steps; x=x+1)
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	dbe4      	blt.n	80002a2 <step+0x36>
  }
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <stepCCV>:

// CCV - Counter Clockwise motor2
void stepCCV (int steps, uint16_t delay)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b084      	sub	sp, #16
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	460b      	mov	r3, r1
 80002ec:	807b      	strh	r3, [r7, #2]
  for(int x=0; x<steps; x=x+1)
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	e0e2      	b.n	80004ba <stepCCV+0x1d8>
  {
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80002f4:	2201      	movs	r2, #1
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f000 ff74 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000308:	f000 ff6e 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800030c:	2200      	movs	r2, #0
 800030e:	2110      	movs	r1, #16
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f000 ff68 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000318:	2200      	movs	r2, #0
 800031a:	2108      	movs	r1, #8
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 ff62 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000324:	887b      	ldrh	r3, [r7, #2]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff86 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 800032c:	2201      	movs	r2, #1
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f000 ff58 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f000 ff52 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000344:	2200      	movs	r2, #0
 8000346:	2110      	movs	r1, #16
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 ff4c 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f000 ff46 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff6a 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000364:	2200      	movs	r2, #0
 8000366:	2140      	movs	r1, #64	; 0x40
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f000 ff3c 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000370:	2201      	movs	r2, #1
 8000372:	2120      	movs	r1, #32
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 ff36 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800037c:	2200      	movs	r2, #0
 800037e:	2110      	movs	r1, #16
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 ff30 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000388:	2200      	movs	r2, #0
 800038a:	2108      	movs	r1, #8
 800038c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000390:	f000 ff2a 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000394:	887b      	ldrh	r3, [r7, #2]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff4e 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 800039c:	2200      	movs	r2, #0
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f000 ff20 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80003a8:	2201      	movs	r2, #1
 80003aa:	2120      	movs	r1, #32
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 ff1a 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80003b4:	2201      	movs	r2, #1
 80003b6:	2110      	movs	r1, #16
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 ff14 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80003c0:	2200      	movs	r2, #0
 80003c2:	2108      	movs	r1, #8
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c8:	f000 ff0e 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 80003cc:	887b      	ldrh	r3, [r7, #2]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff32 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80003d4:	2200      	movs	r2, #0
 80003d6:	2140      	movs	r1, #64	; 0x40
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003dc:	f000 ff04 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80003e0:	2200      	movs	r2, #0
 80003e2:	2120      	movs	r1, #32
 80003e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e8:	f000 fefe 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80003ec:	2201      	movs	r2, #1
 80003ee:	2110      	movs	r1, #16
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f000 fef8 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80003f8:	2200      	movs	r2, #0
 80003fa:	2108      	movs	r1, #8
 80003fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000400:	f000 fef2 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000404:	887b      	ldrh	r3, [r7, #2]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff16 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 800040c:	2200      	movs	r2, #0
 800040e:	2140      	movs	r1, #64	; 0x40
 8000410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000414:	f000 fee8 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000418:	2200      	movs	r2, #0
 800041a:	2120      	movs	r1, #32
 800041c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000420:	f000 fee2 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000424:	2201      	movs	r2, #1
 8000426:	2110      	movs	r1, #16
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f000 fedc 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000430:	2201      	movs	r2, #1
 8000432:	2108      	movs	r1, #8
 8000434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000438:	f000 fed6 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 800043c:	887b      	ldrh	r3, [r7, #2]
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff fefa 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fecc 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000450:	2200      	movs	r2, #0
 8000452:	2120      	movs	r1, #32
 8000454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000458:	f000 fec6 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 800045c:	2200      	movs	r2, #0
 800045e:	2110      	movs	r1, #16
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f000 fec0 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000468:	2201      	movs	r2, #1
 800046a:	2108      	movs	r1, #8
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f000 feba 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000474:	887b      	ldrh	r3, [r7, #2]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff fede 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 800047c:	2201      	movs	r2, #1
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 feb0 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 feaa 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000494:	2200      	movs	r2, #0
 8000496:	2110      	movs	r1, #16
 8000498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049c:	f000 fea4 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 80004a0:	2201      	movs	r2, #1
 80004a2:	2108      	movs	r1, #8
 80004a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a8:	f000 fe9e 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fec2 	bl	8000238 <microDelay2>
  for(int x=0; x<steps; x=x+1)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	429a      	cmp	r2, r3
 80004c0:	f6ff af18 	blt.w	80002f4 <stepCCV+0x12>
  }
}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <stepCV>:

// CV - Clockwise motor1
void stepCV (int steps, uint16_t delay)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
  for(int x=0; x<steps; x=x+1)
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	e0e2      	b.n	80006a6 <stepCV+0x1d8>
  {
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 80004e0:	2201      	movs	r2, #1
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 fe7e 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 80004ec:	2200      	movs	r2, #0
 80004ee:	2120      	movs	r1, #32
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f4:	f000 fe78 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 80004f8:	2200      	movs	r2, #0
 80004fa:	2110      	movs	r1, #16
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fe72 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 fe6c 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000510:	887b      	ldrh	r3, [r7, #2]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe90 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f000 fe62 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fe5c 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f000 fe56 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fe50 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000548:	887b      	ldrh	r3, [r7, #2]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe74 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000550:	2200      	movs	r2, #0
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fe46 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f000 fe40 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f000 fe3a 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);   // IN4
 8000574:	2201      	movs	r2, #1
 8000576:	2108      	movs	r1, #8
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fe34 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe58 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 8000588:	2200      	movs	r2, #0
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f000 fe2a 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000594:	2200      	movs	r2, #0
 8000596:	2120      	movs	r1, #32
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f000 fe24 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fe1e 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b4:	f000 fe18 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 80005b8:	887b      	ldrh	r3, [r7, #2]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe3c 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80005c0:	2200      	movs	r2, #0
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 fe0e 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 80005cc:	2201      	movs	r2, #1
 80005ce:	2120      	movs	r1, #32
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d4:	f000 fe08 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);   // IN3
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 fe02 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f000 fdfc 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe20 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET); // IN1
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000600:	f000 fdf2 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f000 fdec 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fde6 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 800061c:	2200      	movs	r2, #0
 800061e:	2108      	movs	r1, #8
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fde0 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000628:	887b      	ldrh	r3, [r7, #2]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe04 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f000 fdd6 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);   // IN2
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f000 fdd0 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000648:	2200      	movs	r2, #0
 800064a:	2110      	movs	r1, #16
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 fdca 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 8000654:	2200      	movs	r2, #0
 8000656:	2108      	movs	r1, #8
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f000 fdc4 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000660:	887b      	ldrh	r3, [r7, #2]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fde8 	bl	8000238 <microDelay2>
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);   // IN1
 8000668:	2201      	movs	r2, #1
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f000 fdba 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET); // IN2
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f000 fdb4 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET); // IN3
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fdae 	bl	80011e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET); // IN4
 800068c:	2200      	movs	r2, #0
 800068e:	2108      	movs	r1, #8
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f000 fda8 	bl	80011e8 <HAL_GPIO_WritePin>
    microDelay2(delay);
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fdcc 	bl	8000238 <microDelay2>
  for(int x=0; x<steps; x=x+1)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	f6ff af18 	blt.w	80004e0 <stepCV+0x12>
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 faff 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f83f 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f93b 	bl	8000944 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006ce:	f000 f897 	bl	8000800 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006d2:	f000 f8e9 	bl	80008a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80006d6:	4816      	ldr	r0, [pc, #88]	; (8000730 <main+0x74>)
 80006d8:	f002 fa2a 	bl	8002b30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80006dc:	4815      	ldr	r0, [pc, #84]	; (8000734 <main+0x78>)
 80006de:	f002 fa27 	bl	8002b30 <HAL_TIM_Base_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Motor1 */
  osThreadDef(Motor1, StartMotor1, osPriorityNormal, 0, 128);
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <main+0x7c>)
 80006e4:	f107 041c 	add.w	r4, r7, #28
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor1Handle = osThreadCreate(osThread(Motor1), NULL);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 feda 	bl	80034b6 <osThreadCreate>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <main+0x80>)
 8000706:	6013      	str	r3, [r2, #0]

  /* definition and creation of Motor2 */
  osThreadDef(Motor2, StartMotor2, osPriorityIdle, 0, 128);
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <main+0x84>)
 800070a:	463c      	mov	r4, r7
 800070c:	461d      	mov	r5, r3
 800070e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000712:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Motor2Handle = osThreadCreate(osThread(Motor2), NULL);
 800071a:	463b      	mov	r3, r7
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fec9 	bl	80034b6 <osThreadCreate>
 8000724:	4603      	mov	r3, r0
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <main+0x88>)
 8000728:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800072a:	f002 febd 	bl	80034a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0x72>
 8000730:	2000031c 	.word	0x2000031c
 8000734:	20000368 	.word	0x20000368
 8000738:	08004b24 	.word	0x08004b24
 800073c:	200003b4 	.word	0x200003b4
 8000740:	08004b48 	.word	0x08004b48
 8000744:	200003b8 	.word	0x200003b8

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09e      	sub	sp, #120	; 0x78
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f8f8 	bl	800494c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	223c      	movs	r2, #60	; 0x3c
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 f8ea 	bl	800494c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000786:	2301      	movs	r3, #1
 8000788:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000792:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000794:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000798:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd3a 	bl	8001218 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007aa:	f000 f955 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007c8:	2102      	movs	r1, #2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fd62 	bl	8002294 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007d6:	f000 f93f 	bl	8000a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 ff9a 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007f2:	f000 f931 	bl	8000a58 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3778      	adds	r7, #120	; 0x78
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000820:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <MX_TIM1_Init+0xa4>)
 8000822:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000826:	2247      	movs	r2, #71	; 0x47
 8000828:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_TIM1_Init+0xa0>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_TIM1_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800084a:	4815      	ldr	r0, [pc, #84]	; (80008a0 <MX_TIM1_Init+0xa0>)
 800084c:	f002 f918 	bl	8002a80 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000856:	f000 f8ff 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000868:	f002 fb4d 	bl	8002f06 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000872:	f000 f8f1 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_TIM1_Init+0xa0>)
 8000888:	f002 fd58 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f8e1 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000031c 	.word	0x2000031c
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_TIM2_Init+0x98>)
 80008c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_TIM2_Init+0x98>)
 80008d0:	2247      	movs	r2, #71	; 0x47
 80008d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_TIM2_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_TIM2_Init+0x98>)
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_TIM2_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_TIM2_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_TIM2_Init+0x98>)
 80008f0:	f002 f8c6 	bl	8002a80 <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008fa:	f000 f8ad 	bl	8000a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_TIM2_Init+0x98>)
 800090c:	f002 fafb 	bl	8002f06 <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000916:	f000 f89f 	bl	8000a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_TIM2_Init+0x98>)
 8000928:	f002 fd08 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000932:	f000 f891 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000368 	.word	0x20000368

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_GPIO_Init+0x78>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_GPIO_Init+0x78>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_GPIO_Init+0x78>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_GPIO_Init+0x78>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <MX_GPIO_Init+0x78>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_GPIO_Init+0x78>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800098a:	2200      	movs	r2, #0
 800098c:	217e      	movs	r1, #126	; 0x7e
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f000 fc29 	bl	80011e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000996:	237e      	movs	r3, #126	; 0x7e
 8000998:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f000 faa0 	bl	8000ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000

080009c0 <StartMotor1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMotor1 */
void StartMotor1(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  for(int y=0; y<8; y=y+1) // 8 times
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e00c      	b.n	80009e8 <StartMotor1+0x28>
	      {
	        step(25, 0, 800); // 25 steps (45 degrees) CCV
 80009ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80009d2:	2100      	movs	r1, #0
 80009d4:	2019      	movs	r0, #25
 80009d6:	f7ff fc49 	bl	800026c <step>
	        osDelay(500);
 80009da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009de:	f002 fdb6 	bl	800354e <osDelay>
	  for(int y=0; y<8; y=y+1) // 8 times
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	ddef      	ble.n	80009ce <StartMotor1+0xe>
	      }
	      step(800, 1, 5000); // 800 steps (4 revolutions ) CV
 80009ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f2:	2101      	movs	r1, #1
 80009f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80009f8:	f7ff fc38 	bl	800026c <step>
	      osDelay(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f002 fda5 	bl	800354e <osDelay>
	  for(int y=0; y<8; y=y+1) // 8 times
 8000a04:	e7e0      	b.n	80009c8 <StartMotor1+0x8>

08000a06 <StartMotor2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotor2 */
void StartMotor2(void const * argument)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotor2 */
  /* Infinite loop */
  for(;;)
  {
	  // 512 full rev & 1 rpm - 14648
	      stepCV(256, 1000);  // 256 half revolution
 8000a0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a16:	f7ff fd5a 	bl	80004ce <stepCV>
	      osDelay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f002 fd97 	bl	800354e <osDelay>
	      stepCCV(128, 1000); // 128 quarter revolution
 8000a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	f7ff fc5c 	bl	80002e2 <stepCCV>
	      osDelay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f002 fd8f 	bl	800354e <osDelay>
	      stepCV(256, 1000);  // 256 half revolution
 8000a30:	e7ed      	b.n	8000a0e <StartMotor2+0x8>
	...

08000a34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a46:	f000 f953 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40000400 	.word	0x40000400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	f06f 0001 	mvn.w	r0, #1
 8000aa2:	f000 f9fd 	bl	8000ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <HAL_TIM_Base_MspInit+0x5c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ade:	e010      	b.n	8000b02 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae8:	d10b      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <HAL_TIM_Base_MspInit+0x60>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	61d3      	str	r3, [r2, #28]
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fdb6 	bl	80026bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5a:	f001 fd8d 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b60:	e004      	b.n	8000b6c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b62:	f001 fd89 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8000b66:	4603      	mov	r3, r0
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_InitTick+0xe4>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	0c9b      	lsrs	r3, r3, #18
 8000b76:	3b01      	subs	r3, #1
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <HAL_InitTick+0xec>)
 8000b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b88:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_InitTick+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000ba0:	4817      	ldr	r0, [pc, #92]	; (8000c00 <HAL_InitTick+0xe8>)
 8000ba2:	f001 ff6d 	bl	8002a80 <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <HAL_InitTick+0xe8>)
 8000bb6:	f002 f81d 	bl	8002bf4 <HAL_TIM_Base_Start_IT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d111      	bne.n	8000bec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f000 f985 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d808      	bhi.n	8000be6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	201d      	movs	r0, #29
 8000bda:	f000 f961 	bl	8000ea0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_InitTick+0xf0>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e002      	b.n	8000bec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	431bde83 	.word	0x431bde83
 8000c00:	200003bc 	.word	0x200003bc
 8000c04:	40000400 	.word	0x40000400
 8000c08:	20000004 	.word	0x20000004

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM3_IRQHandler+0x10>)
 8000c3e:	f002 f843 	bl	8002cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200003bc 	.word	0x200003bc

08000c4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	; (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	; (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 feb3 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca2:	f7ff fd0b 	bl	80006bc <main>

08000ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cb4:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 8000cb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cbc:	20001298 	.word	0x20001298

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x28>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8d8 	bl	8000e8a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff ff1c 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fec0 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000408 	.word	0x20000408

08000d18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000408 	.word	0x20000408

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4c 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff61 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb1 	bl	8000e24 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff80 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff54 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e154      	b.n	80011ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8146 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d005      	beq.n	8000f34 <HAL_GPIO_Init+0x40>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d130      	bne.n	8000f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	2203      	movs	r2, #3
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 0201 	and.w	r2, r3, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d017      	beq.n	8000fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d123      	bne.n	8001026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3208      	adds	r2, #8
 8000fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0203 	and.w	r2, r3, #3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80a0 	beq.w	80011a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b55      	ldr	r3, [pc, #340]	; (80011cc <HAL_GPIO_Init+0x2d8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001080:	4a53      	ldr	r2, [pc, #332]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <HAL_GPIO_Init+0x2e0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1e8>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a48      	ldr	r2, [pc, #288]	; (80011d8 <HAL_GPIO_Init+0x2e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e4>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a47      	ldr	r2, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x2e8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a46      	ldr	r2, [pc, #280]	; (80011e0 <HAL_GPIO_Init+0x2ec>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1dc>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e008      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d0:	2305      	movs	r3, #5
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x2dc>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001124:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800114e:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_GPIO_Init+0x2f0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aea3 	bne.w	8000f04 <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e002      	b.n	800120c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800121e:	af00      	add	r7, sp, #0
 8001220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001224:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001228:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	f001 b823 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 817d 	beq.w	800154e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001254:	4bbc      	ldr	r3, [pc, #752]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b04      	cmp	r3, #4
 800125e:	d00c      	beq.n	800127a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001260:	4bb9      	ldr	r3, [pc, #740]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d15c      	bne.n	8001326 <HAL_RCC_OscConfig+0x10e>
 800126c:	4bb6      	ldr	r3, [pc, #728]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d155      	bne.n	8001326 <HAL_RCC_OscConfig+0x10e>
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800128e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	095b      	lsrs	r3, r3, #5
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0x94>
 80012a6:	4ba8      	ldr	r3, [pc, #672]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	e015      	b.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012b8:	fa93 f3a3 	rbit	r3, r3
 80012bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012d4:	4b9c      	ldr	r3, [pc, #624]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012e4:	fa92 f2a2 	rbit	r2, r2
 80012e8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012f0:	fab2 f282 	clz	r2, r2
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	f042 0220 	orr.w	r2, r2, #32
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f002 021f 	and.w	r2, r2, #31
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 811f 	beq.w	800154c <HAL_RCC_OscConfig+0x334>
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 8116 	bne.w	800154c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f000 bfaf 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800132a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x12e>
 8001338:	4b83      	ldr	r3, [pc, #524]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a82      	ldr	r2, [pc, #520]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e036      	b.n	80013b4 <HAL_RCC_OscConfig+0x19c>
 8001346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <HAL_RCC_OscConfig+0x158>
 8001356:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a7b      	ldr	r2, [pc, #492]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	4b79      	ldr	r3, [pc, #484]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a78      	ldr	r2, [pc, #480]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e021      	b.n	80013b4 <HAL_RCC_OscConfig+0x19c>
 8001370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x184>
 8001382:	4b71      	ldr	r3, [pc, #452]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a70      	ldr	r2, [pc, #448]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6d      	ldr	r2, [pc, #436]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0x19c>
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a69      	ldr	r2, [pc, #420]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a66      	ldr	r2, [pc, #408]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013b4:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	f023 020f 	bic.w	r2, r3, #15
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	495f      	ldr	r1, [pc, #380]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d059      	beq.n	8001492 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc9b 	bl	8000d18 <HAL_GetTick>
 80013e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fc96 	bl	8000d18 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	; 0x64
 80013f6:	d902      	bls.n	80013fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f000 bf43 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80013fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001402:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001412:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x218>
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x244>
 8001430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001434:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001448:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800144c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001460:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001464:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001468:	fa92 f2a2 	rbit	r2, r2
 800146c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001470:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ab      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1d0>
 8001490:	e05d      	b.n	800154e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fc41 	bl	8000d18 <HAL_GetTick>
 8001496:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc3c 	bl	8000d18 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	; 0x64
 80014aa:	d902      	bls.n	80014b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f000 bee9 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80014b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2cc>
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x2f8>
 80014e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001500:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001514:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001518:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800151c:	fa92 f2a2 	rbit	r2, r2
 8001520:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001524:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001528:	fab2 f282 	clz	r2, r2
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f042 0220 	orr.w	r2, r2, #32
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f002 021f 	and.w	r2, r2, #31
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ab      	bne.n	800149c <HAL_RCC_OscConfig+0x284>
 8001544:	e003      	b.n	800154e <HAL_RCC_OscConfig+0x336>
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 817d 	beq.w	800185e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001564:	4ba6      	ldr	r3, [pc, #664]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001570:	4ba3      	ldr	r3, [pc, #652]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d172      	bne.n	8001662 <HAL_RCC_OscConfig+0x44a>
 800157c:	4ba0      	ldr	r3, [pc, #640]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d16c      	bne.n	8001662 <HAL_RCC_OscConfig+0x44a>
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001592:	fa93 f3a3 	rbit	r3, r3
 8001596:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800159a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	095b      	lsrs	r3, r3, #5
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x3a0>
 80015b2:	4b93      	ldr	r3, [pc, #588]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	e013      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c8>
 80015b8:	2302      	movs	r3, #2
 80015ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015dc:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2202      	movs	r2, #2
 80015e2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015e6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015ea:	fa92 f2a2 	rbit	r2, r2
 80015ee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015f2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015f6:	fab2 f282 	clz	r2, r2
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f042 0220 	orr.w	r2, r2, #32
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f002 021f 	and.w	r2, r2, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_RCC_OscConfig+0x410>
 8001612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d002      	beq.n	8001628 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 be2e 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b75      	ldr	r3, [pc, #468]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	21f8      	movs	r1, #248	; 0xf8
 800163e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001646:	fa91 f1a1 	rbit	r1, r1
 800164a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800164e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001652:	fab1 f181 	clz	r1, r1
 8001656:	b2c9      	uxtb	r1, r1
 8001658:	408b      	lsls	r3, r1
 800165a:	4969      	ldr	r1, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001660:	e0fd      	b.n	800185e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8088 	beq.w	8001784 <HAL_RCC_OscConfig+0x56c>
 8001674:	2301      	movs	r3, #1
 8001676:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001686:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	461a      	mov	r2, r3
 800169c:	2301      	movs	r3, #1
 800169e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb3a 	bl	8000d18 <HAL_GetTick>
 80016a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb35 	bl	8000d18 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d902      	bls.n	80016c0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	f000 bde2 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d102      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4d8>
 80016ea:	4b45      	ldr	r3, [pc, #276]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	e013      	b.n	8001718 <HAL_RCC_OscConfig+0x500>
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001702:	2302      	movs	r3, #2
 8001704:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001708:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2202      	movs	r2, #2
 800171a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800171e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800172a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f042 0220 	orr.w	r2, r2, #32
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f002 021f 	and.w	r2, r2, #31
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0af      	beq.n	80016aa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	21f8      	movs	r1, #248	; 0xf8
 8001760:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001768:	fa91 f1a1 	rbit	r1, r1
 800176c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001770:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001774:	fab1 f181 	clz	r1, r1
 8001778:	b2c9      	uxtb	r1, r1
 800177a:	408b      	lsls	r3, r1
 800177c:	4920      	ldr	r1, [pc, #128]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
 8001782:	e06c      	b.n	800185e <HAL_RCC_OscConfig+0x646>
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800178e:	fa93 f3a3 	rbit	r3, r3
 8001792:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001796:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fab2 	bl	8000d18 <HAL_GetTick>
 80017b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ba:	f7ff faad 	bl	8000d18 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d902      	bls.n	80017d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f000 bd5a 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d104      	bne.n	8001804 <HAL_RCC_OscConfig+0x5ec>
 80017fa:	4b01      	ldr	r3, [pc, #4]	; (8001800 <HAL_RCC_OscConfig+0x5e8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	e015      	b.n	800182c <HAL_RCC_OscConfig+0x614>
 8001800:	40021000 	.word	0x40021000
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800181c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001828:	4bc8      	ldr	r3, [pc, #800]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	2202      	movs	r2, #2
 800182e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001832:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001836:	fa92 f2a2 	rbit	r2, r2
 800183a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800183e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ad      	bne.n	80017ba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8110 	beq.w	8001a94 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001878:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d079      	beq.n	8001978 <HAL_RCC_OscConfig+0x760>
 8001884:	2301      	movs	r3, #1
 8001886:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001896:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	fab3 f383 	clz	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4bab      	ldr	r3, [pc, #684]	; (8001b50 <HAL_RCC_OscConfig+0x938>)
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	461a      	mov	r2, r3
 80018aa:	2301      	movs	r3, #1
 80018ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fa33 	bl	8000d18 <HAL_GetTick>
 80018b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa2e 	bl	8000d18 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d902      	bls.n	80018ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	f000 bcdb 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800190c:	2202      	movs	r2, #2
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001926:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001928:	4b88      	ldr	r3, [pc, #544]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 800192a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001934:	2102      	movs	r1, #2
 8001936:	6019      	str	r1, [r3, #0]
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f1a3 	rbit	r1, r3
 8001946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800194e:	6019      	str	r1, [r3, #0]
  return result;
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fab3 f383 	clz	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0a0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x6a0>
 8001976:	e08d      	b.n	8001a94 <HAL_RCC_OscConfig+0x87c>
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800199a:	601a      	str	r2, [r3, #0]
  return result;
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x938>)
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	461a      	mov	r2, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f9ad 	bl	8000d18 <HAL_GetTick>
 80019be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff f9a8 	bl	8000d18 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d902      	bls.n	80019da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f000 bc55 	b.w	8002284 <HAL_RCC_OscConfig+0x106c>
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a52:	2102      	movs	r1, #2
 8001a54:	6019      	str	r1, [r3, #0]
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f1a3 	rbit	r1, r3
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a6c:	6019      	str	r1, [r3, #0]
  return result;
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d197      	bne.n	80019c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 81a1 	beq.w	8001dec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	61d3      	str	r3, [r2, #28]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ae2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCC_OscConfig+0x93c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11a      	bne.n	8001b2c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_RCC_OscConfig+0x93c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <HAL_RCC_OscConfig+0x93c>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7ff f909 	bl	8000d18 <HAL_GetTick>
 8001b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	e009      	b.n	8001b20 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7ff f904 	bl	8000d18 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	; 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e3b1      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_RCC_OscConfig+0x93c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_OscConfig+0x940>
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a02      	ldr	r2, [pc, #8]	; (8001b4c <HAL_RCC_OscConfig+0x934>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e03c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x9ac>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	10908120 	.word	0x10908120
 8001b54:	40007000 	.word	0x40007000
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x96a>
 8001b68:	4bc1      	ldr	r3, [pc, #772]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4ac0      	ldr	r2, [pc, #768]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4bbe      	ldr	r3, [pc, #760]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4abd      	ldr	r2, [pc, #756]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e020      	b.n	8001bc4 <HAL_RCC_OscConfig+0x9ac>
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x994>
 8001b92:	4bb7      	ldr	r3, [pc, #732]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4ab6      	ldr	r2, [pc, #728]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
 8001b9e:	4bb4      	ldr	r3, [pc, #720]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4ab3      	ldr	r2, [pc, #716]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	e00b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x9ac>
 8001bac:	4bb0      	ldr	r3, [pc, #704]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4aaf      	ldr	r2, [pc, #700]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4bad      	ldr	r3, [pc, #692]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4aac      	ldr	r2, [pc, #688]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 8081 	beq.w	8001cd8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f89f 	bl	8000d18 <HAL_GetTick>
 8001bda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7ff f89a 	bl	8000d18 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e345      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
 8001bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	fa93 f2a3 	rbit	r2, r3
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c3e:	601a      	str	r2, [r3, #0]
  return result;
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c48:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0xa4c>
 8001c5e:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	e013      	b.n	8001c8c <HAL_RCC_OscConfig+0xa74>
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c90:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c94:	2102      	movs	r1, #2
 8001c96:	6011      	str	r1, [r2, #0]
 8001c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fa92 f1a2 	rbit	r1, r2
 8001ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001caa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cae:	6011      	str	r1, [r2, #0]
  return result;
 8001cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	fab2 f282 	clz	r2, r2
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d084      	beq.n	8001be0 <HAL_RCC_OscConfig+0x9c8>
 8001cd6:	e07f      	b.n	8001dd8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f81e 	bl	8000d18 <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff f819 	bl	8000d18 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e2c4      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_OscConfig+0xb4e>
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0xb76>
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d92:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d96:	2102      	movs	r1, #2
 8001d98:	6011      	str	r1, [r2, #0]
 8001d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fa92 f1a2 	rbit	r1, r2
 8001da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001dac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001db0:	6011      	str	r1, [r2, #0]
  return result;
 8001db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001db6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fab2 f282 	clz	r2, r2
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	f002 021f 	and.w	r2, r2, #31
 8001dcc:	2101      	movs	r1, #1
 8001dce:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d184      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dd8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8242 	beq.w	8002282 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_RCC_OscConfig+0xc58>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	f000 8213 	beq.w	8002232 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 8162 	bne.w	80020e2 <HAL_RCC_OscConfig+0xeca>
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff58 	bl	8000d18 <HAL_GetTick>
 8001e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e00c      	b.n	8001e88 <HAL_RCC_OscConfig+0xc70>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe ff50 	bl	8000d18 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1fd      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
 8001e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eac:	601a      	str	r2, [r3, #0]
  return result;
 8001eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_OscConfig+0xcba>
 8001ecc:	4bb0      	ldr	r3, [pc, #704]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	e027      	b.n	8001f22 <HAL_RCC_OscConfig+0xd0a>
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f2a3 	rbit	r2, r3
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	fa93 f2a3 	rbit	r2, r3
 8001f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f18:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	4b9c      	ldr	r3, [pc, #624]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f26:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f2e:	6011      	str	r1, [r2, #0]
 8001f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f34:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fa92 f1a2 	rbit	r1, r2
 8001f3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f42:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f46:	6011      	str	r1, [r2, #0]
  return result;
 8001f48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f4c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d182      	bne.n	8001e74 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6e:	4b88      	ldr	r3, [pc, #544]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	497f      	ldr	r1, [pc, #508]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fba:	601a      	str	r2, [r3, #0]
  return result;
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fc4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2301      	movs	r3, #1
 8001fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fe9c 	bl	8000d18 <HAL_GetTick>
 8001fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe fe97 	bl	8000d18 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e144      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
 8001ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fa93 f2a3 	rbit	r2, r3
 8002016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800201e:	601a      	str	r2, [r3, #0]
  return result;
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002028:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0xe2c>
 800203e:	4b54      	ldr	r3, [pc, #336]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e027      	b.n	8002094 <HAL_RCC_OscConfig+0xe7c>
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800204c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002098:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800209c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020a0:	6011      	str	r1, [r2, #0]
 80020a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fa92 f1a2 	rbit	r1, r2
 80020b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020b8:	6011      	str	r1, [r2, #0]
  return result;
 80020ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	fab2 f282 	clz	r2, r2
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	f002 021f 	and.w	r2, r2, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d082      	beq.n	8001fe6 <HAL_RCC_OscConfig+0xdce>
 80020e0:	e0cf      	b.n	8002282 <HAL_RCC_OscConfig+0x106a>
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002106:	601a      	str	r2, [r3, #0]
  return result;
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002110:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800211c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	461a      	mov	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe fdf6 	bl	8000d18 <HAL_GetTick>
 800212c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	e009      	b.n	8002146 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe fdf1 	bl	8000d18 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e09e      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800214e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800216a:	601a      	str	r2, [r3, #0]
  return result;
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002174:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	b2db      	uxtb	r3, r3
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	d104      	bne.n	8002194 <HAL_RCC_OscConfig+0xf7c>
 800218a:	4b01      	ldr	r3, [pc, #4]	; (8002190 <HAL_RCC_OscConfig+0xf78>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	e029      	b.n	80021e4 <HAL_RCC_OscConfig+0xfcc>
 8002190:	40021000 	.word	0x40021000
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800219c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fa93 f2a3 	rbit	r2, r3
 80021d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x1078>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	fa92 f1a2 	rbit	r1, r2
 8002200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002204:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002208:	6011      	str	r1, [r2, #0]
  return result;
 800220a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800220e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	fab2 f282 	clz	r2, r2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	f042 0220 	orr.w	r2, r2, #32
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f002 021f 	and.w	r2, r2, #31
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f202 	lsl.w	r2, r1, r2
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d180      	bne.n	8002132 <HAL_RCC_OscConfig+0xf1a>
 8002230:	e027      	b.n	8002282 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e01e      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x1078>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800224e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002252:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002266:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800226a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000

08002294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09e      	sub	sp, #120	; 0x78
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e162      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b90      	ldr	r3, [pc, #576]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d910      	bls.n	80022dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0207 	bic.w	r2, r3, #7
 80022c2:	498b      	ldr	r1, [pc, #556]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e14a      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b82      	ldr	r3, [pc, #520]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	497f      	ldr	r1, [pc, #508]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80dc 	beq.w	80024c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d13c      	bne.n	800238a <HAL_RCC_ClockConfig+0xf6>
 8002310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002314:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d102      	bne.n	800233a <HAL_RCC_ClockConfig+0xa6>
 8002334:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	e00f      	b.n	800235a <HAL_RCC_ClockConfig+0xc6>
 800233a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800233e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
 8002348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234c:	663b      	str	r3, [r7, #96]	; 0x60
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002360:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002362:	fa92 f2a2 	rbit	r2, r2
 8002366:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f042 0220 	orr.w	r2, r2, #32
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f002 021f 	and.w	r2, r2, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d17b      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0f3      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d13c      	bne.n	800240c <HAL_RCC_ClockConfig+0x178>
 8002392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002396:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_ClockConfig+0x128>
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_ClockConfig+0x148>
 80023bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
 80023ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ce:	643b      	str	r3, [r7, #64]	; 0x40
 80023d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80023e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e4:	fa92 f2a2 	rbit	r2, r2
 80023e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d13a      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b2      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
 800240c:	2302      	movs	r3, #2
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_ClockConfig+0x1a0>
 800242e:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e00d      	b.n	8002450 <HAL_RCC_ClockConfig+0x1bc>
 8002434:	2302      	movs	r3, #2
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	2302      	movs	r3, #2
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2202      	movs	r2, #2
 8002452:	61ba      	str	r2, [r7, #24]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	fa92 f2a2 	rbit	r2, r2
 800245a:	617a      	str	r2, [r7, #20]
  return result;
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fab2 f282 	clz	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f042 0220 	orr.w	r2, r2, #32
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e079      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	491a      	ldr	r1, [pc, #104]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002490:	f7fe fc42 	bl	8000d18 <HAL_GetTick>
 8002494:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7fe fc3e 	bl	8000d18 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e061      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_ClockConfig+0x260>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d214      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4906      	ldr	r1, [pc, #24]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <HAL_RCC_ClockConfig+0x25c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e040      	b.n	8002572 <HAL_RCC_ClockConfig+0x2de>
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	491a      	ldr	r1, [pc, #104]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4912      	ldr	r1, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002536:	f000 f829 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800253a:	4601      	mov	r1, r0
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_ClockConfig+0x2e8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	22f0      	movs	r2, #240	; 0xf0
 8002546:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	60fa      	str	r2, [r7, #12]
  return result;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	fab2 f282 	clz	r2, r2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	40d3      	lsrs	r3, r2
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x2ec>)
 800255c:	5cd3      	ldrb	r3, [r2, r3]
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <HAL_RCC_ClockConfig+0x2f0>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_ClockConfig+0x2f4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fad4 	bl	8000b18 <HAL_InitTick>
  
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3778      	adds	r7, #120	; 0x78
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	08004b6c 	.word	0x08004b6c
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b08b      	sub	sp, #44	; 0x2c
 8002590:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x30>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ba:	e03c      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025be:	623b      	str	r3, [r7, #32]
      break;
 80025c0:	e03c      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025cc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	fa92 f2a2 	rbit	r2, r2
 80025d4:	607a      	str	r2, [r7, #4]
  return result;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	40d3      	lsrs	r3, r2
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	220f      	movs	r2, #15
 80025f0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	fa92 f2a2 	rbit	r2, r2
 80025f8:	60fa      	str	r2, [r7, #12]
  return result;
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	40d3      	lsrs	r3, r2
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002614:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	fbb2 f2f3 	udiv	r2, r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e004      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_GetSysClockFreq+0xd0>)
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	623b      	str	r3, [r7, #32]
      break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002638:	623b      	str	r3, [r7, #32]
      break;
 800263a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263c:	6a3b      	ldr	r3, [r7, #32]
}
 800263e:	4618      	mov	r0, r3
 8002640:	372c      	adds	r7, #44	; 0x2c
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	007a1200 	.word	0x007a1200
 8002654:	08004b84 	.word	0x08004b84
 8002658:	08004b94 	.word	0x08004b94
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800267e:	f7ff ffef 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002682:	4601      	mov	r1, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800268c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002690:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	fa92 f2a2 	rbit	r2, r2
 8002698:	603a      	str	r2, [r7, #0]
  return result;
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	fab2 f282 	clz	r2, r2
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	40d3      	lsrs	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08004b7c 	.word	0x08004b7c

080026bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	220f      	movs	r2, #15
 80026ca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0203 	and.w	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_GetClockConfig+0x5c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_RCC_GetClockConfig+0x60>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0207 	and.w	r2, r3, #7
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40022000 	.word	0x40022000

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b092      	sub	sp, #72	; 0x48
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80d4 	beq.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10e      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	61d3      	str	r3, [r2, #28]
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fac7 	bl	8000d18 <HAL_GetTick>
 800278a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe fac3 	bl	8000d18 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e169      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8084 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d07c      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2301      	movs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	461a      	mov	r2, r3
 800281a:	2300      	movs	r3, #0
 800281c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002822:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d04b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282e:	f7fe fa73 	bl	8000d18 <HAL_GetTick>
 8002832:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fa6f 	bl	8000d18 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e113      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800284c:	2302      	movs	r3, #2
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	61fb      	str	r3, [r7, #28]
  return result;
 8002864:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d108      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800287a:	4b01      	ldr	r3, [pc, #4]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	e00d      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	10908100 	.word	0x10908100
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	613a      	str	r2, [r7, #16]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	60fa      	str	r2, [r7, #12]
  return result;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0b7      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	496a      	ldr	r1, [pc, #424]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f023 0203 	bic.w	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	495d      	ldr	r1, [pc, #372]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002916:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4956      	ldr	r1, [pc, #344]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	494e      	ldr	r1, [pc, #312]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f023 0210 	bic.w	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4947      	ldr	r1, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002970:	4b42      	ldr	r3, [pc, #264]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	493f      	ldr	r1, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f023 0220 	bic.w	r2, r3, #32
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4938      	ldr	r1, [pc, #224]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ac:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4929      	ldr	r1, [pc, #164]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	4921      	ldr	r1, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	491a      	ldr	r1, [pc, #104]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a24:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	4912      	ldr	r1, [pc, #72]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3748      	adds	r7, #72	; 0x48
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e049      	b.n	8002b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe f804 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f000 fb12 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e042      	b.n	8002bce <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <HAL_TIM_Base_Start+0xac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d018      	beq.n	8002b8c <HAL_TIM_Base_Start+0x5c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d013      	beq.n	8002b8c <HAL_TIM_Base_Start+0x5c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_TIM_Base_Start+0xb0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00e      	beq.n	8002b8c <HAL_TIM_Base_Start+0x5c>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIM_Base_Start+0xb4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_TIM_Base_Start+0x5c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_TIM_Base_Start+0xb8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_TIM_Base_Start+0x5c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_TIM_Base_Start+0xbc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d115      	bne.n	8002bb8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_TIM_Base_Start+0xc0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d015      	beq.n	8002bca <HAL_TIM_Base_Start+0x9a>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d011      	beq.n	8002bca <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40013400 	.word	0x40013400
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	00010007 	.word	0x00010007

08002bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e04a      	b.n	8002ca2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d013      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1d      	ldr	r2, [pc, #116]	; (8002cb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_TIM_Base_Start_IT+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d115      	bne.n	8002c8c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d015      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0xaa>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d011      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	e008      	b.n	8002c9e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e000      	b.n	8002ca0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40013400 	.word	0x40013400
 8002cc0:	40014000 	.word	0x40014000
 8002cc4:	00010007 	.word	0x00010007

08002cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d122      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d11b      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0202 	mvn.w	r2, #2
 8002cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9ce 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002d10:	e005      	b.n	8002d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f9c0 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f9d1 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0204 	mvn.w	r2, #4
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9a4 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f996 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9a7 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0208 	mvn.w	r2, #8
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f97a 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f96c 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f97d 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0210 	mvn.w	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2208      	movs	r2, #8
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f950 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f942 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f953 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0201 	mvn.w	r2, #1
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fd fdf4 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 faec 	bl	8003450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d10e      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d107      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fadf 	bl	8003464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d107      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f901 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d10e      	bne.n	8002efe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d107      	bne.n	8002efe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0220 	mvn.w	r2, #32
 8002ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa9f 	bl	800343c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_ConfigClockSource+0x1c>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0b6      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x18a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d03e      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0xd8>
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	f200 8087 	bhi.w	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6c:	f000 8086 	beq.w	800307c <HAL_TIM_ConfigClockSource+0x176>
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d87f      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f76:	2b70      	cmp	r3, #112	; 0x70
 8002f78:	d01a      	beq.n	8002fb0 <HAL_TIM_ConfigClockSource+0xaa>
 8002f7a:	2b70      	cmp	r3, #112	; 0x70
 8002f7c:	d87b      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f7e:	2b60      	cmp	r3, #96	; 0x60
 8002f80:	d050      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0x11e>
 8002f82:	2b60      	cmp	r3, #96	; 0x60
 8002f84:	d877      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f86:	2b50      	cmp	r3, #80	; 0x50
 8002f88:	d03c      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0xfe>
 8002f8a:	2b50      	cmp	r3, #80	; 0x50
 8002f8c:	d873      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d058      	beq.n	8003044 <HAL_TIM_ConfigClockSource+0x13e>
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d86f      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f96:	2b30      	cmp	r3, #48	; 0x30
 8002f98:	d064      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0x15e>
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d86b      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d060      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0x15e>
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d867      	bhi.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d05c      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0x15e>
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d05a      	beq.n	8003064 <HAL_TIM_ConfigClockSource+0x15e>
 8002fae:	e062      	b.n	8003076 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	f000 f99c 	bl	80032fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	609a      	str	r2, [r3, #8]
      break;
 8002fdc:	e04f      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fee:	f000 f985 	bl	80032fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003000:	609a      	str	r2, [r3, #8]
      break;
 8003002:	e03c      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003010:	461a      	mov	r2, r3
 8003012:	f000 f8f9 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2150      	movs	r1, #80	; 0x50
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f952 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8003022:	e02c      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003030:	461a      	mov	r2, r3
 8003032:	f000 f918 	bl	8003266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2160      	movs	r1, #96	; 0x60
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f942 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8003042:	e01c      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003050:	461a      	mov	r2, r3
 8003052:	f000 f8d9 	bl	8003208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2140      	movs	r1, #64	; 0x40
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f932 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8003062:	e00c      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 f929 	bl	80032c6 <TIM_ITRx_SetConfig>
      break;
 8003074:	e003      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e000      	b.n	800307e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800307c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <TIM_Base_SetConfig+0x104>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00f      	beq.n	8003120 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d00b      	beq.n	8003120 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a39      	ldr	r2, [pc, #228]	; (80031f0 <TIM_Base_SetConfig+0x108>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a38      	ldr	r2, [pc, #224]	; (80031f4 <TIM_Base_SetConfig+0x10c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_Base_SetConfig+0x38>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <TIM_Base_SetConfig+0x110>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d108      	bne.n	8003132 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <TIM_Base_SetConfig+0x104>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01b      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d017      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <TIM_Base_SetConfig+0x108>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <TIM_Base_SetConfig+0x10c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00f      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <TIM_Base_SetConfig+0x110>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00b      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <TIM_Base_SetConfig+0x114>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <TIM_Base_SetConfig+0x118>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <TIM_Base_SetConfig+0x8a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d108      	bne.n	8003184 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <TIM_Base_SetConfig+0x104>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00f      	beq.n	80031d0 <TIM_Base_SetConfig+0xe8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <TIM_Base_SetConfig+0x110>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_Base_SetConfig+0xe8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_Base_SetConfig+0xe8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <TIM_Base_SetConfig+0x118>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0xe8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d103      	bne.n	80031d8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	615a      	str	r2, [r3, #20]
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40013400 	.word	0x40013400
 80031fc:	40014000 	.word	0x40014000
 8003200:	40014400 	.word	0x40014400
 8003204:	40014800 	.word	0x40014800

08003208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 030a 	bic.w	r3, r3, #10
 8003244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0210 	bic.w	r2, r3, #16
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	031b      	lsls	r3, r3, #12
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	621a      	str	r2, [r3, #32]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f043 0307 	orr.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	431a      	orrs	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e063      	b.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2b      	ldr	r2, [pc, #172]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800338e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d018      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c6:	d013      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00e      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d009      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10c      	bne.n	800340a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40013400 	.word	0x40013400
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40014000 	.word	0x40014000

0800343c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	2b84      	cmp	r3, #132	; 0x84
 800348c:	d005      	beq.n	800349a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800348e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	3303      	adds	r3, #3
 8003498:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800349a:	68fb      	ldr	r3, [r7, #12]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034ac:	f000 faec 	bl	8003a88 <vTaskStartScheduler>
  
  return osOK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b8:	b089      	sub	sp, #36	; 0x24
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <osThreadCreate+0x54>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01c      	beq.n	800350a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685c      	ldr	r4, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691e      	ldr	r6, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff ffc8 	bl	8003478 <makeFreeRtosPriority>
 80034e8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034f2:	9202      	str	r2, [sp, #8]
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	9100      	str	r1, [sp, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4632      	mov	r2, r6
 80034fc:	4629      	mov	r1, r5
 80034fe:	4620      	mov	r0, r4
 8003500:	f000 f8ed 	bl	80036de <xTaskCreateStatic>
 8003504:	4603      	mov	r3, r0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e01c      	b.n	8003544 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685c      	ldr	r4, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003516:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ffaa 	bl	8003478 <makeFreeRtosPriority>
 8003524:	4602      	mov	r2, r0
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	9200      	str	r2, [sp, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	4632      	mov	r2, r6
 8003532:	4629      	mov	r1, r5
 8003534:	4620      	mov	r0, r4
 8003536:	f000 f92e 	bl	8003796 <xTaskCreate>
 800353a:	4603      	mov	r3, r0
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003544:	68fb      	ldr	r3, [r7, #12]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800354e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <osDelay+0x16>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	e000      	b.n	8003566 <osDelay+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fa5a 	bl	8003a20 <vTaskDelay>
  
  return osOK;
 800356c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f103 0208 	add.w	r2, r3, #8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f103 0208 	add.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f103 0208 	add.w	r2, r3, #8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d103      	bne.n	8003638 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e00c      	b.n	8003652 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3308      	adds	r3, #8
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e002      	b.n	8003646 <vListInsert+0x2e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d2f6      	bcs.n	8003640 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d103      	bne.n	80036be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1e5a      	subs	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b08e      	sub	sp, #56	; 0x38
 80036e2:	af04      	add	r7, sp, #16
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <xTaskCreateStatic+0x46>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	61fb      	str	r3, [r7, #28]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003724:	23a0      	movs	r3, #160	; 0xa0
 8003726:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	2ba0      	cmp	r3, #160	; 0xa0
 800372c:	d00a      	beq.n	8003744 <xTaskCreateStatic+0x66>
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	61bb      	str	r3, [r7, #24]
}
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01e      	beq.n	8003788 <xTaskCreateStatic+0xaa>
 800374a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2202      	movs	r2, #2
 800375e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003762:	2300      	movs	r3, #0
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f850 	bl	8003820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003782:	f000 f8e3 	bl	800394c <prvAddNewTaskToReadyList>
 8003786:	e001      	b.n	800378c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800378c:	697b      	ldr	r3, [r7, #20]
	}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af04      	add	r7, sp, #16
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fef4 	bl	8004598 <pvPortMalloc>
 80037b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80037b8:	20a0      	movs	r0, #160	; 0xa0
 80037ba:	f000 feed 	bl	8004598 <pvPortMalloc>
 80037be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
 80037cc:	e005      	b.n	80037da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037ce:	6978      	ldr	r0, [r7, #20]
 80037d0:	f000 ffa6 	bl	8004720 <vPortFree>
 80037d4:	e001      	b.n	80037da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d017      	beq.n	8003810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9303      	str	r3, [sp, #12]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f80e 	bl	8003820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003804:	69f8      	ldr	r0, [r7, #28]
 8003806:	f000 f8a1 	bl	800394c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800380a:	2301      	movs	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e002      	b.n	8003816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003816:	69bb      	ldr	r3, [r7, #24]
	}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003838:	3b01      	subs	r3, #1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f023 0307 	bic.w	r3, r3, #7
 8003846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	617b      	str	r3, [r7, #20]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	e012      	b.n	8003894 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	7819      	ldrb	r1, [r3, #0]
 8003876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	3334      	adds	r3, #52	; 0x34
 800387e:	460a      	mov	r2, r1
 8003880:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3301      	adds	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	d9e9      	bls.n	800386e <prvInitialiseNewTask+0x4e>
 800389a:	e000      	b.n	800389e <prvInitialiseNewTask+0x7e>
		{
			break;
 800389c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d901      	bls.n	80038b0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038ac:	2306      	movs	r3, #6
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	2200      	movs	r2, #0
 80038c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	3304      	adds	r3, #4
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff fe75 	bl	80035b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	3318      	adds	r3, #24
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff fe70 	bl	80035b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	f1c3 0207 	rsb	r2, r3, #7
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	334c      	adds	r3, #76	; 0x4c
 8003900:	224c      	movs	r2, #76	; 0x4c
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f001 f821 	bl	800494c <memset>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <prvInitialiseNewTask+0x120>)
 800390e:	651a      	str	r2, [r3, #80]	; 0x50
 8003910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <prvInitialiseNewTask+0x124>)
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <prvInitialiseNewTask+0x128>)
 800391a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	69b8      	ldr	r0, [r7, #24]
 8003922:	f000 fc2b 	bl	800417c <pxPortInitialiseStack>
 8003926:	4602      	mov	r2, r0
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20001158 	.word	0x20001158
 8003944:	200011c0 	.word	0x200011c0
 8003948:	20001228 	.word	0x20001228

0800394c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003954:	f000 fd3e 	bl	80043d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 8003960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <prvAddNewTaskToReadyList+0xb8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003978:	f000 fad2 	bl	8003f20 <prvInitialiseTaskLists>
 800397c:	e00d      	b.n	800399a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800397e:	4b23      	ldr	r3, [pc, #140]	; (8003a0c <prvAddNewTaskToReadyList+0xc0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	429a      	cmp	r2, r3
 8003992:	d802      	bhi.n	800399a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <prvAddNewTaskToReadyList+0xc4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <prvAddNewTaskToReadyList+0xc4>)
 80039a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <prvAddNewTaskToReadyList+0xc8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <prvAddNewTaskToReadyList+0xc8>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <prvAddNewTaskToReadyList+0xcc>)
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f7ff fdff 	bl	80035d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039d2:	f000 fd2f 	bl	8004434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <prvAddNewTaskToReadyList+0xc0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <prvAddNewTaskToReadyList+0xbc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d207      	bcs.n	80039fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <prvAddNewTaskToReadyList+0xd0>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2000050c 	.word	0x2000050c
 8003a08:	2000040c 	.word	0x2000040c
 8003a0c:	20000518 	.word	0x20000518
 8003a10:	20000528 	.word	0x20000528
 8003a14:	20000514 	.word	0x20000514
 8003a18:	20000410 	.word	0x20000410
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <vTaskDelay+0x60>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <vTaskDelay+0x30>
	__asm volatile
 8003a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	f3bf 8f6f 	isb	sy
 8003a46:	f3bf 8f4f 	dsb	sy
 8003a4a:	60bb      	str	r3, [r7, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	e7fe      	b.n	8003a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a50:	f000 f884 	bl	8003b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fb2a 	bl	80040b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a5c:	f000 f88c 	bl	8003b78 <xTaskResumeAll>
 8003a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <vTaskDelay+0x64>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000534 	.word	0x20000534
 8003a84:	e000ed04 	.word	0xe000ed04

08003a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a96:	463a      	mov	r2, r7
 8003a98:	1d39      	adds	r1, r7, #4
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fc fb96 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	9202      	str	r2, [sp, #8]
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	460a      	mov	r2, r1
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <vTaskStartScheduler+0xb4>)
 8003ab8:	4821      	ldr	r0, [pc, #132]	; (8003b40 <vTaskStartScheduler+0xb8>)
 8003aba:	f7ff fe10 	bl	80036de <xTaskCreateStatic>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <vTaskStartScheduler+0xbc>)
 8003ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	; (8003b44 <vTaskStartScheduler+0xbc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e001      	b.n	8003ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d11b      	bne.n	8003b14 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	613b      	str	r3, [r7, #16]
}
 8003aee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003af0:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <vTaskStartScheduler+0xc0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	334c      	adds	r3, #76	; 0x4c
 8003af6:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <vTaskStartScheduler+0xc4>)
 8003af8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <vTaskStartScheduler+0xc8>)
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <vTaskStartScheduler+0xcc>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <vTaskStartScheduler+0xd0>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b0e:	f000 fbbf 	bl	8004290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b12:	e00e      	b.n	8003b32 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1a:	d10a      	bne.n	8003b32 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b20:	f383 8811 	msr	BASEPRI, r3
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	60fb      	str	r3, [r7, #12]
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <vTaskStartScheduler+0xa8>
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	08004b64 	.word	0x08004b64
 8003b40:	08003ef1 	.word	0x08003ef1
 8003b44:	20000530 	.word	0x20000530
 8003b48:	2000040c 	.word	0x2000040c
 8003b4c:	2000005c 	.word	0x2000005c
 8003b50:	2000052c 	.word	0x2000052c
 8003b54:	20000518 	.word	0x20000518
 8003b58:	20000510 	.word	0x20000510

08003b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <vTaskSuspendAll+0x18>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a03      	ldr	r2, [pc, #12]	; (8003b74 <vTaskSuspendAll+0x18>)
 8003b68:	6013      	str	r3, [r2, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000534 	.word	0x20000534

08003b78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <xTaskResumeAll+0x114>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	603b      	str	r3, [r7, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ba4:	f000 fc16 	bl	80043d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ba8:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <xTaskResumeAll+0x114>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <xTaskResumeAll+0x114>)
 8003bb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb2:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <xTaskResumeAll+0x114>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d161      	bne.n	8003c7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bba:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <xTaskResumeAll+0x118>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d05d      	beq.n	8003c7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bc2:	e02e      	b.n	8003c22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <xTaskResumeAll+0x11c>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fd5a 	bl	800368a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fd55 	bl	800368a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	2201      	movs	r2, #1
 8003be6:	409a      	lsls	r2, r3
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <xTaskResumeAll+0x120>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <xTaskResumeAll+0x120>)
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <xTaskResumeAll+0x124>)
 8003c00:	441a      	add	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7ff fce1 	bl	80035d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <xTaskResumeAll+0x128>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <xTaskResumeAll+0x12c>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <xTaskResumeAll+0x11c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cc      	bne.n	8003bc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c30:	f000 fa18 	bl	8004064 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c34:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <xTaskResumeAll+0x130>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d010      	beq.n	8003c62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c40:	f000 f836 	bl	8003cb0 <xTaskIncrementTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <xTaskResumeAll+0x12c>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f1      	bne.n	8003c40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <xTaskResumeAll+0x130>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <xTaskResumeAll+0x12c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <xTaskResumeAll+0x134>)
 8003c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c7e:	f000 fbd9 	bl	8004434 <vPortExitCritical>

	return xAlreadyYielded;
 8003c82:	68bb      	ldr	r3, [r7, #8]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000534 	.word	0x20000534
 8003c90:	2000050c 	.word	0x2000050c
 8003c94:	200004cc 	.word	0x200004cc
 8003c98:	20000514 	.word	0x20000514
 8003c9c:	20000410 	.word	0x20000410
 8003ca0:	2000040c 	.word	0x2000040c
 8003ca4:	20000520 	.word	0x20000520
 8003ca8:	2000051c 	.word	0x2000051c
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cba:	4b51      	ldr	r3, [pc, #324]	; (8003e00 <xTaskIncrementTick+0x150>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 808d 	bne.w	8003dde <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cc4:	4b4f      	ldr	r3, [pc, #316]	; (8003e04 <xTaskIncrementTick+0x154>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ccc:	4a4d      	ldr	r2, [pc, #308]	; (8003e04 <xTaskIncrementTick+0x154>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d120      	bne.n	8003d1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cd8:	4b4b      	ldr	r3, [pc, #300]	; (8003e08 <xTaskIncrementTick+0x158>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	603b      	str	r3, [r7, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	e7fe      	b.n	8003cf6 <xTaskIncrementTick+0x46>
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <xTaskIncrementTick+0x158>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <xTaskIncrementTick+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a41      	ldr	r2, [pc, #260]	; (8003e08 <xTaskIncrementTick+0x158>)
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4a41      	ldr	r2, [pc, #260]	; (8003e0c <xTaskIncrementTick+0x15c>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <xTaskIncrementTick+0x160>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <xTaskIncrementTick+0x160>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	f000 f9a5 	bl	8004064 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <xTaskIncrementTick+0x164>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d34d      	bcc.n	8003dc0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d24:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <xTaskIncrementTick+0x158>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <xTaskIncrementTick+0x82>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xTaskIncrementTick+0x84>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d38:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <xTaskIncrementTick+0x164>)
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	601a      	str	r2, [r3, #0]
					break;
 8003d40:	e03e      	b.n	8003dc0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <xTaskIncrementTick+0x158>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d203      	bcs.n	8003d62 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d5a:	4a2e      	ldr	r2, [pc, #184]	; (8003e14 <xTaskIncrementTick+0x164>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6013      	str	r3, [r2, #0]
						break;
 8003d60:	e02e      	b.n	8003dc0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fc8f 	bl	800368a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3318      	adds	r3, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fc86 	bl	800368a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <xTaskIncrementTick+0x168>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	4a22      	ldr	r2, [pc, #136]	; (8003e18 <xTaskIncrementTick+0x168>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <xTaskIncrementTick+0x16c>)
 8003d9e:	441a      	add	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7ff fc12 	bl	80035d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <xTaskIncrementTick+0x170>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3b4      	bcc.n	8003d24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dbe:	e7b1      	b.n	8003d24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <xTaskIncrementTick+0x170>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	4915      	ldr	r1, [pc, #84]	; (8003e1c <xTaskIncrementTick+0x16c>)
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d907      	bls.n	8003de8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e004      	b.n	8003de8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <xTaskIncrementTick+0x174>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <xTaskIncrementTick+0x174>)
 8003de6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <xTaskIncrementTick+0x178>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003df4:	697b      	ldr	r3, [r7, #20]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000534 	.word	0x20000534
 8003e04:	20000510 	.word	0x20000510
 8003e08:	200004c4 	.word	0x200004c4
 8003e0c:	200004c8 	.word	0x200004c8
 8003e10:	20000524 	.word	0x20000524
 8003e14:	2000052c 	.word	0x2000052c
 8003e18:	20000514 	.word	0x20000514
 8003e1c:	20000410 	.word	0x20000410
 8003e20:	2000040c 	.word	0x2000040c
 8003e24:	2000051c 	.word	0x2000051c
 8003e28:	20000520 	.word	0x20000520

08003e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e32:	4b29      	ldr	r3, [pc, #164]	; (8003ed8 <vTaskSwitchContext+0xac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e3a:	4b28      	ldr	r3, [pc, #160]	; (8003edc <vTaskSwitchContext+0xb0>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e40:	e044      	b.n	8003ecc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003e42:	4b26      	ldr	r3, [pc, #152]	; (8003edc <vTaskSwitchContext+0xb0>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <vTaskSwitchContext+0xb4>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	f1c3 031f 	rsb	r3, r3, #31
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	4921      	ldr	r1, [pc, #132]	; (8003ee4 <vTaskSwitchContext+0xb8>)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	607b      	str	r3, [r7, #4]
}
 8003e84:	bf00      	nop
 8003e86:	e7fe      	b.n	8003e86 <vTaskSwitchContext+0x5a>
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <vTaskSwitchContext+0xb8>)
 8003e94:	4413      	add	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d104      	bne.n	8003eb8 <vTaskSwitchContext+0x8c>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <vTaskSwitchContext+0xbc>)
 8003ec0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <vTaskSwitchContext+0xbc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	334c      	adds	r3, #76	; 0x4c
 8003ec8:	4a08      	ldr	r2, [pc, #32]	; (8003eec <vTaskSwitchContext+0xc0>)
 8003eca:	6013      	str	r3, [r2, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20000534 	.word	0x20000534
 8003edc:	20000520 	.word	0x20000520
 8003ee0:	20000514 	.word	0x20000514
 8003ee4:	20000410 	.word	0x20000410
 8003ee8:	2000040c 	.word	0x2000040c
 8003eec:	2000005c 	.word	0x2000005c

08003ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ef8:	f000 f852 	bl	8003fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvIdleTask+0x28>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d9f9      	bls.n	8003ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <prvIdleTask+0x2c>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f14:	e7f0      	b.n	8003ef8 <prvIdleTask+0x8>
 8003f16:	bf00      	nop
 8003f18:	20000410 	.word	0x20000410
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	e00c      	b.n	8003f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <prvInitialiseTaskLists+0x60>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fb1b 	bl	8003576 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3301      	adds	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d9ef      	bls.n	8003f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f4e:	f7ff fb12 	bl	8003576 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f52:	480d      	ldr	r0, [pc, #52]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f54:	f7ff fb0f 	bl	8003576 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <prvInitialiseTaskLists+0x6c>)
 8003f5a:	f7ff fb0c 	bl	8003576 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f5e:	480c      	ldr	r0, [pc, #48]	; (8003f90 <prvInitialiseTaskLists+0x70>)
 8003f60:	f7ff fb09 	bl	8003576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f64:	480b      	ldr	r0, [pc, #44]	; (8003f94 <prvInitialiseTaskLists+0x74>)
 8003f66:	f7ff fb06 	bl	8003576 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvInitialiseTaskLists+0x78>)
 8003f6c:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <prvInitialiseTaskLists+0x64>)
 8003f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvInitialiseTaskLists+0x7c>)
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <prvInitialiseTaskLists+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000410 	.word	0x20000410
 8003f84:	2000049c 	.word	0x2000049c
 8003f88:	200004b0 	.word	0x200004b0
 8003f8c:	200004cc 	.word	0x200004cc
 8003f90:	200004e0 	.word	0x200004e0
 8003f94:	200004f8 	.word	0x200004f8
 8003f98:	200004c4 	.word	0x200004c4
 8003f9c:	200004c8 	.word	0x200004c8

08003fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa6:	e019      	b.n	8003fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fa8:	f000 fa14 	bl	80043d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <prvCheckTasksWaitingTermination+0x50>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fb66 	bl	800368a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	; (8003ff4 <prvCheckTasksWaitingTermination+0x54>)
 8003fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fd2:	f000 fa2f 	bl	8004434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f810 	bl	8003ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <prvCheckTasksWaitingTermination+0x58>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e1      	bne.n	8003fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200004e0 	.word	0x200004e0
 8003ff4:	2000050c 	.word	0x2000050c
 8003ff8:	200004f4 	.word	0x200004f4

08003ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	334c      	adds	r3, #76	; 0x4c
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fca7 	bl	800495c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fb7f 	bl	8004720 <vPortFree>
				vPortFree( pxTCB );
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb7c 	bl	8004720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004028:	e018      	b.n	800405c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004030:	2b01      	cmp	r3, #1
 8004032:	d103      	bne.n	800403c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fb73 	bl	8004720 <vPortFree>
	}
 800403a:	e00f      	b.n	800405c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004042:	2b02      	cmp	r3, #2
 8004044:	d00a      	beq.n	800405c <prvDeleteTCB+0x60>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60fb      	str	r3, [r7, #12]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <prvDeleteTCB+0x5e>
	}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <prvResetNextTaskUnblockTime+0x44>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <prvResetNextTaskUnblockTime+0x14>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <prvResetNextTaskUnblockTime+0x16>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d004      	beq.n	8004088 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <prvResetNextTaskUnblockTime+0x48>)
 8004080:	f04f 32ff 	mov.w	r2, #4294967295
 8004084:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004086:	e008      	b.n	800409a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <prvResetNextTaskUnblockTime+0x44>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4a05      	ldr	r2, [pc, #20]	; (80040ac <prvResetNextTaskUnblockTime+0x48>)
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200004c4 	.word	0x200004c4
 80040ac:	2000052c 	.word	0x2000052c

080040b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <prvAddCurrentTaskToDelayedList+0xb0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fadf 	bl	800368a <uxListRemove>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4013      	ands	r3, r2
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d10a      	bne.n	8004108 <prvAddCurrentTaskToDelayedList+0x58>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	481a      	ldr	r0, [pc, #104]	; (800416c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004102:	f7ff fa65 	bl	80035d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004106:	e026      	b.n	8004156 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	429a      	cmp	r2, r3
 800411e:	d209      	bcs.n	8004134 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3304      	adds	r3, #4
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7ff fa73 	bl	8003618 <vListInsert>
}
 8004132:	e010      	b.n	8004156 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3304      	adds	r3, #4
 800413e:	4619      	mov	r1, r3
 8004140:	4610      	mov	r0, r2
 8004142:	f7ff fa69 	bl	8003618 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004146:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	429a      	cmp	r2, r3
 800414e:	d202      	bcs.n	8004156 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004150:	4a09      	ldr	r2, [pc, #36]	; (8004178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6013      	str	r3, [r2, #0]
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000510 	.word	0x20000510
 8004164:	2000040c 	.word	0x2000040c
 8004168:	20000514 	.word	0x20000514
 800416c:	200004f8 	.word	0x200004f8
 8004170:	200004c8 	.word	0x200004c8
 8004174:	200004c4 	.word	0x200004c4
 8004178:	2000052c 	.word	0x2000052c

0800417c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3b04      	subs	r3, #4
 800418c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b04      	subs	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <pxPortInitialiseStack+0x64>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b14      	subs	r3, #20
 80041b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f06f 0202 	mvn.w	r2, #2
 80041ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3b20      	subs	r3, #32
 80041d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	080041e5 	.word	0x080041e5

080041e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <prvTaskExitError+0x54>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d00a      	beq.n	800420e <prvTaskExitError+0x2a>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60fb      	str	r3, [r7, #12]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvTaskExitError+0x28>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60bb      	str	r3, [r7, #8]
}
 8004220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004222:	bf00      	nop
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0fc      	beq.n	8004224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	2000000c 	.word	0x2000000c
 800423c:	00000000 	.word	0x00000000

08004240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <pxCurrentTCBConst2>)
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	6808      	ldr	r0, [r1, #0]
 8004246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424a:	f380 8809 	msr	PSP, r0
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	4770      	bx	lr
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	2000040c 	.word	0x2000040c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004268:	4808      	ldr	r0, [pc, #32]	; (800428c <prvPortStartFirstTask+0x24>)
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	6800      	ldr	r0, [r0, #0]
 800426e:	f380 8808 	msr	MSP, r0
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8814 	msr	CONTROL, r0
 800427a:	b662      	cpsie	i
 800427c:	b661      	cpsie	f
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	df00      	svc	0
 8004288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800428a:	bf00      	nop
 800428c:	e000ed08 	.word	0xe000ed08

08004290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004296:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <xPortStartScheduler+0x120>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a46      	ldr	r2, [pc, #280]	; (80043b4 <xPortStartScheduler+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10a      	bne.n	80042b6 <xPortStartScheduler+0x26>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	613b      	str	r3, [r7, #16]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042b6:	4b3e      	ldr	r3, [pc, #248]	; (80043b0 <xPortStartScheduler+0x120>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3f      	ldr	r2, [pc, #252]	; (80043b8 <xPortStartScheduler+0x128>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10a      	bne.n	80042d6 <xPortStartScheduler+0x46>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	60fb      	str	r3, [r7, #12]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042d6:	4b39      	ldr	r3, [pc, #228]	; (80043bc <xPortStartScheduler+0x12c>)
 80042d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <xPortStartScheduler+0x130>)
 80042fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042fe:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <xPortStartScheduler+0x134>)
 8004300:	2207      	movs	r2, #7
 8004302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004304:	e009      	b.n	800431a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <xPortStartScheduler+0x134>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3b01      	subs	r3, #1
 800430c:	4a2d      	ldr	r2, [pc, #180]	; (80043c4 <xPortStartScheduler+0x134>)
 800430e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	b2db      	uxtb	r3, r3
 8004318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b80      	cmp	r3, #128	; 0x80
 8004324:	d0ef      	beq.n	8004306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <xPortStartScheduler+0x134>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00a      	beq.n	8004348 <xPortStartScheduler+0xb8>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60bb      	str	r3, [r7, #8]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <xPortStartScheduler+0x134>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <xPortStartScheduler+0x134>)
 8004350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <xPortStartScheduler+0x134>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800435a:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <xPortStartScheduler+0x134>)
 800435c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <xPortStartScheduler+0x138>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <xPortStartScheduler+0x138>)
 800436c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <xPortStartScheduler+0x138>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <xPortStartScheduler+0x138>)
 8004378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800437c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800437e:	f000 f8dd 	bl	800453c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004382:	4b12      	ldr	r3, [pc, #72]	; (80043cc <xPortStartScheduler+0x13c>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004388:	f000 f8fc 	bl	8004584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <xPortStartScheduler+0x140>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <xPortStartScheduler+0x140>)
 8004392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004398:	f7ff ff66 	bl	8004268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800439c:	f7ff fd46 	bl	8003e2c <vTaskSwitchContext>
	prvTaskExitError();
 80043a0:	f7ff ff20 	bl	80041e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	e000ed00 	.word	0xe000ed00
 80043b4:	410fc271 	.word	0x410fc271
 80043b8:	410fc270 	.word	0x410fc270
 80043bc:	e000e400 	.word	0xe000e400
 80043c0:	20000538 	.word	0x20000538
 80043c4:	2000053c 	.word	0x2000053c
 80043c8:	e000ed20 	.word	0xe000ed20
 80043cc:	2000000c 	.word	0x2000000c
 80043d0:	e000ef34 	.word	0xe000ef34

080043d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	607b      	str	r3, [r7, #4]
}
 80043ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <vPortEnterCritical+0x58>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a0d      	ldr	r2, [pc, #52]	; (800442c <vPortEnterCritical+0x58>)
 80043f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <vPortEnterCritical+0x58>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10f      	bne.n	8004420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <vPortEnterCritical+0x5c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <vPortEnterCritical+0x4c>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	603b      	str	r3, [r7, #0]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vPortEnterCritical+0x4a>
	}
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	2000000c 	.word	0x2000000c
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <vPortExitCritical+0x50>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <vPortExitCritical+0x24>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	607b      	str	r3, [r7, #4]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <vPortExitCritical+0x50>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3b01      	subs	r3, #1
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <vPortExitCritical+0x50>)
 8004460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <vPortExitCritical+0x50>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <vPortExitCritical+0x42>
 800446a:	2300      	movs	r3, #0
 800446c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
	...

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f01e 0f10 	tst.w	lr, #16
 80044a0:	bf08      	it	eq
 80044a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044aa:	6010      	str	r0, [r2, #0]
 80044ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044b4:	f380 8811 	msr	BASEPRI, r0
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f7ff fcb4 	bl	8003e2c <vTaskSwitchContext>
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	f380 8811 	msr	BASEPRI, r0
 80044cc:	bc09      	pop	{r0, r3}
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6808      	ldr	r0, [r1, #0]
 80044d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d6:	f01e 0f10 	tst.w	lr, #16
 80044da:	bf08      	it	eq
 80044dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044e0:	f380 8809 	msr	PSP, r0
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w

080044f0 <pxCurrentTCBConst>:
 80044f0:	2000040c 	.word	0x2000040c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004512:	f7ff fbcd 	bl	8003cb0 <xTaskIncrementTick>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <SysTick_Handler+0x40>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
}
 800452e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <vPortSetupTimerInterrupt+0x38>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <vPortSetupTimerInterrupt+0x3c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0a      	ldr	r2, [pc, #40]	; (800457c <vPortSetupTimerInterrupt+0x40>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	4a09      	ldr	r2, [pc, #36]	; (8004580 <vPortSetupTimerInterrupt+0x44>)
 800455a:	3b01      	subs	r3, #1
 800455c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <vPortSetupTimerInterrupt+0x34>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e010 	.word	0xe000e010
 8004574:	e000e018 	.word	0xe000e018
 8004578:	20000000 	.word	0x20000000
 800457c:	10624dd3 	.word	0x10624dd3
 8004580:	e000e014 	.word	0xe000e014

08004584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004594 <vPortEnableVFP+0x10>
 8004588:	6801      	ldr	r1, [r0, #0]
 800458a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800458e:	6001      	str	r1, [r0, #0]
 8004590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004592:	bf00      	nop
 8004594:	e000ed88 	.word	0xe000ed88

08004598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045a4:	f7ff fada 	bl	8003b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045a8:	4b58      	ldr	r3, [pc, #352]	; (800470c <pvPortMalloc+0x174>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045b0:	f000 f910 	bl	80047d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045b4:	4b56      	ldr	r3, [pc, #344]	; (8004710 <pvPortMalloc+0x178>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 808e 	bne.w	80046de <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01d      	beq.n	8004604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045c8:	2208      	movs	r2, #8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d014      	beq.n	8004604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f023 0307 	bic.w	r3, r3, #7
 80045e0:	3308      	adds	r3, #8
 80045e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <pvPortMalloc+0x6c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	617b      	str	r3, [r7, #20]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d069      	beq.n	80046de <pvPortMalloc+0x146>
 800460a:	4b42      	ldr	r3, [pc, #264]	; (8004714 <pvPortMalloc+0x17c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	429a      	cmp	r2, r3
 8004612:	d864      	bhi.n	80046de <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004614:	4b40      	ldr	r3, [pc, #256]	; (8004718 <pvPortMalloc+0x180>)
 8004616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <pvPortMalloc+0x180>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800461e:	e004      	b.n	800462a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d903      	bls.n	800463c <pvPortMalloc+0xa4>
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f1      	bne.n	8004620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800463c:	4b33      	ldr	r3, [pc, #204]	; (800470c <pvPortMalloc+0x174>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	429a      	cmp	r2, r3
 8004644:	d04b      	beq.n	80046de <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2208      	movs	r2, #8
 800464c:	4413      	add	r3, r2
 800464e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	2308      	movs	r3, #8
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	429a      	cmp	r2, r3
 8004666:	d91f      	bls.n	80046a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <pvPortMalloc+0xf8>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	613b      	str	r3, [r7, #16]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046a2:	69b8      	ldr	r0, [r7, #24]
 80046a4:	f000 f8f8 	bl	8004898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <pvPortMalloc+0x17c>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <pvPortMalloc+0x17c>)
 80046b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <pvPortMalloc+0x17c>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <pvPortMalloc+0x184>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d203      	bcs.n	80046ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <pvPortMalloc+0x17c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <pvPortMalloc+0x184>)
 80046c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	4b10      	ldr	r3, [pc, #64]	; (8004710 <pvPortMalloc+0x178>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046de:	f7ff fa4b 	bl	8003b78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <pvPortMalloc+0x16a>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <pvPortMalloc+0x168>
	return pvReturn;
 8004702:	69fb      	ldr	r3, [r7, #28]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3728      	adds	r7, #40	; 0x28
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20001148 	.word	0x20001148
 8004710:	20001154 	.word	0x20001154
 8004714:	2000114c 	.word	0x2000114c
 8004718:	20001140 	.word	0x20001140
 800471c:	20001150 	.word	0x20001150

08004720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d048      	beq.n	80047c4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004732:	2308      	movs	r3, #8
 8004734:	425b      	negs	r3, r3
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <vPortFree+0xac>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <vPortFree+0x44>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60fb      	str	r3, [r7, #12]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <vPortFree+0x62>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60bb      	str	r3, [r7, #8]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <vPortFree+0xac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d019      	beq.n	80047c4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <vPortFree+0xac>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047a8:	f7ff f9d8 	bl	8003b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <vPortFree+0xb0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	4a06      	ldr	r2, [pc, #24]	; (80047d0 <vPortFree+0xb0>)
 80047b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047ba:	6938      	ldr	r0, [r7, #16]
 80047bc:	f000 f86c 	bl	8004898 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80047c0:	f7ff f9da 	bl	8003b78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047c4:	bf00      	nop
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20001154 	.word	0x20001154
 80047d0:	2000114c 	.word	0x2000114c

080047d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <prvHeapInit+0xac>)
 80047e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3307      	adds	r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0307 	bic.w	r3, r3, #7
 80047fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <prvHeapInit+0xac>)
 8004804:	4413      	add	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <prvHeapInit+0xb0>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <prvHeapInit+0xb0>)
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4413      	add	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004820:	2208      	movs	r2, #8
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <prvHeapInit+0xb4>)
 8004834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <prvHeapInit+0xb4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <prvHeapInit+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	1ad2      	subs	r2, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <prvHeapInit+0xb4>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a0a      	ldr	r2, [pc, #40]	; (800488c <prvHeapInit+0xb8>)
 8004862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <prvHeapInit+0xbc>)
 800486a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <prvHeapInit+0xc0>)
 800486e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004872:	601a      	str	r2, [r3, #0]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	20000540 	.word	0x20000540
 8004884:	20001140 	.word	0x20001140
 8004888:	20001148 	.word	0x20001148
 800488c:	20001150 	.word	0x20001150
 8004890:	2000114c 	.word	0x2000114c
 8004894:	20001154 	.word	0x20001154

08004898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <prvInsertBlockIntoFreeList+0xac>)
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e002      	b.n	80048ac <prvInsertBlockIntoFreeList+0x14>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d8f7      	bhi.n	80048a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d108      	bne.n	80048da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	441a      	add	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	441a      	add	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d118      	bne.n	8004920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d00d      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e008      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <prvInsertBlockIntoFreeList+0xb0>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e003      	b.n	8004928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d002      	beq.n	8004936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20001140 	.word	0x20001140
 8004948:	20001148 	.word	0x20001148

0800494c <memset>:
 800494c:	4402      	add	r2, r0
 800494e:	4603      	mov	r3, r0
 8004950:	4293      	cmp	r3, r2
 8004952:	d100      	bne.n	8004956 <memset+0xa>
 8004954:	4770      	bx	lr
 8004956:	f803 1b01 	strb.w	r1, [r3], #1
 800495a:	e7f9      	b.n	8004950 <memset+0x4>

0800495c <_reclaim_reent>:
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <_reclaim_reent+0xa8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4283      	cmp	r3, r0
 8004962:	b570      	push	{r4, r5, r6, lr}
 8004964:	4604      	mov	r4, r0
 8004966:	d04b      	beq.n	8004a00 <_reclaim_reent+0xa4>
 8004968:	69c3      	ldr	r3, [r0, #28]
 800496a:	b143      	cbz	r3, 800497e <_reclaim_reent+0x22>
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d144      	bne.n	80049fc <_reclaim_reent+0xa0>
 8004972:	69e3      	ldr	r3, [r4, #28]
 8004974:	6819      	ldr	r1, [r3, #0]
 8004976:	b111      	cbz	r1, 800497e <_reclaim_reent+0x22>
 8004978:	4620      	mov	r0, r4
 800497a:	f000 f86b 	bl	8004a54 <_free_r>
 800497e:	6961      	ldr	r1, [r4, #20]
 8004980:	b111      	cbz	r1, 8004988 <_reclaim_reent+0x2c>
 8004982:	4620      	mov	r0, r4
 8004984:	f000 f866 	bl	8004a54 <_free_r>
 8004988:	69e1      	ldr	r1, [r4, #28]
 800498a:	b111      	cbz	r1, 8004992 <_reclaim_reent+0x36>
 800498c:	4620      	mov	r0, r4
 800498e:	f000 f861 	bl	8004a54 <_free_r>
 8004992:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004994:	b111      	cbz	r1, 800499c <_reclaim_reent+0x40>
 8004996:	4620      	mov	r0, r4
 8004998:	f000 f85c 	bl	8004a54 <_free_r>
 800499c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499e:	b111      	cbz	r1, 80049a6 <_reclaim_reent+0x4a>
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 f857 	bl	8004a54 <_free_r>
 80049a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049a8:	b111      	cbz	r1, 80049b0 <_reclaim_reent+0x54>
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 f852 	bl	8004a54 <_free_r>
 80049b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049b2:	b111      	cbz	r1, 80049ba <_reclaim_reent+0x5e>
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 f84d 	bl	8004a54 <_free_r>
 80049ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80049bc:	b111      	cbz	r1, 80049c4 <_reclaim_reent+0x68>
 80049be:	4620      	mov	r0, r4
 80049c0:	f000 f848 	bl	8004a54 <_free_r>
 80049c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80049c6:	b111      	cbz	r1, 80049ce <_reclaim_reent+0x72>
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 f843 	bl	8004a54 <_free_r>
 80049ce:	6a23      	ldr	r3, [r4, #32]
 80049d0:	b1b3      	cbz	r3, 8004a00 <_reclaim_reent+0xa4>
 80049d2:	4620      	mov	r0, r4
 80049d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80049d8:	4718      	bx	r3
 80049da:	5949      	ldr	r1, [r1, r5]
 80049dc:	b941      	cbnz	r1, 80049f0 <_reclaim_reent+0x94>
 80049de:	3504      	adds	r5, #4
 80049e0:	69e3      	ldr	r3, [r4, #28]
 80049e2:	2d80      	cmp	r5, #128	; 0x80
 80049e4:	68d9      	ldr	r1, [r3, #12]
 80049e6:	d1f8      	bne.n	80049da <_reclaim_reent+0x7e>
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 f833 	bl	8004a54 <_free_r>
 80049ee:	e7c0      	b.n	8004972 <_reclaim_reent+0x16>
 80049f0:	680e      	ldr	r6, [r1, #0]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f82e 	bl	8004a54 <_free_r>
 80049f8:	4631      	mov	r1, r6
 80049fa:	e7ef      	b.n	80049dc <_reclaim_reent+0x80>
 80049fc:	2500      	movs	r5, #0
 80049fe:	e7ef      	b.n	80049e0 <_reclaim_reent+0x84>
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	bf00      	nop
 8004a04:	2000005c 	.word	0x2000005c

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f000 f872 	bl	8004b04 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08004ba4 	.word	0x08004ba4
 8004a44:	08004ba4 	.word	0x08004ba4
 8004a48:	08004ba4 	.word	0x08004ba4
 8004a4c:	08004ba8 	.word	0x08004ba8

08004a50 <__retarget_lock_acquire_recursive>:
 8004a50:	4770      	bx	lr

08004a52 <__retarget_lock_release_recursive>:
 8004a52:	4770      	bx	lr

08004a54 <_free_r>:
 8004a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a56:	2900      	cmp	r1, #0
 8004a58:	d044      	beq.n	8004ae4 <_free_r+0x90>
 8004a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a5e:	9001      	str	r0, [sp, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f1a1 0404 	sub.w	r4, r1, #4
 8004a66:	bfb8      	it	lt
 8004a68:	18e4      	addlt	r4, r4, r3
 8004a6a:	f000 f83f 	bl	8004aec <__malloc_lock>
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <_free_r+0x94>)
 8004a70:	9801      	ldr	r0, [sp, #4]
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	b933      	cbnz	r3, 8004a84 <_free_r+0x30>
 8004a76:	6063      	str	r3, [r4, #4]
 8004a78:	6014      	str	r4, [r2, #0]
 8004a7a:	b003      	add	sp, #12
 8004a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a80:	f000 b83a 	b.w	8004af8 <__malloc_unlock>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d908      	bls.n	8004a9a <_free_r+0x46>
 8004a88:	6825      	ldr	r5, [r4, #0]
 8004a8a:	1961      	adds	r1, r4, r5
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf01      	itttt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	1949      	addeq	r1, r1, r5
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	e7ed      	b.n	8004a76 <_free_r+0x22>
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b10b      	cbz	r3, 8004aa4 <_free_r+0x50>
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d9fa      	bls.n	8004a9a <_free_r+0x46>
 8004aa4:	6811      	ldr	r1, [r2, #0]
 8004aa6:	1855      	adds	r5, r2, r1
 8004aa8:	42a5      	cmp	r5, r4
 8004aaa:	d10b      	bne.n	8004ac4 <_free_r+0x70>
 8004aac:	6824      	ldr	r4, [r4, #0]
 8004aae:	4421      	add	r1, r4
 8004ab0:	1854      	adds	r4, r2, r1
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	d1e0      	bne.n	8004a7a <_free_r+0x26>
 8004ab8:	681c      	ldr	r4, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	6053      	str	r3, [r2, #4]
 8004abe:	440c      	add	r4, r1
 8004ac0:	6014      	str	r4, [r2, #0]
 8004ac2:	e7da      	b.n	8004a7a <_free_r+0x26>
 8004ac4:	d902      	bls.n	8004acc <_free_r+0x78>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	6003      	str	r3, [r0, #0]
 8004aca:	e7d6      	b.n	8004a7a <_free_r+0x26>
 8004acc:	6825      	ldr	r5, [r4, #0]
 8004ace:	1961      	adds	r1, r4, r5
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	bf04      	itt	eq
 8004ad4:	6819      	ldreq	r1, [r3, #0]
 8004ad6:	685b      	ldreq	r3, [r3, #4]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	bf04      	itt	eq
 8004adc:	1949      	addeq	r1, r1, r5
 8004ade:	6021      	streq	r1, [r4, #0]
 8004ae0:	6054      	str	r4, [r2, #4]
 8004ae2:	e7ca      	b.n	8004a7a <_free_r+0x26>
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bd30      	pop	{r4, r5, pc}
 8004ae8:	20001294 	.word	0x20001294

08004aec <__malloc_lock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__malloc_lock+0x8>)
 8004aee:	f7ff bfaf 	b.w	8004a50 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	20001290 	.word	0x20001290

08004af8 <__malloc_unlock>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__malloc_unlock+0x8>)
 8004afa:	f7ff bfaa 	b.w	8004a52 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	20001290 	.word	0x20001290

08004b04 <_init>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr

08004b10 <_fini>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr
