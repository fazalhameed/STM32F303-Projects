
SD card Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a38c  0800a38c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800a38c  0800a38c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a38c  0800a38c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000498  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f4e5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000271c  00000000  00000000  0002f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d00  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009f9  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f7e4  00000000  00000000  000333f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013a05  00000000  00000000  00052bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2b46  00000000  00000000  000665da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003cfc  00000000  00000000  00119120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c0c 	.word	0x08009c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009c0c 	.word	0x08009c0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <SELECT+0x1c>)
 8000888:	f001 fbea 	bl	8002060 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f001 f963 	bl	8001b58 <HAL_Delay>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	48000400 	.word	0x48000400

0800089c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <DESELECT+0x1c>)
 80008a8:	f001 fbda 	bl	8002060 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 f953 	bl	8001b58 <HAL_Delay>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	48000400 	.word	0x48000400

080008bc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008c6:	bf00      	nop
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <SPI_TxByte+0x30>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d1f8      	bne.n	80008c8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008d6:	1df9      	adds	r1, r7, #7
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	2201      	movs	r2, #1
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <SPI_TxByte+0x30>)
 80008de:	f003 f890 	bl	8003a02 <HAL_SPI_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200000a4 	.word	0x200000a4

080008f0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008fc:	bf00      	nop
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SPI_TxBuffer+0x30>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 0302 	and.w	r3, r3, #2
 8000908:	2b02      	cmp	r3, #2
 800090a:	d1f8      	bne.n	80008fe <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800090c:	887a      	ldrh	r2, [r7, #2]
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <SPI_TxBuffer+0x30>)
 8000914:	f003 f875 	bl	8003a02 <HAL_SPI_Transmit>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000a4 	.word	0x200000a4

08000924 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800092a:	23ff      	movs	r3, #255	; 0xff
 800092c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800092e:	bf00      	nop
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <SPI_RxByte+0x34>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b02      	cmp	r3, #2
 800093c:	d1f8      	bne.n	8000930 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800093e:	1dba      	adds	r2, r7, #6
 8000940:	1df9      	adds	r1, r7, #7
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <SPI_RxByte+0x34>)
 800094a:	f003 f9cf 	bl	8003cec <HAL_SPI_TransmitReceive>

  return data;
 800094e:	79bb      	ldrb	r3, [r7, #6]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200000a4 	.word	0x200000a4

0800095c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000964:	f7ff ffde 	bl	8000924 <SPI_RxByte>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <SD_ReadyWait+0x30>)
 8000980:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000984:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000986:	f7ff ffcd 	bl	8000924 <SPI_RxByte>
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2bff      	cmp	r3, #255	; 0xff
 8000992:	d003      	beq.n	800099c <SD_ReadyWait+0x24>
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SD_ReadyWait+0x30>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f4      	bne.n	8000986 <SD_ReadyWait+0xe>

  return res;
 800099c:	79fb      	ldrb	r3, [r7, #7]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000009e 	.word	0x2000009e

080009ac <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80009b2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009b6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80009b8:	f7ff ff70 	bl	800089c <DESELECT>
  for(int i = 0; i < 10; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	e005      	b.n	80009ce <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80009c2:	20ff      	movs	r0, #255	; 0xff
 80009c4:	f7ff ff7a 	bl	80008bc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b09      	cmp	r3, #9
 80009d2:	ddf6      	ble.n	80009c2 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80009d4:	f7ff ff52 	bl	800087c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80009ec:	2395      	movs	r3, #149	; 0x95
 80009ee:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80009f0:	463b      	mov	r3, r7
 80009f2:	2106      	movs	r1, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff7b 	bl	80008f0 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80009fa:	e002      	b.n	8000a02 <SD_PowerOn+0x56>
  {
    cnt--;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000a02:	f7ff ff8f 	bl	8000924 <SPI_RxByte>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d002      	beq.n	8000a12 <SD_PowerOn+0x66>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f4      	bne.n	80009fc <SD_PowerOn+0x50>
  }

  DESELECT();
 8000a12:	f7ff ff43 	bl	800089c <DESELECT>
  SPI_TxByte(0XFF);
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	f7ff ff50 	bl	80008bc <SPI_TxByte>

  PowerFlag = 1;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <SD_PowerOn+0x80>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000a1 	.word	0x200000a1

08000a30 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <SD_PowerOff+0x14>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	200000a1 	.word	0x200000a1

08000a48 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <SD_CheckPower+0x14>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	200000a1 	.word	0x200000a1

08000a60 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <SD_RxDataBlock+0x58>)
 8000a6c:	22c8      	movs	r2, #200	; 0xc8
 8000a6e:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000a70:	f7ff ff58 	bl	8000924 <SPI_RxByte>
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2bff      	cmp	r3, #255	; 0xff
 8000a7c:	d103      	bne.n	8000a86 <SD_RxDataBlock+0x26>
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <SD_RxDataBlock+0x58>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f4      	bne.n	8000a70 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2bfe      	cmp	r3, #254	; 0xfe
 8000a8a:	d001      	beq.n	8000a90 <SD_RxDataBlock+0x30>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e00f      	b.n	8000ab0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff60 	bl	800095c <SPI_RxBytePtr>
  } while(len--);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	603a      	str	r2, [r7, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1f4      	bne.n	8000a90 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000aa6:	f7ff ff3d 	bl	8000924 <SPI_RxByte>
  SPI_RxByte();
 8000aaa:	f7ff ff3b 	bl	8000924 <SPI_RxByte>

  return TRUE;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000009c 	.word	0x2000009c

08000abc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000acc:	f7ff ff54 	bl	8000978 <SD_ReadyWait>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2bff      	cmp	r3, #255	; 0xff
 8000ad4:	d001      	beq.n	8000ada <SD_TxDataBlock+0x1e>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e02f      	b.n	8000b3a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff feed 	bl	80008bc <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000ae2:	78fb      	ldrb	r3, [r7, #3]
 8000ae4:	2bfd      	cmp	r3, #253	; 0xfd
 8000ae6:	d020      	beq.n	8000b2a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff feff 	bl	80008f0 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000af2:	f7ff ff17 	bl	8000924 <SPI_RxByte>
    SPI_RxByte();
 8000af6:	f7ff ff15 	bl	8000924 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000afa:	e00b      	b.n	8000b14 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000afc:	f7ff ff12 	bl	8000924 <SPI_RxByte>
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d006      	beq.n	8000b1c <SD_TxDataBlock+0x60>
      i++;
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	3301      	adds	r3, #1
 8000b12:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	2b40      	cmp	r3, #64	; 0x40
 8000b18:	d9f0      	bls.n	8000afc <SD_TxDataBlock+0x40>
 8000b1a:	e000      	b.n	8000b1e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000b1c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000b1e:	bf00      	nop
 8000b20:	f7ff ff00 	bl	8000924 <SPI_RxByte>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0fa      	beq.n	8000b20 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	f003 031f 	and.w	r3, r3, #31
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	d101      	bne.n	8000b38 <SD_TxDataBlock+0x7c>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	6039      	str	r1, [r7, #0]
 8000b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b4e:	f7ff ff13 	bl	8000978 <SD_ReadyWait>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d001      	beq.n	8000b5c <SD_SendCmd+0x1a>
 8000b58:	23ff      	movs	r3, #255	; 0xff
 8000b5a:	e042      	b.n	8000be2 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff feac 	bl	80008bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	0e1b      	lsrs	r3, r3, #24
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fea6 	bl	80008bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	0c1b      	lsrs	r3, r3, #16
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fea0 	bl	80008bc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe9a 	bl	80008bc <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe95 	bl	80008bc <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b40      	cmp	r3, #64	; 0x40
 8000b96:	d102      	bne.n	8000b9e <SD_SendCmd+0x5c>
 8000b98:	2395      	movs	r3, #149	; 0x95
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e007      	b.n	8000bae <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b48      	cmp	r3, #72	; 0x48
 8000ba2:	d102      	bne.n	8000baa <SD_SendCmd+0x68>
 8000ba4:	2387      	movs	r3, #135	; 0x87
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <SD_SendCmd+0x6c>
  else crc = 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe83 	bl	80008bc <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b4c      	cmp	r3, #76	; 0x4c
 8000bba:	d101      	bne.n	8000bc0 <SD_SendCmd+0x7e>
 8000bbc:	f7ff feb2 	bl	8000924 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000bc4:	f7ff feae 	bl	8000924 <SPI_RxByte>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000bcc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da05      	bge.n	8000be0 <SD_SendCmd+0x9e>
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	73bb      	strb	r3, [r7, #14]
 8000bda:	7bbb      	ldrb	r3, [r7, #14]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d1f1      	bne.n	8000bc4 <SD_SendCmd+0x82>

  return res;
 8000be0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_initialize+0x14>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e0d1      	b.n	8000da4 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000c00:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <SD_disk_initialize+0x1c0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <SD_disk_initialize+0x2a>
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <SD_disk_initialize+0x1c0>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	e0c6      	b.n	8000da4 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000c16:	f7ff fec9 	bl	80009ac <SD_PowerOn>

  /* slave select */
  SELECT();
 8000c1a:	f7ff fe2f 	bl	800087c <SELECT>

  /* check disk type */
  type = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000c22:	2100      	movs	r1, #0
 8000c24:	2040      	movs	r0, #64	; 0x40
 8000c26:	f7ff ff8c 	bl	8000b42 <SD_SendCmd>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	f040 80a1 	bne.w	8000d74 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <SD_disk_initialize+0x1c4>)
 8000c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c38:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c3e:	2048      	movs	r0, #72	; 0x48
 8000c40:	f7ff ff7f 	bl	8000b42 <SD_SendCmd>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d155      	bne.n	8000cf6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e00c      	b.n	8000c6a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000c50:	7bfc      	ldrb	r4, [r7, #15]
 8000c52:	f7ff fe67 	bl	8000924 <SPI_RxByte>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	f104 0310 	add.w	r3, r4, #16
 8000c5e:	443b      	add	r3, r7
 8000c60:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	3301      	adds	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d9ef      	bls.n	8000c50 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c70:	7abb      	ldrb	r3, [r7, #10]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d17e      	bne.n	8000d74 <SD_disk_initialize+0x188>
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	2baa      	cmp	r3, #170	; 0xaa
 8000c7a:	d17b      	bne.n	8000d74 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2077      	movs	r0, #119	; 0x77
 8000c80:	f7ff ff5f 	bl	8000b42 <SD_SendCmd>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d807      	bhi.n	8000c9a <SD_disk_initialize+0xae>
 8000c8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c8e:	2069      	movs	r0, #105	; 0x69
 8000c90:	f7ff ff57 	bl	8000b42 <SD_SendCmd>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d004      	beq.n	8000ca4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000c9a:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <SD_disk_initialize+0x1c4>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1ec      	bne.n	8000c7c <SD_disk_initialize+0x90>
 8000ca2:	e000      	b.n	8000ca6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ca4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <SD_disk_initialize+0x1c4>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d062      	beq.n	8000d74 <SD_disk_initialize+0x188>
 8000cae:	2100      	movs	r1, #0
 8000cb0:	207a      	movs	r0, #122	; 0x7a
 8000cb2:	f7ff ff46 	bl	8000b42 <SD_SendCmd>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d15b      	bne.n	8000d74 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e00c      	b.n	8000cdc <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000cc2:	7bfc      	ldrb	r4, [r7, #15]
 8000cc4:	f7ff fe2e 	bl	8000924 <SPI_RxByte>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f104 0310 	add.w	r3, r4, #16
 8000cd0:	443b      	add	r3, r7
 8000cd2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d9ef      	bls.n	8000cc2 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ce2:	7a3b      	ldrb	r3, [r7, #8]
 8000ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SD_disk_initialize+0x104>
 8000cec:	230c      	movs	r3, #12
 8000cee:	e000      	b.n	8000cf2 <SD_disk_initialize+0x106>
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	73bb      	strb	r3, [r7, #14]
 8000cf4:	e03e      	b.n	8000d74 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2077      	movs	r0, #119	; 0x77
 8000cfa:	f7ff ff22 	bl	8000b42 <SD_SendCmd>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d808      	bhi.n	8000d16 <SD_disk_initialize+0x12a>
 8000d04:	2100      	movs	r1, #0
 8000d06:	2069      	movs	r0, #105	; 0x69
 8000d08:	f7ff ff1b 	bl	8000b42 <SD_SendCmd>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d801      	bhi.n	8000d16 <SD_disk_initialize+0x12a>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e000      	b.n	8000d18 <SD_disk_initialize+0x12c>
 8000d16:	2301      	movs	r3, #1
 8000d18:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10e      	bne.n	8000d3e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d20:	2100      	movs	r1, #0
 8000d22:	2077      	movs	r0, #119	; 0x77
 8000d24:	f7ff ff0d 	bl	8000b42 <SD_SendCmd>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d80e      	bhi.n	8000d4c <SD_disk_initialize+0x160>
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2069      	movs	r0, #105	; 0x69
 8000d32:	f7ff ff06 	bl	8000b42 <SD_SendCmd>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d107      	bne.n	8000d4c <SD_disk_initialize+0x160>
 8000d3c:	e00c      	b.n	8000d58 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2041      	movs	r0, #65	; 0x41
 8000d42:	f7ff fefe 	bl	8000b42 <SD_SendCmd>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <SD_disk_initialize+0x1c4>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1e2      	bne.n	8000d1a <SD_disk_initialize+0x12e>
 8000d54:	e000      	b.n	8000d58 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d56:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <SD_disk_initialize+0x1c4>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <SD_disk_initialize+0x184>
 8000d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d64:	2050      	movs	r0, #80	; 0x50
 8000d66:	f7ff feec 	bl	8000b42 <SD_SendCmd>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SD_disk_initialize+0x188>
 8000d70:	2300      	movs	r3, #0
 8000d72:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <SD_disk_initialize+0x1c8>)
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000d7a:	f7ff fd8f 	bl	800089c <DESELECT>
  SPI_RxByte();
 8000d7e:	f7ff fdd1 	bl	8000924 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SD_disk_initialize+0x1c0>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SD_disk_initialize+0x1c0>)
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	e001      	b.n	8000d9e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000d9a:	f7ff fe49 	bl	8000a30 <SD_PowerOff>
  }

  return Stat;
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <SD_disk_initialize+0x1c0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	2000009c 	.word	0x2000009c
 8000db4:	200000a0 	.word	0x200000a0

08000db8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SD_disk_status+0x14>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e002      	b.n	8000dd2 <SD_disk_status+0x1a>
  return Stat;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SD_disk_status+0x28>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000000 	.word	0x20000000

08000de4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d102      	bne.n	8000e00 <SD_disk_read+0x1c>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <SD_disk_read+0x20>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e051      	b.n	8000ea8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <SD_disk_read+0xcc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SD_disk_read+0x32>
 8000e12:	2303      	movs	r3, #3
 8000e14:	e048      	b.n	8000ea8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <SD_disk_read+0xd0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <SD_disk_read+0x44>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	025b      	lsls	r3, r3, #9
 8000e26:	607b      	str	r3, [r7, #4]

  SELECT();
 8000e28:	f7ff fd28 	bl	800087c <SELECT>

  if (count == 1)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d111      	bne.n	8000e56 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	2051      	movs	r0, #81	; 0x51
 8000e36:	f7ff fe84 	bl	8000b42 <SD_SendCmd>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d129      	bne.n	8000e94 <SD_disk_read+0xb0>
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	68b8      	ldr	r0, [r7, #8]
 8000e46:	f7ff fe0b 	bl	8000a60 <SD_RxDataBlock>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d021      	beq.n	8000e94 <SD_disk_read+0xb0>
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	e01e      	b.n	8000e94 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2052      	movs	r0, #82	; 0x52
 8000e5a:	f7ff fe72 	bl	8000b42 <SD_SendCmd>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d117      	bne.n	8000e94 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	68b8      	ldr	r0, [r7, #8]
 8000e6a:	f7ff fdf9 	bl	8000a60 <SD_RxDataBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00a      	beq.n	8000e8a <SD_disk_read+0xa6>
        buff += 512;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e7a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1ed      	bne.n	8000e64 <SD_disk_read+0x80>
 8000e88:	e000      	b.n	8000e8c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000e8a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	204c      	movs	r0, #76	; 0x4c
 8000e90:	f7ff fe57 	bl	8000b42 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000e94:	f7ff fd02 	bl	800089c <DESELECT>
  SPI_RxByte();
 8000e98:	f7ff fd44 	bl	8000924 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	bf14      	ite	ne
 8000ea2:	2301      	movne	r3, #1
 8000ea4:	2300      	moveq	r3, #0
 8000ea6:	b2db      	uxtb	r3, r3
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	200000a0 	.word	0x200000a0

08000eb8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d102      	bne.n	8000ed4 <SD_disk_write+0x1c>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <SD_disk_write+0x20>
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	e06b      	b.n	8000fb0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <SD_disk_write+0x100>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SD_disk_write+0x32>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e062      	b.n	8000fb0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <SD_disk_write+0x100>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SD_disk_write+0x44>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	e059      	b.n	8000fb0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <SD_disk_write+0x104>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <SD_disk_write+0x56>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	025b      	lsls	r3, r3, #9
 8000f0c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000f0e:	f7ff fcb5 	bl	800087c <SELECT>

  if (count == 1)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d110      	bne.n	8000f3a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	2058      	movs	r0, #88	; 0x58
 8000f1c:	f7ff fe11 	bl	8000b42 <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d13a      	bne.n	8000f9c <SD_disk_write+0xe4>
 8000f26:	21fe      	movs	r1, #254	; 0xfe
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fdc7 	bl	8000abc <SD_TxDataBlock>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d033      	beq.n	8000f9c <SD_disk_write+0xe4>
      count = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	e030      	b.n	8000f9c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <SD_disk_write+0x104>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2077      	movs	r0, #119	; 0x77
 8000f4a:	f7ff fdfa 	bl	8000b42 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	2057      	movs	r0, #87	; 0x57
 8000f52:	f7ff fdf6 	bl	8000b42 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2059      	movs	r0, #89	; 0x59
 8000f5a:	f7ff fdf2 	bl	8000b42 <SD_SendCmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11b      	bne.n	8000f9c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f64:	21fc      	movs	r1, #252	; 0xfc
 8000f66:	68b8      	ldr	r0, [r7, #8]
 8000f68:	f7ff fda8 	bl	8000abc <SD_TxDataBlock>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00a      	beq.n	8000f88 <SD_disk_write+0xd0>
        buff += 512;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f78:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ee      	bne.n	8000f64 <SD_disk_write+0xac>
 8000f86:	e000      	b.n	8000f8a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f88:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000f8a:	21fd      	movs	r1, #253	; 0xfd
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff fd95 	bl	8000abc <SD_TxDataBlock>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <SD_disk_write+0xe4>
      {
        count = 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000f9c:	f7ff fc7e 	bl	800089c <DESELECT>
  SPI_RxByte();
 8000fa0:	f7ff fcc0 	bl	8000924 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200000a0 	.word	0x200000a0

08000fc0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	603a      	str	r2, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SD_disk_ioctl+0x1e>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e115      	b.n	800120a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	2b05      	cmp	r3, #5
 8000fe8:	d124      	bne.n	8001034 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d012      	beq.n	8001018 <SD_disk_ioctl+0x58>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	dc1a      	bgt.n	800102c <SD_disk_ioctl+0x6c>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <SD_disk_ioctl+0x40>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d006      	beq.n	800100c <SD_disk_ioctl+0x4c>
 8000ffe:	e015      	b.n	800102c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001000:	f7ff fd16 	bl	8000a30 <SD_PowerOff>
      res = RES_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800100a:	e0fc      	b.n	8001206 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800100c:	f7ff fcce 	bl	80009ac <SD_PowerOn>
      res = RES_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001016:	e0f6      	b.n	8001206 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	1c5c      	adds	r4, r3, #1
 800101c:	f7ff fd14 	bl	8000a48 <SD_CheckPower>
 8001020:	4603      	mov	r3, r0
 8001022:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800102a:	e0ec      	b.n	8001206 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800102c:	2304      	movs	r3, #4
 800102e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001032:	e0e8      	b.n	8001206 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001034:	4b77      	ldr	r3, [pc, #476]	; (8001214 <SD_disk_ioctl+0x254>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SD_disk_ioctl+0x86>
 8001042:	2303      	movs	r3, #3
 8001044:	e0e1      	b.n	800120a <SD_disk_ioctl+0x24a>

    SELECT();
 8001046:	f7ff fc19 	bl	800087c <SELECT>

    switch (ctrl)
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b0d      	cmp	r3, #13
 800104e:	f200 80cb 	bhi.w	80011e8 <SD_disk_ioctl+0x228>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <SD_disk_ioctl+0x98>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001153 	.word	0x08001153
 800105c:	08001091 	.word	0x08001091
 8001060:	08001143 	.word	0x08001143
 8001064:	080011e9 	.word	0x080011e9
 8001068:	080011e9 	.word	0x080011e9
 800106c:	080011e9 	.word	0x080011e9
 8001070:	080011e9 	.word	0x080011e9
 8001074:	080011e9 	.word	0x080011e9
 8001078:	080011e9 	.word	0x080011e9
 800107c:	080011e9 	.word	0x080011e9
 8001080:	080011e9 	.word	0x080011e9
 8001084:	08001165 	.word	0x08001165
 8001088:	08001189 	.word	0x08001189
 800108c:	080011ad 	.word	0x080011ad
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001090:	2100      	movs	r1, #0
 8001092:	2049      	movs	r0, #73	; 0x49
 8001094:	f7ff fd55 	bl	8000b42 <SD_SendCmd>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 80a8 	bne.w	80011f0 <SD_disk_ioctl+0x230>
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2110      	movs	r1, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fcda 	bl	8000a60 <SD_RxDataBlock>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 809e 	beq.w	80011f0 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80010b4:	7b3b      	ldrb	r3, [r7, #12]
 80010b6:	099b      	lsrs	r3, r3, #6
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10e      	bne.n	80010dc <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	7d3b      	ldrb	r3, [r7, #20]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80010d2:	8bfb      	ldrh	r3, [r7, #30]
 80010d4:	029a      	lsls	r2, r3, #10
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e02e      	b.n	800113a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010dc:	7c7b      	ldrb	r3, [r7, #17]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	7d7b      	ldrb	r3, [r7, #21]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 0306 	and.w	r3, r3, #6
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3302      	adds	r3, #2
 8001100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	099b      	lsrs	r3, r3, #6
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b29a      	uxth	r2, r3
 800110c:	7cfb      	ldrb	r3, [r7, #19]
 800110e:	b29b      	uxth	r3, r3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29a      	uxth	r2, r3
 8001118:	7cbb      	ldrb	r3, [r7, #18]
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	b29b      	uxth	r3, r3
 800111e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001122:	b29b      	uxth	r3, r3
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	3301      	adds	r3, #1
 800112a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800112c:	8bfa      	ldrh	r2, [r7, #30]
 800112e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001132:	3b09      	subs	r3, #9
 8001134:	409a      	lsls	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001140:	e056      	b.n	80011f0 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001150:	e055      	b.n	80011fe <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001152:	f7ff fc11 	bl	8000978 <SD_ReadyWait>
 8001156:	4603      	mov	r3, r0
 8001158:	2bff      	cmp	r3, #255	; 0xff
 800115a:	d14b      	bne.n	80011f4 <SD_disk_ioctl+0x234>
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001162:	e047      	b.n	80011f4 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001164:	2100      	movs	r1, #0
 8001166:	2049      	movs	r0, #73	; 0x49
 8001168:	f7ff fceb 	bl	8000b42 <SD_SendCmd>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d142      	bne.n	80011f8 <SD_disk_ioctl+0x238>
 8001172:	2110      	movs	r1, #16
 8001174:	6a38      	ldr	r0, [r7, #32]
 8001176:	f7ff fc73 	bl	8000a60 <SD_RxDataBlock>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d03b      	beq.n	80011f8 <SD_disk_ioctl+0x238>
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001186:	e037      	b.n	80011f8 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001188:	2100      	movs	r1, #0
 800118a:	204a      	movs	r0, #74	; 0x4a
 800118c:	f7ff fcd9 	bl	8000b42 <SD_SendCmd>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d132      	bne.n	80011fc <SD_disk_ioctl+0x23c>
 8001196:	2110      	movs	r1, #16
 8001198:	6a38      	ldr	r0, [r7, #32]
 800119a:	f7ff fc61 	bl	8000a60 <SD_RxDataBlock>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d02b      	beq.n	80011fc <SD_disk_ioctl+0x23c>
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011aa:	e027      	b.n	80011fc <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80011ac:	2100      	movs	r1, #0
 80011ae:	207a      	movs	r0, #122	; 0x7a
 80011b0:	f7ff fcc7 	bl	8000b42 <SD_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011c0:	e00b      	b.n	80011da <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 80011c2:	6a3c      	ldr	r4, [r7, #32]
 80011c4:	1c63      	adds	r3, r4, #1
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	f7ff fbac 	bl	8000924 <SPI_RxByte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80011d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d4:	3301      	adds	r3, #1
 80011d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d9ef      	bls.n	80011c2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 80011e8:	2304      	movs	r3, #4
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80011ee:	e006      	b.n	80011fe <SD_disk_ioctl+0x23e>
      break;
 80011f0:	bf00      	nop
 80011f2:	e004      	b.n	80011fe <SD_disk_ioctl+0x23e>
      break;
 80011f4:	bf00      	nop
 80011f6:	e002      	b.n	80011fe <SD_disk_ioctl+0x23e>
      break;
 80011f8:	bf00      	nop
 80011fa:	e000      	b.n	80011fe <SD_disk_ioctl+0x23e>
      break;
 80011fc:	bf00      	nop
    }

    DESELECT();
 80011fe:	f7ff fb4d 	bl	800089c <DESELECT>
    SPI_RxByte();
 8001202:	f7ff fb8f 	bl	8000924 <SPI_RxByte>
  }

  return res;
 8001206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800120a:	4618      	mov	r0, r3
 800120c:	372c      	adds	r7, #44	; 0x2c
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121c:	f000 fc36 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001220:	f000 f80b 	bl	800123a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001224:	f000 f8c8 	bl	80013b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001228:	f000 f858 	bl	80012dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800122c:	f000 f894 	bl	8001358 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001230:	f003 fdaa 	bl	8004d88 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 8001234:	f000 f91e 	bl	8001474 <process_SD_card>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x20>

0800123a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b09e      	sub	sp, #120	; 0x78
 800123e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001240:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001244:	2228      	movs	r2, #40	; 0x28
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f007 ff55 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	223c      	movs	r2, #60	; 0x3c
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f007 ff47 	bl	80090f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126a:	2302      	movs	r3, #2
 800126c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001272:	2310      	movs	r3, #16
 8001274:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800127e:	4618      	mov	r0, r3
 8001280:	f000 ff06 	bl	8002090 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x54>
  {
    Error_Handler();
 800128a:	f000 fa0b 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 ff2f 	bl	800310c <HAL_RCC_ClockConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012b4:	f000 f9f6 	bl	80016a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 f942 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012ce:	f000 f9e9 	bl	80016a4 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3778      	adds	r7, #120	; 0x78
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_SPI2_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <MX_SPI2_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_SPI2_Init+0x74>)
 80012e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_SPI2_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_SPI2_Init+0x74>)
 80012f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_SPI2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_SPI2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_SPI2_Init+0x74>)
 800130a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_SPI2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_SPI2_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_SPI2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_SPI2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_SPI2_Init+0x74>)
 800132a:	2207      	movs	r2, #7
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_SPI2_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_SPI2_Init+0x74>)
 8001336:	2208      	movs	r2, #8
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_SPI2_Init+0x74>)
 800133c:	f002 fab6 	bl	80038ac <HAL_SPI_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f9ad 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000a4 	.word	0x200000a4
 8001354:	40003800 	.word	0x40003800

08001358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <MX_USART1_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001364:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART1_UART_Init+0x58>)
 800139c:	f003 f82c 	bl	80043f8 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f97d 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000108 	.word	0x20000108
 80013b4:	40013800 	.word	0x40013800

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_GPIO_Init+0x90>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <MX_GPIO_Init+0x90>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_GPIO_Init+0x90>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_GPIO_Init+0x90>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_GPIO_Init+0x90>)
 80013ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_GPIO_Init+0x90>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_GPIO_Init+0x90>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <MX_GPIO_Init+0x90>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_GPIO_Init+0x90>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <MX_GPIO_Init+0x94>)
 800141e:	f000 fe1f 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_GPIO_Init+0x94>)
 800143c:	f000 fc96 	bl	8001d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400

08001450 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001458:	1d39      	adds	r1, r7, #4
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	2201      	movs	r2, #1
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <__io_putchar+0x20>)
 8001462:	f003 f817 	bl	8004494 <HAL_UART_Transmit>

  return ch;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000108 	.word	0x20000108

08001474 <process_SD_card>:

void process_SD_card( void )
{
 8001474:	b580      	push	{r7, lr}
 8001476:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
    char        buf[100];

    do
    {
      //Mount the SD Card
      fres = f_mount(&FatFs, "", 1);    //1=mount now
 800147e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001482:	f103 0318 	add.w	r3, r3, #24
 8001486:	3b1c      	subs	r3, #28
 8001488:	2201      	movs	r2, #1
 800148a:	4979      	ldr	r1, [pc, #484]	; (8001670 <process_SD_card+0x1fc>)
 800148c:	4618      	mov	r0, r3
 800148e:	f006 f95b 	bl	8007748 <f_mount>
 8001492:	4603      	mov	r3, r0
 8001494:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001498:	f102 0217 	add.w	r2, r2, #23
 800149c:	7013      	strb	r3, [r2, #0]
      if (fres != FR_OK)
 800149e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80014a2:	f103 0317 	add.w	r3, r3, #23
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d009      	beq.n	80014c0 <process_SD_card+0x4c>
      {
        printf("No SD Card found : (%i)\r\n", fres);
 80014ac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80014b0:	f103 0317 	add.w	r3, r3, #23
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	486e      	ldr	r0, [pc, #440]	; (8001674 <process_SD_card+0x200>)
 80014ba:	f007 fcd7 	bl	8008e6c <iprintf>
        break;
 80014be:	e0c8      	b.n	8001652 <process_SD_card+0x1de>
      }
      printf("SD Card Mounted Successfully!!!\r\n");
 80014c0:	486d      	ldr	r0, [pc, #436]	; (8001678 <process_SD_card+0x204>)
 80014c2:	f007 fd39 	bl	8008f38 <puts>
      //Read the SD Card Total size and Free Size
      FATFS *pfs;
      DWORD fre_clust;
      uint32_t totalSpace, freeSpace;

      f_getfree("", &fre_clust, &pfs);
 80014c6:	f107 0218 	add.w	r2, r7, #24
 80014ca:	3a10      	subs	r2, #16
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	3b14      	subs	r3, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4866      	ldr	r0, [pc, #408]	; (8001670 <process_SD_card+0x1fc>)
 80014d6:	f007 f9b3 	bl	8008840 <f_getfree>
      totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80014da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014de:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80014e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	3b02      	subs	r3, #2
 80014ea:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80014ee:	f852 2cd0 	ldr.w	r2, [r2, #-208]
 80014f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f6:	7892      	ldrb	r2, [r2, #2]
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f923 	bl	8000748 <__aeabi_ui2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <process_SD_card+0x208>)
 8001508:	f7fe feb2 	bl	8000270 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff f992 	bl	800083c <__aeabi_d2uiz>
 8001518:	4603      	mov	r3, r0
 800151a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800151e:	f102 0210 	add.w	r2, r2, #16
 8001522:	6013      	str	r3, [r2, #0]
      freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001524:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001528:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	789b      	ldrb	r3, [r3, #2]
 8001532:	461a      	mov	r2, r3
 8001534:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001538:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f901 	bl	8000748 <__aeabi_ui2d>
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <process_SD_card+0x208>)
 800154c:	f7fe fe90 	bl	8000270 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff f970 	bl	800083c <__aeabi_d2uiz>
 800155c:	4603      	mov	r3, r0
 800155e:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001562:	f102 020c 	add.w	r2, r2, #12
 8001566:	6013      	str	r3, [r2, #0]

      printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8001568:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800156c:	f103 030c 	add.w	r3, r3, #12
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001576:	f103 0310 	add.w	r3, r3, #16
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	4840      	ldr	r0, [pc, #256]	; (8001680 <process_SD_card+0x20c>)
 800157e:	f007 fc75 	bl	8008e6c <iprintf>

      //Open the file
      fres = f_open(&fil, "Chip Soul.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001582:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001586:	3b28      	subs	r3, #40	; 0x28
 8001588:	220b      	movs	r2, #11
 800158a:	493e      	ldr	r1, [pc, #248]	; (8001684 <process_SD_card+0x210>)
 800158c:	4618      	mov	r0, r3
 800158e:	f006 f925 	bl	80077dc <f_open>
 8001592:	4603      	mov	r3, r0
 8001594:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001598:	f102 0217 	add.w	r2, r2, #23
 800159c:	7013      	strb	r3, [r2, #0]
      if(fres != FR_OK)
 800159e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015a2:	f103 0317 	add.w	r3, r3, #23
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <process_SD_card+0x14c>
      {
        printf("File creation/open Error : (%i)\r\n", fres);
 80015ac:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80015b0:	f103 0317 	add.w	r3, r3, #23
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4833      	ldr	r0, [pc, #204]	; (8001688 <process_SD_card+0x214>)
 80015ba:	f007 fc57 	bl	8008e6c <iprintf>
        break;
 80015be:	e048      	b.n	8001652 <process_SD_card+0x1de>
      }

      printf("Writing data!!!\r\n");
 80015c0:	4832      	ldr	r0, [pc, #200]	; (800168c <process_SD_card+0x218>)
 80015c2:	f007 fcb9 	bl	8008f38 <puts>
      //write the data
      f_puts("Welcome to Chip Soul Technology (SMC-Pvt) Ltd.  'FAZAL HAMEED' PC", &fil);
 80015c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ca:	3b28      	subs	r3, #40	; 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4830      	ldr	r0, [pc, #192]	; (8001690 <process_SD_card+0x21c>)
 80015d0:	f007 fa8a 	bl	8008ae8 <f_puts>

      //close your file
      f_close(&fil);
 80015d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015d8:	3b28      	subs	r3, #40	; 0x28
 80015da:	4618      	mov	r0, r3
 80015dc:	f007 f905 	bl	80087ea <f_close>

      //Open the file
      fres = f_open(&fil, "Chip Soul.txt", FA_READ);
 80015e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015e4:	3b28      	subs	r3, #40	; 0x28
 80015e6:	2201      	movs	r2, #1
 80015e8:	4926      	ldr	r1, [pc, #152]	; (8001684 <process_SD_card+0x210>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f006 f8f6 	bl	80077dc <f_open>
 80015f0:	4603      	mov	r3, r0
 80015f2:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80015f6:	f102 0217 	add.w	r2, r2, #23
 80015fa:	7013      	strb	r3, [r2, #0]
      if(fres != FR_OK)
 80015fc:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001600:	f103 0317 	add.w	r3, r3, #23
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <process_SD_card+0x1aa>
      {
        printf("File opening Error : (%i)\r\n", fres);
 800160a:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 800160e:	f103 0317 	add.w	r3, r3, #23
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	481f      	ldr	r0, [pc, #124]	; (8001694 <process_SD_card+0x220>)
 8001618:	f007 fc28 	bl	8008e6c <iprintf>
        break;
 800161c:	e019      	b.n	8001652 <process_SD_card+0x1de>
      }

      //read the data
      f_gets(buf, sizeof(buf), &fil);
 800161e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001622:	3a28      	subs	r2, #40	; 0x28
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	3b0c      	subs	r3, #12
 800162a:	2164      	movs	r1, #100	; 0x64
 800162c:	4618      	mov	r0, r3
 800162e:	f007 f9e1 	bl	80089f4 <f_gets>

      printf("Read Data : %s\n", buf);
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	3b0c      	subs	r3, #12
 8001638:	4619      	mov	r1, r3
 800163a:	4817      	ldr	r0, [pc, #92]	; (8001698 <process_SD_card+0x224>)
 800163c:	f007 fc16 	bl	8008e6c <iprintf>

      //close your file
      f_close(&fil);
 8001640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001644:	3b28      	subs	r3, #40	; 0x28
 8001646:	4618      	mov	r0, r3
 8001648:	f007 f8cf 	bl	80087ea <f_close>
      printf("Closing File!!!\r\n");
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <process_SD_card+0x228>)
 800164e:	f007 fc73 	bl	8008f38 <puts>
      }
  #endif
    } while( false );

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8001652:	2200      	movs	r2, #0
 8001654:	4906      	ldr	r1, [pc, #24]	; (8001670 <process_SD_card+0x1fc>)
 8001656:	2000      	movs	r0, #0
 8001658:	f006 f876 	bl	8007748 <f_mount>
    printf("SD Card Unmounted Successfully!!!\r\n");
 800165c:	4810      	ldr	r0, [pc, #64]	; (80016a0 <process_SD_card+0x22c>)
 800165e:	f007 fc6b 	bl	8008f38 <puts>
}
 8001662:	bf00      	nop
 8001664:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08009c24 	.word	0x08009c24
 8001674:	08009c28 	.word	0x08009c28
 8001678:	08009c44 	.word	0x08009c44
 800167c:	3fe00000 	.word	0x3fe00000
 8001680:	08009c68 	.word	0x08009c68
 8001684:	08009c98 	.word	0x08009c98
 8001688:	08009ca8 	.word	0x08009ca8
 800168c:	08009ccc 	.word	0x08009ccc
 8001690:	08009ce0 	.word	0x08009ce0
 8001694:	08009d24 	.word	0x08009d24
 8001698:	08009d40 	.word	0x08009d40
 800169c:	08009d50 	.word	0x08009d50
 80016a0:	08009d64 	.word	0x08009d64

080016a4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)

{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_MspInit+0x44>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_MspInit+0x44>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x44>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x44>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x44>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x44>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <HAL_SPI_MspInit+0xb8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d145      	bne.n	80017a6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800173c:	6153      	str	r3, [r2, #20]
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6153      	str	r3, [r2, #20]
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_SPI_MspInit+0xbc>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001774:	2305      	movs	r3, #5
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <HAL_SPI_MspInit+0xc0>)
 8001780:	f000 faf4 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001784:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001796:	2305      	movs	r3, #5
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <HAL_SPI_MspInit+0xc4>)
 80017a2:	f000 fae3 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40003800 	.word	0x40003800
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48001400 	.word	0x48001400
 80017bc:	48000400 	.word	0x48000400

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_UART_MspInit+0x7c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d127      	bne.n	8001832 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x80>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <HAL_UART_MspInit+0x80>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <HAL_UART_MspInit+0x80>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x80>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_UART_MspInit+0x80>)
 8001800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_UART_MspInit+0x80>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001812:	2330      	movs	r3, #48	; 0x30
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001822:	2307      	movs	r3, #7
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_UART_MspInit+0x84>)
 800182e:	f000 fa9d 	bl	8001d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40013800 	.word	0x40013800
 8001840:	40021000 	.word	0x40021000
 8001844:	48000800 	.word	0x48000800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 if(Timer1 > 0)
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <SysTick_Handler+0x34>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <SysTick_Handler+0x18>
	    Timer1--;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <SysTick_Handler+0x34>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <SysTick_Handler+0x34>)
 80018a6:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <SysTick_Handler+0x38>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <SysTick_Handler+0x2c>
	    Timer2--;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <SysTick_Handler+0x38>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <SysTick_Handler+0x38>)
 80018ba:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 f92c 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000009c 	.word	0x2000009c
 80018c8:	2000009e 	.word	0x2000009e

080018cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
  }

  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e009      	b.n	800192c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd95 	bl	8001450 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	dbf1      	blt.n	8001918 <_write+0x12>
  }
  return len;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <_close>:

int _close(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_isatty>:

int _isatty(int file)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <_sbrk+0x5c>)
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_sbrk+0x60>)
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <_sbrk+0x64>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <_sbrk+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d207      	bcs.n	80019e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d8:	f007 fbdc 	bl	8009194 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	220c      	movs	r2, #12
 80019e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <_sbrk+0x64>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <_sbrk+0x64>)
 80019f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000a000 	.word	0x2000a000
 8001a08:	00000400 	.word	0x00000400
 8001a0c:	20000190 	.word	0x20000190
 8001a10:	20000518 	.word	0x20000518

08001a14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <SystemInit+0x20>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <SystemInit+0x20>)
 8001a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a70 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a3c:	f7ff ffea 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a42:	490d      	ldr	r1, [pc, #52]	; (8001a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <LoopForever+0xe>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a58:	4c0a      	ldr	r4, [pc, #40]	; (8001a84 <LoopForever+0x16>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f007 fb9b 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6a:	f7ff fbd5 	bl	8001218 <main>

08001a6e <LoopForever>:

LoopForever:
    b LoopForever
 8001a6e:	e7fe      	b.n	8001a6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a70:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a7c:	0800a394 	.word	0x0800a394
  ldr r2, =_sbss
 8001a80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a84:	20000518 	.word	0x20000518

08001a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <ADC1_2_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_Init+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_Init+0x28>)
 8001a96:	f043 0310 	orr.w	r3, r3, #16
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f931 	bl	8001d04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	200f      	movs	r0, #15
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fe02 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f93b 	bl	8001d52 <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 f911 	bl	8001d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000004 	.word	0x20000004
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	20000194 	.word	0x20000194

08001b40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000194 	.word	0x20000194

08001b58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000000c 	.word	0x2000000c

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	db0a      	blt.n	8001c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	490c      	ldr	r1, [pc, #48]	; (8001c50 <__NVIC_SetPriority+0x4c>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	0112      	lsls	r2, r2, #4
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c2c:	e00a      	b.n	8001c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4908      	ldr	r1, [pc, #32]	; (8001c54 <__NVIC_SetPriority+0x50>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	3b04      	subs	r3, #4
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000e100 	.word	0xe000e100
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	bf28      	it	cs
 8001c76:	2304      	movcs	r3, #4
 8001c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d902      	bls.n	8001c88 <NVIC_EncodePriority+0x30>
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3b03      	subs	r3, #3
 8001c86:	e000      	b.n	8001c8a <NVIC_EncodePriority+0x32>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	43d9      	mvns	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	4313      	orrs	r3, r2
         );
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd0:	d301      	bcc.n	8001cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00f      	b.n	8001cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <SysTick_Config+0x40>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce4:	f7ff ff8e 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <SysTick_Config+0x40>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SysTick_Config+0x40>)
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	e000e010 	.word	0xe000e010

08001d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff47 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2c:	f7ff ff5c 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	6978      	ldr	r0, [r7, #20]
 8001d38:	f7ff ff8e 	bl	8001c58 <NVIC_EncodePriority>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff ffb0 	bl	8001cc0 <SysTick_Config>
 8001d60:	4603      	mov	r3, r0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e154      	b.n	8002026 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8146 	beq.w	8002020 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a0 	beq.w	8002020 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef8:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f22:	d019      	beq.n	8001f58 <HAL_GPIO_Init+0x1ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_GPIO_Init+0x1e8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2e4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1e0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1dc>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e008      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f48:	2305      	movs	r3, #5
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e004      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	f002 0203 	and.w	r2, r2, #3
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	4093      	lsls	r3, r2
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6a:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc6:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_GPIO_Init+0x2f0>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	f47f aea3 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	48000400 	.word	0x48000400
 8002050:	48000800 	.word	0x48000800
 8002054:	48000c00 	.word	0x48000c00
 8002058:	48001000 	.word	0x48001000
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800207c:	e002      	b.n	8002084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002096:	af00      	add	r7, sp, #0
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f001 b823 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 817d 	beq.w	80023c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020cc:	4bbc      	ldr	r3, [pc, #752]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d00c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d8:	4bb9      	ldr	r3, [pc, #740]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d15c      	bne.n	800219e <HAL_RCC_OscConfig+0x10e>
 80020e4:	4bb6      	ldr	r3, [pc, #728]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d155      	bne.n	800219e <HAL_RCC_OscConfig+0x10e>
 80020f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002106:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_OscConfig+0x94>
 800211e:	4ba8      	ldr	r3, [pc, #672]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e015      	b.n	8002150 <HAL_RCC_OscConfig+0xc0>
 8002124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002128:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002140:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800214c:	4b9c      	ldr	r3, [pc, #624]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002154:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002158:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002164:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 811f 	beq.w	80023c4 <HAL_RCC_OscConfig+0x334>
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8116 	bne.w	80023c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f000 bfaf 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x12e>
 80021b0:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e036      	b.n	800222c <HAL_RCC_OscConfig+0x19c>
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x158>
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a78      	ldr	r2, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e021      	b.n	800222c <HAL_RCC_OscConfig+0x19c>
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x184>
 80021fa:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a70      	ldr	r2, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6d      	ldr	r2, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x19c>
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a69      	ldr	r2, [pc, #420]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a66      	ldr	r2, [pc, #408]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f023 020f 	bic.w	r2, r3, #15
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	495f      	ldr	r1, [pc, #380]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002242:	4313      	orrs	r3, r2
 8002244:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d059      	beq.n	800230a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff fc73 	bl	8001b40 <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fc6e 	bl	8001b40 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b64      	cmp	r3, #100	; 0x64
 800226e:	d902      	bls.n	8002276 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	f000 bf43 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 8002276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800228a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0x218>
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e015      	b.n	80022d4 <HAL_RCC_OscConfig+0x244>
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022e0:	fa92 f2a2 	rbit	r2, r2
 80022e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f042 0220 	orr.w	r2, r2, #32
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f002 021f 	and.w	r2, r2, #31
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ab      	beq.n	8002260 <HAL_RCC_OscConfig+0x1d0>
 8002308:	e05d      	b.n	80023c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7ff fc19 	bl	8001b40 <HAL_GetTick>
 800230e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fc14 	bl	8001b40 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b64      	cmp	r3, #100	; 0x64
 8002322:	d902      	bls.n	800232a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	f000 bee9 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 800232a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800233e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x2cc>
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e015      	b.n	8002388 <HAL_RCC_OscConfig+0x2f8>
 800235c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002360:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002374:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002378:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800238c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002390:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800239c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f002 021f 	and.w	r2, r2, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ab      	bne.n	8002314 <HAL_RCC_OscConfig+0x284>
 80023bc:	e003      	b.n	80023c6 <HAL_RCC_OscConfig+0x336>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 817d 	beq.w	80026d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023dc:	4ba6      	ldr	r3, [pc, #664]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023e8:	4ba3      	ldr	r3, [pc, #652]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d172      	bne.n	80024da <HAL_RCC_OscConfig+0x44a>
 80023f4:	4ba0      	ldr	r3, [pc, #640]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d16c      	bne.n	80024da <HAL_RCC_OscConfig+0x44a>
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002412:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x3a0>
 800242a:	4b93      	ldr	r3, [pc, #588]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x3c8>
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002448:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2202      	movs	r2, #2
 800245a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800245e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002462:	fa92 f2a2 	rbit	r2, r2
 8002466:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800246a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCC_OscConfig+0x410>
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f000 be2e 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b75      	ldr	r3, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	21f8      	movs	r1, #248	; 0xf8
 80024b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024be:	fa91 f1a1 	rbit	r1, r1
 80024c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024ca:	fab1 f181 	clz	r1, r1
 80024ce:	b2c9      	uxtb	r1, r1
 80024d0:	408b      	lsls	r3, r1
 80024d2:	4969      	ldr	r1, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d8:	e0fd      	b.n	80026d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8088 	beq.w	80025fc <HAL_RCC_OscConfig+0x56c>
 80024ec:	2301      	movs	r3, #1
 80024ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800250c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	461a      	mov	r2, r3
 8002514:	2301      	movs	r3, #1
 8002516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fb12 	bl	8001b40 <HAL_GetTick>
 800251c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fb0d 	bl	8001b40 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d902      	bls.n	8002538 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	f000 bde2 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800254a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	095b      	lsrs	r3, r3, #5
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x4d8>
 8002562:	4b45      	ldr	r3, [pc, #276]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e013      	b.n	8002590 <HAL_RCC_OscConfig+0x500>
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800257a:	2302      	movs	r3, #2
 800257c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002580:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	2202      	movs	r2, #2
 8002592:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002596:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800259a:	fa92 f2a2 	rbit	r2, r2
 800259e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025a6:	fab2 f282 	clz	r2, r2
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	f042 0220 	orr.w	r2, r2, #32
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	f002 021f 	and.w	r2, r2, #31
 80025b6:	2101      	movs	r1, #1
 80025b8:	fa01 f202 	lsl.w	r2, r1, r2
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0af      	beq.n	8002522 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	21f8      	movs	r1, #248	; 0xf8
 80025d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025e0:	fa91 f1a1 	rbit	r1, r1
 80025e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025ec:	fab1 f181 	clz	r1, r1
 80025f0:	b2c9      	uxtb	r1, r1
 80025f2:	408b      	lsls	r3, r1
 80025f4:	4920      	ldr	r1, [pc, #128]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
 80025fa:	e06c      	b.n	80026d6 <HAL_RCC_OscConfig+0x646>
 80025fc:	2301      	movs	r3, #1
 80025fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800260e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800261c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	461a      	mov	r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7ff fa8a 	bl	8001b40 <HAL_GetTick>
 800262c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fa85 	bl	8001b40 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d902      	bls.n	8002648 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	f000 bd5a 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 8002648:	2302      	movs	r3, #2
 800264a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800265a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d104      	bne.n	800267c <HAL_RCC_OscConfig+0x5ec>
 8002672:	4b01      	ldr	r3, [pc, #4]	; (8002678 <HAL_RCC_OscConfig+0x5e8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	e015      	b.n	80026a4 <HAL_RCC_OscConfig+0x614>
 8002678:	40021000 	.word	0x40021000
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002694:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026a0:	4bc8      	ldr	r3, [pc, #800]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2202      	movs	r2, #2
 80026a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026ae:	fa92 f2a2 	rbit	r2, r2
 80026b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0220 	orr.w	r2, r2, #32
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ad      	bne.n	8002632 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8110 	beq.w	800290c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d079      	beq.n	80027f0 <HAL_RCC_OscConfig+0x760>
 80026fc:	2301      	movs	r3, #1
 80026fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800270e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4bab      	ldr	r3, [pc, #684]	; (80029c8 <HAL_RCC_OscConfig+0x938>)
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	461a      	mov	r2, r3
 8002722:	2301      	movs	r3, #1
 8002724:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff fa0b 	bl	8001b40 <HAL_GetTick>
 800272a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002730:	f7ff fa06 	bl	8001b40 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d902      	bls.n	8002746 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	f000 bcdb 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002760:	2202      	movs	r2, #2
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f2a3 	rbit	r2, r3
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002784:	2202      	movs	r2, #2
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800279e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a0:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 80027a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027ac:	2102      	movs	r1, #2
 80027ae:	6019      	str	r1, [r3, #0]
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f1a3 	rbit	r1, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027c6:	6019      	str	r1, [r3, #0]
  return result;
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0a0      	beq.n	8002730 <HAL_RCC_OscConfig+0x6a0>
 80027ee:	e08d      	b.n	800290c <HAL_RCC_OscConfig+0x87c>
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800281c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <HAL_RCC_OscConfig+0x938>)
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	461a      	mov	r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff f985 	bl	8001b40 <HAL_GetTick>
 8002836:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff f980 	bl	8001b40 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d902      	bls.n	8002852 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	f000 bc55 	b.w	80030fc <HAL_RCC_OscConfig+0x106c>
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800285a:	2202      	movs	r2, #2
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800287e:	2202      	movs	r2, #2
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028be:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 80028c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028ca:	2102      	movs	r1, #2
 80028cc:	6019      	str	r1, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f1a3 	rbit	r1, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028e4:	6019      	str	r1, [r3, #0]
  return result;
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d197      	bne.n	800283c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 81a1 	beq.w	8002c64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d116      	bne.n	8002962 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	61d3      	str	r3, [r2, #28]
 8002940:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800295a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x93c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11a      	bne.n	80029a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_RCC_OscConfig+0x93c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a16      	ldr	r2, [pc, #88]	; (80029cc <HAL_RCC_OscConfig+0x93c>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7ff f8e1 	bl	8001b40 <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	e009      	b.n	8002998 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7ff f8dc 	bl	8001b40 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	; 0x64
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e3b1      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x93c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ef      	beq.n	8002984 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_OscConfig+0x940>
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a02      	ldr	r2, [pc, #8]	; (80029c4 <HAL_RCC_OscConfig+0x934>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e03c      	b.n	8002a3c <HAL_RCC_OscConfig+0x9ac>
 80029c2:	bf00      	nop
 80029c4:	40021000 	.word	0x40021000
 80029c8:	10908120 	.word	0x10908120
 80029cc:	40007000 	.word	0x40007000
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x96a>
 80029e0:	4bc1      	ldr	r3, [pc, #772]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4ac0      	ldr	r2, [pc, #768]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6213      	str	r3, [r2, #32]
 80029ec:	4bbe      	ldr	r3, [pc, #760]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4abd      	ldr	r2, [pc, #756]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	e020      	b.n	8002a3c <HAL_RCC_OscConfig+0x9ac>
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x994>
 8002a0a:	4bb7      	ldr	r3, [pc, #732]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4ab6      	ldr	r2, [pc, #728]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	4bb4      	ldr	r3, [pc, #720]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4ab3      	ldr	r2, [pc, #716]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x9ac>
 8002a24:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4aaf      	ldr	r2, [pc, #700]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	4bad      	ldr	r3, [pc, #692]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4aac      	ldr	r2, [pc, #688]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8081 	beq.w	8002b50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f877 	bl	8001b40 <HAL_GetTick>
 8002a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7ff f872 	bl	8001b40 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e345      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a78:	2202      	movs	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ab6:	601a      	str	r2, [r3, #0]
  return result;
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ac0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_OscConfig+0xa4c>
 8002ad6:	4b84      	ldr	r3, [pc, #528]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	e013      	b.n	8002b04 <HAL_RCC_OscConfig+0xa74>
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	6011      	str	r1, [r2, #0]
 8002b10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	fa92 f1a2 	rbit	r1, r2
 8002b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b26:	6011      	str	r1, [r2, #0]
  return result;
 8002b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	fab2 f282 	clz	r2, r2
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f002 021f 	and.w	r2, r2, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d084      	beq.n	8002a58 <HAL_RCC_OscConfig+0x9c8>
 8002b4e:	e07f      	b.n	8002c50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fff6 	bl	8001b40 <HAL_GetTick>
 8002b54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fff1 	bl	8001b40 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e2c4      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f2a3 	rbit	r2, r3
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	fa93 f2a3 	rbit	r2, r3
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bb8:	601a      	str	r2, [r3, #0]
  return result;
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_OscConfig+0xb4e>
 8002bd8:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	e013      	b.n	8002c06 <HAL_RCC_OscConfig+0xb76>
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002be6:	2202      	movs	r2, #2
 8002be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c0e:	2102      	movs	r1, #2
 8002c10:	6011      	str	r1, [r2, #0]
 8002c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	fa92 f1a2 	rbit	r1, r2
 8002c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c28:	6011      	str	r1, [r2, #0]
  return result;
 8002c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f002 021f 	and.w	r2, r2, #31
 8002c44:	2101      	movs	r1, #1
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d184      	bne.n	8002b5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d105      	bne.n	8002c64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8242 	beq.w	80030fa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_OscConfig+0xc58>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	f000 8213 	beq.w	80030aa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f040 8162 	bne.w	8002f5a <HAL_RCC_OscConfig+0xeca>
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	fa93 f2a3 	rbit	r2, r3
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cba:	601a      	str	r2, [r3, #0]
  return result;
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ff30 	bl	8001b40 <HAL_GetTick>
 8002ce0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCC_OscConfig+0xc70>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe ff28 	bl	8001b40 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1fd      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d24:	601a      	str	r2, [r3, #0]
  return result;
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_OscConfig+0xcba>
 8002d44:	4bb0      	ldr	r3, [pc, #704]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e027      	b.n	8002d9a <HAL_RCC_OscConfig+0xd0a>
 8002d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	4b9c      	ldr	r3, [pc, #624]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002da2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002da6:	6011      	str	r1, [r2, #0]
 8002da8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	fa92 f1a2 	rbit	r1, r2
 8002db6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dbe:	6011      	str	r1, [r2, #0]
  return result;
 8002dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0220 	orr.w	r2, r2, #32
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d182      	bne.n	8002cec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b88      	ldr	r3, [pc, #544]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	430b      	orrs	r3, r1
 8002e08:	497f      	ldr	r1, [pc, #508]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e32:	601a      	str	r2, [r3, #0]
  return result;
 8002e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fe74 	bl	8001b40 <HAL_GetTick>
 8002e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e5c:	e009      	b.n	8002e72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fe6f 	bl	8001b40 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e144      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ea0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_OscConfig+0xe2c>
 8002eb6:	4b54      	ldr	r3, [pc, #336]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	e027      	b.n	8002f0c <HAL_RCC_OscConfig+0xe7c>
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fa92 f1a2 	rbit	r1, r2
 8002f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f30:	6011      	str	r1, [r2, #0]
  return result;
 8002f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d082      	beq.n	8002e5e <HAL_RCC_OscConfig+0xdce>
 8002f58:	e0cf      	b.n	80030fa <HAL_RCC_OscConfig+0x106a>
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f7e:	601a      	str	r2, [r3, #0]
  return result;
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fdce 	bl	8001b40 <HAL_GetTick>
 8002fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fdc9 	bl	8001b40 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e09e      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fe2:	601a      	str	r2, [r3, #0]
  return result;
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d104      	bne.n	800300c <HAL_RCC_OscConfig+0xf7c>
 8003002:	4b01      	ldr	r3, [pc, #4]	; (8003008 <HAL_RCC_OscConfig+0xf78>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e029      	b.n	800305c <HAL_RCC_OscConfig+0xfcc>
 8003008:	40021000 	.word	0x40021000
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800303a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_RCC_OscConfig+0x1078>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003060:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003068:	6011      	str	r1, [r2, #0]
 800306a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	fa92 f1a2 	rbit	r1, r2
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003080:	6011      	str	r1, [r2, #0]
  return result;
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fab2 f282 	clz	r2, r2
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f042 0220 	orr.w	r2, r2, #32
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f002 021f 	and.w	r2, r2, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d180      	bne.n	8002faa <HAL_RCC_OscConfig+0xf1a>
 80030a8:	e027      	b.n	80030fa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e01e      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_RCC_OscConfig+0x1078>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d001      	beq.n	80030fa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b09e      	sub	sp, #120	; 0x78
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e162      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b90      	ldr	r3, [pc, #576]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d910      	bls.n	8003154 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b8d      	ldr	r3, [pc, #564]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 0207 	bic.w	r2, r3, #7
 800313a:	498b      	ldr	r1, [pc, #556]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e14a      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003160:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	497f      	ldr	r1, [pc, #508]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80dc 	beq.w	8003338 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d13c      	bne.n	8003202 <HAL_RCC_ClockConfig+0xf6>
 8003188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800318c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d102      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xa6>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	e00f      	b.n	80031d2 <HAL_RCC_ClockConfig+0xc6>
 80031b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	667b      	str	r3, [r7, #100]	; 0x64
 80031c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
 80031c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c8:	fa93 f3a3 	rbit	r3, r3
 80031cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80031d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031da:	fa92 f2a2 	rbit	r2, r2
 80031de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f002 021f 	and.w	r2, r2, #31
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d17b      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0f3      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d13c      	bne.n	8003284 <HAL_RCC_ClockConfig+0x178>
 800320a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_RCC_ClockConfig+0x128>
 800322e:	4b4f      	ldr	r3, [pc, #316]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e00f      	b.n	8003254 <HAL_RCC_ClockConfig+0x148>
 8003234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003258:	63ba      	str	r2, [r7, #56]	; 0x38
 800325a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800325c:	fa92 f2a2 	rbit	r2, r2
 8003260:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003264:	fab2 f282 	clz	r2, r2
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	f042 0220 	orr.w	r2, r2, #32
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f002 021f 	and.w	r2, r2, #31
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d13a      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0b2      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
 8003284:	2302      	movs	r3, #2
 8003286:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <HAL_RCC_ClockConfig+0x1a0>
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e00d      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1bc>
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
 80032b8:	2302      	movs	r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2202      	movs	r2, #2
 80032ca:	61ba      	str	r2, [r7, #24]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	fa92 f2a2 	rbit	r2, r2
 80032d2:	617a      	str	r2, [r7, #20]
  return result;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	fab2 f282 	clz	r2, r2
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	f042 0220 	orr.w	r2, r2, #32
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	f002 021f 	and.w	r2, r2, #31
 80032e6:	2101      	movs	r1, #1
 80032e8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e079      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	491a      	ldr	r1, [pc, #104]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fe fc1a 	bl	8001b40 <HAL_GetTick>
 800330c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fc16 	bl	8001b40 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e061      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCC_ClockConfig+0x260>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d214      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4906      	ldr	r1, [pc, #24]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_RCC_ClockConfig+0x25c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e040      	b.n	80033ea <HAL_RCC_ClockConfig+0x2de>
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_ClockConfig+0x2e8>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	491a      	ldr	r1, [pc, #104]	; (80033f4 <HAL_RCC_ClockConfig+0x2e8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_RCC_ClockConfig+0x2e8>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4912      	ldr	r1, [pc, #72]	; (80033f4 <HAL_RCC_ClockConfig+0x2e8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033ae:	f000 f829 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033b2:	4601      	mov	r1, r0
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_RCC_ClockConfig+0x2e8>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033bc:	22f0      	movs	r2, #240	; 0xf0
 80033be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	60fa      	str	r2, [r7, #12]
  return result;
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	fab2 f282 	clz	r2, r2
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	40d3      	lsrs	r3, r2
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x2ec>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	fa21 f303 	lsr.w	r3, r1, r3
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_RCC_ClockConfig+0x2f0>)
 80033dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_RCC_ClockConfig+0x2f4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fb68 	bl	8001ab8 <HAL_InitTick>
  
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3778      	adds	r7, #120	; 0x78
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08009dd0 	.word	0x08009dd0
 80033fc:	20000004 	.word	0x20000004
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_GetSysClockFreq+0x94>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d002      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x30>
 800342e:	2b08      	cmp	r3, #8
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x36>
 8003432:	e026      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_GetSysClockFreq+0x98>)
 8003436:	613b      	str	r3, [r7, #16]
      break;
 8003438:	e026      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0c9b      	lsrs	r3, r3, #18
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <HAL_RCC_GetSysClockFreq+0x94>)
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCC_GetSysClockFreq+0x98>)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	fbb2 f2f3 	udiv	r2, r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e004      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	613b      	str	r3, [r7, #16]
      break;
 8003480:	e002      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetSysClockFreq+0x98>)
 8003484:	613b      	str	r3, [r7, #16]
      break;
 8003486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003488:	693b      	ldr	r3, [r7, #16]
}
 800348a:	4618      	mov	r0, r3
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	08009de8 	.word	0x08009de8
 80034a4:	08009df8 	.word	0x08009df8
 80034a8:	003d0900 	.word	0x003d0900

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034ca:	f7ff ffef 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034ce:	4601      	mov	r1, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	fa92 f2a2 	rbit	r2, r2
 80034e4:	603a      	str	r2, [r7, #0]
  return result;
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	40d3      	lsrs	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034f2:	5cd3      	ldrb	r3, [r2, r3]
 80034f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	08009de0 	.word	0x08009de0

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800350e:	f7ff ffcd 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 8003512:	4601      	mov	r1, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800351c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	603a      	str	r2, [r7, #0]
  return result;
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	fab2 f282 	clz	r2, r2
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	40d3      	lsrs	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003536:	5cd3      	ldrb	r3, [r2, r3]
 8003538:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	08009de0 	.word	0x08009de0

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b092      	sub	sp, #72	; 0x48
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80d4 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003570:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10e      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a41      	ldr	r2, [pc, #260]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fac5 	bl	8001b40 <HAL_GetTick>
 80035b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe fac1 	bl	8001b40 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e169      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8084 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d07c      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	461a      	mov	r2, r3
 8003622:	2301      	movs	r3, #1
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe fa71 	bl	8001b40 <HAL_GetTick>
 800365e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe fa6d 	bl	8001b40 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e113      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	2302      	movs	r3, #2
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	61fb      	str	r3, [r7, #28]
  return result;
 8003690:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d108      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036a6:	4b01      	ldr	r3, [pc, #4]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	e00d      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	10908100 	.word	0x10908100
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	4b78      	ldr	r3, [pc, #480]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2202      	movs	r2, #2
 80036ca:	613a      	str	r2, [r7, #16]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	60fa      	str	r2, [r7, #12]
  return result;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0b7      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036f2:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	496a      	ldr	r1, [pc, #424]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003700:	4313      	orrs	r3, r2
 8003702:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	495d      	ldr	r1, [pc, #372]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003732:	4313      	orrs	r3, r2
 8003734:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4956      	ldr	r1, [pc, #344]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003760:	4b51      	ldr	r3, [pc, #324]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	494e      	ldr	r1, [pc, #312]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f023 0210 	bic.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4947      	ldr	r1, [pc, #284]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800379c:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	493f      	ldr	r1, [pc, #252]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f023 0220 	bic.w	r2, r3, #32
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	4938      	ldr	r1, [pc, #224]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4930      	ldr	r1, [pc, #192]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f6:	4b2c      	ldr	r3, [pc, #176]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	4929      	ldr	r1, [pc, #164]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003814:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	4921      	ldr	r1, [pc, #132]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003832:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	491a      	ldr	r1, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003840:	4313      	orrs	r3, r2
 8003842:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	4912      	ldr	r1, [pc, #72]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	490b      	ldr	r1, [pc, #44]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	4903      	ldr	r1, [pc, #12]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3748      	adds	r7, #72	; 0x48
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40021000 	.word	0x40021000

080038ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e09d      	b.n	80039fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d009      	beq.n	80038e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
 80038d6:	e005      	b.n	80038e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fefa 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003924:	d902      	bls.n	800392c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e002      	b.n	8003932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800392c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800393a:	d007      	beq.n	800394c <HAL_SPI_Init+0xa0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003944:	d002      	beq.n	800394c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	f003 0204 	and.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039c8:	ea42 0103 	orr.w	r1, r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_SPI_Transmit+0x22>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e15f      	b.n	8003ce4 <HAL_SPI_Transmit+0x2e2>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2c:	f7fe f888 	bl	8001b40 <HAL_GetTick>
 8003a30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a46:	e148      	b.n	8003cda <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Transmit+0x52>
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a58:	e13f      	b.n	8003cda <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d007      	beq.n	8003ae4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aec:	d94f      	bls.n	8003b8e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_Transmit+0xfa>
 8003af6:	8afb      	ldrh	r3, [r7, #22]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d142      	bne.n	8003b82 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b20:	e02f      	b.n	8003b82 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d112      	bne.n	8003b56 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	1c9a      	adds	r2, r3, #2
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b54:	e015      	b.n	8003b82 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b56:	f7fd fff3 	bl	8001b40 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d803      	bhi.n	8003b6e <HAL_SPI_Transmit+0x16c>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_Transmit+0x172>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003b80:	e0ab      	b.n	8003cda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ca      	bne.n	8003b22 <HAL_SPI_Transmit+0x120>
 8003b8c:	e080      	b.n	8003c90 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_SPI_Transmit+0x19a>
 8003b96:	8afb      	ldrh	r3, [r7, #22]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d174      	bne.n	8003c86 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d912      	bls.n	8003bcc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b02      	subs	r3, #2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bca:	e05c      	b.n	8003c86 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bf2:	e048      	b.n	8003c86 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d12b      	bne.n	8003c5a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d912      	bls.n	8003c32 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b02      	subs	r3, #2
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c30:	e029      	b.n	8003c86 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c58:	e015      	b.n	8003c86 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5a:	f7fd ff71 	bl	8001b40 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d803      	bhi.n	8003c72 <HAL_SPI_Transmit+0x270>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Transmit+0x276>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003c84:	e029      	b.n	8003cda <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1b1      	bne.n	8003bf4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	6839      	ldr	r1, [r7, #0]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fb69 	bl	800436c <SPI_EndRxTxTransaction>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	613b      	str	r3, [r7, #16]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	77fb      	strb	r3, [r7, #31]
 8003cd0:	e003      	b.n	8003cda <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x26>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e20a      	b.n	8004128 <HAL_SPI_TransmitReceive+0x43c>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d1a:	f7fd ff11 	bl	8001b40 <HAL_GetTick>
 8003d1e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d26:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d2e:	887b      	ldrh	r3, [r7, #2]
 8003d30:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d36:	7efb      	ldrb	r3, [r7, #27]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00e      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x6e>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d106      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x66>
 8003d4c:	7efb      	ldrb	r3, [r7, #27]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d58:	e1e0      	b.n	800411c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x80>
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d72:	e1d3      	b.n	800411c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d003      	beq.n	8003d88 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2205      	movs	r2, #5
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dca:	d802      	bhi.n	8003dd2 <HAL_SPI_TransmitReceive+0xe6>
 8003dcc:	8a3b      	ldrh	r3, [r7, #16]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d908      	bls.n	8003de4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	e007      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d007      	beq.n	8003e12 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e1a:	f240 8081 	bls.w	8003f20 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x140>
 8003e26:	8a7b      	ldrh	r3, [r7, #18]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d16d      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e50:	e05a      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d11b      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x1ac>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x1ac>
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d113      	bne.n	8003e98 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	1c9a      	adds	r2, r3, #2
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x1f4>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ee0:	f7fd fe2e 	bl	8001b40 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d80b      	bhi.n	8003f08 <HAL_SPI_TransmitReceive+0x21c>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d007      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003f06:	e109      	b.n	800411c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d19f      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x166>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d199      	bne.n	8003e52 <HAL_SPI_TransmitReceive+0x166>
 8003f1e:	e0e3      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x244>
 8003f28:	8a7b      	ldrh	r3, [r7, #18]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f040 80cf 	bne.w	80040ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d912      	bls.n	8003f60 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	881a      	ldrh	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b02      	subs	r3, #2
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f5e:	e0b6      	b.n	80040ce <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f86:	e0a2      	b.n	80040ce <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d134      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x314>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02f      	beq.n	8004000 <HAL_SPI_TransmitReceive+0x314>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d12c      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d912      	bls.n	8003fd6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	881a      	ldrh	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b02      	subs	r3, #2
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fd4:	e012      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d148      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x3b4>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d042      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d923      	bls.n	800406e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	b292      	uxth	r2, r2
 8004032:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b02      	subs	r3, #2
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d81f      	bhi.n	800409c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e016      	b.n	800409c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f103 020c 	add.w	r2, r3, #12
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800409c:	2301      	movs	r3, #1
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040a0:	f7fd fd4e 	bl	8001b40 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d803      	bhi.n	80040b8 <HAL_SPI_TransmitReceive+0x3cc>
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d102      	bne.n	80040be <HAL_SPI_TransmitReceive+0x3d2>
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80040cc:	e026      	b.n	800411c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af57 	bne.w	8003f88 <HAL_SPI_TransmitReceive+0x29c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f47f af50 	bne.w	8003f88 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f93d 	bl	800436c <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e003      	b.n	800411c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004140:	f7fd fcfe 	bl	8001b40 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004150:	f7fd fcf6 	bl	8001b40 <HAL_GetTick>
 8004154:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004156:	4b39      	ldr	r3, [pc, #228]	; (800423c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	0d1b      	lsrs	r3, r3, #20
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004166:	e054      	b.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d050      	beq.n	8004212 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004170:	f7fd fce6 	bl	8001b40 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	429a      	cmp	r2, r3
 800417e:	d902      	bls.n	8004186 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d13d      	bne.n	8004202 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d111      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d004      	beq.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d107      	bne.n	80041c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041cc:	d10f      	bne.n	80041ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e017      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3b01      	subs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	429a      	cmp	r2, r3
 8004220:	bf0c      	ite	eq
 8004222:	2301      	moveq	r3, #1
 8004224:	2300      	movne	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	429a      	cmp	r2, r3
 800422e:	d19b      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000004 	.word	0x20000004

08004240 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004252:	f7fd fc75 	bl	8001b40 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	4413      	add	r3, r2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004262:	f7fd fc6d 	bl	8001b40 <HAL_GetTick>
 8004266:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004270:	4b3d      	ldr	r3, [pc, #244]	; (8004368 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00da      	lsls	r2, r3, #3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	0d1b      	lsrs	r3, r3, #20
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004288:	e060      	b.n	800434c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004290:	d107      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d050      	beq.n	800434c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042aa:	f7fd fc49 	bl	8001b40 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d902      	bls.n	80042c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13d      	bne.n	800433c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d8:	d111      	bne.n	80042fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d004      	beq.n	80042ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ec:	d107      	bne.n	80042fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	d10f      	bne.n	8004328 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004326:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e010      	b.n	800435e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3b01      	subs	r3, #1
 800434a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d196      	bne.n	800428a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3728      	adds	r7, #40	; 0x28
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000004 	.word	0x20000004

0800436c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff ff5b 	bl	8004240 <SPI_WaitFifoStateUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e027      	b.n	80043f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fec0 	bl	8004130 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e014      	b.n	80043f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ff34 	bl	8004240 <SPI_WaitFifoStateUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e000      	b.n	80043f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e040      	b.n	800448c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fd f9d0 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	; 0x24
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa86 	bl	8004950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f8af 	bl	80045a8 <UART_SetConfig>
 800444a:	4603      	mov	r3, r0
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e01b      	b.n	800448c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb05 	bl	8004a94 <UART_CheckIdleState>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d178      	bne.n	800459e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Transmit+0x24>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e071      	b.n	80045a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2221      	movs	r2, #33	; 0x21
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ca:	f7fd fb39 	bl	8001b40 <HAL_GetTick>
 80044ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d108      	bne.n	80044fc <HAL_UART_Transmit+0x68>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e003      	b.n	8004504 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004504:	e030      	b.n	8004568 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fb67 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e03c      	b.n	80045a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004538:	b292      	uxth	r2, r2
 800453a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	3302      	adds	r3, #2
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e008      	b.n	8004556 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b292      	uxth	r2, r2
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1c8      	bne.n	8004506 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb30 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e005      	b.n	80045a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	430a      	orrs	r2, r1
 800461c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4aa7      	ldr	r2, [pc, #668]	; (80048c0 <UART_SetConfig+0x318>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d120      	bne.n	800466a <UART_SetConfig+0xc2>
 8004628:	4ba6      	ldr	r3, [pc, #664]	; (80048c4 <UART_SetConfig+0x31c>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b03      	cmp	r3, #3
 8004632:	d817      	bhi.n	8004664 <UART_SetConfig+0xbc>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x94>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004659 	.word	0x08004659
 8004644:	0800465f 	.word	0x0800465f
 8004648:	08004653 	.word	0x08004653
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e0b5      	b.n	80047be <UART_SetConfig+0x216>
 8004652:	2302      	movs	r3, #2
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e0b2      	b.n	80047be <UART_SetConfig+0x216>
 8004658:	2304      	movs	r3, #4
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0af      	b.n	80047be <UART_SetConfig+0x216>
 800465e:	2308      	movs	r3, #8
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0ac      	b.n	80047be <UART_SetConfig+0x216>
 8004664:	2310      	movs	r3, #16
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0a9      	b.n	80047be <UART_SetConfig+0x216>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a96      	ldr	r2, [pc, #600]	; (80048c8 <UART_SetConfig+0x320>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d124      	bne.n	80046be <UART_SetConfig+0x116>
 8004674:	4b93      	ldr	r3, [pc, #588]	; (80048c4 <UART_SetConfig+0x31c>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800467c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004680:	d011      	beq.n	80046a6 <UART_SetConfig+0xfe>
 8004682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004686:	d817      	bhi.n	80046b8 <UART_SetConfig+0x110>
 8004688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800468c:	d011      	beq.n	80046b2 <UART_SetConfig+0x10a>
 800468e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004692:	d811      	bhi.n	80046b8 <UART_SetConfig+0x110>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <UART_SetConfig+0xf8>
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d006      	beq.n	80046ac <UART_SetConfig+0x104>
 800469e:	e00b      	b.n	80046b8 <UART_SetConfig+0x110>
 80046a0:	2300      	movs	r3, #0
 80046a2:	77fb      	strb	r3, [r7, #31]
 80046a4:	e08b      	b.n	80047be <UART_SetConfig+0x216>
 80046a6:	2302      	movs	r3, #2
 80046a8:	77fb      	strb	r3, [r7, #31]
 80046aa:	e088      	b.n	80047be <UART_SetConfig+0x216>
 80046ac:	2304      	movs	r3, #4
 80046ae:	77fb      	strb	r3, [r7, #31]
 80046b0:	e085      	b.n	80047be <UART_SetConfig+0x216>
 80046b2:	2308      	movs	r3, #8
 80046b4:	77fb      	strb	r3, [r7, #31]
 80046b6:	e082      	b.n	80047be <UART_SetConfig+0x216>
 80046b8:	2310      	movs	r3, #16
 80046ba:	77fb      	strb	r3, [r7, #31]
 80046bc:	e07f      	b.n	80047be <UART_SetConfig+0x216>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a82      	ldr	r2, [pc, #520]	; (80048cc <UART_SetConfig+0x324>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d124      	bne.n	8004712 <UART_SetConfig+0x16a>
 80046c8:	4b7e      	ldr	r3, [pc, #504]	; (80048c4 <UART_SetConfig+0x31c>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80046d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046d4:	d011      	beq.n	80046fa <UART_SetConfig+0x152>
 80046d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046da:	d817      	bhi.n	800470c <UART_SetConfig+0x164>
 80046dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046e0:	d011      	beq.n	8004706 <UART_SetConfig+0x15e>
 80046e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046e6:	d811      	bhi.n	800470c <UART_SetConfig+0x164>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <UART_SetConfig+0x14c>
 80046ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046f0:	d006      	beq.n	8004700 <UART_SetConfig+0x158>
 80046f2:	e00b      	b.n	800470c <UART_SetConfig+0x164>
 80046f4:	2300      	movs	r3, #0
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e061      	b.n	80047be <UART_SetConfig+0x216>
 80046fa:	2302      	movs	r3, #2
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e05e      	b.n	80047be <UART_SetConfig+0x216>
 8004700:	2304      	movs	r3, #4
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e05b      	b.n	80047be <UART_SetConfig+0x216>
 8004706:	2308      	movs	r3, #8
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e058      	b.n	80047be <UART_SetConfig+0x216>
 800470c:	2310      	movs	r3, #16
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e055      	b.n	80047be <UART_SetConfig+0x216>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <UART_SetConfig+0x328>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d124      	bne.n	8004766 <UART_SetConfig+0x1be>
 800471c:	4b69      	ldr	r3, [pc, #420]	; (80048c4 <UART_SetConfig+0x31c>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004728:	d011      	beq.n	800474e <UART_SetConfig+0x1a6>
 800472a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800472e:	d817      	bhi.n	8004760 <UART_SetConfig+0x1b8>
 8004730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004734:	d011      	beq.n	800475a <UART_SetConfig+0x1b2>
 8004736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800473a:	d811      	bhi.n	8004760 <UART_SetConfig+0x1b8>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <UART_SetConfig+0x1a0>
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004744:	d006      	beq.n	8004754 <UART_SetConfig+0x1ac>
 8004746:	e00b      	b.n	8004760 <UART_SetConfig+0x1b8>
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e037      	b.n	80047be <UART_SetConfig+0x216>
 800474e:	2302      	movs	r3, #2
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e034      	b.n	80047be <UART_SetConfig+0x216>
 8004754:	2304      	movs	r3, #4
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e031      	b.n	80047be <UART_SetConfig+0x216>
 800475a:	2308      	movs	r3, #8
 800475c:	77fb      	strb	r3, [r7, #31]
 800475e:	e02e      	b.n	80047be <UART_SetConfig+0x216>
 8004760:	2310      	movs	r3, #16
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e02b      	b.n	80047be <UART_SetConfig+0x216>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <UART_SetConfig+0x32c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d124      	bne.n	80047ba <UART_SetConfig+0x212>
 8004770:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <UART_SetConfig+0x31c>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004778:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800477c:	d011      	beq.n	80047a2 <UART_SetConfig+0x1fa>
 800477e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004782:	d817      	bhi.n	80047b4 <UART_SetConfig+0x20c>
 8004784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004788:	d011      	beq.n	80047ae <UART_SetConfig+0x206>
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478e:	d811      	bhi.n	80047b4 <UART_SetConfig+0x20c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <UART_SetConfig+0x1f4>
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d006      	beq.n	80047a8 <UART_SetConfig+0x200>
 800479a:	e00b      	b.n	80047b4 <UART_SetConfig+0x20c>
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e00d      	b.n	80047be <UART_SetConfig+0x216>
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
 80047a6:	e00a      	b.n	80047be <UART_SetConfig+0x216>
 80047a8:	2304      	movs	r3, #4
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e007      	b.n	80047be <UART_SetConfig+0x216>
 80047ae:	2308      	movs	r3, #8
 80047b0:	77fb      	strb	r3, [r7, #31]
 80047b2:	e004      	b.n	80047be <UART_SetConfig+0x216>
 80047b4:	2310      	movs	r3, #16
 80047b6:	77fb      	strb	r3, [r7, #31]
 80047b8:	e001      	b.n	80047be <UART_SetConfig+0x216>
 80047ba:	2310      	movs	r3, #16
 80047bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c6:	d15b      	bne.n	8004880 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80047c8:	7ffb      	ldrb	r3, [r7, #31]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d827      	bhi.n	800481e <UART_SetConfig+0x276>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x22c>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	08004801 	.word	0x08004801
 80047dc:	08004809 	.word	0x08004809
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	0800481f 	.word	0x0800481f
 80047f0:	0800481f 	.word	0x0800481f
 80047f4:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f8:	f7fe fe64 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 80047fc:	61b8      	str	r0, [r7, #24]
        break;
 80047fe:	e013      	b.n	8004828 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fe fe82 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8004804:	61b8      	str	r0, [r7, #24]
        break;
 8004806:	e00f      	b.n	8004828 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <UART_SetConfig+0x330>)
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e00c      	b.n	8004828 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7fe fdf9 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8004812:	61b8      	str	r0, [r7, #24]
        break;
 8004814:	e008      	b.n	8004828 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e004      	b.n	8004828 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	77bb      	strb	r3, [r7, #30]
        break;
 8004826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8082 	beq.w	8004934 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	005a      	lsls	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	441a      	add	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d916      	bls.n	800487a <UART_SetConfig+0x2d2>
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004852:	d212      	bcs.n	800487a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f023 030f 	bic.w	r3, r3, #15
 800485c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	b29b      	uxth	r3, r3
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	b29a      	uxth	r2, r3
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	4313      	orrs	r3, r2
 800486e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	89fa      	ldrh	r2, [r7, #14]
 8004876:	60da      	str	r2, [r3, #12]
 8004878:	e05c      	b.n	8004934 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	77bb      	strb	r3, [r7, #30]
 800487e:	e059      	b.n	8004934 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	2b08      	cmp	r3, #8
 8004884:	d835      	bhi.n	80048f2 <UART_SetConfig+0x34a>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x2e4>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048dd 	.word	0x080048dd
 8004898:	080048f3 	.word	0x080048f3
 800489c:	080048e3 	.word	0x080048e3
 80048a0:	080048f3 	.word	0x080048f3
 80048a4:	080048f3 	.word	0x080048f3
 80048a8:	080048f3 	.word	0x080048f3
 80048ac:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe fe08 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 80048b4:	61b8      	str	r0, [r7, #24]
        break;
 80048b6:	e021      	b.n	80048fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fe fe26 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 80048bc:	61b8      	str	r0, [r7, #24]
        break;
 80048be:	e01d      	b.n	80048fc <UART_SetConfig+0x354>
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40004400 	.word	0x40004400
 80048cc:	40004800 	.word	0x40004800
 80048d0:	40004c00 	.word	0x40004c00
 80048d4:	40005000 	.word	0x40005000
 80048d8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <UART_SetConfig+0x3a4>)
 80048de:	61bb      	str	r3, [r7, #24]
        break;
 80048e0:	e00c      	b.n	80048fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fd8f 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80048e6:	61b8      	str	r0, [r7, #24]
        break;
 80048e8:	e008      	b.n	80048fc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	61bb      	str	r3, [r7, #24]
        break;
 80048f0:	e004      	b.n	80048fc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	77bb      	strb	r3, [r7, #30]
        break;
 80048fa:	bf00      	nop
    }

    if (pclk != 0U)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085a      	lsrs	r2, r3, #1
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	441a      	add	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b0f      	cmp	r3, #15
 800491a:	d909      	bls.n	8004930 <UART_SetConfig+0x388>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d205      	bcs.n	8004930 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e001      	b.n	8004934 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004940:	7fbb      	ldrb	r3, [r7, #30]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	007a1200 	.word	0x007a1200

08004950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d10a      	bne.n	8004a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b098      	sub	sp, #96	; 0x60
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004aa4:	f7fd f84c 	bl	8001b40 <HAL_GetTick>
 8004aa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d12e      	bne.n	8004b16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f88c 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d021      	beq.n	8004b16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
 8004af2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e6      	bne.n	8004ad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e062      	b.n	8004bdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d149      	bne.n	8004bb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f856 	bl	8004be4 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d03c      	beq.n	8004bb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e6      	bne.n	8004b3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0301 	bic.w	r3, r3, #1
 8004b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b90:	61fa      	str	r2, [r7, #28]
 8004b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	69b9      	ldr	r1, [r7, #24]
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e011      	b.n	8004bdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3758      	adds	r7, #88	; 0x58
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	e04f      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d04b      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fc ff9f 	bl	8001b40 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e04e      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d037      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	d034      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d031      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d110      	bne.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2208      	movs	r2, #8
 8004c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f838 	bl	8004cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2208      	movs	r2, #8
 8004c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e029      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d111      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f81e 	bl	8004cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e00f      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d0a0      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b095      	sub	sp, #84	; 0x54
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d118      	bne.n	8004d66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d7a:	bf00      	nop
 8004d7c:	3754      	adds	r7, #84	; 0x54
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d8c:	4904      	ldr	r1, [pc, #16]	; (8004da0 <MX_FATFS_Init+0x18>)
 8004d8e:	4805      	ldr	r0, [pc, #20]	; (8004da4 <MX_FATFS_Init+0x1c>)
 8004d90:	f003 ff30 	bl	8008bf4 <FATFS_LinkDriver>
 8004d94:	4603      	mov	r3, r0
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <MX_FATFS_Init+0x20>)
 8004d9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	2000019c 	.word	0x2000019c
 8004da4:	20000010 	.word	0x20000010
 8004da8:	20000198 	.word	0x20000198

08004dac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004db0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	  return SD_disk_initialize(pdrv);
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb ff0f 	bl	8000bec <SD_disk_initialize>
 8004dce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb ffe7 	bl	8000db8 <SD_disk_status>
 8004dea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	 return SD_disk_read(pdrv, buff, sector, count);
 8004e04:	7bf8      	ldrb	r0, [r7, #15]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	f7fb ffea 	bl	8000de4 <SD_disk_read>
 8004e10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	4603      	mov	r3, r0
 8004e28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	  return SD_disk_write(pdrv, buff, sector, count);
 8004e2a:	7bf8      	ldrb	r0, [r7, #15]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	f7fc f841 	bl	8000eb8 <SD_disk_write>
 8004e36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	603a      	str	r2, [r7, #0]
 8004e4a:	71fb      	strb	r3, [r7, #7]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	  return SD_disk_ioctl(pdrv, cmd, buff);
 8004e50:	79b9      	ldrb	r1, [r7, #6]
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc f8b2 	bl	8000fc0 <SD_disk_ioctl>
 8004e5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <disk_status+0x30>)
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	79fa      	ldrb	r2, [r7, #7]
 8004e80:	4905      	ldr	r1, [pc, #20]	; (8004e98 <disk_status+0x30>)
 8004e82:	440a      	add	r2, r1
 8004e84:	7a12      	ldrb	r2, [r2, #8]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4798      	blx	r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	200003c0 	.word	0x200003c0

08004e9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	4a0d      	ldr	r2, [pc, #52]	; (8004ee4 <disk_initialize+0x48>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <disk_initialize+0x48>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <disk_initialize+0x48>)
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	79fa      	ldrb	r2, [r7, #7]
 8004eca:	4906      	ldr	r1, [pc, #24]	; (8004ee4 <disk_initialize+0x48>)
 8004ecc:	440a      	add	r2, r1
 8004ece:	7a12      	ldrb	r2, [r2, #8]
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200003c0 	.word	0x200003c0

08004ee8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <disk_read+0x3c>)
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	689c      	ldr	r4, [r3, #8]
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	4a07      	ldr	r2, [pc, #28]	; (8004f24 <disk_read+0x3c>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	7a18      	ldrb	r0, [r3, #8]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	47a0      	blx	r4
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200003c0 	.word	0x200003c0

08004f28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <disk_write+0x3c>)
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68dc      	ldr	r4, [r3, #12]
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <disk_write+0x3c>)
 8004f48:	4413      	add	r3, r2
 8004f4a:	7a18      	ldrb	r0, [r3, #8]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	47a0      	blx	r4
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd90      	pop	{r4, r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200003c0 	.word	0x200003c0

08004f68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	603a      	str	r2, [r7, #0]
 8004f72:	71fb      	strb	r3, [r7, #7]
 8004f74:	460b      	mov	r3, r1
 8004f76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <disk_ioctl+0x38>)
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	79fa      	ldrb	r2, [r7, #7]
 8004f86:	4906      	ldr	r1, [pc, #24]	; (8004fa0 <disk_ioctl+0x38>)
 8004f88:	440a      	add	r2, r1
 8004f8a:	7a10      	ldrb	r0, [r2, #8]
 8004f8c:	79b9      	ldrb	r1, [r7, #6]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	4798      	blx	r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200003c0 	.word	0x200003c0

08004fa4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004fb8:	e007      	b.n	8004fca <mem_cpy+0x26>
		*d++ = *s++;
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	1c53      	adds	r3, r2, #1
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	6179      	str	r1, [r7, #20]
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	1e5a      	subs	r2, r3, #1
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f2      	bne.n	8004fba <mem_cpy+0x16>
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004ff2:	e005      	b.n	8005000 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	617a      	str	r2, [r7, #20]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1e5a      	subs	r2, r3, #1
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f4      	bne.n	8004ff4 <mem_set+0x12>
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005030:	bf00      	nop
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00d      	beq.n	8005058 <mem_cmp+0x40>
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	61fa      	str	r2, [r7, #28]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	61ba      	str	r2, [r7, #24]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	1acb      	subs	r3, r1, r3
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ec      	beq.n	8005032 <mem_cmp+0x1a>
	return r;
 8005058:	697b      	ldr	r3, [r7, #20]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005070:	e002      	b.n	8005078 <chk_chr+0x12>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3301      	adds	r3, #1
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <chk_chr+0x26>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	4293      	cmp	r3, r2
 800508a:	d1f2      	bne.n	8005072 <chk_chr+0xc>
	return *str;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	781b      	ldrb	r3, [r3, #0]
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e03b      	b.n	8005128 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80050b0:	4931      	ldr	r1, [pc, #196]	; (8005178 <chk_lock+0xdc>)
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02c      	beq.n	800511e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80050c4:	492c      	ldr	r1, [pc, #176]	; (8005178 <chk_lock+0xdc>)
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d120      	bne.n	8005122 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80050e0:	4925      	ldr	r1, [pc, #148]	; (8005178 <chk_lock+0xdc>)
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4613      	mov	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3304      	adds	r3, #4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d111      	bne.n	8005122 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80050fe:	491e      	ldr	r1, [pc, #120]	; (8005178 <chk_lock+0xdc>)
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3308      	adds	r3, #8
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005118:	429a      	cmp	r2, r3
 800511a:	d102      	bne.n	8005122 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800511c:	e007      	b.n	800512e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d9c0      	bls.n	80050b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d109      	bne.n	8005148 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <chk_lock+0xa4>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d101      	bne.n	8005144 <chk_lock+0xa8>
 8005140:	2300      	movs	r3, #0
 8005142:	e013      	b.n	800516c <chk_lock+0xd0>
 8005144:	2312      	movs	r3, #18
 8005146:	e011      	b.n	800516c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <chk_lock+0xca>
 800514e:	490a      	ldr	r1, [pc, #40]	; (8005178 <chk_lock+0xdc>)
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	330a      	adds	r3, #10
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005164:	d101      	bne.n	800516a <chk_lock+0xce>
 8005166:	2310      	movs	r3, #16
 8005168:	e000      	b.n	800516c <chk_lock+0xd0>
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	200001a8 	.word	0x200001a8

0800517c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	e002      	b.n	800518e <enq_lock+0x12>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3301      	adds	r3, #1
 800518c:	607b      	str	r3, [r7, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d809      	bhi.n	80051a8 <enq_lock+0x2c>
 8005194:	490a      	ldr	r1, [pc, #40]	; (80051c0 <enq_lock+0x44>)
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ef      	bne.n	8005188 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	200001a8 	.word	0x200001a8

080051c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e02e      	b.n	8005232 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80051d4:	4959      	ldr	r1, [pc, #356]	; (800533c <inc_lock+0x178>)
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4613      	mov	r3, r2
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d11d      	bne.n	800522c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80051f0:	4952      	ldr	r1, [pc, #328]	; (800533c <inc_lock+0x178>)
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	3304      	adds	r3, #4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005208:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800520a:	429a      	cmp	r2, r3
 800520c:	d10e      	bne.n	800522c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800520e:	494b      	ldr	r1, [pc, #300]	; (800533c <inc_lock+0x178>)
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3308      	adds	r3, #8
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005226:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005228:	429a      	cmp	r2, r3
 800522a:	d006      	beq.n	800523a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d9cd      	bls.n	80051d4 <inc_lock+0x10>
 8005238:	e000      	b.n	800523c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800523a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d148      	bne.n	80052d4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	e002      	b.n	800524e <inc_lock+0x8a>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d809      	bhi.n	8005268 <inc_lock+0xa4>
 8005254:	4939      	ldr	r1, [pc, #228]	; (800533c <inc_lock+0x178>)
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ef      	bne.n	8005248 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d101      	bne.n	8005272 <inc_lock+0xae>
 800526e:	2300      	movs	r3, #0
 8005270:	e05d      	b.n	800532e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	4830      	ldr	r0, [pc, #192]	; (800533c <inc_lock+0x178>)
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4403      	add	r3, r0
 8005288:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	482a      	ldr	r0, [pc, #168]	; (800533c <inc_lock+0x178>)
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4403      	add	r3, r0
 80052a0:	3304      	adds	r3, #4
 80052a2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052aa:	88d8      	ldrh	r0, [r3, #6]
 80052ac:	4923      	ldr	r1, [pc, #140]	; (800533c <inc_lock+0x178>)
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	3308      	adds	r3, #8
 80052bc:	4602      	mov	r2, r0
 80052be:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80052c0:	491e      	ldr	r1, [pc, #120]	; (800533c <inc_lock+0x178>)
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	330a      	adds	r3, #10
 80052d0:	2200      	movs	r2, #0
 80052d2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <inc_lock+0x130>
 80052da:	4918      	ldr	r1, [pc, #96]	; (800533c <inc_lock+0x178>)
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	330a      	adds	r3, #10
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <inc_lock+0x130>
 80052f0:	2300      	movs	r3, #0
 80052f2:	e01c      	b.n	800532e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <inc_lock+0x14e>
 80052fa:	4910      	ldr	r1, [pc, #64]	; (800533c <inc_lock+0x178>)
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4613      	mov	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	330a      	adds	r3, #10
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	3301      	adds	r3, #1
 800530e:	b299      	uxth	r1, r3
 8005310:	e001      	b.n	8005316 <inc_lock+0x152>
 8005312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005316:	4809      	ldr	r0, [pc, #36]	; (800533c <inc_lock+0x178>)
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4613      	mov	r3, r2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4403      	add	r3, r0
 8005324:	330a      	adds	r3, #10
 8005326:	460a      	mov	r2, r1
 8005328:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	200001a8 	.word	0x200001a8

08005340 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	607b      	str	r3, [r7, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d82e      	bhi.n	80053b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8005354:	491b      	ldr	r1, [pc, #108]	; (80053c4 <dec_lock+0x84>)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	330a      	adds	r3, #10
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d101      	bne.n	8005374 <dec_lock+0x34>
 8005370:	2300      	movs	r3, #0
 8005372:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <dec_lock+0x40>
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	3b01      	subs	r3, #1
 800537e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005380:	4910      	ldr	r1, [pc, #64]	; (80053c4 <dec_lock+0x84>)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	330a      	adds	r3, #10
 8005390:	89fa      	ldrh	r2, [r7, #14]
 8005392:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <dec_lock+0x6c>
 800539a:	490a      	ldr	r1, [pc, #40]	; (80053c4 <dec_lock+0x84>)
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	737b      	strb	r3, [r7, #13]
 80053b0:	e001      	b.n	80053b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80053b2:	2302      	movs	r3, #2
 80053b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80053b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	200001a8 	.word	0x200001a8

080053c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e016      	b.n	8005404 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80053d6:	4910      	ldr	r1, [pc, #64]	; (8005418 <clear_lock+0x50>)
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d108      	bne.n	80053fe <clear_lock+0x36>
 80053ec:	490a      	ldr	r1, [pc, #40]	; (8005418 <clear_lock+0x50>)
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d9e5      	bls.n	80053d6 <clear_lock+0xe>
	}
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	200001a8 	.word	0x200001a8

0800541c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542e:	791b      	ldrb	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d040      	beq.n	80054b6 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005444:	7858      	ldrb	r0, [r3, #1]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	2301      	movs	r3, #1
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	f7ff fd6c 	bl	8004f28 <disk_write>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <sync_window+0x40>
			res = FR_DISK_ERR;
 8005456:	2301      	movs	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
 800545a:	e02c      	b.n	80054b6 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005462:	2200      	movs	r2, #0
 8005464:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	429a      	cmp	r2, r3
 800547c:	d21b      	bcs.n	80054b6 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	78db      	ldrb	r3, [r3, #3]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	e012      	b.n	80054b0 <sync_window+0x94>
					wsect += fs->fsize;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549e:	7858      	ldrb	r0, [r3, #1]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	2301      	movs	r3, #1
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	f7ff fd3f 	bl	8004f28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d8e9      	bhi.n	800548a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d01e      	beq.n	800551a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ff9d 	bl	800541c <sync_window>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	7858      	ldrb	r0, [r3, #1]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	2301      	movs	r3, #1
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	f7ff fcf5 	bl	8004ee8 <disk_read>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	461a      	mov	r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ff75 	bl	800541c <sync_window>
 8005532:	4603      	mov	r3, r0
 8005534:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 80ad 	bne.w	8005698 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b03      	cmp	r3, #3
 8005548:	f040 8098 	bne.w	800567c <sync_fs+0x158>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005552:	795b      	ldrb	r3, [r3, #5]
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 8091 	bne.w	800567c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005562:	895b      	ldrh	r3, [r3, #10]
 8005564:	461a      	mov	r2, r3
 8005566:	2100      	movs	r1, #0
 8005568:	f7ff fd3b 	bl	8004fe2 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2255      	movs	r2, #85	; 0x55
 8005570:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	22aa      	movs	r2, #170	; 0xaa
 8005578:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2252      	movs	r2, #82	; 0x52
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2252      	movs	r2, #82	; 0x52
 8005586:	705a      	strb	r2, [r3, #1]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2261      	movs	r2, #97	; 0x61
 800558c:	709a      	strb	r2, [r3, #2]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2241      	movs	r2, #65	; 0x41
 8005592:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2272      	movs	r2, #114	; 0x72
 8005598:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2272      	movs	r2, #114	; 0x72
 80055a0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2241      	movs	r2, #65	; 0x41
 80055a8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2261      	movs	r2, #97	; 0x61
 80055b0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	0e1b      	lsrs	r3, r3, #24
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	b29b      	uxth	r3, r3
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	b29b      	uxth	r3, r3
 800561c:	b2da      	uxtb	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	b2da      	uxtb	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	0e1b      	lsrs	r3, r3, #24
 8005640:	b2da      	uxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	3301      	adds	r3, #1
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005658:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005660:	7858      	ldrb	r0, [r3, #1]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	2301      	movs	r3, #1
 800566e:	f7ff fc5b 	bl	8004f28 <disk_write>
			fs->fsi_flag = 0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	2200      	movs	r2, #0
 800567a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2200      	movs	r2, #0
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fc6d 	bl	8004f68 <disk_ioctl>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	3b02      	subs	r3, #2
 80056b0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	3b02      	subs	r3, #2
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d301      	bcc.n	80056c6 <clust2sect+0x24>
 80056c2:	2300      	movs	r3, #0
 80056c4:	e00c      	b.n	80056e0 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056cc:	789b      	ldrb	r3, [r3, #2]
 80056ce:	461a      	mov	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	fb03 f202 	mul.w	r2, r3, r2
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4413      	add	r3, r2
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d906      	bls.n	800570a <get_fat+0x1e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <get_fat+0x24>
		val = 1;	/* Internal error */
 800570a:	2301      	movs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e0e4      	b.n	80058da <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b03      	cmp	r3, #3
 8005720:	f000 8098 	beq.w	8005854 <get_fat+0x168>
 8005724:	2b03      	cmp	r3, #3
 8005726:	f300 80ce 	bgt.w	80058c6 <get_fat+0x1da>
 800572a:	2b01      	cmp	r3, #1
 800572c:	d002      	beq.n	8005734 <get_fat+0x48>
 800572e:	2b02      	cmp	r3, #2
 8005730:	d05f      	beq.n	80057f2 <get_fat+0x106>
 8005732:	e0c8      	b.n	80058c6 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005750:	895b      	ldrh	r3, [r3, #10]
 8005752:	4619      	mov	r1, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	fbb3 f3f1 	udiv	r3, r3, r1
 800575a:	4413      	add	r3, r2
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff feae 	bl	80054c0 <move_window>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 80b0 	bne.w	80058cc <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	60fa      	str	r2, [r7, #12]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005778:	8952      	ldrh	r2, [r2, #10]
 800577a:	fbb3 f1f2 	udiv	r1, r3, r2
 800577e:	fb01 f202 	mul.w	r2, r1, r2
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005798:	895b      	ldrh	r3, [r3, #10]
 800579a:	4619      	mov	r1, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a2:	4413      	add	r3, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fe8a 	bl	80054c0 <move_window>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 808e 	bne.w	80058d0 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	461a      	mov	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c4:	fb01 f202 	mul.w	r2, r1, r2
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	5cd3      	ldrb	r3, [r2, r3]
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <get_fat+0xfc>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	e002      	b.n	80057ee <get_fat+0x102>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ee:	617b      	str	r3, [r7, #20]
			break;
 80057f0:	e073      	b.n	80058da <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005800:	895b      	ldrh	r3, [r3, #10]
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	b29b      	uxth	r3, r3
 8005806:	4619      	mov	r1, r3
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	fbb3 f3f1 	udiv	r3, r3, r1
 800580e:	4413      	add	r3, r2
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fe54 	bl	80054c0 <move_window>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d15a      	bne.n	80058d4 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005828:	8952      	ldrh	r2, [r2, #10]
 800582a:	fbb3 f1f2 	udiv	r1, r3, r2
 800582e:	fb01 f202 	mul.w	r2, r1, r2
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	b21a      	sxth	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b21b      	sxth	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b21b      	sxth	r3, r3
 800584e:	b29b      	uxth	r3, r3
 8005850:	617b      	str	r3, [r7, #20]
			break;
 8005852:	e042      	b.n	80058da <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005862:	895b      	ldrh	r3, [r3, #10]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	b29b      	uxth	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005870:	4413      	add	r3, r2
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff fe23 	bl	80054c0 <move_window>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d12b      	bne.n	80058d8 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800588a:	8952      	ldrh	r2, [r2, #10]
 800588c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005890:	fb01 f202 	mul.w	r2, r1, r2
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	4413      	add	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	3303      	adds	r3, #3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	061a      	lsls	r2, r3, #24
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3302      	adds	r3, #2
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	4313      	orrs	r3, r2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	3201      	adds	r2, #1
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	0212      	lsls	r2, r2, #8
 80058b6:	4313      	orrs	r3, r2
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	7812      	ldrb	r2, [r2, #0]
 80058bc:	4313      	orrs	r3, r2
 80058be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058c2:	617b      	str	r3, [r7, #20]
			break;
 80058c4:	e009      	b.n	80058da <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e006      	b.n	80058da <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058cc:	bf00      	nop
 80058ce:	e004      	b.n	80058da <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058d0:	bf00      	nop
 80058d2:	e002      	b.n	80058da <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058d8:	bf00      	nop
		}
	}

	return val;
 80058da:	697b      	ldr	r3, [r7, #20]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d906      	bls.n	8005904 <put_fat+0x20>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d302      	bcc.n	800590a <put_fat+0x26>
		res = FR_INT_ERR;
 8005904:	2302      	movs	r3, #2
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e13a      	b.n	8005b80 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b03      	cmp	r3, #3
 8005914:	f000 80d0 	beq.w	8005ab8 <put_fat+0x1d4>
 8005918:	2b03      	cmp	r3, #3
 800591a:	f300 8127 	bgt.w	8005b6c <put_fat+0x288>
 800591e:	2b01      	cmp	r3, #1
 8005920:	d003      	beq.n	800592a <put_fat+0x46>
 8005922:	2b02      	cmp	r3, #2
 8005924:	f000 808f 	beq.w	8005a46 <put_fat+0x162>
 8005928:	e120      	b.n	8005b6c <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4413      	add	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	895b      	ldrh	r3, [r3, #10]
 8005948:	4619      	mov	r1, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005950:	4413      	add	r3, r2
 8005952:	4619      	mov	r1, r3
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fdb3 	bl	80054c0 <move_window>
 800595a:	4603      	mov	r3, r0
 800595c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 8106 	bne.w	8005b72 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	617a      	str	r2, [r7, #20]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005972:	8952      	ldrh	r2, [r2, #10]
 8005974:	fbb3 f1f2 	udiv	r1, r3, r2
 8005978:	fb01 f202 	mul.w	r2, r1, r2
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <put_fat+0xc6>
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b25b      	sxtb	r3, r3
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	b25a      	sxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b25b      	sxtb	r3, r3
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e001      	b.n	80059ae <put_fat+0xca>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b8:	2201      	movs	r2, #1
 80059ba:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ca:	895b      	ldrh	r3, [r3, #10]
 80059cc:	4619      	mov	r1, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059d4:	4413      	add	r3, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff fd71 	bl	80054c0 <move_window>
 80059de:	4603      	mov	r3, r0
 80059e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 80c6 	bne.w	8005b76 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	895b      	ldrh	r3, [r3, #10]
 80059f2:	461a      	mov	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80059fa:	fb01 f202 	mul.w	r2, r1, r2
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <put_fat+0x134>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	091b      	lsrs	r3, r3, #4
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e00e      	b.n	8005a36 <put_fat+0x152>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	f023 030f 	bic.w	r3, r3, #15
 8005a22:	b25a      	sxtb	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	4313      	orrs	r3, r2
 8005a32:	b25b      	sxtb	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a40:	2201      	movs	r2, #1
 8005a42:	711a      	strb	r2, [r3, #4]
			break;
 8005a44:	e09c      	b.n	8005b80 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a54:	895b      	ldrh	r3, [r3, #10]
 8005a56:	085b      	lsrs	r3, r3, #1
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a62:	4413      	add	r3, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fd2a 	bl	80054c0 <move_window>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8081 	bne.w	8005b7a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a82:	8952      	ldrh	r2, [r2, #10]
 8005a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a88:	fb01 f202 	mul.w	r2, r1, r2
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	711a      	strb	r2, [r3, #4]
			break;
 8005ab6:	e063      	b.n	8005b80 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac6:	895b      	ldrh	r3, [r3, #10]
 8005ac8:	089b      	lsrs	r3, r3, #2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fcf1 	bl	80054c0 <move_window>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d14a      	bne.n	8005b7e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005af2:	8952      	ldrh	r2, [r2, #10]
 8005af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af8:	fb01 f202 	mul.w	r2, r1, r2
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	3303      	adds	r3, #3
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	061a      	lsls	r2, r3, #24
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3302      	adds	r3, #2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	4313      	orrs	r3, r2
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	3201      	adds	r2, #1
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	0212      	lsls	r2, r2, #8
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	3301      	adds	r3, #1
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	0c1a      	lsrs	r2, r3, #16
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	3302      	adds	r3, #2
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0e1a      	lsrs	r2, r3, #24
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b66:	2201      	movs	r2, #1
 8005b68:	711a      	strb	r2, [r3, #4]
			break;
 8005b6a:	e009      	b.n	8005b80 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e006      	b.n	8005b80 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005b72:	bf00      	nop
 8005b74:	e004      	b.n	8005b80 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005b7e:	bf00      	nop
		}
	}

	return res;
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d906      	bls.n	8005ba8 <remove_chain+0x1e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <remove_chain+0x24>
		res = FR_INT_ERR;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	e049      	b.n	8005c42 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005bb2:	e03b      	b.n	8005c2c <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fd98 	bl	80056ec <get_fat>
 8005bbc:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03b      	beq.n	8005c3c <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d102      	bne.n	8005bd0 <remove_chain+0x46>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	73fb      	strb	r3, [r7, #15]
 8005bce:	e038      	b.n	8005c42 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <remove_chain+0x54>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	e031      	b.n	8005c42 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005bde:	2200      	movs	r2, #0
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fe7e 	bl	80058e4 <put_fat>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d126      	bne.n	8005c40 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d013      	beq.n	8005c28 <remove_chain+0x9e>
				fs->free_clust++;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c10:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c18:	795b      	ldrb	r3, [r3, #5]
 8005c1a:	f043 0301 	orr.w	r3, r3, #1
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3bc      	bcc.n	8005bb4 <remove_chain+0x2a>
 8005c3a:	e002      	b.n	8005c42 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005c3c:	bf00      	nop
 8005c3e:	e000      	b.n	8005c42 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005c40:	bf00      	nop
		}
	}

	return res;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d111      	bne.n	8005c80 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d006      	beq.n	8005c7a <create_chain+0x2e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d31d      	bcc.n	8005cb6 <create_chain+0x6a>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e01a      	b.n	8005cb6 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fd32 	bl	80056ec <get_fat>
 8005c88:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d801      	bhi.n	8005c94 <create_chain+0x48>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e07f      	b.n	8005d94 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d101      	bne.n	8005ca0 <create_chain+0x54>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	e079      	b.n	8005d94 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d201      	bcs.n	8005cb2 <create_chain+0x66>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	e070      	b.n	8005d94 <create_chain+0x148>
		scl = clst;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d307      	bcc.n	8005cde <create_chain+0x92>
			ncl = 2;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d901      	bls.n	8005cde <create_chain+0x92>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e05a      	b.n	8005d94 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fd03 	bl	80056ec <get_fat>
 8005ce6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00e      	beq.n	8005d0c <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf4:	d002      	beq.n	8005cfc <create_chain+0xb0>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <create_chain+0xb4>
			return cs;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	e049      	b.n	8005d94 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d1d8      	bne.n	8005cba <create_chain+0x6e>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e043      	b.n	8005d94 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005d0c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005d0e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005d12:	6979      	ldr	r1, [r7, #20]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fde5 	bl	80058e4 <put_fat>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d109      	bne.n	8005d38 <create_chain+0xec>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d006      	beq.n	8005d38 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fdd8 	bl	80058e4 <put_fat>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d121      	bne.n	8005d82 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	461a      	mov	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d01c      	beq.n	8005d92 <create_chain+0x146>
			fs->free_clust--;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d68:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	715a      	strb	r2, [r3, #5]
 8005d80:	e007      	b.n	8005d92 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <create_chain+0x142>
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	e000      	b.n	8005d90 <create_chain+0x144>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005d92:	697b      	ldr	r3, [r7, #20]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	3304      	adds	r3, #4
 8005db0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbe:	895b      	ldrh	r3, [r3, #10]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dd4:	7892      	ldrb	r2, [r2, #2]
 8005dd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	613a      	str	r2, [r7, #16]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <clmt_clust+0x54>
 8005dec:	2300      	movs	r3, #0
 8005dee:	e010      	b.n	8005e12 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d307      	bcc.n	8005e08 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	3304      	adds	r3, #4
 8005e04:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005e06:	e7e9      	b.n	8005ddc <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005e08:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	4413      	add	r3, r2
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e32:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d009      	beq.n	8005e58 <dir_sdi+0x3a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d301      	bcc.n	8005e5c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e0aa      	b.n	8005fb2 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d110      	bne.n	8005e84 <dir_sdi+0x66>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d107      	bne.n	8005e84 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d115      	bne.n	8005eb6 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	891b      	ldrh	r3, [r3, #8]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d301      	bcc.n	8005ea4 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e086      	b.n	8005fb2 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	e043      	b.n	8005f3e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec2:	895b      	ldrh	r3, [r3, #10]
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed6:	789b      	ldrb	r3, [r3, #2]
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ede:	e021      	b.n	8005f24 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6979      	ldr	r1, [r7, #20]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fbfe 	bl	80056ec <get_fat>
 8005ef0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef8:	d101      	bne.n	8005efe <dir_sdi+0xe0>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e059      	b.n	8005fb2 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d909      	bls.n	8005f18 <dir_sdi+0xfa>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d301      	bcc.n	8005f1c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e04a      	b.n	8005fb2 <dir_sdi+0x194>
			idx -= ic;
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d2d9      	bcs.n	8005ee0 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6979      	ldr	r1, [r7, #20]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fbb3 	bl	80056a2 <clust2sect>
 8005f3c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f44:	461a      	mov	r2, r3
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <dir_sdi+0x136>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e02e      	b.n	8005fb2 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f78:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f90:	895b      	ldrh	r3, [r3, #10]
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f9e:	fb01 f202 	mul.w	r2, r1, r2
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	4403      	add	r3, r0
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fae:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005fba:	b590      	push	{r4, r7, lr}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	88db      	ldrh	r3, [r3, #6]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <dir_next+0x2a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <dir_next+0x2e>
		return FR_NO_FILE;
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	e12e      	b.n	8006246 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff4:	895b      	ldrh	r3, [r3, #10]
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006002:	fb01 f202 	mul.w	r2, r1, r2
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 80fa 	bne.w	8006202 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	3301      	adds	r3, #1
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800601e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006038:	891b      	ldrh	r3, [r3, #8]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4293      	cmp	r3, r2
 8006040:	f0c0 80df 	bcc.w	8006202 <dir_next+0x248>
				return FR_NO_FILE;
 8006044:	2304      	movs	r3, #4
 8006046:	e0fe      	b.n	8006246 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006054:	895b      	ldrh	r3, [r3, #10]
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	b29b      	uxth	r3, r3
 800605a:	461a      	mov	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800606e:	7892      	ldrb	r2, [r2, #2]
 8006070:	3a01      	subs	r2, #1
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	f040 80c4 	bne.w	8006202 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f7ff fb2d 	bl	80056ec <get_fat>
 8006092:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d801      	bhi.n	800609e <dir_next+0xe4>
 800609a:	2302      	movs	r3, #2
 800609c:	e0d3      	b.n	8006246 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d101      	bne.n	80060aa <dir_next+0xf0>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0cd      	b.n	8006246 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	f0c0 808e 	bcc.w	80061dc <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <dir_next+0x110>
 80060c6:	2304      	movs	r3, #4
 80060c8:	e0bd      	b.n	8006246 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	4619      	mov	r1, r3
 80060dc:	4610      	mov	r0, r2
 80060de:	f7ff fdb5 	bl	8005c4c <create_chain>
 80060e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <dir_next+0x134>
 80060ea:	2307      	movs	r3, #7
 80060ec:	e0ab      	b.n	8006246 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <dir_next+0x13e>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0a6      	b.n	8006246 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d101      	bne.n	8006104 <dir_next+0x14a>
 8006100:	2301      	movs	r3, #1
 8006102:	e0a0      	b.n	8006246 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f985 	bl	800541c <sync_window>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <dir_next+0x162>
 8006118:	2301      	movs	r3, #1
 800611a:	e094      	b.n	8006246 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	895b      	ldrh	r3, [r3, #10]
 8006134:	461a      	mov	r2, r3
 8006136:	2100      	movs	r1, #0
 8006138:	f7fe ff53 	bl	8004fe2 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614a:	681c      	ldr	r4, [r3, #0]
 800614c:	6979      	ldr	r1, [r7, #20]
 800614e:	4610      	mov	r0, r2
 8006150:	f7ff faa7 	bl	80056a2 <clust2sect>
 8006154:	4603      	mov	r3, r0
 8006156:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800615a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e021      	b.n	80061a6 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616e:	2201      	movs	r2, #1
 8006170:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f94e 	bl	800541c <sync_window>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <dir_next+0x1d0>
 8006186:	2301      	movs	r3, #1
 8006188:	e05d      	b.n	8006246 <dir_next+0x28c>
						dp->fs->winsect++;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006196:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006198:	3201      	adds	r2, #1
 800619a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	3301      	adds	r3, #1
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b2:	789b      	ldrb	r3, [r3, #2]
 80061b4:	461a      	mov	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d3d2      	bcc.n	8006162 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1acb      	subs	r3, r1, r3
 80061d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e2:	461a      	mov	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6979      	ldr	r1, [r7, #20]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fa55 	bl	80056a2 <clust2sect>
 80061f8:	4602      	mov	r2, r0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006200:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	895b      	ldrh	r3, [r3, #10]
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	b29b      	uxth	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006232:	fb01 f202 	mul.w	r2, r1, r2
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	015b      	lsls	r3, r3, #5
 800623a:	4403      	add	r3, r0
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006242:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	bd90      	pop	{r4, r7, pc}

0800624e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fddf 	bl	8005e1e <dir_sdi>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d135      	bne.n	80062d6 <dir_alloc+0x88>
		n = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4619      	mov	r1, r3
 8006280:	4610      	mov	r0, r2
 8006282:	f7ff f91d 	bl	80054c0 <move_window>
 8006286:	4603      	mov	r3, r0
 8006288:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d121      	bne.n	80062d4 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2be5      	cmp	r3, #229	; 0xe5
 800629c:	d006      	beq.n	80062ac <dir_alloc+0x5e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d102      	bne.n	80062c0 <dir_alloc+0x72>
 80062ba:	e00c      	b.n	80062d6 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80062bc:	2300      	movs	r3, #0
 80062be:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80062c0:	2101      	movs	r1, #1
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fe79 	bl	8005fba <dir_next>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0cd      	beq.n	800626e <dir_alloc+0x20>
 80062d2:	e000      	b.n	80062d6 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80062d4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d101      	bne.n	80062e0 <dir_alloc+0x92>
 80062dc:	2307      	movs	r3, #7
 80062de:	73fb      	strb	r3, [r7, #15]
	return res;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	331b      	adds	r3, #27
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	b21a      	sxth	r2, r3
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	331a      	adds	r3, #26
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b21b      	sxth	r3, r3
 8006306:	4313      	orrs	r3, r2
 8006308:	b21b      	sxth	r3, r3
 800630a:	b29b      	uxth	r3, r3
 800630c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d10f      	bne.n	800633a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	3315      	adds	r3, #21
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	b21a      	sxth	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b21b      	sxth	r3, r3
 800632c:	4313      	orrs	r3, r2
 800632e:	b21b      	sxth	r3, r3
 8006330:	b29b      	uxth	r3, r3
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

	return cl;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	331a      	adds	r3, #26
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	0a1b      	lsrs	r3, r3, #8
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	331b      	adds	r3, #27
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	0c1a      	lsrs	r2, r3, #16
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3314      	adds	r3, #20
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	0c1b      	lsrs	r3, r3, #16
 800637c:	b29b      	uxth	r3, r3
 800637e:	0a1b      	lsrs	r3, r3, #8
 8006380:	b29a      	uxth	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3315      	adds	r3, #21
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063aa:	1e5a      	subs	r2, r3, #1
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	2301      	movs	r3, #1
 80063be:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80063c0:	4a2b      	ldr	r2, [pc, #172]	; (8006470 <cmp_lfn+0xd8>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4413      	add	r3, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	b21a      	sxth	r2, r3
 80063d4:	4926      	ldr	r1, [pc, #152]	; (8006470 <cmp_lfn+0xd8>)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	440b      	add	r3, r1
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	4619      	mov	r1, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	440b      	add	r3, r1
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	4313      	orrs	r3, r2
 80063e8:	b21b      	sxth	r3, r3
 80063ea:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80063ec:	89fb      	ldrh	r3, [r7, #14]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d019      	beq.n	8006426 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80063f2:	89bb      	ldrh	r3, [r7, #12]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f002 fc49 	bl	8008c8c <ff_wtoupper>
 80063fa:	4603      	mov	r3, r0
 80063fc:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2bfe      	cmp	r3, #254	; 0xfe
 8006402:	d80e      	bhi.n	8006422 <cmp_lfn+0x8a>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	617a      	str	r2, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f002 fc3a 	bl	8008c8c <ff_wtoupper>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	4293      	cmp	r3, r2
 8006420:	d008      	beq.n	8006434 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006422:	2300      	movs	r3, #0
 8006424:	e01f      	b.n	8006466 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006426:	89bb      	ldrh	r3, [r7, #12]
 8006428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800642c:	4293      	cmp	r3, r2
 800642e:	d001      	beq.n	8006434 <cmp_lfn+0x9c>
 8006430:	2300      	movs	r3, #0
 8006432:	e018      	b.n	8006466 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3301      	adds	r3, #1
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d9bf      	bls.n	80063c0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <cmp_lfn+0xcc>
 800644c:	89fb      	ldrh	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <cmp_lfn+0xcc>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <cmp_lfn+0xcc>
		return 0;
 8006460:	2300      	movs	r3, #0
 8006462:	e000      	b.n	8006466 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006464:	2301      	movs	r3, #1
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	08009e88 	.word	0x08009e88

08006474 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	; 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	460b      	mov	r3, r1
 8006484:	71fb      	strb	r3, [r7, #7]
 8006486:	4613      	mov	r3, r2
 8006488:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	330d      	adds	r3, #13
 800648e:	79ba      	ldrb	r2, [r7, #6]
 8006490:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	330b      	adds	r3, #11
 8006496:	220f      	movs	r2, #15
 8006498:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	330c      	adds	r3, #12
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	331a      	adds	r3, #26
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	331b      	adds	r3, #27
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	1e5a      	subs	r2, r3, #1
 80064b6:	4613      	mov	r3, r2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	82fb      	strh	r3, [r7, #22]
 80064c6:	2300      	movs	r3, #0
 80064c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <fit_lfn+0x70>
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	61fa      	str	r2, [r7, #28]
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80064e4:	4a1d      	ldr	r2, [pc, #116]	; (800655c <fit_lfn+0xe8>)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	4413      	add	r3, r2
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	8afa      	ldrh	r2, [r7, #22]
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	8afb      	ldrh	r3, [r7, #22]
 80064fa:	0a1b      	lsrs	r3, r3, #8
 80064fc:	b299      	uxth	r1, r3
 80064fe:	4a17      	ldr	r2, [pc, #92]	; (800655c <fit_lfn+0xe8>)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4413      	add	r3, r2
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	3301      	adds	r3, #1
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4413      	add	r3, r2
 800650c:	b2ca      	uxtb	r2, r1
 800650e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006510:	8afb      	ldrh	r3, [r7, #22]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <fit_lfn+0xa8>
 8006516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800651a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	3301      	adds	r3, #1
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b0c      	cmp	r3, #12
 8006526:	d9d0      	bls.n	80064ca <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006528:	8afb      	ldrh	r3, [r7, #22]
 800652a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800652e:	4293      	cmp	r3, r2
 8006530:	d006      	beq.n	8006540 <fit_lfn+0xcc>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <fit_lfn+0xd4>
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006546:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	79fa      	ldrb	r2, [r7, #7]
 800654c:	701a      	strb	r2, [r3, #0]
}
 800654e:	bf00      	nop
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	08009e88 	.word	0x08009e88

08006560 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800656e:	220b      	movs	r2, #11
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7fe fd16 	bl	8004fa4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b05      	cmp	r3, #5
 800657c:	d92b      	bls.n	80065d6 <gen_numname+0x76>
		sr = seq;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006582:	e022      	b.n	80065ca <gen_numname+0x6a>
			wc = *lfn++;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800658e:	2300      	movs	r3, #0
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
 8006592:	e017      	b.n	80065c4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	005a      	lsls	r2, r3, #1
 8006598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80065a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <gen_numname+0x5e>
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80065b8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80065bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	3301      	adds	r3, #1
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d9e4      	bls.n	8006594 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1d8      	bne.n	8006584 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80065d6:	2307      	movs	r3, #7
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3330      	adds	r3, #48	; 0x30
 80065e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80065ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ee:	2b39      	cmp	r3, #57	; 0x39
 80065f0:	d904      	bls.n	80065fc <gen_numname+0x9c>
 80065f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f6:	3307      	adds	r3, #7
 80065f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	1e5a      	subs	r2, r3, #1
 8006600:	62ba      	str	r2, [r7, #40]	; 0x28
 8006602:	3330      	adds	r3, #48	; 0x30
 8006604:	443b      	add	r3, r7
 8006606:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800660a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1df      	bne.n	80065da <gen_numname+0x7a>
	ns[i] = '~';
 800661a:	f107 0214 	add.w	r2, r7, #20
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	4413      	add	r3, r2
 8006622:	227e      	movs	r2, #126	; 0x7e
 8006624:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
 800662a:	e002      	b.n	8006632 <gen_numname+0xd2>
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	3301      	adds	r3, #1
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	429a      	cmp	r2, r3
 8006638:	d205      	bcs.n	8006646 <gen_numname+0xe6>
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b20      	cmp	r3, #32
 8006644:	d1f2      	bne.n	800662c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	2b07      	cmp	r3, #7
 800664a:	d807      	bhi.n	800665c <gen_numname+0xfc>
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62ba      	str	r2, [r7, #40]	; 0x28
 8006652:	3330      	adds	r3, #48	; 0x30
 8006654:	443b      	add	r3, r7
 8006656:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800665a:	e000      	b.n	800665e <gen_numname+0xfe>
 800665c:	2120      	movs	r1, #32
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	627a      	str	r2, [r7, #36]	; 0x24
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	460a      	mov	r2, r1
 800666a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2b07      	cmp	r3, #7
 8006670:	d9e9      	bls.n	8006646 <gen_numname+0xe6>
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	3730      	adds	r7, #48	; 0x30
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006688:	230b      	movs	r3, #11
 800668a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	0852      	lsrs	r2, r2, #1
 8006692:	01db      	lsls	r3, r3, #7
 8006694:	4313      	orrs	r3, r2
 8006696:	b2da      	uxtb	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	6079      	str	r1, [r7, #4]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ed      	bne.n	800668c <sum_sfn+0x10>
	return sum;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff fba8 	bl	8005e1e <dir_sdi>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <dir_find+0x1e>
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	e0b8      	b.n	800684e <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80066dc:	23ff      	movs	r3, #255	; 0xff
 80066de:	753b      	strb	r3, [r7, #20]
 80066e0:	7d3b      	ldrb	r3, [r7, #20]
 80066e2:	757b      	strb	r3, [r7, #21]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ee:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f7fe fedc 	bl	80054c0 <move_window>
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 8097 	bne.w	8006842 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <dir_find+0x72>
 800672a:	2304      	movs	r3, #4
 800672c:	75fb      	strb	r3, [r7, #23]
 800672e:	e08d      	b.n	800684c <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	330b      	adds	r3, #11
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800673a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800673c:	7dbb      	ldrb	r3, [r7, #22]
 800673e:	2be5      	cmp	r3, #229	; 0xe5
 8006740:	d007      	beq.n	8006752 <dir_find+0x94>
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <dir_find+0xa6>
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	d008      	beq.n	8006764 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006752:	23ff      	movs	r3, #255	; 0xff
 8006754:	757b      	strb	r3, [r7, #21]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006760:	849a      	strh	r2, [r3, #36]	; 0x24
 8006762:	e063      	b.n	800682c <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b0f      	cmp	r3, #15
 8006768:	d137      	bne.n	80067da <dir_find+0x11c>
				if (dp->lfn) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d05a      	beq.n	800682c <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006776:	7dbb      	ldrb	r3, [r7, #22]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d010      	beq.n	80067a2 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	7b5b      	ldrb	r3, [r3, #13]
 8006784:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006786:	7dbb      	ldrb	r3, [r7, #22]
 8006788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678c:	75bb      	strb	r3, [r7, #22]
 800678e:	7dbb      	ldrb	r3, [r7, #22]
 8006790:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006798:	88da      	ldrh	r2, [r3, #6]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a0:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80067a2:	7dba      	ldrb	r2, [r7, #22]
 80067a4:	7d7b      	ldrb	r3, [r7, #21]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d114      	bne.n	80067d4 <dir_find+0x116>
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	330d      	adds	r3, #13
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	7d3a      	ldrb	r2, [r7, #20]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d10e      	bne.n	80067d4 <dir_find+0x116>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	6939      	ldr	r1, [r7, #16]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fde9 	bl	8006398 <cmp_lfn>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <dir_find+0x116>
 80067cc:	7d7b      	ldrb	r3, [r7, #21]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e000      	b.n	80067d6 <dir_find+0x118>
 80067d4:	23ff      	movs	r3, #255	; 0xff
 80067d6:	757b      	strb	r3, [r7, #21]
 80067d8:	e028      	b.n	800682c <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80067da:	7d7b      	ldrb	r3, [r7, #21]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <dir_find+0x132>
 80067e0:	6938      	ldr	r0, [r7, #16]
 80067e2:	f7ff ff4b 	bl	800667c <sum_sfn>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	7d3b      	ldrb	r3, [r7, #20]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d02a      	beq.n	8006846 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	330b      	adds	r3, #11
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <dir_find+0x15e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	220b      	movs	r2, #11
 800680e:	4619      	mov	r1, r3
 8006810:	6938      	ldr	r0, [r7, #16]
 8006812:	f7fe fc01 	bl	8005018 <mem_cmp>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d016      	beq.n	800684a <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800681c:	23ff      	movs	r3, #255	; 0xff
 800681e:	757b      	strb	r3, [r7, #21]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800682a:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800682c:	2100      	movs	r1, #0
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fbc3 	bl	8005fba <dir_next>
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f43f af58 	beq.w	80066f0 <dir_find+0x32>
 8006840:	e004      	b.n	800684c <dir_find+0x18e>
		if (res != FR_OK) break;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800684a:	bf00      	nop

	return res;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08c      	sub	sp, #48	; 0x30
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	623b      	str	r3, [r7, #32]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	220c      	movs	r2, #12
 800687a:	6a39      	ldr	r1, [r7, #32]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe fb91 	bl	8004fa4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d03b      	beq.n	8006904 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	330b      	adds	r3, #11
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689a:	461a      	mov	r2, r3
 800689c:	2300      	movs	r3, #0
 800689e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80068a0:	2301      	movs	r3, #1
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a4:	e013      	b.n	80068ce <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80068a6:	f107 010c 	add.w	r1, r7, #12
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	6a38      	ldr	r0, [r7, #32]
 80068b0:	f7ff fe56 	bl	8006560 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff02 	bl	80066be <dir_find>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80068c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	3301      	adds	r3, #1
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	2b63      	cmp	r3, #99	; 0x63
 80068d2:	d9e8      	bls.n	80068a6 <dir_register+0x4e>
 80068d4:	e000      	b.n	80068d8 <dir_register+0x80>
			if (res != FR_OK) break;
 80068d6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2b64      	cmp	r3, #100	; 0x64
 80068dc:	d101      	bne.n	80068e2 <dir_register+0x8a>
 80068de:	2307      	movs	r3, #7
 80068e0:	e0d8      	b.n	8006a94 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80068e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d002      	beq.n	80068f0 <dir_register+0x98>
 80068ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ee:	e0d1      	b.n	8006a94 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	330b      	adds	r3, #11
 80068f4:	7dfa      	ldrb	r2, [r7, #23]
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	461a      	mov	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d014      	beq.n	8006938 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800690e:	2300      	movs	r3, #0
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
 8006912:	e002      	b.n	800691a <dir_register+0xc2>
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	3301      	adds	r3, #1
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f5      	bne.n	8006914 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	3319      	adds	r3, #25
 800692c:	4a5b      	ldr	r2, [pc, #364]	; (8006a9c <dir_register+0x244>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
 8006936:	e001      	b.n	800693c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006938:	2301      	movs	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800693c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fc85 	bl	800624e <dir_alloc>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800694a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800694e:	2b00      	cmp	r3, #0
 8006950:	d15b      	bne.n	8006a0a <dir_register+0x1b2>
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	3b01      	subs	r3, #1
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d055      	beq.n	8006a0a <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	461a      	mov	r2, r3
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fa55 	bl	8005e1e <dir_sdi>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800697a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800697e:	2b00      	cmp	r3, #0
 8006980:	d143      	bne.n	8006a0a <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fe76 	bl	800667c <sum_sfn>
 8006990:	4603      	mov	r3, r0
 8006992:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fe fd8a 	bl	80054c0 <move_window>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80069b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d126      	bne.n	8006a08 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c0:	6a18      	ldr	r0, [r3, #32]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c8:	6959      	ldr	r1, [r3, #20]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	7efb      	ldrb	r3, [r7, #27]
 80069d0:	f7ff fd50 	bl	8006474 <fit_lfn>
				dp->fs->wflag = 1;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e0:	2201      	movs	r2, #1
 80069e2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80069e4:	2100      	movs	r1, #0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff fae7 	bl	8005fba <dir_next>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80069f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <dir_register+0x1b2>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	3b01      	subs	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1c6      	bne.n	8006994 <dir_register+0x13c>
 8006a06:	e000      	b.n	8006a0a <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006a08:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d13e      	bne.n	8006a90 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f7fe fd4b 	bl	80054c0 <move_window>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d12b      	bne.n	8006a90 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	2220      	movs	r2, #32
 8006a42:	2100      	movs	r1, #0
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe facc 	bl	8004fe2 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	6958      	ldr	r0, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	220b      	movs	r2, #11
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f7fe faa1 	bl	8004fa4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	330b      	adds	r3, #11
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	330c      	adds	r3, #12
 8006a78:	f002 0218 	and.w	r2, r2, #24
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3730      	adds	r7, #48	; 0x30
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	4ec4ec4f 	.word	0x4ec4ec4f

08006aa0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e002      	b.n	8006ab8 <create_name+0x18>
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b2f      	cmp	r3, #47	; 0x2f
 8006abe:	d0f8      	beq.n	8006ab2 <create_name+0x12>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ac6:	d0f4      	beq.n	8006ab2 <create_name+0x12>
	lfn = dp->lfn;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	61ba      	str	r2, [r7, #24]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aea:	2b1f      	cmp	r3, #31
 8006aec:	d92f      	bls.n	8006b4e <create_name+0xae>
 8006aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af0:	2b2f      	cmp	r3, #47	; 0x2f
 8006af2:	d02c      	beq.n	8006b4e <create_name+0xae>
 8006af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af6:	2b5c      	cmp	r3, #92	; 0x5c
 8006af8:	d029      	beq.n	8006b4e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2bfe      	cmp	r3, #254	; 0xfe
 8006afe:	d901      	bls.n	8006b04 <create_name+0x64>
			return FR_INVALID_NAME;
 8006b00:	2306      	movs	r3, #6
 8006b02:	e186      	b.n	8006e12 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f002 f880 	bl	8008c14 <ff_convert>
 8006b14:	4603      	mov	r3, r0
 8006b16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <create_name+0x82>
 8006b1e:	2306      	movs	r3, #6
 8006b20:	e177      	b.n	8006e12 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b24:	2b7f      	cmp	r3, #127	; 0x7f
 8006b26:	d809      	bhi.n	8006b3c <create_name+0x9c>
 8006b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	488e      	ldr	r0, [pc, #568]	; (8006d68 <create_name+0x2c8>)
 8006b2e:	f7fe fa9a 	bl	8005066 <chk_chr>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <create_name+0x9c>
			return FR_INVALID_NAME;
 8006b38:	2306      	movs	r3, #6
 8006b3a:	e16a      	b.n	8006e12 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	617a      	str	r2, [r7, #20]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b4a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b4c:	e7c5      	b.n	8006ada <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	441a      	add	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b5a:	2b1f      	cmp	r3, #31
 8006b5c:	d801      	bhi.n	8006b62 <create_name+0xc2>
 8006b5e:	2304      	movs	r3, #4
 8006b60:	e000      	b.n	8006b64 <create_name+0xc4>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006b68:	e011      	b.n	8006b8e <create_name+0xee>
		w = lfn[di - 1];
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b70:	3b01      	subs	r3, #1
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d002      	beq.n	8006b88 <create_name+0xe8>
 8006b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b84:	2b2e      	cmp	r3, #46	; 0x2e
 8006b86:	d106      	bne.n	8006b96 <create_name+0xf6>
		di--;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1ea      	bne.n	8006b6a <create_name+0xca>
 8006b94:	e000      	b.n	8006b98 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006b96:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <create_name+0x102>
 8006b9e:	2306      	movs	r3, #6
 8006ba0:	e137      	b.n	8006e12 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	220b      	movs	r2, #11
 8006bb8:	2120      	movs	r1, #32
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fa11 	bl	8004fe2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e002      	b.n	8006bcc <create_name+0x12c>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	881b      	ldrh	r3, [r3, #0]
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d0f5      	beq.n	8006bc6 <create_name+0x126>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	2b2e      	cmp	r3, #46	; 0x2e
 8006be6:	d0ee      	beq.n	8006bc6 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <create_name+0x162>
 8006bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf2:	f043 0303 	orr.w	r3, r3, #3
 8006bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006bfa:	e002      	b.n	8006c02 <create_name+0x162>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d009      	beq.n	8006c1c <create_name+0x17c>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1a:	d1ef      	bne.n	8006bfc <create_name+0x15c>

	b = i = 0; ni = 8;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c26:	2308      	movs	r3, #8
 8006c28:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	61ba      	str	r2, [r7, #24]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8091 	beq.w	8006d64 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	d006      	beq.n	8006c56 <create_name+0x1b6>
 8006c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c4c:	d10a      	bne.n	8006c64 <create_name+0x1c4>
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d006      	beq.n	8006c64 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c5a:	f043 0303 	orr.w	r3, r3, #3
 8006c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c62:	e07e      	b.n	8006d62 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006c64:	6a3a      	ldr	r2, [r7, #32]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d203      	bcs.n	8006c74 <create_name+0x1d4>
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d123      	bne.n	8006cbc <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b0b      	cmp	r3, #11
 8006c78:	d106      	bne.n	8006c88 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c7e:	f043 0303 	orr.w	r3, r3, #3
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c86:	e076      	b.n	8006d76 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d005      	beq.n	8006c9c <create_name+0x1fc>
 8006c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c94:	f043 0303 	orr.w	r3, r3, #3
 8006c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d867      	bhi.n	8006d74 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	2308      	movs	r3, #8
 8006caa:	623b      	str	r3, [r7, #32]
 8006cac:	230b      	movs	r3, #11
 8006cae:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006cba:	e052      	b.n	8006d62 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc0:	d914      	bls.n	8006cec <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 ffa4 	bl	8008c14 <ff_convert>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <create_name+0x240>
 8006cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cd8:	3b80      	subs	r3, #128	; 0x80
 8006cda:	4a24      	ldr	r2, [pc, #144]	; (8006d6c <create_name+0x2cc>)
 8006cdc:	5cd3      	ldrb	r3, [r2, r3]
 8006cde:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <create_name+0x262>
 8006cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	481e      	ldr	r0, [pc, #120]	; (8006d70 <create_name+0x2d0>)
 8006cf8:	f7fe f9b5 	bl	8005066 <chk_chr>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006d02:	235f      	movs	r3, #95	; 0x5f
 8006d04:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0a:	f043 0303 	orr.w	r3, r3, #3
 8006d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d12:	e01b      	b.n	8006d4c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d909      	bls.n	8006d2e <create_name+0x28e>
 8006d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d1c:	2b5a      	cmp	r3, #90	; 0x5a
 8006d1e:	d806      	bhi.n	8006d2e <create_name+0x28e>
					b |= 2;
 8006d20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d2c:	e00e      	b.n	8006d4c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d30:	2b60      	cmp	r3, #96	; 0x60
 8006d32:	d90b      	bls.n	8006d4c <create_name+0x2ac>
 8006d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d36:	2b7a      	cmp	r3, #122	; 0x7a
 8006d38:	d808      	bhi.n	8006d4c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d48:	3b20      	subs	r3, #32
 8006d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	6239      	str	r1, [r7, #32]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006d62:	e762      	b.n	8006c2a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006d64:	bf00      	nop
 8006d66:	e006      	b.n	8006d76 <create_name+0x2d6>
 8006d68:	08009d88 	.word	0x08009d88
 8006d6c:	08009e08 	.word	0x08009e08
 8006d70:	08009d94 	.word	0x08009d94
			if (si > di) break;			/* No extension */
 8006d74:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2be5      	cmp	r3, #229	; 0xe5
 8006d82:	d105      	bne.n	8006d90 <create_name+0x2f0>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d104      	bne.n	8006da0 <create_name+0x300>
 8006d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d005      	beq.n	8006db8 <create_name+0x318>
 8006dac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d105      	bne.n	8006dc4 <create_name+0x324>
		cf |= NS_LFN;
 8006db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d117      	bne.n	8006e00 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <create_name+0x348>
 8006ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de0:	f043 0310 	orr.w	r3, r3, #16
 8006de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d105      	bne.n	8006e00 <create_name+0x360>
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df8:	f043 0308 	orr.w	r3, r3, #8
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	330b      	adds	r3, #11
 8006e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e10:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b2f      	cmp	r3, #47	; 0x2f
 8006e2c:	d003      	beq.n	8006e36 <follow_path+0x1a>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b5c      	cmp	r3, #92	; 0x5c
 8006e34:	d102      	bne.n	8006e3c <follow_path+0x20>
		path++;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b1f      	cmp	r3, #31
 8006e4e:	d80c      	bhi.n	8006e6a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006e50:	2100      	movs	r1, #0
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fe ffe3 	bl	8005e1e <dir_sdi>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e62:	461a      	mov	r2, r3
 8006e64:	2300      	movs	r3, #0
 8006e66:	6153      	str	r3, [r2, #20]
 8006e68:	e049      	b.n	8006efe <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fe16 	bl	8006aa0 <create_name>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d13a      	bne.n	8006ef4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fc1d 	bl	80066be <dir_find>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	7adb      	ldrb	r3, [r3, #11]
 8006e92:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d12b      	bne.n	8006ef8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d126      	bne.n	8006ef8 <follow_path+0xdc>
 8006eaa:	2305      	movs	r3, #5
 8006eac:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006eae:	e023      	b.n	8006ef8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d120      	bne.n	8006efc <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	330b      	adds	r3, #11
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006ed2:	2305      	movs	r3, #5
 8006ed4:	73fb      	strb	r3, [r7, #15]
 8006ed6:	e012      	b.n	8006efe <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fa01 	bl	80062ea <ld_clust>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ef2:	e7ba      	b.n	8006e6a <follow_path+0x4e>
			if (res != FR_OK) break;
 8006ef4:	bf00      	nop
 8006ef6:	e002      	b.n	8006efe <follow_path+0xe2>
				break;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006efc:	bf00      	nop
		}
	}

	return res;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d031      	beq.n	8006f82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e002      	b.n	8006f2c <get_ldnumber+0x24>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b1f      	cmp	r3, #31
 8006f32:	d903      	bls.n	8006f3c <get_ldnumber+0x34>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b3a      	cmp	r3, #58	; 0x3a
 8006f3a:	d1f4      	bne.n	8006f26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b3a      	cmp	r3, #58	; 0x3a
 8006f42:	d11c      	bne.n	8006f7e <get_ldnumber+0x76>
			tp = *path;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	60fa      	str	r2, [r7, #12]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	3b30      	subs	r3, #48	; 0x30
 8006f54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d80e      	bhi.n	8006f7a <get_ldnumber+0x72>
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d10a      	bne.n	8006f7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <get_ldnumber+0x72>
					vol = (int)i;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	3301      	adds	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	e002      	b.n	8006f84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006f7e:	2300      	movs	r3, #0
 8006f80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006f82:	693b      	ldr	r3, [r7, #16]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	711a      	strb	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006faa:	461a      	mov	r2, r3
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7fe fa83 	bl	80054c0 <move_window>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <check_fs+0x34>
		return 3;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e04a      	b.n	800705a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006fca:	3301      	adds	r3, #1
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b21a      	sxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006fd8:	b21b      	sxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b21b      	sxth	r3, r3
 8006fde:	4a21      	ldr	r2, [pc, #132]	; (8007064 <check_fs+0xd4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d001      	beq.n	8006fe8 <check_fs+0x58>
		return 2;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e038      	b.n	800705a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3336      	adds	r3, #54	; 0x36
 8006fec:	3303      	adds	r3, #3
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	061a      	lsls	r2, r3, #24
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3336      	adds	r3, #54	; 0x36
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	3236      	adds	r2, #54	; 0x36
 8007002:	3201      	adds	r2, #1
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	0212      	lsls	r2, r2, #8
 8007008:	4313      	orrs	r3, r2
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007010:	4313      	orrs	r3, r2
 8007012:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007016:	4a14      	ldr	r2, [pc, #80]	; (8007068 <check_fs+0xd8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d101      	bne.n	8007020 <check_fs+0x90>
		return 0;
 800701c:	2300      	movs	r3, #0
 800701e:	e01c      	b.n	800705a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3352      	adds	r3, #82	; 0x52
 8007024:	3303      	adds	r3, #3
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	061a      	lsls	r2, r3, #24
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3352      	adds	r3, #82	; 0x52
 800702e:	3302      	adds	r3, #2
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	4313      	orrs	r3, r2
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	3252      	adds	r2, #82	; 0x52
 800703a:	3201      	adds	r2, #1
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	0212      	lsls	r2, r2, #8
 8007040:	4313      	orrs	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007048:	4313      	orrs	r3, r2
 800704a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800704e:	4a06      	ldr	r2, [pc, #24]	; (8007068 <check_fs+0xd8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d101      	bne.n	8007058 <check_fs+0xc8>
		return 0;
 8007054:	2300      	movs	r3, #0
 8007056:	e000      	b.n	800705a <check_fs+0xca>

	return 1;
 8007058:	2301      	movs	r3, #1
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	ffffaa55 	.word	0xffffaa55
 8007068:	00544146 	.word	0x00544146

0800706c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b096      	sub	sp, #88	; 0x58
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007080:	68b8      	ldr	r0, [r7, #8]
 8007082:	f7ff ff41 	bl	8006f08 <get_ldnumber>
 8007086:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	2b00      	cmp	r3, #0
 800708c:	da01      	bge.n	8007092 <find_volume+0x26>
 800708e:	230b      	movs	r3, #11
 8007090:	e311      	b.n	80076b6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007092:	4a98      	ldr	r2, [pc, #608]	; (80072f4 <find_volume+0x288>)
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <find_volume+0x3a>
 80070a2:	230c      	movs	r3, #12
 80070a4:	e307      	b.n	80076b6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070aa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01c      	beq.n	80070f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fed1 	bl	8004e68 <disk_status>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10c      	bne.n	80070f2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80070d8:	79fb      	ldrb	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <find_volume+0x82>
 80070de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80070ea:	230a      	movs	r3, #10
 80070ec:	e2e3      	b.n	80076b6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80070ee:	2300      	movs	r3, #0
 80070f0:	e2e1      	b.n	80076b6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f8:	2200      	movs	r2, #0
 80070fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	4618      	mov	r0, r3
 8007112:	f7fd fec3 	bl	8004e9c <disk_initialize>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800711c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007128:	2303      	movs	r3, #3
 800712a:	e2c4      	b.n	80076b6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <find_volume+0xd6>
 8007132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800713e:	230a      	movs	r3, #10
 8007140:	e2b9      	b.n	80076b6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	7858      	ldrb	r0, [r3, #1]
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007150:	330a      	adds	r3, #10
 8007152:	461a      	mov	r2, r3
 8007154:	2102      	movs	r1, #2
 8007156:	f7fd ff07 	bl	8004f68 <disk_ioctl>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800716c:	d306      	bcc.n	800717c <find_volume+0x110>
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007174:	895b      	ldrh	r3, [r3, #10]
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d901      	bls.n	8007180 <find_volume+0x114>
 800717c:	2301      	movs	r3, #1
 800717e:	e29a      	b.n	80076b6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007188:	f7ff ff02 	bl	8006f90 <check_fs>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007192:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007196:	2b01      	cmp	r3, #1
 8007198:	d153      	bne.n	8007242 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800719a:	2300      	movs	r3, #0
 800719c:	643b      	str	r3, [r7, #64]	; 0x40
 800719e:	e028      	b.n	80071f2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80071a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80071aa:	4413      	add	r3, r2
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	3304      	adds	r3, #4
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d012      	beq.n	80071de <find_volume+0x172>
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	330b      	adds	r3, #11
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	061a      	lsls	r2, r3, #24
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	330a      	adds	r3, #10
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	4313      	orrs	r3, r2
 80071ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071cc:	3209      	adds	r2, #9
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	0212      	lsls	r2, r2, #8
 80071d2:	4313      	orrs	r3, r2
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	3208      	adds	r2, #8
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	431a      	orrs	r2, r3
 80071dc:	e000      	b.n	80071e0 <find_volume+0x174>
 80071de:	2200      	movs	r2, #0
 80071e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	3358      	adds	r3, #88	; 0x58
 80071e6:	443b      	add	r3, r7
 80071e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80071ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ee:	3301      	adds	r3, #1
 80071f0:	643b      	str	r3, [r7, #64]	; 0x40
 80071f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d9d3      	bls.n	80071a0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80071f8:	2300      	movs	r3, #0
 80071fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80071fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <find_volume+0x19c>
 8007202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007204:	3b01      	subs	r3, #1
 8007206:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	3358      	adds	r3, #88	; 0x58
 800720e:	443b      	add	r3, r7
 8007210:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007214:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <find_volume+0x1bc>
 800721c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800721e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007220:	f7ff feb6 	bl	8006f90 <check_fs>
 8007224:	4603      	mov	r3, r0
 8007226:	e000      	b.n	800722a <find_volume+0x1be>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800722e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <find_volume+0x1d6>
 8007236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007238:	3301      	adds	r3, #1
 800723a:	643b      	str	r3, [r7, #64]	; 0x40
 800723c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723e:	2b03      	cmp	r3, #3
 8007240:	d9e2      	bls.n	8007208 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007242:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007246:	2b03      	cmp	r3, #3
 8007248:	d101      	bne.n	800724e <find_volume+0x1e2>
 800724a:	2301      	movs	r3, #1
 800724c:	e233      	b.n	80076b6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800724e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <find_volume+0x1ee>
 8007256:	230d      	movs	r3, #13
 8007258:	e22d      	b.n	80076b6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	7b1b      	ldrb	r3, [r3, #12]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	b21a      	sxth	r2, r3
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	7adb      	ldrb	r3, [r3, #11]
 8007266:	b21b      	sxth	r3, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	b21a      	sxth	r2, r3
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	b21b      	sxth	r3, r3
 8007276:	429a      	cmp	r2, r3
 8007278:	d001      	beq.n	800727e <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800727a:	230d      	movs	r3, #13
 800727c:	e21b      	b.n	80076b6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	7ddb      	ldrb	r3, [r3, #23]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	b21a      	sxth	r2, r3
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	7d9b      	ldrb	r3, [r3, #22]
 800728a:	b21b      	sxth	r3, r3
 800728c:	4313      	orrs	r3, r2
 800728e:	b21b      	sxth	r3, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d112      	bne.n	80072c0 <find_volume+0x254>
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80072a0:	061a      	lsls	r2, r3, #24
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	4313      	orrs	r3, r2
 80072ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ae:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80072b2:	0212      	lsls	r2, r2, #8
 80072b4:	4313      	orrs	r3, r2
 80072b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80072bc:	4313      	orrs	r3, r2
 80072be:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	461a      	mov	r2, r3
 80072c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ca:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	7c1a      	ldrb	r2, [r3, #16]
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d6:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	78db      	ldrb	r3, [r3, #3]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d009      	beq.n	80072f8 <find_volume+0x28c>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ea:	78db      	ldrb	r3, [r3, #3]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d003      	beq.n	80072f8 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80072f0:	230d      	movs	r3, #13
 80072f2:	e1e0      	b.n	80076b6 <find_volume+0x64a>
 80072f4:	200001a0 	.word	0x200001a0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	461a      	mov	r2, r3
 8007302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007304:	fb02 f303 	mul.w	r3, r2, r3
 8007308:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	7b5a      	ldrb	r2, [r3, #13]
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007314:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731c:	789b      	ldrb	r3, [r3, #2]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <find_volume+0x2d0>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007328:	789b      	ldrb	r3, [r3, #2]
 800732a:	461a      	mov	r2, r3
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007332:	789b      	ldrb	r3, [r3, #2]
 8007334:	3b01      	subs	r3, #1
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800733c:	230d      	movs	r3, #13
 800733e:	e1ba      	b.n	80076b6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007342:	7c9b      	ldrb	r3, [r3, #18]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	b21a      	sxth	r2, r3
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	7c5b      	ldrb	r3, [r3, #17]
 800734c:	b21b      	sxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b21b      	sxth	r3, r3
 8007352:	b29a      	uxth	r2, r3
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	891b      	ldrh	r3, [r3, #8]
 8007364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800736a:	8952      	ldrh	r2, [r2, #10]
 800736c:	0952      	lsrs	r2, r2, #5
 800736e:	b292      	uxth	r2, r2
 8007370:	fbb3 f1f2 	udiv	r1, r3, r2
 8007374:	fb01 f202 	mul.w	r2, r1, r2
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007380:	230d      	movs	r3, #13
 8007382:	e198      	b.n	80076b6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	7d1b      	ldrb	r3, [r3, #20]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	b21a      	sxth	r2, r3
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	7cdb      	ldrb	r3, [r3, #19]
 8007390:	b21b      	sxth	r3, r3
 8007392:	4313      	orrs	r3, r2
 8007394:	b21b      	sxth	r3, r3
 8007396:	b29b      	uxth	r3, r3
 8007398:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739c:	2b00      	cmp	r3, #0
 800739e:	d112      	bne.n	80073c6 <find_volume+0x35a>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80073a6:	061a      	lsls	r2, r3, #24
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4313      	orrs	r3, r2
 80073b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80073b8:	0212      	lsls	r2, r2, #8
 80073ba:	4313      	orrs	r3, r2
 80073bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	7bdb      	ldrb	r3, [r3, #15]
 80073ca:	021b      	lsls	r3, r3, #8
 80073cc:	b21a      	sxth	r2, r3
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	7b9b      	ldrb	r3, [r3, #14]
 80073d2:	b21b      	sxth	r3, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b21b      	sxth	r3, r3
 80073d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80073da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <find_volume+0x378>
 80073e0:	230d      	movs	r3, #13
 80073e2:	e168      	b.n	80076b6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80073e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80073e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e8:	4413      	add	r3, r2
 80073ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073f0:	8911      	ldrh	r1, [r2, #8]
 80073f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073f8:	8952      	ldrh	r2, [r2, #10]
 80073fa:	0952      	lsrs	r2, r2, #5
 80073fc:	b292      	uxth	r2, r2
 80073fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8007402:	b292      	uxth	r2, r2
 8007404:	4413      	add	r3, r2
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	429a      	cmp	r2, r3
 800740e:	d201      	bcs.n	8007414 <find_volume+0x3a8>
 8007410:	230d      	movs	r3, #13
 8007412:	e150      	b.n	80076b6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007420:	7892      	ldrb	r2, [r2, #2]
 8007422:	fbb3 f3f2 	udiv	r3, r3, r2
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <find_volume+0x3c6>
 800742e:	230d      	movs	r3, #13
 8007430:	e141      	b.n	80076b6 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800743e:	4293      	cmp	r3, r2
 8007440:	d902      	bls.n	8007448 <find_volume+0x3dc>
 8007442:	2302      	movs	r3, #2
 8007444:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800744e:	4293      	cmp	r3, r2
 8007450:	d902      	bls.n	8007458 <find_volume+0x3ec>
 8007452:	2303      	movs	r3, #3
 8007454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	3302      	adds	r3, #2
 800745c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007462:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	461a      	mov	r2, r3
 800746c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746e:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007474:	4413      	add	r3, r2
 8007476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800747c:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800747e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	4413      	add	r3, r2
 8007484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800748a:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800748c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007490:	2b03      	cmp	r3, #3
 8007492:	d124      	bne.n	80074de <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	891b      	ldrh	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <find_volume+0x438>
 80074a0:	230d      	movs	r3, #13
 80074a2:	e108      	b.n	80076b6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074aa:	061a      	lsls	r2, r3, #24
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80074b2:	041b      	lsls	r3, r3, #16
 80074b4:	4313      	orrs	r3, r2
 80074b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80074bc:	0212      	lsls	r2, r2, #8
 80074be:	4313      	orrs	r3, r2
 80074c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80074c6:	4313      	orrs	r3, r2
 80074c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074ce:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	647b      	str	r3, [r7, #68]	; 0x44
 80074dc:	e02b      	b.n	8007536 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e4:	891b      	ldrh	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <find_volume+0x482>
 80074ea:	230d      	movs	r3, #13
 80074ec:	e0e3      	b.n	80076b6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f8:	4413      	add	r3, r2
 80074fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007500:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007506:	2b02      	cmp	r3, #2
 8007508:	d105      	bne.n	8007516 <find_volume+0x4aa>
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	e00e      	b.n	8007534 <find_volume+0x4c8>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	085a      	lsrs	r2, r3, #1
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007534:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007544:	895b      	ldrh	r3, [r3, #10]
 8007546:	4619      	mov	r1, r3
 8007548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754a:	440b      	add	r3, r1
 800754c:	3b01      	subs	r3, #1
 800754e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007550:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007554:	8949      	ldrh	r1, [r1, #10]
 8007556:	fbb3 f3f1 	udiv	r3, r3, r1
 800755a:	429a      	cmp	r2, r3
 800755c:	d201      	bcs.n	8007562 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800755e:	230d      	movs	r3, #13
 8007560:	e0a9      	b.n	80076b6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007568:	461a      	mov	r2, r3
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
 800756e:	6113      	str	r3, [r2, #16]
 8007570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800757a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800757e:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007586:	2280      	movs	r2, #128	; 0x80
 8007588:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800758a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800758e:	2b03      	cmp	r3, #3
 8007590:	d17a      	bne.n	8007688 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	b21a      	sxth	r2, r3
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b21b      	sxth	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d16d      	bne.n	8007688 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80075ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ae:	3301      	adds	r3, #1
 80075b0:	4619      	mov	r1, r3
 80075b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075b4:	f7fd ff84 	bl	80054c0 <move_window>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d164      	bne.n	8007688 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c4:	2200      	movs	r2, #0
 80075c6:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80075d8:	b21b      	sxth	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b21b      	sxth	r3, r3
 80075de:	4a38      	ldr	r2, [pc, #224]	; (80076c0 <find_volume+0x654>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d151      	bne.n	8007688 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	061a      	lsls	r2, r3, #24
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	789b      	ldrb	r3, [r3, #2]
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	4313      	orrs	r3, r2
 80075f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075f4:	7852      	ldrb	r2, [r2, #1]
 80075f6:	0212      	lsls	r2, r2, #8
 80075f8:	4313      	orrs	r3, r2
 80075fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	4313      	orrs	r3, r2
 8007600:	4a30      	ldr	r2, [pc, #192]	; (80076c4 <find_volume+0x658>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d140      	bne.n	8007688 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800760c:	061a      	lsls	r2, r3, #24
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007614:	041b      	lsls	r3, r3, #16
 8007616:	4313      	orrs	r3, r2
 8007618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800761a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800761e:	0212      	lsls	r2, r2, #8
 8007620:	4313      	orrs	r3, r2
 8007622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007624:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007628:	4313      	orrs	r3, r2
 800762a:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <find_volume+0x65c>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d12b      	bne.n	8007688 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007636:	061a      	lsls	r2, r3, #24
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	4313      	orrs	r3, r2
 8007642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007644:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007648:	0212      	lsls	r2, r2, #8
 800764a:	4313      	orrs	r3, r2
 800764c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800764e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007652:	4313      	orrs	r3, r2
 8007654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800765a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007662:	061a      	lsls	r2, r3, #24
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	4313      	orrs	r3, r2
 800766e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007670:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007674:	0212      	lsls	r2, r2, #8
 8007676:	4313      	orrs	r3, r2
 8007678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800767a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800767e:	4313      	orrs	r3, r2
 8007680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007686:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768e:	461a      	mov	r2, r3
 8007690:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007694:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <find_volume+0x660>)
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <find_volume+0x660>)
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <find_volume+0x660>)
 80076a4:	881a      	ldrh	r2, [r3, #0]
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ac:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80076ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076b0:	f7fd fe8a 	bl	80053c8 <clear_lock>
#endif

	return FR_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3758      	adds	r7, #88	; 0x58
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	ffffaa55 	.word	0xffffaa55
 80076c4:	41615252 	.word	0x41615252
 80076c8:	61417272 	.word	0x61417272
 80076cc:	200001a4 	.word	0x200001a4

080076d0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d02a      	beq.n	8007738 <validate+0x68>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d024      	beq.n	8007738 <validate+0x68>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d01b      	beq.n	8007738 <validate+0x68>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770c:	88da      	ldrh	r2, [r3, #6]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007714:	889b      	ldrh	r3, [r3, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d10e      	bne.n	8007738 <validate+0x68>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	4618      	mov	r0, r3
 800772a:	f7fd fb9d 	bl	8004e68 <disk_status>
 800772e:	4603      	mov	r3, r0
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007738:	2309      	movs	r3, #9
 800773a:	e000      	b.n	800773e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800775a:	f107 0310 	add.w	r3, r7, #16
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fbd2 	bl	8006f08 <get_ldnumber>
 8007764:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da01      	bge.n	8007770 <f_mount+0x28>
 800776c:	230b      	movs	r3, #11
 800776e:	e02f      	b.n	80077d0 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <f_mount+0x90>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007778:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007780:	69b8      	ldr	r0, [r7, #24]
 8007782:	f7fd fe21 	bl	80053c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d004      	beq.n	80077a0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	490d      	ldr	r1, [pc, #52]	; (80077d8 <f_mount+0x90>)
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <f_mount+0x6e>
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d001      	beq.n	80077ba <f_mount+0x72>
 80077b6:	2300      	movs	r3, #0
 80077b8:	e00a      	b.n	80077d0 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80077ba:	f107 0108 	add.w	r1, r7, #8
 80077be:	f107 030c 	add.w	r3, r7, #12
 80077c2:	2200      	movs	r2, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff fc51 	bl	800706c <find_volume>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3720      	adds	r7, #32
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200001a0 	.word	0x200001a0

080077dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077ea:	f843 0c4c 	str.w	r0, [r3, #-76]
 80077ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077f2:	f843 1c50 	str.w	r1, [r3, #-80]
 80077f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077fa:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80077fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007802:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <f_open+0x32>
 800780a:	2309      	movs	r3, #9
 800780c:	e2f7      	b.n	8007dfe <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800780e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007812:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781a:	461a      	mov	r2, r3
 800781c:	2300      	movs	r3, #0
 800781e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007820:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007824:	461a      	mov	r2, r3
 8007826:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800782a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800783a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	f107 0118 	add.w	r1, r7, #24
 8007848:	3910      	subs	r1, #16
 800784a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800784e:	3b18      	subs	r3, #24
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fc09 	bl	800706c <find_volume>
 800785a:	4603      	mov	r3, r0
 800785c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007860:	f102 0217 	add.w	r2, r2, #23
 8007864:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007866:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800786a:	f103 0317 	add.w	r3, r3, #23
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 82bf 	bne.w	8007df4 <f_open+0x618>
		INIT_BUF(dj);
 8007876:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800787a:	461a      	mov	r2, r3
 800787c:	f107 0318 	add.w	r3, r7, #24
 8007880:	3b04      	subs	r3, #4
 8007882:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 8007886:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800788a:	461a      	mov	r2, r3
 800788c:	4bd4      	ldr	r3, [pc, #848]	; (8007be0 <f_open+0x404>)
 800788e:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007892:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007896:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800789a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800789e:	3b18      	subs	r3, #24
 80078a0:	4611      	mov	r1, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff faba 	bl	8006e1c <follow_path>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078ae:	f102 0217 	add.w	r2, r2, #23
 80078b2:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80078b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078b8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80078bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078c0:	f102 0210 	add.w	r2, r2, #16
 80078c4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80078c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078ca:	f103 0317 	add.w	r3, r3, #23
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d126      	bne.n	8007922 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 80078d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078d8:	f103 0310 	add.w	r3, r3, #16
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <f_open+0x114>
				res = FR_INVALID_NAME;
 80078e2:	2306      	movs	r3, #6
 80078e4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078e8:	f102 0217 	add.w	r2, r2, #23
 80078ec:	7013      	strb	r3, [r2, #0]
 80078ee:	e018      	b.n	8007922 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078f4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800790c:	3b18      	subs	r3, #24
 800790e:	4611      	mov	r1, r2
 8007910:	4618      	mov	r0, r3
 8007912:	f7fd fbc3 	bl	800509c <chk_lock>
 8007916:	4603      	mov	r3, r0
 8007918:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800791c:	f102 0217 	add.w	r2, r2, #23
 8007920:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007926:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800792a:	f003 031c 	and.w	r3, r3, #28
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 813c 	beq.w	8007bac <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007934:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007938:	f103 0317 	add.w	r3, r3, #23
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d02e      	beq.n	80079a0 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007942:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007946:	f103 0317 	add.w	r3, r3, #23
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d112      	bne.n	8007976 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007950:	f7fd fc14 	bl	800517c <enq_lock>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <f_open+0x18e>
 800795a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800795e:	3b18      	subs	r3, #24
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe ff79 	bl	8006858 <dir_register>
 8007966:	4603      	mov	r3, r0
 8007968:	e000      	b.n	800796c <f_open+0x190>
 800796a:	2312      	movs	r3, #18
 800796c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007970:	f102 0217 	add.w	r2, r2, #23
 8007974:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800797a:	461a      	mov	r2, r3
 800797c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007980:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007984:	f043 0308 	orr.w	r3, r3, #8
 8007988:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800798c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007990:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007994:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007998:	f102 0210 	add.w	r2, r2, #16
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	e01f      	b.n	80079e0 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80079a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079a4:	f103 0310 	add.w	r3, r3, #16
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330b      	adds	r3, #11
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 0311 	and.w	r3, r3, #17
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <f_open+0x1e8>
					res = FR_DENIED;
 80079b6:	2307      	movs	r3, #7
 80079b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079bc:	f102 0217 	add.w	r2, r2, #23
 80079c0:	7013      	strb	r3, [r2, #0]
 80079c2:	e00d      	b.n	80079e0 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80079c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079c8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <f_open+0x204>
						res = FR_EXIST;
 80079d4:	2308      	movs	r3, #8
 80079d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079da:	f102 0217 	add.w	r2, r2, #23
 80079de:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079e4:	f103 0317 	add.w	r3, r3, #23
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f040 8113 	bne.w	8007c16 <f_open+0x43a>
 80079f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079f4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 810a 	beq.w	8007c16 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007a02:	f7fd f9d3 	bl	8004dac <get_fattime>
 8007a06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a0a:	f103 030c 	add.w	r3, r3, #12
 8007a0e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007a10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a14:	f103 0310 	add.w	r3, r3, #16
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330e      	adds	r3, #14
 8007a1c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a20:	f102 020c 	add.w	r2, r2, #12
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a2e:	f103 030c 	add.w	r3, r3, #12
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a3e:	f103 0310 	add.w	r3, r3, #16
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330f      	adds	r3, #15
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a4e:	f103 030c 	add.w	r3, r3, #12
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	0c1a      	lsrs	r2, r3, #16
 8007a56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a5a:	f103 0310 	add.w	r3, r3, #16
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3310      	adds	r3, #16
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a6a:	f103 030c 	add.w	r3, r3, #12
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	0e1a      	lsrs	r2, r3, #24
 8007a72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a76:	f103 0310 	add.w	r3, r3, #16
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3311      	adds	r3, #17
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007a82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a86:	f103 0310 	add.w	r3, r3, #16
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330b      	adds	r3, #11
 8007a8e:	2200      	movs	r2, #0
 8007a90:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007a92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a96:	f103 0310 	add.w	r3, r3, #16
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	331c      	adds	r3, #28
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aa6:	f103 0310 	add.w	r3, r3, #16
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	331d      	adds	r3, #29
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ab6:	f103 0310 	add.w	r3, r3, #16
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	331e      	adds	r3, #30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ac6:	f103 0310 	add.w	r3, r3, #16
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	331f      	adds	r3, #31
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ad6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ada:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ade:	f102 0210 	add.w	r2, r2, #16
 8007ae2:	6811      	ldr	r1, [r2, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fc00 	bl	80062ea <ld_clust>
 8007aea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aee:	f103 0308 	add.w	r3, r3, #8
 8007af2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007af4:	2100      	movs	r1, #0
 8007af6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007afa:	f103 0310 	add.w	r3, r3, #16
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f7fe fc22 	bl	8006348 <st_clust>
				dj.fs->wflag = 1;
 8007b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b08:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b10:	2201      	movs	r2, #1
 8007b12:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007b14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b18:	f103 0308 	add.w	r3, r3, #8
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d079      	beq.n	8007c16 <f_open+0x43a>
					dw = dj.fs->winsect;
 8007b22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b26:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b34:	f102 020c 	add.w	r2, r2, #12
 8007b38:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b3e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007b42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b46:	f102 0208 	add.w	r2, r2, #8
 8007b4a:	6811      	ldr	r1, [r2, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe f81c 	bl	8005b8a <remove_chain>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b58:	f102 0217 	add.w	r2, r2, #23
 8007b5c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b62:	f103 0317 	add.w	r3, r3, #23
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d154      	bne.n	8007c16 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007b6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b70:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007b74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b78:	f103 0308 	add.w	r3, r3, #8
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b84:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007b86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b8a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007b8e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b92:	f102 020c 	add.w	r2, r2, #12
 8007b96:	6811      	ldr	r1, [r2, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd fc91 	bl	80054c0 <move_window>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ba4:	f102 0217 	add.w	r2, r2, #23
 8007ba8:	7013      	strb	r3, [r2, #0]
 8007baa:	e034      	b.n	8007c16 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007bac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bb0:	f103 0317 	add.w	r3, r3, #23
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d12d      	bne.n	8007c16 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007bba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bbe:	f103 0310 	add.w	r3, r3, #16
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330b      	adds	r3, #11
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <f_open+0x408>
					res = FR_NO_FILE;
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bd6:	f102 0217 	add.w	r2, r2, #23
 8007bda:	7013      	strb	r3, [r2, #0]
 8007bdc:	e01b      	b.n	8007c16 <f_open+0x43a>
 8007bde:	bf00      	nop
 8007be0:	200001c0 	.word	0x200001c0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007be4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007be8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d010      	beq.n	8007c16 <f_open+0x43a>
 8007bf4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bf8:	f103 0310 	add.w	r3, r3, #16
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330b      	adds	r3, #11
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <f_open+0x43a>
						res = FR_DENIED;
 8007c0a:	2307      	movs	r3, #7
 8007c0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c10:	f102 0217 	add.w	r2, r2, #23
 8007c14:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007c16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c1a:	f103 0317 	add.w	r3, r3, #23
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d157      	bne.n	8007cd4 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c28:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00a      	beq.n	8007c4a <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007c34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c38:	461a      	mov	r2, r3
 8007c3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c3e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c42:	f043 0320 	orr.w	r3, r3, #32
 8007c46:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c4e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007c5c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007c60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c64:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007c66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c6a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c72:	461a      	mov	r2, r3
 8007c74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c78:	f103 0310 	add.w	r3, r3, #16
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c84:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007c88:	f023 0301 	bic.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf14      	ite	ne
 8007c90:	2301      	movne	r3, #1
 8007c92:	2300      	moveq	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c9c:	3b18      	subs	r3, #24
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fd fa8f 	bl	80051c4 <inc_lock>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cac:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007cb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <f_open+0x4f8>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cce:	f102 0217 	add.w	r2, r2, #23
 8007cd2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007cd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cd8:	f103 0317 	add.w	r3, r3, #23
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 8088 	bne.w	8007df4 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8007ce4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ce8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cf6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007cfa:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d00:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d08:	2200      	movs	r2, #0
 8007d0a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007d0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d10:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d14:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d18:	f102 0210 	add.w	r2, r2, #16
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fae3 	bl	80062ea <ld_clust>
 8007d24:	4602      	mov	r2, r0
 8007d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d2a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d32:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007d34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d38:	f103 0310 	add.w	r3, r3, #16
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	331f      	adds	r3, #31
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	061a      	lsls	r2, r3, #24
 8007d44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d48:	f103 0310 	add.w	r3, r3, #16
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	331e      	adds	r3, #30
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d5a:	f102 0210 	add.w	r2, r2, #16
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	321d      	adds	r2, #29
 8007d62:	7812      	ldrb	r2, [r2, #0]
 8007d64:	0212      	lsls	r2, r2, #8
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d6c:	f102 0210 	add.w	r2, r2, #16
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	321c      	adds	r2, #28
 8007d74:	7812      	ldrb	r2, [r2, #0]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d7c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007d80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d84:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d8a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	461a      	mov	r2, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007d98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d9c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db6:	461a      	mov	r2, r3
 8007db8:	2300      	movs	r3, #0
 8007dba:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007dbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dc0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007dc4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007dc8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007dd0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007dd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dd6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de4:	88da      	ldrh	r2, [r3, #6]
 8007de6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007df4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007df8:	f103 0317 	add.w	r3, r3, #23
 8007dfc:	781b      	ldrb	r3, [r3, #0]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop

08007e0c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fc53 	bl	80076d0 <validate>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <f_read+0x2c>
 8007e34:	7ffb      	ldrb	r3, [r7, #31]
 8007e36:	e1cd      	b.n	80081d4 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3e:	79db      	ldrb	r3, [r3, #7]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4a:	79db      	ldrb	r3, [r3, #7]
 8007e4c:	e1c2      	b.n	80081d4 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	799b      	ldrb	r3, [r3, #6]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007e5e:	2307      	movs	r3, #7
 8007e60:	e1b8      	b.n	80081d4 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	f240 81a5 	bls.w	80081ca <f_read+0x3be>
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007e84:	e1a1      	b.n	80081ca <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e9a:	8952      	ldrh	r2, [r2, #10]
 8007e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea0:	fb01 f202 	mul.w	r2, r1, r2
 8007ea4:	1a9b      	subs	r3, r3, r2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f040 8140 	bne.w	800812c <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ec0:	8952      	ldrh	r2, [r2, #10]
 8007ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed4:	789b      	ldrb	r3, [r3, #2]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	4013      	ands	r3, r2
 8007edc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d143      	bne.n	8007f6c <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efa:	e01c      	b.n	8007f36 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4619      	mov	r1, r3
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7fd ff42 	bl	8005d9c <clmt_clust>
 8007f18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f1a:	e00c      	b.n	8007f36 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f7fd fbdc 	bl	80056ec <get_fat>
 8007f34:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d806      	bhi.n	8007f4a <f_read+0x13e>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	2202      	movs	r2, #2
 8007f44:	71da      	strb	r2, [r3, #7]
 8007f46:	2302      	movs	r3, #2
 8007f48:	e144      	b.n	80081d4 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d106      	bne.n	8007f60 <f_read+0x154>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	2201      	movs	r2, #1
 8007f5a:	71da      	strb	r2, [r3, #7]
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e139      	b.n	80081d4 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f66:	461a      	mov	r2, r3
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7fd fb8f 	bl	80056a2 <clust2sect>
 8007f84:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d106      	bne.n	8007f9a <f_read+0x18e>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f92:	2202      	movs	r2, #2
 8007f94:	71da      	strb	r2, [r3, #7]
 8007f96:	2302      	movs	r3, #2
 8007f98:	e11c      	b.n	80081d4 <f_read+0x3c8>
			sect += csect;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fae:	895b      	ldrh	r3, [r3, #10]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d066      	beq.n	800808e <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007fc0:	7dfa      	ldrb	r2, [r7, #23]
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	4413      	add	r3, r2
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fd2:	7892      	ldrb	r2, [r2, #2]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d90a      	bls.n	8007fee <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffa:	7858      	ldrb	r0, [r3, #1]
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	6a39      	ldr	r1, [r7, #32]
 8008002:	f7fc ff71 	bl	8004ee8 <disk_read>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d006      	beq.n	800801a <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008012:	2201      	movs	r2, #1
 8008014:	71da      	strb	r2, [r3, #7]
 8008016:	2301      	movs	r3, #1
 8008018:	e0dc      	b.n	80081d4 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008020:	799b      	ldrb	r3, [r3, #6]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d024      	beq.n	8008074 <f_read+0x268>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008038:	429a      	cmp	r2, r3
 800803a:	d91b      	bls.n	8008074 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008054:	8952      	ldrh	r2, [r2, #10]
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	18d0      	adds	r0, r2, r3
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	895b      	ldrh	r3, [r3, #10]
 800806e:	461a      	mov	r2, r3
 8008070:	f7fc ff98 	bl	8004fa4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008080:	895b      	ldrh	r3, [r3, #10]
 8008082:	461a      	mov	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	fb02 f303 	mul.w	r3, r2, r3
 800808a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800808c:	e085      	b.n	800819a <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	429a      	cmp	r2, r3
 800809a:	d041      	beq.n	8008120 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	799b      	ldrb	r3, [r3, #6]
 80080a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d023      	beq.n	80080f4 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b8:	7858      	ldrb	r0, [r3, #1]
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	2301      	movs	r3, #1
 80080c6:	f7fc ff2f 	bl	8004f28 <disk_write>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d006      	beq.n	80080de <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d6:	2201      	movs	r2, #1
 80080d8:	71da      	strb	r2, [r3, #7]
 80080da:	2301      	movs	r3, #1
 80080dc:	e07a      	b.n	80081d4 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e4:	799b      	ldrb	r3, [r3, #6]
 80080e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f2:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008100:	7858      	ldrb	r0, [r3, #1]
 8008102:	68f9      	ldr	r1, [r7, #12]
 8008104:	2301      	movs	r3, #1
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	f7fc feee 	bl	8004ee8 <disk_read>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d006      	beq.n	8008120 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008118:	2201      	movs	r2, #1
 800811a:	71da      	strb	r2, [r3, #7]
 800811c:	2301      	movs	r3, #1
 800811e:	e059      	b.n	80081d4 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008126:	461a      	mov	r2, r3
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	4618      	mov	r0, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008150:	8952      	ldrh	r2, [r2, #10]
 8008152:	fbb3 f1f2 	udiv	r1, r3, r2
 8008156:	fb01 f202 	mul.w	r2, r1, r2
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	1ac3      	subs	r3, r0, r3
 800815e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	429a      	cmp	r2, r3
 8008166:	d901      	bls.n	800816c <f_read+0x360>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008180:	8952      	ldrh	r2, [r2, #10]
 8008182:	fbb3 f1f2 	udiv	r1, r3, r2
 8008186:	fb01 f202 	mul.w	r2, r1, r2
 800818a:	1a9b      	subs	r3, r3, r2
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008192:	4619      	mov	r1, r3
 8008194:	6a38      	ldr	r0, [r7, #32]
 8008196:	f7fc ff05 	bl	8004fa4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	4413      	add	r3, r2
 80081a0:	623b      	str	r3, [r7, #32]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	4413      	add	r3, r2
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081b4:	6093      	str	r3, [r2, #8]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	441a      	add	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f ae5a 	bne.w	8007e86 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3730      	adds	r7, #48	; 0x30
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f7ff fa6b 	bl	80076d0 <validate>
 80081fa:	4603      	mov	r3, r0
 80081fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <f_write+0x2c>
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	e21e      	b.n	8008646 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820e:	79db      	ldrb	r3, [r3, #7]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821a:	79db      	ldrb	r3, [r3, #7]
 800821c:	e213      	b.n	8008646 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008224:	799b      	ldrb	r3, [r3, #6]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800822e:	2307      	movs	r3, #7
 8008230:	e209      	b.n	8008646 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	441a      	add	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	f080 81d9 	bcs.w	80085fe <f_write+0x422>
 800824c:	2300      	movs	r3, #0
 800824e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008250:	e1d5      	b.n	80085fe <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008266:	8952      	ldrh	r2, [r2, #10]
 8008268:	fbb3 f1f2 	udiv	r1, r3, r2
 800826c:	fb01 f202 	mul.w	r2, r1, r2
 8008270:	1a9b      	subs	r3, r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 8169 	bne.w	800854a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800828c:	8952      	ldrh	r2, [r2, #10]
 800828e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008292:	b2da      	uxtb	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a0:	789b      	ldrb	r3, [r3, #2]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	4013      	ands	r3, r2
 80082a8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d15f      	bne.n	8008370 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d111      	bne.n	80082e0 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d126      	bne.n	800831a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fcb8 	bl	8005c4c <create_chain>
 80082dc:	6278      	str	r0, [r7, #36]	; 0x24
 80082de:	e01c      	b.n	800831a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	4619      	mov	r1, r3
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7fd fd50 	bl	8005d9c <clmt_clust>
 80082fc:	6278      	str	r0, [r7, #36]	; 0x24
 80082fe:	e00c      	b.n	800831a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f7fd fc9a 	bl	8005c4c <create_chain>
 8008318:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8173 	beq.w	8008608 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008324:	2b01      	cmp	r3, #1
 8008326:	d106      	bne.n	8008336 <f_write+0x15a>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832e:	2202      	movs	r2, #2
 8008330:	71da      	strb	r2, [r3, #7]
 8008332:	2302      	movs	r3, #2
 8008334:	e187      	b.n	8008646 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d106      	bne.n	800834c <f_write+0x170>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008344:	2201      	movs	r2, #1
 8008346:	71da      	strb	r2, [r3, #7]
 8008348:	2301      	movs	r3, #1
 800834a:	e17c      	b.n	8008646 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008352:	461a      	mov	r2, r3
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <f_write+0x194>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836a:	461a      	mov	r2, r3
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008376:	799b      	ldrb	r3, [r3, #6]
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d023      	beq.n	80083c8 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800838c:	7858      	ldrb	r0, [r3, #1]
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	2301      	movs	r3, #1
 800839a:	f7fc fdc5 	bl	8004f28 <disk_write>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d006      	beq.n	80083b2 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083aa:	2201      	movs	r2, #1
 80083ac:	71da      	strb	r2, [r3, #7]
 80083ae:	2301      	movs	r3, #1
 80083b0:	e149      	b.n	8008646 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b8:	799b      	ldrb	r3, [r3, #6]
 80083ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7fd f961 	bl	80056a2 <clust2sect>
 80083e0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d106      	bne.n	80083f6 <f_write+0x21a>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ee:	2202      	movs	r2, #2
 80083f0:	71da      	strb	r2, [r3, #7]
 80083f2:	2302      	movs	r3, #2
 80083f4:	e127      	b.n	8008646 <f_write+0x46a>
			sect += csect;
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840a:	895b      	ldrh	r3, [r3, #10]
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	fbb3 f3f2 	udiv	r3, r3, r2
 8008414:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d069      	beq.n	80084f0 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800841c:	7dba      	ldrb	r2, [r7, #22]
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	4413      	add	r3, r2
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008428:	6812      	ldr	r2, [r2, #0]
 800842a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800842e:	7892      	ldrb	r2, [r2, #2]
 8008430:	4293      	cmp	r3, r2
 8008432:	d90a      	bls.n	800844a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008440:	789b      	ldrb	r3, [r3, #2]
 8008442:	461a      	mov	r2, r3
 8008444:	7dbb      	ldrb	r3, [r7, #22]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	7858      	ldrb	r0, [r3, #1]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	69b9      	ldr	r1, [r7, #24]
 800845e:	f7fc fd63 	bl	8004f28 <disk_write>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846e:	2201      	movs	r2, #1
 8008470:	71da      	strb	r2, [r3, #7]
 8008472:	2301      	movs	r3, #1
 8008474:	e0e7      	b.n	8008646 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	429a      	cmp	r2, r3
 8008486:	d926      	bls.n	80084d6 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800849c:	6812      	ldr	r2, [r2, #0]
 800849e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084a2:	8952      	ldrh	r2, [r2, #10]
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	18d1      	adds	r1, r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	895b      	ldrh	r3, [r3, #10]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7fc fd72 	bl	8004fa4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c6:	799b      	ldrb	r3, [r3, #6]
 80084c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d4:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e2:	895b      	ldrh	r3, [r3, #10]
 80084e4:	461a      	mov	r2, r3
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	fb02 f303 	mul.w	r3, r2, r3
 80084ec:	623b      	str	r3, [r7, #32]
				continue;
 80084ee:	e06e      	b.n	80085ce <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d01f      	beq.n	800853e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	429a      	cmp	r2, r3
 8008510:	d215      	bcs.n	800853e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851e:	7858      	ldrb	r0, [r3, #1]
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	2301      	movs	r3, #1
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	f7fc fcdf 	bl	8004ee8 <disk_read>
 800852a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800852c:	2b00      	cmp	r3, #0
 800852e:	d006      	beq.n	800853e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008536:	2201      	movs	r2, #1
 8008538:	71da      	strb	r2, [r3, #7]
 800853a:	2301      	movs	r3, #1
 800853c:	e083      	b.n	8008646 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008544:	461a      	mov	r2, r3
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008556:	895b      	ldrh	r3, [r3, #10]
 8008558:	4618      	mov	r0, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800856e:	8952      	ldrh	r2, [r2, #10]
 8008570:	fbb3 f1f2 	udiv	r1, r3, r2
 8008574:	fb01 f202 	mul.w	r2, r1, r2
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	1ac3      	subs	r3, r0, r3
 800857c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	429a      	cmp	r2, r3
 8008584:	d901      	bls.n	800858a <f_write+0x3ae>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800859e:	8952      	ldrh	r2, [r2, #10]
 80085a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085a4:	fb01 f202 	mul.w	r2, r1, r2
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	69b9      	ldr	r1, [r7, #24]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fc fcf6 	bl	8004fa4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085be:	799b      	ldrb	r3, [r3, #6]
 80085c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085cc:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	4413      	add	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085dc:	689a      	ldr	r2, [r3, #8]
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	4413      	add	r3, r2
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085e8:	6093      	str	r3, [r2, #8]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	441a      	add	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f47f ae26 	bne.w	8008252 <f_write+0x76>
 8008606:	e000      	b.n	800860a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008608:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	429a      	cmp	r2, r3
 800861c:	d907      	bls.n	800862e <f_write+0x452>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800862c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008634:	799b      	ldrb	r3, [r3, #6]
 8008636:	f043 0320 	orr.w	r3, r3, #32
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3728      	adds	r7, #40	; 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff f83a 	bl	80076d0 <validate>
 800865c:	4603      	mov	r3, r0
 800865e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 80bc 	bne.w	80087e0 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866e:	799b      	ldrb	r3, [r3, #6]
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80b3 	beq.w	80087e0 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008680:	799b      	ldrb	r3, [r3, #6]
 8008682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01e      	beq.n	80086c8 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008696:	7858      	ldrb	r0, [r3, #1]
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	2301      	movs	r3, #1
 80086a4:	f7fc fc40 	bl	8004f28 <disk_write>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80086ae:	2301      	movs	r3, #1
 80086b0:	e097      	b.n	80087e2 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	799b      	ldrb	r3, [r3, #6]
 80086ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fc fef0 	bl	80054c0 <move_window>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d17a      	bne.n	80087e0 <f_sync+0x192>
				dir = fp->dir_ptr;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	330b      	adds	r3, #11
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	330b      	adds	r3, #11
 80086fe:	f042 0220 	orr.w	r2, r2, #32
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	331c      	adds	r3, #28
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	b29b      	uxth	r3, r3
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	b29a      	uxth	r2, r3
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	331d      	adds	r3, #29
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	0c1a      	lsrs	r2, r3, #16
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	331e      	adds	r3, #30
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	0e1a      	lsrs	r2, r3, #24
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	331f      	adds	r3, #31
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	4619      	mov	r1, r3
 800875a:	6938      	ldr	r0, [r7, #16]
 800875c:	f7fd fdf4 	bl	8006348 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008760:	f7fc fb24 	bl	8004dac <get_fattime>
 8008764:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	3316      	adds	r3, #22
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	b29b      	uxth	r3, r3
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	b29a      	uxth	r2, r3
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	3317      	adds	r3, #23
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	701a      	strb	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0c1a      	lsrs	r2, r3, #16
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	3318      	adds	r3, #24
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	0e1a      	lsrs	r2, r3, #24
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	3319      	adds	r3, #25
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3312      	adds	r3, #18
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	3313      	adds	r3, #19
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ae:	799b      	ldrb	r3, [r3, #6]
 80087b0:	f023 0320 	bic.w	r3, r3, #32
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087bc:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ca:	2201      	movs	r2, #1
 80087cc:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fc fea4 	bl	8005524 <sync_fs>
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff ff2b 	bl	800864e <f_sync>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d119      	bne.n	8008836 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7fe ff64 	bl	80076d0 <validate>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d111      	bne.n	8008836 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	4618      	mov	r0, r3
 800881c:	f7fc fd90 	bl	8005340 <dec_lock>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	461a      	mov	r2, r3
 8008832:	2300      	movs	r3, #0
 8008834:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	; 0x38
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	2200      	movs	r2, #0
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7fe fc09 	bl	800706c <find_volume>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8008866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800886a:	2b00      	cmp	r3, #0
 800886c:	f040 80bc 	bne.w	80089e8 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008876:	691a      	ldr	r2, [r3, #16]
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	3b02      	subs	r3, #2
 8008882:	429a      	cmp	r2, r3
 8008884:	d806      	bhi.n	8008894 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	e0a9      	b.n	80089e8 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80088a2:	7efb      	ldrb	r3, [r7, #27]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d126      	bne.n	80088f6 <f_getfree+0xb6>
				clst = 2;
 80088a8:	2302      	movs	r3, #2
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80088ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088ae:	69f8      	ldr	r0, [r7, #28]
 80088b0:	f7fc ff1c 	bl	80056ec <get_fat>
 80088b4:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d103      	bne.n	80088c6 <f_getfree+0x86>
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088c4:	e07c      	b.n	80089c0 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d103      	bne.n	80088d4 <f_getfree+0x94>
 80088cc:	2302      	movs	r3, #2
 80088ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088d2:	e075      	b.n	80089c0 <f_getfree+0x180>
					if (stat == 0) n++;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d102      	bne.n	80088e0 <f_getfree+0xa0>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	3301      	adds	r3, #1
 80088de:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	3301      	adds	r3, #1
 80088e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d3db      	bcc.n	80088ac <f_getfree+0x6c>
 80088f4:	e064      	b.n	80089c0 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	627b      	str	r3, [r7, #36]	; 0x24
 800890e:	2300      	movs	r3, #0
 8008910:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d114      	bne.n	8008942 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	62ba      	str	r2, [r7, #40]	; 0x28
 800891e:	4619      	mov	r1, r3
 8008920:	69f8      	ldr	r0, [r7, #28]
 8008922:	f7fc fdcd 	bl	80054c0 <move_window>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800892c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008930:	2b00      	cmp	r3, #0
 8008932:	d144      	bne.n	80089be <f_getfree+0x17e>
						p = fs->win.d8;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800893e:	895b      	ldrh	r3, [r3, #10]
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8008942:	7efb      	ldrb	r3, [r7, #27]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d115      	bne.n	8008974 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	3301      	adds	r3, #1
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	b21a      	sxth	r2, r3
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	b21b      	sxth	r3, r3
 8008958:	4313      	orrs	r3, r2
 800895a:	b21b      	sxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <f_getfree+0x126>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	3301      	adds	r3, #1
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	3302      	adds	r3, #2
 800896a:	623b      	str	r3, [r7, #32]
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	3b02      	subs	r3, #2
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	e01d      	b.n	80089b0 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	3303      	adds	r3, #3
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	061a      	lsls	r2, r3, #24
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	3302      	adds	r3, #2
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	4313      	orrs	r3, r2
 8008986:	6a3a      	ldr	r2, [r7, #32]
 8008988:	3201      	adds	r2, #1
 800898a:	7812      	ldrb	r2, [r2, #0]
 800898c:	0212      	lsls	r2, r2, #8
 800898e:	4313      	orrs	r3, r2
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	7812      	ldrb	r2, [r2, #0]
 8008994:	4313      	orrs	r3, r2
 8008996:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <f_getfree+0x164>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	3301      	adds	r3, #1
 80089a2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	3304      	adds	r3, #4
 80089a8:	623b      	str	r3, [r7, #32]
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	3b04      	subs	r3, #4
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80089b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b2:	3b01      	subs	r3, #1
 80089b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1aa      	bne.n	8008912 <f_getfree+0xd2>
 80089bc:	e000      	b.n	80089c0 <f_getfree+0x180>
						if (res != FR_OK) break;
 80089be:	bf00      	nop
			}
			fs->free_clust = n;
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c6:	461a      	mov	r2, r3
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d2:	795b      	ldrb	r3, [r3, #5]
 80089d4:	f043 0301 	orr.w	r3, r3, #1
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e0:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e6:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80089e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3738      	adds	r7, #56	; 0x38
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a08:	e01b      	b.n	8008a42 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008a0a:	f107 0310 	add.w	r3, r7, #16
 8008a0e:	f107 0114 	add.w	r1, r7, #20
 8008a12:	2201      	movs	r2, #1
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff f9f9 	bl	8007e0c <f_read>
		if (rc != 1) break;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d116      	bne.n	8008a4e <f_gets+0x5a>
		c = s[0];
 8008a20:	7d3b      	ldrb	r3, [r7, #20]
 8008a22:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b0d      	cmp	r3, #13
 8008a28:	d100      	bne.n	8008a2c <f_gets+0x38>
 8008a2a:	e00a      	b.n	8008a42 <f_gets+0x4e>
		*p++ = c;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	61ba      	str	r2, [r7, #24]
 8008a32:	7dfa      	ldrb	r2, [r7, #23]
 8008a34:	701a      	strb	r2, [r3, #0]
		n++;
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b0a      	cmp	r3, #10
 8008a40:	d007      	beq.n	8008a52 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	dbde      	blt.n	8008a0a <f_gets+0x16>
 8008a4c:	e002      	b.n	8008a54 <f_gets+0x60>
		if (rc != 1) break;
 8008a4e:	bf00      	nop
 8008a50:	e000      	b.n	8008a54 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008a52:	bf00      	nop
	}
	*p = 0;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <f_gets+0x70>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	e000      	b.n	8008a66 <f_gets+0x72>
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	2b0a      	cmp	r3, #10
 8008a7e:	d103      	bne.n	8008a88 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008a80:	210d      	movs	r1, #13
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f7ff fff3 	bl	8008a6e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	db25      	blt.n	8008ae0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	60fa      	str	r2, [r7, #12]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b3c      	cmp	r3, #60	; 0x3c
 8008aa6:	dd12      	ble.n	8008ace <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f103 010c 	add.w	r1, r3, #12
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	f7ff fb90 	bl	80081dc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d101      	bne.n	8008ac8 <putc_bfd+0x5a>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e001      	b.n	8008acc <putc_bfd+0x5e>
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	609a      	str	r2, [r3, #8]
 8008ade:	e000      	b.n	8008ae2 <putc_bfd+0x74>
	if (i < 0) return;
 8008ae0:	bf00      	nop
}
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008ae8:	b590      	push	{r4, r7, lr}
 8008aea:	b097      	sub	sp, #92	; 0x5c
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8008afe:	e009      	b.n	8008b14 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	607a      	str	r2, [r7, #4]
 8008b06:	781a      	ldrb	r2, [r3, #0]
 8008b08:	f107 030c 	add.w	r3, r7, #12
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff ffad 	bl	8008a6e <putc_bfd>
	while (*str)			/* Put the string */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f1      	bne.n	8008b00 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db15      	blt.n	8008b4e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	461c      	mov	r4, r3
 8008b28:	f107 0208 	add.w	r2, r7, #8
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	f103 010c 	add.w	r1, r3, #12
 8008b34:	4613      	mov	r3, r2
 8008b36:	4622      	mov	r2, r4
 8008b38:	f7ff fb50 	bl	80081dc <f_write>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d101      	bne.n	8008b4e <f_puts+0x66>
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	e001      	b.n	8008b52 <f_puts+0x6a>
	return EOF;
 8008b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	375c      	adds	r7, #92	; 0x5c
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd90      	pop	{r4, r7, pc}
	...

08008b5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008b72:	4b1f      	ldr	r3, [pc, #124]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b74:	7a5b      	ldrb	r3, [r3, #9]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d831      	bhi.n	8008be0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b7c:	4b1c      	ldr	r3, [pc, #112]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b7e:	7a5b      	ldrb	r3, [r3, #9]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	4b1a      	ldr	r3, [pc, #104]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b86:	2100      	movs	r1, #0
 8008b88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008b8a:	4b19      	ldr	r3, [pc, #100]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b8c:	7a5b      	ldrb	r3, [r3, #9]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4413      	add	r3, r2
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008b9a:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008b9c:	7a5b      	ldrb	r3, [r3, #9]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008ba4:	4413      	add	r3, r2
 8008ba6:	79fa      	ldrb	r2, [r7, #7]
 8008ba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008baa:	4b11      	ldr	r3, [pc, #68]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008bac:	7a5b      	ldrb	r3, [r3, #9]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	b2d1      	uxtb	r1, r2
 8008bb4:	4a0e      	ldr	r2, [pc, #56]	; (8008bf0 <FATFS_LinkDriverEx+0x94>)
 8008bb6:	7251      	strb	r1, [r2, #9]
 8008bb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bba:	7dbb      	ldrb	r3, [r7, #22]
 8008bbc:	3330      	adds	r3, #48	; 0x30
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	223a      	movs	r2, #58	; 0x3a
 8008bca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	3302      	adds	r3, #2
 8008bd0:	222f      	movs	r2, #47	; 0x2f
 8008bd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	3303      	adds	r3, #3
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200003c0 	.word	0x200003c0

08008bf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bfe:	2200      	movs	r2, #0
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ffaa 	bl	8008b5c <FATFS_LinkDriverEx>
 8008c08:	4603      	mov	r3, r0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
	...

08008c14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	2b7f      	cmp	r3, #127	; 0x7f
 8008c24:	d802      	bhi.n	8008c2c <ff_convert+0x18>
		c = chr;
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	81fb      	strh	r3, [r7, #14]
 8008c2a:	e025      	b.n	8008c78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2bff      	cmp	r3, #255	; 0xff
 8008c36:	d805      	bhi.n	8008c44 <ff_convert+0x30>
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	3b80      	subs	r3, #128	; 0x80
 8008c3c:	4a12      	ldr	r2, [pc, #72]	; (8008c88 <ff_convert+0x74>)
 8008c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c42:	e000      	b.n	8008c46 <ff_convert+0x32>
 8008c44:	2300      	movs	r3, #0
 8008c46:	81fb      	strh	r3, [r7, #14]
 8008c48:	e016      	b.n	8008c78 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	81fb      	strh	r3, [r7, #14]
 8008c4e:	e009      	b.n	8008c64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c50:	89fb      	ldrh	r3, [r7, #14]
 8008c52:	4a0d      	ldr	r2, [pc, #52]	; (8008c88 <ff_convert+0x74>)
 8008c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c58:	88fa      	ldrh	r2, [r7, #6]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d006      	beq.n	8008c6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c5e:	89fb      	ldrh	r3, [r7, #14]
 8008c60:	3301      	adds	r3, #1
 8008c62:	81fb      	strh	r3, [r7, #14]
 8008c64:	89fb      	ldrh	r3, [r7, #14]
 8008c66:	2b7f      	cmp	r3, #127	; 0x7f
 8008c68:	d9f2      	bls.n	8008c50 <ff_convert+0x3c>
 8008c6a:	e000      	b.n	8008c6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	3380      	adds	r3, #128	; 0x80
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c78:	89fb      	ldrh	r3, [r7, #14]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	08009e98 	.word	0x08009e98

08008c8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e002      	b.n	8008ca2 <ff_wtoupper+0x16>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
 8008ca2:	4a0f      	ldr	r2, [pc, #60]	; (8008ce0 <ff_wtoupper+0x54>)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <ff_wtoupper+0x30>
 8008cae:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <ff_wtoupper+0x54>)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb6:	88fa      	ldrh	r2, [r7, #6]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d1ef      	bne.n	8008c9c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <ff_wtoupper+0x54>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <ff_wtoupper+0x46>
 8008cc8:	4a06      	ldr	r2, [pc, #24]	; (8008ce4 <ff_wtoupper+0x58>)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd0:	e000      	b.n	8008cd4 <ff_wtoupper+0x48>
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	08009f98 	.word	0x08009f98
 8008ce4:	0800a178 	.word	0x0800a178

08008ce8 <std>:
 8008ce8:	2300      	movs	r3, #0
 8008cea:	b510      	push	{r4, lr}
 8008cec:	4604      	mov	r4, r0
 8008cee:	e9c0 3300 	strd	r3, r3, [r0]
 8008cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf6:	6083      	str	r3, [r0, #8]
 8008cf8:	8181      	strh	r1, [r0, #12]
 8008cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8008cfc:	81c2      	strh	r2, [r0, #14]
 8008cfe:	6183      	str	r3, [r0, #24]
 8008d00:	4619      	mov	r1, r3
 8008d02:	2208      	movs	r2, #8
 8008d04:	305c      	adds	r0, #92	; 0x5c
 8008d06:	f000 f9f7 	bl	80090f8 <memset>
 8008d0a:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <std+0x58>)
 8008d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <std+0x5c>)
 8008d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <std+0x60>)
 8008d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d16:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <std+0x64>)
 8008d18:	6323      	str	r3, [r4, #48]	; 0x30
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	; (8008d50 <std+0x68>)
 8008d1c:	6224      	str	r4, [r4, #32]
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d006      	beq.n	8008d30 <std+0x48>
 8008d22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d26:	4294      	cmp	r4, r2
 8008d28:	d002      	beq.n	8008d30 <std+0x48>
 8008d2a:	33d0      	adds	r3, #208	; 0xd0
 8008d2c:	429c      	cmp	r4, r3
 8008d2e:	d105      	bne.n	8008d3c <std+0x54>
 8008d30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d38:	f000 ba56 	b.w	80091e8 <__retarget_lock_init_recursive>
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	bf00      	nop
 8008d40:	08008f49 	.word	0x08008f49
 8008d44:	08008f6b 	.word	0x08008f6b
 8008d48:	08008fa3 	.word	0x08008fa3
 8008d4c:	08008fc7 	.word	0x08008fc7
 8008d50:	200003cc 	.word	0x200003cc

08008d54 <stdio_exit_handler>:
 8008d54:	4a02      	ldr	r2, [pc, #8]	; (8008d60 <stdio_exit_handler+0xc>)
 8008d56:	4903      	ldr	r1, [pc, #12]	; (8008d64 <stdio_exit_handler+0x10>)
 8008d58:	4803      	ldr	r0, [pc, #12]	; (8008d68 <stdio_exit_handler+0x14>)
 8008d5a:	f000 b869 	b.w	8008e30 <_fwalk_sglue>
 8008d5e:	bf00      	nop
 8008d60:	20000024 	.word	0x20000024
 8008d64:	08009a95 	.word	0x08009a95
 8008d68:	20000030 	.word	0x20000030

08008d6c <cleanup_stdio>:
 8008d6c:	6841      	ldr	r1, [r0, #4]
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <cleanup_stdio+0x34>)
 8008d70:	4299      	cmp	r1, r3
 8008d72:	b510      	push	{r4, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	d001      	beq.n	8008d7c <cleanup_stdio+0x10>
 8008d78:	f000 fe8c 	bl	8009a94 <_fflush_r>
 8008d7c:	68a1      	ldr	r1, [r4, #8]
 8008d7e:	4b09      	ldr	r3, [pc, #36]	; (8008da4 <cleanup_stdio+0x38>)
 8008d80:	4299      	cmp	r1, r3
 8008d82:	d002      	beq.n	8008d8a <cleanup_stdio+0x1e>
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fe85 	bl	8009a94 <_fflush_r>
 8008d8a:	68e1      	ldr	r1, [r4, #12]
 8008d8c:	4b06      	ldr	r3, [pc, #24]	; (8008da8 <cleanup_stdio+0x3c>)
 8008d8e:	4299      	cmp	r1, r3
 8008d90:	d004      	beq.n	8008d9c <cleanup_stdio+0x30>
 8008d92:	4620      	mov	r0, r4
 8008d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d98:	f000 be7c 	b.w	8009a94 <_fflush_r>
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	200003cc 	.word	0x200003cc
 8008da4:	20000434 	.word	0x20000434
 8008da8:	2000049c 	.word	0x2000049c

08008dac <global_stdio_init.part.0>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <global_stdio_init.part.0+0x30>)
 8008db0:	4c0b      	ldr	r4, [pc, #44]	; (8008de0 <global_stdio_init.part.0+0x34>)
 8008db2:	4a0c      	ldr	r2, [pc, #48]	; (8008de4 <global_stdio_init.part.0+0x38>)
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	4620      	mov	r0, r4
 8008db8:	2200      	movs	r2, #0
 8008dba:	2104      	movs	r1, #4
 8008dbc:	f7ff ff94 	bl	8008ce8 <std>
 8008dc0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	2109      	movs	r1, #9
 8008dc8:	f7ff ff8e 	bl	8008ce8 <std>
 8008dcc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd6:	2112      	movs	r1, #18
 8008dd8:	f7ff bf86 	b.w	8008ce8 <std>
 8008ddc:	20000504 	.word	0x20000504
 8008de0:	200003cc 	.word	0x200003cc
 8008de4:	08008d55 	.word	0x08008d55

08008de8 <__sfp_lock_acquire>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sfp_lock_acquire+0x8>)
 8008dea:	f000 b9fe 	b.w	80091ea <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	2000050d 	.word	0x2000050d

08008df4 <__sfp_lock_release>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__sfp_lock_release+0x8>)
 8008df6:	f000 b9f9 	b.w	80091ec <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	2000050d 	.word	0x2000050d

08008e00 <__sinit>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	4604      	mov	r4, r0
 8008e04:	f7ff fff0 	bl	8008de8 <__sfp_lock_acquire>
 8008e08:	6a23      	ldr	r3, [r4, #32]
 8008e0a:	b11b      	cbz	r3, 8008e14 <__sinit+0x14>
 8008e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e10:	f7ff bff0 	b.w	8008df4 <__sfp_lock_release>
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <__sinit+0x28>)
 8008e16:	6223      	str	r3, [r4, #32]
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <__sinit+0x2c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1f5      	bne.n	8008e0c <__sinit+0xc>
 8008e20:	f7ff ffc4 	bl	8008dac <global_stdio_init.part.0>
 8008e24:	e7f2      	b.n	8008e0c <__sinit+0xc>
 8008e26:	bf00      	nop
 8008e28:	08008d6d 	.word	0x08008d6d
 8008e2c:	20000504 	.word	0x20000504

08008e30 <_fwalk_sglue>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	4607      	mov	r7, r0
 8008e36:	4688      	mov	r8, r1
 8008e38:	4614      	mov	r4, r2
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e40:	f1b9 0901 	subs.w	r9, r9, #1
 8008e44:	d505      	bpl.n	8008e52 <_fwalk_sglue+0x22>
 8008e46:	6824      	ldr	r4, [r4, #0]
 8008e48:	2c00      	cmp	r4, #0
 8008e4a:	d1f7      	bne.n	8008e3c <_fwalk_sglue+0xc>
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d907      	bls.n	8008e68 <_fwalk_sglue+0x38>
 8008e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	d003      	beq.n	8008e68 <_fwalk_sglue+0x38>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4638      	mov	r0, r7
 8008e64:	47c0      	blx	r8
 8008e66:	4306      	orrs	r6, r0
 8008e68:	3568      	adds	r5, #104	; 0x68
 8008e6a:	e7e9      	b.n	8008e40 <_fwalk_sglue+0x10>

08008e6c <iprintf>:
 8008e6c:	b40f      	push	{r0, r1, r2, r3}
 8008e6e:	b507      	push	{r0, r1, r2, lr}
 8008e70:	4906      	ldr	r1, [pc, #24]	; (8008e8c <iprintf+0x20>)
 8008e72:	ab04      	add	r3, sp, #16
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7a:	6881      	ldr	r1, [r0, #8]
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f000 fad9 	bl	8009434 <_vfiprintf_r>
 8008e82:	b003      	add	sp, #12
 8008e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e88:	b004      	add	sp, #16
 8008e8a:	4770      	bx	lr
 8008e8c:	2000007c 	.word	0x2000007c

08008e90 <_puts_r>:
 8008e90:	6a03      	ldr	r3, [r0, #32]
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	6884      	ldr	r4, [r0, #8]
 8008e96:	4605      	mov	r5, r0
 8008e98:	460e      	mov	r6, r1
 8008e9a:	b90b      	cbnz	r3, 8008ea0 <_puts_r+0x10>
 8008e9c:	f7ff ffb0 	bl	8008e00 <__sinit>
 8008ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea2:	07db      	lsls	r3, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_puts_r+0x22>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	0598      	lsls	r0, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_puts_r+0x22>
 8008eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eae:	f000 f99c 	bl	80091ea <__retarget_lock_acquire_recursive>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	0719      	lsls	r1, r3, #28
 8008eb6:	d513      	bpl.n	8008ee0 <_puts_r+0x50>
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	b18b      	cbz	r3, 8008ee0 <_puts_r+0x50>
 8008ebc:	3e01      	subs	r6, #1
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	60a3      	str	r3, [r4, #8]
 8008ec8:	b9e9      	cbnz	r1, 8008f06 <_puts_r+0x76>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	da2e      	bge.n	8008f2c <_puts_r+0x9c>
 8008ece:	4622      	mov	r2, r4
 8008ed0:	210a      	movs	r1, #10
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f87b 	bl	8008fce <__swbuf_r>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d007      	beq.n	8008eec <_puts_r+0x5c>
 8008edc:	250a      	movs	r5, #10
 8008ede:	e007      	b.n	8008ef0 <_puts_r+0x60>
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 f8b0 	bl	8009048 <__swsetup_r>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0e7      	beq.n	8008ebc <_puts_r+0x2c>
 8008eec:	f04f 35ff 	mov.w	r5, #4294967295
 8008ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef2:	07da      	lsls	r2, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_puts_r+0x72>
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	059b      	lsls	r3, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_puts_r+0x72>
 8008efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008efe:	f000 f975 	bl	80091ec <__retarget_lock_release_recursive>
 8008f02:	4628      	mov	r0, r5
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da04      	bge.n	8008f14 <_puts_r+0x84>
 8008f0a:	69a2      	ldr	r2, [r4, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	dc06      	bgt.n	8008f1e <_puts_r+0x8e>
 8008f10:	290a      	cmp	r1, #10
 8008f12:	d004      	beq.n	8008f1e <_puts_r+0x8e>
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	7019      	strb	r1, [r3, #0]
 8008f1c:	e7cf      	b.n	8008ebe <_puts_r+0x2e>
 8008f1e:	4622      	mov	r2, r4
 8008f20:	4628      	mov	r0, r5
 8008f22:	f000 f854 	bl	8008fce <__swbuf_r>
 8008f26:	3001      	adds	r0, #1
 8008f28:	d1c9      	bne.n	8008ebe <_puts_r+0x2e>
 8008f2a:	e7df      	b.n	8008eec <_puts_r+0x5c>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	250a      	movs	r5, #10
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	701d      	strb	r5, [r3, #0]
 8008f36:	e7db      	b.n	8008ef0 <_puts_r+0x60>

08008f38 <puts>:
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <puts+0xc>)
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	f7ff bfa7 	b.w	8008e90 <_puts_r>
 8008f42:	bf00      	nop
 8008f44:	2000007c 	.word	0x2000007c

08008f48 <__sread>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	f000 f8fc 	bl	800914c <_read_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	bfab      	itete	ge
 8008f58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f5c:	181b      	addge	r3, r3, r0
 8008f5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f62:	bfac      	ite	ge
 8008f64:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f66:	81a3      	strhlt	r3, [r4, #12]
 8008f68:	bd10      	pop	{r4, pc}

08008f6a <__swrite>:
 8008f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6e:	461f      	mov	r7, r3
 8008f70:	898b      	ldrh	r3, [r1, #12]
 8008f72:	05db      	lsls	r3, r3, #23
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4616      	mov	r6, r2
 8008f7a:	d505      	bpl.n	8008f88 <__swrite+0x1e>
 8008f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f80:	2302      	movs	r3, #2
 8008f82:	2200      	movs	r2, #0
 8008f84:	f000 f8d0 	bl	8009128 <_lseek_r>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f9e:	f000 b8e7 	b.w	8009170 <_write_r>

08008fa2 <__sseek>:
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008faa:	f000 f8bd 	bl	8009128 <_lseek_r>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	bf15      	itete	ne
 8008fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fbe:	81a3      	strheq	r3, [r4, #12]
 8008fc0:	bf18      	it	ne
 8008fc2:	81a3      	strhne	r3, [r4, #12]
 8008fc4:	bd10      	pop	{r4, pc}

08008fc6 <__sclose>:
 8008fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fca:	f000 b89d 	b.w	8009108 <_close_r>

08008fce <__swbuf_r>:
 8008fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd0:	460e      	mov	r6, r1
 8008fd2:	4614      	mov	r4, r2
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	b118      	cbz	r0, 8008fe0 <__swbuf_r+0x12>
 8008fd8:	6a03      	ldr	r3, [r0, #32]
 8008fda:	b90b      	cbnz	r3, 8008fe0 <__swbuf_r+0x12>
 8008fdc:	f7ff ff10 	bl	8008e00 <__sinit>
 8008fe0:	69a3      	ldr	r3, [r4, #24]
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	071a      	lsls	r2, r3, #28
 8008fe8:	d525      	bpl.n	8009036 <__swbuf_r+0x68>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	b31b      	cbz	r3, 8009036 <__swbuf_r+0x68>
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	1a98      	subs	r0, r3, r2
 8008ff4:	6963      	ldr	r3, [r4, #20]
 8008ff6:	b2f6      	uxtb	r6, r6
 8008ff8:	4283      	cmp	r3, r0
 8008ffa:	4637      	mov	r7, r6
 8008ffc:	dc04      	bgt.n	8009008 <__swbuf_r+0x3a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 fd47 	bl	8009a94 <_fflush_r>
 8009006:	b9e0      	cbnz	r0, 8009042 <__swbuf_r+0x74>
 8009008:	68a3      	ldr	r3, [r4, #8]
 800900a:	3b01      	subs	r3, #1
 800900c:	60a3      	str	r3, [r4, #8]
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	701e      	strb	r6, [r3, #0]
 8009016:	6962      	ldr	r2, [r4, #20]
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	429a      	cmp	r2, r3
 800901c:	d004      	beq.n	8009028 <__swbuf_r+0x5a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	07db      	lsls	r3, r3, #31
 8009022:	d506      	bpl.n	8009032 <__swbuf_r+0x64>
 8009024:	2e0a      	cmp	r6, #10
 8009026:	d104      	bne.n	8009032 <__swbuf_r+0x64>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 fd32 	bl	8009a94 <_fflush_r>
 8009030:	b938      	cbnz	r0, 8009042 <__swbuf_r+0x74>
 8009032:	4638      	mov	r0, r7
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009036:	4621      	mov	r1, r4
 8009038:	4628      	mov	r0, r5
 800903a:	f000 f805 	bl	8009048 <__swsetup_r>
 800903e:	2800      	cmp	r0, #0
 8009040:	d0d5      	beq.n	8008fee <__swbuf_r+0x20>
 8009042:	f04f 37ff 	mov.w	r7, #4294967295
 8009046:	e7f4      	b.n	8009032 <__swbuf_r+0x64>

08009048 <__swsetup_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4b2a      	ldr	r3, [pc, #168]	; (80090f4 <__swsetup_r+0xac>)
 800904c:	4605      	mov	r5, r0
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	460c      	mov	r4, r1
 8009052:	b118      	cbz	r0, 800905c <__swsetup_r+0x14>
 8009054:	6a03      	ldr	r3, [r0, #32]
 8009056:	b90b      	cbnz	r3, 800905c <__swsetup_r+0x14>
 8009058:	f7ff fed2 	bl	8008e00 <__sinit>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009062:	0718      	lsls	r0, r3, #28
 8009064:	d422      	bmi.n	80090ac <__swsetup_r+0x64>
 8009066:	06d9      	lsls	r1, r3, #27
 8009068:	d407      	bmi.n	800907a <__swsetup_r+0x32>
 800906a:	2309      	movs	r3, #9
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	f04f 30ff 	mov.w	r0, #4294967295
 8009078:	e034      	b.n	80090e4 <__swsetup_r+0x9c>
 800907a:	0758      	lsls	r0, r3, #29
 800907c:	d512      	bpl.n	80090a4 <__swsetup_r+0x5c>
 800907e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009080:	b141      	cbz	r1, 8009094 <__swsetup_r+0x4c>
 8009082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009086:	4299      	cmp	r1, r3
 8009088:	d002      	beq.n	8009090 <__swsetup_r+0x48>
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f8b0 	bl	80091f0 <_free_r>
 8009090:	2300      	movs	r3, #0
 8009092:	6363      	str	r3, [r4, #52]	; 0x34
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	2300      	movs	r3, #0
 800909e:	6063      	str	r3, [r4, #4]
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	f043 0308 	orr.w	r3, r3, #8
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	b94b      	cbnz	r3, 80090c4 <__swsetup_r+0x7c>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ba:	d003      	beq.n	80090c4 <__swsetup_r+0x7c>
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 fd36 	bl	8009b30 <__smakebuf_r>
 80090c4:	89a0      	ldrh	r0, [r4, #12]
 80090c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ca:	f010 0301 	ands.w	r3, r0, #1
 80090ce:	d00a      	beq.n	80090e6 <__swsetup_r+0x9e>
 80090d0:	2300      	movs	r3, #0
 80090d2:	60a3      	str	r3, [r4, #8]
 80090d4:	6963      	ldr	r3, [r4, #20]
 80090d6:	425b      	negs	r3, r3
 80090d8:	61a3      	str	r3, [r4, #24]
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	b943      	cbnz	r3, 80090f0 <__swsetup_r+0xa8>
 80090de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090e2:	d1c4      	bne.n	800906e <__swsetup_r+0x26>
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	0781      	lsls	r1, r0, #30
 80090e8:	bf58      	it	pl
 80090ea:	6963      	ldrpl	r3, [r4, #20]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	e7f4      	b.n	80090da <__swsetup_r+0x92>
 80090f0:	2000      	movs	r0, #0
 80090f2:	e7f7      	b.n	80090e4 <__swsetup_r+0x9c>
 80090f4:	2000007c 	.word	0x2000007c

080090f8 <memset>:
 80090f8:	4402      	add	r2, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	f803 1b01 	strb.w	r1, [r3], #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <_close_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_close_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f8 fc13 	bl	800193e <_close>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_close_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_close_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20000508 	.word	0x20000508

08009128 <_lseek_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_lseek_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f8 fc28 	bl	800198c <_lseek>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_lseek_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_lseek_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000508 	.word	0x20000508

0800914c <_read_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	; (800916c <_read_r+0x20>)
 8009150:	4604      	mov	r4, r0
 8009152:	4608      	mov	r0, r1
 8009154:	4611      	mov	r1, r2
 8009156:	2200      	movs	r2, #0
 8009158:	602a      	str	r2, [r5, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f7f8 fbb6 	bl	80018cc <_read>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_read_r+0x1e>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_read_r+0x1e>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	20000508 	.word	0x20000508

08009170 <_write_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	; (8009190 <_write_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f8 fbc1 	bl	8001906 <_write>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_write_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_write_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000508 	.word	0x20000508

08009194 <__errno>:
 8009194:	4b01      	ldr	r3, [pc, #4]	; (800919c <__errno+0x8>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	2000007c 	.word	0x2000007c

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4d0d      	ldr	r5, [pc, #52]	; (80091d8 <__libc_init_array+0x38>)
 80091a4:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <__libc_init_array+0x3c>)
 80091a6:	1b64      	subs	r4, r4, r5
 80091a8:	10a4      	asrs	r4, r4, #2
 80091aa:	2600      	movs	r6, #0
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	4d0b      	ldr	r5, [pc, #44]	; (80091e0 <__libc_init_array+0x40>)
 80091b2:	4c0c      	ldr	r4, [pc, #48]	; (80091e4 <__libc_init_array+0x44>)
 80091b4:	f000 fd2a 	bl	8009c0c <_init>
 80091b8:	1b64      	subs	r4, r4, r5
 80091ba:	10a4      	asrs	r4, r4, #2
 80091bc:	2600      	movs	r6, #0
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	0800a38c 	.word	0x0800a38c
 80091dc:	0800a38c 	.word	0x0800a38c
 80091e0:	0800a38c 	.word	0x0800a38c
 80091e4:	0800a390 	.word	0x0800a390

080091e8 <__retarget_lock_init_recursive>:
 80091e8:	4770      	bx	lr

080091ea <__retarget_lock_acquire_recursive>:
 80091ea:	4770      	bx	lr

080091ec <__retarget_lock_release_recursive>:
 80091ec:	4770      	bx	lr
	...

080091f0 <_free_r>:
 80091f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091f2:	2900      	cmp	r1, #0
 80091f4:	d044      	beq.n	8009280 <_free_r+0x90>
 80091f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091fa:	9001      	str	r0, [sp, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009202:	bfb8      	it	lt
 8009204:	18e4      	addlt	r4, r4, r3
 8009206:	f000 f8df 	bl	80093c8 <__malloc_lock>
 800920a:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <_free_r+0x94>)
 800920c:	9801      	ldr	r0, [sp, #4]
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	b933      	cbnz	r3, 8009220 <_free_r+0x30>
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	6014      	str	r4, [r2, #0]
 8009216:	b003      	add	sp, #12
 8009218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800921c:	f000 b8da 	b.w	80093d4 <__malloc_unlock>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d908      	bls.n	8009236 <_free_r+0x46>
 8009224:	6825      	ldr	r5, [r4, #0]
 8009226:	1961      	adds	r1, r4, r5
 8009228:	428b      	cmp	r3, r1
 800922a:	bf01      	itttt	eq
 800922c:	6819      	ldreq	r1, [r3, #0]
 800922e:	685b      	ldreq	r3, [r3, #4]
 8009230:	1949      	addeq	r1, r1, r5
 8009232:	6021      	streq	r1, [r4, #0]
 8009234:	e7ed      	b.n	8009212 <_free_r+0x22>
 8009236:	461a      	mov	r2, r3
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b10b      	cbz	r3, 8009240 <_free_r+0x50>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d9fa      	bls.n	8009236 <_free_r+0x46>
 8009240:	6811      	ldr	r1, [r2, #0]
 8009242:	1855      	adds	r5, r2, r1
 8009244:	42a5      	cmp	r5, r4
 8009246:	d10b      	bne.n	8009260 <_free_r+0x70>
 8009248:	6824      	ldr	r4, [r4, #0]
 800924a:	4421      	add	r1, r4
 800924c:	1854      	adds	r4, r2, r1
 800924e:	42a3      	cmp	r3, r4
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	d1e0      	bne.n	8009216 <_free_r+0x26>
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	440c      	add	r4, r1
 800925c:	6014      	str	r4, [r2, #0]
 800925e:	e7da      	b.n	8009216 <_free_r+0x26>
 8009260:	d902      	bls.n	8009268 <_free_r+0x78>
 8009262:	230c      	movs	r3, #12
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	e7d6      	b.n	8009216 <_free_r+0x26>
 8009268:	6825      	ldr	r5, [r4, #0]
 800926a:	1961      	adds	r1, r4, r5
 800926c:	428b      	cmp	r3, r1
 800926e:	bf04      	itt	eq
 8009270:	6819      	ldreq	r1, [r3, #0]
 8009272:	685b      	ldreq	r3, [r3, #4]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	bf04      	itt	eq
 8009278:	1949      	addeq	r1, r1, r5
 800927a:	6021      	streq	r1, [r4, #0]
 800927c:	6054      	str	r4, [r2, #4]
 800927e:	e7ca      	b.n	8009216 <_free_r+0x26>
 8009280:	b003      	add	sp, #12
 8009282:	bd30      	pop	{r4, r5, pc}
 8009284:	20000510 	.word	0x20000510

08009288 <sbrk_aligned>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	4e0e      	ldr	r6, [pc, #56]	; (80092c4 <sbrk_aligned+0x3c>)
 800928c:	460c      	mov	r4, r1
 800928e:	6831      	ldr	r1, [r6, #0]
 8009290:	4605      	mov	r5, r0
 8009292:	b911      	cbnz	r1, 800929a <sbrk_aligned+0x12>
 8009294:	f000 fcaa 	bl	8009bec <_sbrk_r>
 8009298:	6030      	str	r0, [r6, #0]
 800929a:	4621      	mov	r1, r4
 800929c:	4628      	mov	r0, r5
 800929e:	f000 fca5 	bl	8009bec <_sbrk_r>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d00a      	beq.n	80092bc <sbrk_aligned+0x34>
 80092a6:	1cc4      	adds	r4, r0, #3
 80092a8:	f024 0403 	bic.w	r4, r4, #3
 80092ac:	42a0      	cmp	r0, r4
 80092ae:	d007      	beq.n	80092c0 <sbrk_aligned+0x38>
 80092b0:	1a21      	subs	r1, r4, r0
 80092b2:	4628      	mov	r0, r5
 80092b4:	f000 fc9a 	bl	8009bec <_sbrk_r>
 80092b8:	3001      	adds	r0, #1
 80092ba:	d101      	bne.n	80092c0 <sbrk_aligned+0x38>
 80092bc:	f04f 34ff 	mov.w	r4, #4294967295
 80092c0:	4620      	mov	r0, r4
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	20000514 	.word	0x20000514

080092c8 <_malloc_r>:
 80092c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092cc:	1ccd      	adds	r5, r1, #3
 80092ce:	f025 0503 	bic.w	r5, r5, #3
 80092d2:	3508      	adds	r5, #8
 80092d4:	2d0c      	cmp	r5, #12
 80092d6:	bf38      	it	cc
 80092d8:	250c      	movcc	r5, #12
 80092da:	2d00      	cmp	r5, #0
 80092dc:	4607      	mov	r7, r0
 80092de:	db01      	blt.n	80092e4 <_malloc_r+0x1c>
 80092e0:	42a9      	cmp	r1, r5
 80092e2:	d905      	bls.n	80092f0 <_malloc_r+0x28>
 80092e4:	230c      	movs	r3, #12
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	2600      	movs	r6, #0
 80092ea:	4630      	mov	r0, r6
 80092ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093c4 <_malloc_r+0xfc>
 80092f4:	f000 f868 	bl	80093c8 <__malloc_lock>
 80092f8:	f8d8 3000 	ldr.w	r3, [r8]
 80092fc:	461c      	mov	r4, r3
 80092fe:	bb5c      	cbnz	r4, 8009358 <_malloc_r+0x90>
 8009300:	4629      	mov	r1, r5
 8009302:	4638      	mov	r0, r7
 8009304:	f7ff ffc0 	bl	8009288 <sbrk_aligned>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	4604      	mov	r4, r0
 800930c:	d155      	bne.n	80093ba <_malloc_r+0xf2>
 800930e:	f8d8 4000 	ldr.w	r4, [r8]
 8009312:	4626      	mov	r6, r4
 8009314:	2e00      	cmp	r6, #0
 8009316:	d145      	bne.n	80093a4 <_malloc_r+0xdc>
 8009318:	2c00      	cmp	r4, #0
 800931a:	d048      	beq.n	80093ae <_malloc_r+0xe6>
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	4631      	mov	r1, r6
 8009320:	4638      	mov	r0, r7
 8009322:	eb04 0903 	add.w	r9, r4, r3
 8009326:	f000 fc61 	bl	8009bec <_sbrk_r>
 800932a:	4581      	cmp	r9, r0
 800932c:	d13f      	bne.n	80093ae <_malloc_r+0xe6>
 800932e:	6821      	ldr	r1, [r4, #0]
 8009330:	1a6d      	subs	r5, r5, r1
 8009332:	4629      	mov	r1, r5
 8009334:	4638      	mov	r0, r7
 8009336:	f7ff ffa7 	bl	8009288 <sbrk_aligned>
 800933a:	3001      	adds	r0, #1
 800933c:	d037      	beq.n	80093ae <_malloc_r+0xe6>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	442b      	add	r3, r5
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	f8d8 3000 	ldr.w	r3, [r8]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d038      	beq.n	80093be <_malloc_r+0xf6>
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	42a2      	cmp	r2, r4
 8009350:	d12b      	bne.n	80093aa <_malloc_r+0xe2>
 8009352:	2200      	movs	r2, #0
 8009354:	605a      	str	r2, [r3, #4]
 8009356:	e00f      	b.n	8009378 <_malloc_r+0xb0>
 8009358:	6822      	ldr	r2, [r4, #0]
 800935a:	1b52      	subs	r2, r2, r5
 800935c:	d41f      	bmi.n	800939e <_malloc_r+0xd6>
 800935e:	2a0b      	cmp	r2, #11
 8009360:	d917      	bls.n	8009392 <_malloc_r+0xca>
 8009362:	1961      	adds	r1, r4, r5
 8009364:	42a3      	cmp	r3, r4
 8009366:	6025      	str	r5, [r4, #0]
 8009368:	bf18      	it	ne
 800936a:	6059      	strne	r1, [r3, #4]
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	bf08      	it	eq
 8009370:	f8c8 1000 	streq.w	r1, [r8]
 8009374:	5162      	str	r2, [r4, r5]
 8009376:	604b      	str	r3, [r1, #4]
 8009378:	4638      	mov	r0, r7
 800937a:	f104 060b 	add.w	r6, r4, #11
 800937e:	f000 f829 	bl	80093d4 <__malloc_unlock>
 8009382:	f026 0607 	bic.w	r6, r6, #7
 8009386:	1d23      	adds	r3, r4, #4
 8009388:	1af2      	subs	r2, r6, r3
 800938a:	d0ae      	beq.n	80092ea <_malloc_r+0x22>
 800938c:	1b9b      	subs	r3, r3, r6
 800938e:	50a3      	str	r3, [r4, r2]
 8009390:	e7ab      	b.n	80092ea <_malloc_r+0x22>
 8009392:	42a3      	cmp	r3, r4
 8009394:	6862      	ldr	r2, [r4, #4]
 8009396:	d1dd      	bne.n	8009354 <_malloc_r+0x8c>
 8009398:	f8c8 2000 	str.w	r2, [r8]
 800939c:	e7ec      	b.n	8009378 <_malloc_r+0xb0>
 800939e:	4623      	mov	r3, r4
 80093a0:	6864      	ldr	r4, [r4, #4]
 80093a2:	e7ac      	b.n	80092fe <_malloc_r+0x36>
 80093a4:	4634      	mov	r4, r6
 80093a6:	6876      	ldr	r6, [r6, #4]
 80093a8:	e7b4      	b.n	8009314 <_malloc_r+0x4c>
 80093aa:	4613      	mov	r3, r2
 80093ac:	e7cc      	b.n	8009348 <_malloc_r+0x80>
 80093ae:	230c      	movs	r3, #12
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	4638      	mov	r0, r7
 80093b4:	f000 f80e 	bl	80093d4 <__malloc_unlock>
 80093b8:	e797      	b.n	80092ea <_malloc_r+0x22>
 80093ba:	6025      	str	r5, [r4, #0]
 80093bc:	e7dc      	b.n	8009378 <_malloc_r+0xb0>
 80093be:	605b      	str	r3, [r3, #4]
 80093c0:	deff      	udf	#255	; 0xff
 80093c2:	bf00      	nop
 80093c4:	20000510 	.word	0x20000510

080093c8 <__malloc_lock>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__malloc_lock+0x8>)
 80093ca:	f7ff bf0e 	b.w	80091ea <__retarget_lock_acquire_recursive>
 80093ce:	bf00      	nop
 80093d0:	2000050c 	.word	0x2000050c

080093d4 <__malloc_unlock>:
 80093d4:	4801      	ldr	r0, [pc, #4]	; (80093dc <__malloc_unlock+0x8>)
 80093d6:	f7ff bf09 	b.w	80091ec <__retarget_lock_release_recursive>
 80093da:	bf00      	nop
 80093dc:	2000050c 	.word	0x2000050c

080093e0 <__sfputc_r>:
 80093e0:	6893      	ldr	r3, [r2, #8]
 80093e2:	3b01      	subs	r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	b410      	push	{r4}
 80093e8:	6093      	str	r3, [r2, #8]
 80093ea:	da08      	bge.n	80093fe <__sfputc_r+0x1e>
 80093ec:	6994      	ldr	r4, [r2, #24]
 80093ee:	42a3      	cmp	r3, r4
 80093f0:	db01      	blt.n	80093f6 <__sfputc_r+0x16>
 80093f2:	290a      	cmp	r1, #10
 80093f4:	d103      	bne.n	80093fe <__sfputc_r+0x1e>
 80093f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093fa:	f7ff bde8 	b.w	8008fce <__swbuf_r>
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	1c58      	adds	r0, r3, #1
 8009402:	6010      	str	r0, [r2, #0]
 8009404:	7019      	strb	r1, [r3, #0]
 8009406:	4608      	mov	r0, r1
 8009408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940c:	4770      	bx	lr

0800940e <__sfputs_r>:
 800940e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009410:	4606      	mov	r6, r0
 8009412:	460f      	mov	r7, r1
 8009414:	4614      	mov	r4, r2
 8009416:	18d5      	adds	r5, r2, r3
 8009418:	42ac      	cmp	r4, r5
 800941a:	d101      	bne.n	8009420 <__sfputs_r+0x12>
 800941c:	2000      	movs	r0, #0
 800941e:	e007      	b.n	8009430 <__sfputs_r+0x22>
 8009420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009424:	463a      	mov	r2, r7
 8009426:	4630      	mov	r0, r6
 8009428:	f7ff ffda 	bl	80093e0 <__sfputc_r>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d1f3      	bne.n	8009418 <__sfputs_r+0xa>
 8009430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009434 <_vfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	460d      	mov	r5, r1
 800943a:	b09d      	sub	sp, #116	; 0x74
 800943c:	4614      	mov	r4, r2
 800943e:	4698      	mov	r8, r3
 8009440:	4606      	mov	r6, r0
 8009442:	b118      	cbz	r0, 800944c <_vfiprintf_r+0x18>
 8009444:	6a03      	ldr	r3, [r0, #32]
 8009446:	b90b      	cbnz	r3, 800944c <_vfiprintf_r+0x18>
 8009448:	f7ff fcda 	bl	8008e00 <__sinit>
 800944c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944e:	07d9      	lsls	r1, r3, #31
 8009450:	d405      	bmi.n	800945e <_vfiprintf_r+0x2a>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	059a      	lsls	r2, r3, #22
 8009456:	d402      	bmi.n	800945e <_vfiprintf_r+0x2a>
 8009458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800945a:	f7ff fec6 	bl	80091ea <__retarget_lock_acquire_recursive>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	071b      	lsls	r3, r3, #28
 8009462:	d501      	bpl.n	8009468 <_vfiprintf_r+0x34>
 8009464:	692b      	ldr	r3, [r5, #16]
 8009466:	b99b      	cbnz	r3, 8009490 <_vfiprintf_r+0x5c>
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff fdec 	bl	8009048 <__swsetup_r>
 8009470:	b170      	cbz	r0, 8009490 <_vfiprintf_r+0x5c>
 8009472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009474:	07dc      	lsls	r4, r3, #31
 8009476:	d504      	bpl.n	8009482 <_vfiprintf_r+0x4e>
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	b01d      	add	sp, #116	; 0x74
 800947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	0598      	lsls	r0, r3, #22
 8009486:	d4f7      	bmi.n	8009478 <_vfiprintf_r+0x44>
 8009488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800948a:	f7ff feaf 	bl	80091ec <__retarget_lock_release_recursive>
 800948e:	e7f3      	b.n	8009478 <_vfiprintf_r+0x44>
 8009490:	2300      	movs	r3, #0
 8009492:	9309      	str	r3, [sp, #36]	; 0x24
 8009494:	2320      	movs	r3, #32
 8009496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800949a:	f8cd 800c 	str.w	r8, [sp, #12]
 800949e:	2330      	movs	r3, #48	; 0x30
 80094a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009654 <_vfiprintf_r+0x220>
 80094a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a8:	f04f 0901 	mov.w	r9, #1
 80094ac:	4623      	mov	r3, r4
 80094ae:	469a      	mov	sl, r3
 80094b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094b4:	b10a      	cbz	r2, 80094ba <_vfiprintf_r+0x86>
 80094b6:	2a25      	cmp	r2, #37	; 0x25
 80094b8:	d1f9      	bne.n	80094ae <_vfiprintf_r+0x7a>
 80094ba:	ebba 0b04 	subs.w	fp, sl, r4
 80094be:	d00b      	beq.n	80094d8 <_vfiprintf_r+0xa4>
 80094c0:	465b      	mov	r3, fp
 80094c2:	4622      	mov	r2, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7ff ffa1 	bl	800940e <__sfputs_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	f000 80a9 	beq.w	8009624 <_vfiprintf_r+0x1f0>
 80094d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094d4:	445a      	add	r2, fp
 80094d6:	9209      	str	r2, [sp, #36]	; 0x24
 80094d8:	f89a 3000 	ldrb.w	r3, [sl]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80a1 	beq.w	8009624 <_vfiprintf_r+0x1f0>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f04f 32ff 	mov.w	r2, #4294967295
 80094e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ec:	f10a 0a01 	add.w	sl, sl, #1
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	9307      	str	r3, [sp, #28]
 80094f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f8:	931a      	str	r3, [sp, #104]	; 0x68
 80094fa:	4654      	mov	r4, sl
 80094fc:	2205      	movs	r2, #5
 80094fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009502:	4854      	ldr	r0, [pc, #336]	; (8009654 <_vfiprintf_r+0x220>)
 8009504:	f7f6 fe64 	bl	80001d0 <memchr>
 8009508:	9a04      	ldr	r2, [sp, #16]
 800950a:	b9d8      	cbnz	r0, 8009544 <_vfiprintf_r+0x110>
 800950c:	06d1      	lsls	r1, r2, #27
 800950e:	bf44      	itt	mi
 8009510:	2320      	movmi	r3, #32
 8009512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009516:	0713      	lsls	r3, r2, #28
 8009518:	bf44      	itt	mi
 800951a:	232b      	movmi	r3, #43	; 0x2b
 800951c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009520:	f89a 3000 	ldrb.w	r3, [sl]
 8009524:	2b2a      	cmp	r3, #42	; 0x2a
 8009526:	d015      	beq.n	8009554 <_vfiprintf_r+0x120>
 8009528:	9a07      	ldr	r2, [sp, #28]
 800952a:	4654      	mov	r4, sl
 800952c:	2000      	movs	r0, #0
 800952e:	f04f 0c0a 	mov.w	ip, #10
 8009532:	4621      	mov	r1, r4
 8009534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009538:	3b30      	subs	r3, #48	; 0x30
 800953a:	2b09      	cmp	r3, #9
 800953c:	d94d      	bls.n	80095da <_vfiprintf_r+0x1a6>
 800953e:	b1b0      	cbz	r0, 800956e <_vfiprintf_r+0x13a>
 8009540:	9207      	str	r2, [sp, #28]
 8009542:	e014      	b.n	800956e <_vfiprintf_r+0x13a>
 8009544:	eba0 0308 	sub.w	r3, r0, r8
 8009548:	fa09 f303 	lsl.w	r3, r9, r3
 800954c:	4313      	orrs	r3, r2
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	46a2      	mov	sl, r4
 8009552:	e7d2      	b.n	80094fa <_vfiprintf_r+0xc6>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	1d19      	adds	r1, r3, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	9103      	str	r1, [sp, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	bfbb      	ittet	lt
 8009560:	425b      	neglt	r3, r3
 8009562:	f042 0202 	orrlt.w	r2, r2, #2
 8009566:	9307      	strge	r3, [sp, #28]
 8009568:	9307      	strlt	r3, [sp, #28]
 800956a:	bfb8      	it	lt
 800956c:	9204      	strlt	r2, [sp, #16]
 800956e:	7823      	ldrb	r3, [r4, #0]
 8009570:	2b2e      	cmp	r3, #46	; 0x2e
 8009572:	d10c      	bne.n	800958e <_vfiprintf_r+0x15a>
 8009574:	7863      	ldrb	r3, [r4, #1]
 8009576:	2b2a      	cmp	r3, #42	; 0x2a
 8009578:	d134      	bne.n	80095e4 <_vfiprintf_r+0x1b0>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	1d1a      	adds	r2, r3, #4
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	9203      	str	r2, [sp, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bfb8      	it	lt
 8009586:	f04f 33ff 	movlt.w	r3, #4294967295
 800958a:	3402      	adds	r4, #2
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009664 <_vfiprintf_r+0x230>
 8009592:	7821      	ldrb	r1, [r4, #0]
 8009594:	2203      	movs	r2, #3
 8009596:	4650      	mov	r0, sl
 8009598:	f7f6 fe1a 	bl	80001d0 <memchr>
 800959c:	b138      	cbz	r0, 80095ae <_vfiprintf_r+0x17a>
 800959e:	9b04      	ldr	r3, [sp, #16]
 80095a0:	eba0 000a 	sub.w	r0, r0, sl
 80095a4:	2240      	movs	r2, #64	; 0x40
 80095a6:	4082      	lsls	r2, r0
 80095a8:	4313      	orrs	r3, r2
 80095aa:	3401      	adds	r4, #1
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b2:	4829      	ldr	r0, [pc, #164]	; (8009658 <_vfiprintf_r+0x224>)
 80095b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b8:	2206      	movs	r2, #6
 80095ba:	f7f6 fe09 	bl	80001d0 <memchr>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d03f      	beq.n	8009642 <_vfiprintf_r+0x20e>
 80095c2:	4b26      	ldr	r3, [pc, #152]	; (800965c <_vfiprintf_r+0x228>)
 80095c4:	bb1b      	cbnz	r3, 800960e <_vfiprintf_r+0x1da>
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	3307      	adds	r3, #7
 80095ca:	f023 0307 	bic.w	r3, r3, #7
 80095ce:	3308      	adds	r3, #8
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d4:	443b      	add	r3, r7
 80095d6:	9309      	str	r3, [sp, #36]	; 0x24
 80095d8:	e768      	b.n	80094ac <_vfiprintf_r+0x78>
 80095da:	fb0c 3202 	mla	r2, ip, r2, r3
 80095de:	460c      	mov	r4, r1
 80095e0:	2001      	movs	r0, #1
 80095e2:	e7a6      	b.n	8009532 <_vfiprintf_r+0xfe>
 80095e4:	2300      	movs	r3, #0
 80095e6:	3401      	adds	r4, #1
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	4619      	mov	r1, r3
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4620      	mov	r0, r4
 80095f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f6:	3a30      	subs	r2, #48	; 0x30
 80095f8:	2a09      	cmp	r2, #9
 80095fa:	d903      	bls.n	8009604 <_vfiprintf_r+0x1d0>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0c6      	beq.n	800958e <_vfiprintf_r+0x15a>
 8009600:	9105      	str	r1, [sp, #20]
 8009602:	e7c4      	b.n	800958e <_vfiprintf_r+0x15a>
 8009604:	fb0c 2101 	mla	r1, ip, r1, r2
 8009608:	4604      	mov	r4, r0
 800960a:	2301      	movs	r3, #1
 800960c:	e7f0      	b.n	80095f0 <_vfiprintf_r+0x1bc>
 800960e:	ab03      	add	r3, sp, #12
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	462a      	mov	r2, r5
 8009614:	4b12      	ldr	r3, [pc, #72]	; (8009660 <_vfiprintf_r+0x22c>)
 8009616:	a904      	add	r1, sp, #16
 8009618:	4630      	mov	r0, r6
 800961a:	f3af 8000 	nop.w
 800961e:	4607      	mov	r7, r0
 8009620:	1c78      	adds	r0, r7, #1
 8009622:	d1d6      	bne.n	80095d2 <_vfiprintf_r+0x19e>
 8009624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	d405      	bmi.n	8009636 <_vfiprintf_r+0x202>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	059a      	lsls	r2, r3, #22
 800962e:	d402      	bmi.n	8009636 <_vfiprintf_r+0x202>
 8009630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009632:	f7ff fddb 	bl	80091ec <__retarget_lock_release_recursive>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	065b      	lsls	r3, r3, #25
 800963a:	f53f af1d 	bmi.w	8009478 <_vfiprintf_r+0x44>
 800963e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009640:	e71c      	b.n	800947c <_vfiprintf_r+0x48>
 8009642:	ab03      	add	r3, sp, #12
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	462a      	mov	r2, r5
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <_vfiprintf_r+0x22c>)
 800964a:	a904      	add	r1, sp, #16
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f879 	bl	8009744 <_printf_i>
 8009652:	e7e4      	b.n	800961e <_vfiprintf_r+0x1ea>
 8009654:	0800a358 	.word	0x0800a358
 8009658:	0800a362 	.word	0x0800a362
 800965c:	00000000 	.word	0x00000000
 8009660:	0800940f 	.word	0x0800940f
 8009664:	0800a35e 	.word	0x0800a35e

08009668 <_printf_common>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	4616      	mov	r6, r2
 800966e:	4699      	mov	r9, r3
 8009670:	688a      	ldr	r2, [r1, #8]
 8009672:	690b      	ldr	r3, [r1, #16]
 8009674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009678:	4293      	cmp	r3, r2
 800967a:	bfb8      	it	lt
 800967c:	4613      	movlt	r3, r2
 800967e:	6033      	str	r3, [r6, #0]
 8009680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009684:	4607      	mov	r7, r0
 8009686:	460c      	mov	r4, r1
 8009688:	b10a      	cbz	r2, 800968e <_printf_common+0x26>
 800968a:	3301      	adds	r3, #1
 800968c:	6033      	str	r3, [r6, #0]
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	0699      	lsls	r1, r3, #26
 8009692:	bf42      	ittt	mi
 8009694:	6833      	ldrmi	r3, [r6, #0]
 8009696:	3302      	addmi	r3, #2
 8009698:	6033      	strmi	r3, [r6, #0]
 800969a:	6825      	ldr	r5, [r4, #0]
 800969c:	f015 0506 	ands.w	r5, r5, #6
 80096a0:	d106      	bne.n	80096b0 <_printf_common+0x48>
 80096a2:	f104 0a19 	add.w	sl, r4, #25
 80096a6:	68e3      	ldr	r3, [r4, #12]
 80096a8:	6832      	ldr	r2, [r6, #0]
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	42ab      	cmp	r3, r5
 80096ae:	dc26      	bgt.n	80096fe <_printf_common+0x96>
 80096b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096b4:	1e13      	subs	r3, r2, #0
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	bf18      	it	ne
 80096ba:	2301      	movne	r3, #1
 80096bc:	0692      	lsls	r2, r2, #26
 80096be:	d42b      	bmi.n	8009718 <_printf_common+0xb0>
 80096c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096c4:	4649      	mov	r1, r9
 80096c6:	4638      	mov	r0, r7
 80096c8:	47c0      	blx	r8
 80096ca:	3001      	adds	r0, #1
 80096cc:	d01e      	beq.n	800970c <_printf_common+0xa4>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	f003 0306 	and.w	r3, r3, #6
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	bf02      	ittt	eq
 80096da:	68e5      	ldreq	r5, [r4, #12]
 80096dc:	6833      	ldreq	r3, [r6, #0]
 80096de:	1aed      	subeq	r5, r5, r3
 80096e0:	68a3      	ldr	r3, [r4, #8]
 80096e2:	bf0c      	ite	eq
 80096e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096e8:	2500      	movne	r5, #0
 80096ea:	4293      	cmp	r3, r2
 80096ec:	bfc4      	itt	gt
 80096ee:	1a9b      	subgt	r3, r3, r2
 80096f0:	18ed      	addgt	r5, r5, r3
 80096f2:	2600      	movs	r6, #0
 80096f4:	341a      	adds	r4, #26
 80096f6:	42b5      	cmp	r5, r6
 80096f8:	d11a      	bne.n	8009730 <_printf_common+0xc8>
 80096fa:	2000      	movs	r0, #0
 80096fc:	e008      	b.n	8009710 <_printf_common+0xa8>
 80096fe:	2301      	movs	r3, #1
 8009700:	4652      	mov	r2, sl
 8009702:	4649      	mov	r1, r9
 8009704:	4638      	mov	r0, r7
 8009706:	47c0      	blx	r8
 8009708:	3001      	adds	r0, #1
 800970a:	d103      	bne.n	8009714 <_printf_common+0xac>
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	3501      	adds	r5, #1
 8009716:	e7c6      	b.n	80096a6 <_printf_common+0x3e>
 8009718:	18e1      	adds	r1, r4, r3
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	2030      	movs	r0, #48	; 0x30
 800971e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009722:	4422      	add	r2, r4
 8009724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800972c:	3302      	adds	r3, #2
 800972e:	e7c7      	b.n	80096c0 <_printf_common+0x58>
 8009730:	2301      	movs	r3, #1
 8009732:	4622      	mov	r2, r4
 8009734:	4649      	mov	r1, r9
 8009736:	4638      	mov	r0, r7
 8009738:	47c0      	blx	r8
 800973a:	3001      	adds	r0, #1
 800973c:	d0e6      	beq.n	800970c <_printf_common+0xa4>
 800973e:	3601      	adds	r6, #1
 8009740:	e7d9      	b.n	80096f6 <_printf_common+0x8e>
	...

08009744 <_printf_i>:
 8009744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	7e0f      	ldrb	r7, [r1, #24]
 800974a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800974c:	2f78      	cmp	r7, #120	; 0x78
 800974e:	4691      	mov	r9, r2
 8009750:	4680      	mov	r8, r0
 8009752:	460c      	mov	r4, r1
 8009754:	469a      	mov	sl, r3
 8009756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800975a:	d807      	bhi.n	800976c <_printf_i+0x28>
 800975c:	2f62      	cmp	r7, #98	; 0x62
 800975e:	d80a      	bhi.n	8009776 <_printf_i+0x32>
 8009760:	2f00      	cmp	r7, #0
 8009762:	f000 80d4 	beq.w	800990e <_printf_i+0x1ca>
 8009766:	2f58      	cmp	r7, #88	; 0x58
 8009768:	f000 80c0 	beq.w	80098ec <_printf_i+0x1a8>
 800976c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009774:	e03a      	b.n	80097ec <_printf_i+0xa8>
 8009776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800977a:	2b15      	cmp	r3, #21
 800977c:	d8f6      	bhi.n	800976c <_printf_i+0x28>
 800977e:	a101      	add	r1, pc, #4	; (adr r1, 8009784 <_printf_i+0x40>)
 8009780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009784:	080097dd 	.word	0x080097dd
 8009788:	080097f1 	.word	0x080097f1
 800978c:	0800976d 	.word	0x0800976d
 8009790:	0800976d 	.word	0x0800976d
 8009794:	0800976d 	.word	0x0800976d
 8009798:	0800976d 	.word	0x0800976d
 800979c:	080097f1 	.word	0x080097f1
 80097a0:	0800976d 	.word	0x0800976d
 80097a4:	0800976d 	.word	0x0800976d
 80097a8:	0800976d 	.word	0x0800976d
 80097ac:	0800976d 	.word	0x0800976d
 80097b0:	080098f5 	.word	0x080098f5
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	080098af 	.word	0x080098af
 80097bc:	0800976d 	.word	0x0800976d
 80097c0:	0800976d 	.word	0x0800976d
 80097c4:	08009917 	.word	0x08009917
 80097c8:	0800976d 	.word	0x0800976d
 80097cc:	0800981d 	.word	0x0800981d
 80097d0:	0800976d 	.word	0x0800976d
 80097d4:	0800976d 	.word	0x0800976d
 80097d8:	080098b7 	.word	0x080098b7
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	1d1a      	adds	r2, r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	602a      	str	r2, [r5, #0]
 80097e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097ec:	2301      	movs	r3, #1
 80097ee:	e09f      	b.n	8009930 <_printf_i+0x1ec>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	0607      	lsls	r7, r0, #24
 80097f6:	f103 0104 	add.w	r1, r3, #4
 80097fa:	6029      	str	r1, [r5, #0]
 80097fc:	d501      	bpl.n	8009802 <_printf_i+0xbe>
 80097fe:	681e      	ldr	r6, [r3, #0]
 8009800:	e003      	b.n	800980a <_printf_i+0xc6>
 8009802:	0646      	lsls	r6, r0, #25
 8009804:	d5fb      	bpl.n	80097fe <_printf_i+0xba>
 8009806:	f9b3 6000 	ldrsh.w	r6, [r3]
 800980a:	2e00      	cmp	r6, #0
 800980c:	da03      	bge.n	8009816 <_printf_i+0xd2>
 800980e:	232d      	movs	r3, #45	; 0x2d
 8009810:	4276      	negs	r6, r6
 8009812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009816:	485a      	ldr	r0, [pc, #360]	; (8009980 <_printf_i+0x23c>)
 8009818:	230a      	movs	r3, #10
 800981a:	e012      	b.n	8009842 <_printf_i+0xfe>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	6029      	str	r1, [r5, #0]
 8009824:	0605      	lsls	r5, r0, #24
 8009826:	d501      	bpl.n	800982c <_printf_i+0xe8>
 8009828:	681e      	ldr	r6, [r3, #0]
 800982a:	e002      	b.n	8009832 <_printf_i+0xee>
 800982c:	0641      	lsls	r1, r0, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0xe4>
 8009830:	881e      	ldrh	r6, [r3, #0]
 8009832:	4853      	ldr	r0, [pc, #332]	; (8009980 <_printf_i+0x23c>)
 8009834:	2f6f      	cmp	r7, #111	; 0x6f
 8009836:	bf0c      	ite	eq
 8009838:	2308      	moveq	r3, #8
 800983a:	230a      	movne	r3, #10
 800983c:	2100      	movs	r1, #0
 800983e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009842:	6865      	ldr	r5, [r4, #4]
 8009844:	60a5      	str	r5, [r4, #8]
 8009846:	2d00      	cmp	r5, #0
 8009848:	bfa2      	ittt	ge
 800984a:	6821      	ldrge	r1, [r4, #0]
 800984c:	f021 0104 	bicge.w	r1, r1, #4
 8009850:	6021      	strge	r1, [r4, #0]
 8009852:	b90e      	cbnz	r6, 8009858 <_printf_i+0x114>
 8009854:	2d00      	cmp	r5, #0
 8009856:	d04b      	beq.n	80098f0 <_printf_i+0x1ac>
 8009858:	4615      	mov	r5, r2
 800985a:	fbb6 f1f3 	udiv	r1, r6, r3
 800985e:	fb03 6711 	mls	r7, r3, r1, r6
 8009862:	5dc7      	ldrb	r7, [r0, r7]
 8009864:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009868:	4637      	mov	r7, r6
 800986a:	42bb      	cmp	r3, r7
 800986c:	460e      	mov	r6, r1
 800986e:	d9f4      	bls.n	800985a <_printf_i+0x116>
 8009870:	2b08      	cmp	r3, #8
 8009872:	d10b      	bne.n	800988c <_printf_i+0x148>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	07de      	lsls	r6, r3, #31
 8009878:	d508      	bpl.n	800988c <_printf_i+0x148>
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	6861      	ldr	r1, [r4, #4]
 800987e:	4299      	cmp	r1, r3
 8009880:	bfde      	ittt	le
 8009882:	2330      	movle	r3, #48	; 0x30
 8009884:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009888:	f105 35ff 	addle.w	r5, r5, #4294967295
 800988c:	1b52      	subs	r2, r2, r5
 800988e:	6122      	str	r2, [r4, #16]
 8009890:	f8cd a000 	str.w	sl, [sp]
 8009894:	464b      	mov	r3, r9
 8009896:	aa03      	add	r2, sp, #12
 8009898:	4621      	mov	r1, r4
 800989a:	4640      	mov	r0, r8
 800989c:	f7ff fee4 	bl	8009668 <_printf_common>
 80098a0:	3001      	adds	r0, #1
 80098a2:	d14a      	bne.n	800993a <_printf_i+0x1f6>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	b004      	add	sp, #16
 80098aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	f043 0320 	orr.w	r3, r3, #32
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	4833      	ldr	r0, [pc, #204]	; (8009984 <_printf_i+0x240>)
 80098b8:	2778      	movs	r7, #120	; 0x78
 80098ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	6829      	ldr	r1, [r5, #0]
 80098c2:	061f      	lsls	r7, r3, #24
 80098c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80098c8:	d402      	bmi.n	80098d0 <_printf_i+0x18c>
 80098ca:	065f      	lsls	r7, r3, #25
 80098cc:	bf48      	it	mi
 80098ce:	b2b6      	uxthmi	r6, r6
 80098d0:	07df      	lsls	r7, r3, #31
 80098d2:	bf48      	it	mi
 80098d4:	f043 0320 	orrmi.w	r3, r3, #32
 80098d8:	6029      	str	r1, [r5, #0]
 80098da:	bf48      	it	mi
 80098dc:	6023      	strmi	r3, [r4, #0]
 80098de:	b91e      	cbnz	r6, 80098e8 <_printf_i+0x1a4>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	f023 0320 	bic.w	r3, r3, #32
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	2310      	movs	r3, #16
 80098ea:	e7a7      	b.n	800983c <_printf_i+0xf8>
 80098ec:	4824      	ldr	r0, [pc, #144]	; (8009980 <_printf_i+0x23c>)
 80098ee:	e7e4      	b.n	80098ba <_printf_i+0x176>
 80098f0:	4615      	mov	r5, r2
 80098f2:	e7bd      	b.n	8009870 <_printf_i+0x12c>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	6826      	ldr	r6, [r4, #0]
 80098f8:	6961      	ldr	r1, [r4, #20]
 80098fa:	1d18      	adds	r0, r3, #4
 80098fc:	6028      	str	r0, [r5, #0]
 80098fe:	0635      	lsls	r5, r6, #24
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	d501      	bpl.n	8009908 <_printf_i+0x1c4>
 8009904:	6019      	str	r1, [r3, #0]
 8009906:	e002      	b.n	800990e <_printf_i+0x1ca>
 8009908:	0670      	lsls	r0, r6, #25
 800990a:	d5fb      	bpl.n	8009904 <_printf_i+0x1c0>
 800990c:	8019      	strh	r1, [r3, #0]
 800990e:	2300      	movs	r3, #0
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	4615      	mov	r5, r2
 8009914:	e7bc      	b.n	8009890 <_printf_i+0x14c>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	1d1a      	adds	r2, r3, #4
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	681d      	ldr	r5, [r3, #0]
 800991e:	6862      	ldr	r2, [r4, #4]
 8009920:	2100      	movs	r1, #0
 8009922:	4628      	mov	r0, r5
 8009924:	f7f6 fc54 	bl	80001d0 <memchr>
 8009928:	b108      	cbz	r0, 800992e <_printf_i+0x1ea>
 800992a:	1b40      	subs	r0, r0, r5
 800992c:	6060      	str	r0, [r4, #4]
 800992e:	6863      	ldr	r3, [r4, #4]
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	2300      	movs	r3, #0
 8009934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009938:	e7aa      	b.n	8009890 <_printf_i+0x14c>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	462a      	mov	r2, r5
 800993e:	4649      	mov	r1, r9
 8009940:	4640      	mov	r0, r8
 8009942:	47d0      	blx	sl
 8009944:	3001      	adds	r0, #1
 8009946:	d0ad      	beq.n	80098a4 <_printf_i+0x160>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	079b      	lsls	r3, r3, #30
 800994c:	d413      	bmi.n	8009976 <_printf_i+0x232>
 800994e:	68e0      	ldr	r0, [r4, #12]
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	4298      	cmp	r0, r3
 8009954:	bfb8      	it	lt
 8009956:	4618      	movlt	r0, r3
 8009958:	e7a6      	b.n	80098a8 <_printf_i+0x164>
 800995a:	2301      	movs	r3, #1
 800995c:	4632      	mov	r2, r6
 800995e:	4649      	mov	r1, r9
 8009960:	4640      	mov	r0, r8
 8009962:	47d0      	blx	sl
 8009964:	3001      	adds	r0, #1
 8009966:	d09d      	beq.n	80098a4 <_printf_i+0x160>
 8009968:	3501      	adds	r5, #1
 800996a:	68e3      	ldr	r3, [r4, #12]
 800996c:	9903      	ldr	r1, [sp, #12]
 800996e:	1a5b      	subs	r3, r3, r1
 8009970:	42ab      	cmp	r3, r5
 8009972:	dcf2      	bgt.n	800995a <_printf_i+0x216>
 8009974:	e7eb      	b.n	800994e <_printf_i+0x20a>
 8009976:	2500      	movs	r5, #0
 8009978:	f104 0619 	add.w	r6, r4, #25
 800997c:	e7f5      	b.n	800996a <_printf_i+0x226>
 800997e:	bf00      	nop
 8009980:	0800a369 	.word	0x0800a369
 8009984:	0800a37a 	.word	0x0800a37a

08009988 <__sflush_r>:
 8009988:	898a      	ldrh	r2, [r1, #12]
 800998a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998e:	4605      	mov	r5, r0
 8009990:	0710      	lsls	r0, r2, #28
 8009992:	460c      	mov	r4, r1
 8009994:	d458      	bmi.n	8009a48 <__sflush_r+0xc0>
 8009996:	684b      	ldr	r3, [r1, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	dc05      	bgt.n	80099a8 <__sflush_r+0x20>
 800999c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	dc02      	bgt.n	80099a8 <__sflush_r+0x20>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	d0f9      	beq.n	80099a2 <__sflush_r+0x1a>
 80099ae:	2300      	movs	r3, #0
 80099b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099b4:	682f      	ldr	r7, [r5, #0]
 80099b6:	6a21      	ldr	r1, [r4, #32]
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	d032      	beq.n	8009a22 <__sflush_r+0x9a>
 80099bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	075a      	lsls	r2, r3, #29
 80099c2:	d505      	bpl.n	80099d0 <__sflush_r+0x48>
 80099c4:	6863      	ldr	r3, [r4, #4]
 80099c6:	1ac0      	subs	r0, r0, r3
 80099c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ca:	b10b      	cbz	r3, 80099d0 <__sflush_r+0x48>
 80099cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099ce:	1ac0      	subs	r0, r0, r3
 80099d0:	2300      	movs	r3, #0
 80099d2:	4602      	mov	r2, r0
 80099d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d6:	6a21      	ldr	r1, [r4, #32]
 80099d8:	4628      	mov	r0, r5
 80099da:	47b0      	blx	r6
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	d106      	bne.n	80099f0 <__sflush_r+0x68>
 80099e2:	6829      	ldr	r1, [r5, #0]
 80099e4:	291d      	cmp	r1, #29
 80099e6:	d82b      	bhi.n	8009a40 <__sflush_r+0xb8>
 80099e8:	4a29      	ldr	r2, [pc, #164]	; (8009a90 <__sflush_r+0x108>)
 80099ea:	410a      	asrs	r2, r1
 80099ec:	07d6      	lsls	r6, r2, #31
 80099ee:	d427      	bmi.n	8009a40 <__sflush_r+0xb8>
 80099f0:	2200      	movs	r2, #0
 80099f2:	6062      	str	r2, [r4, #4]
 80099f4:	04d9      	lsls	r1, r3, #19
 80099f6:	6922      	ldr	r2, [r4, #16]
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	d504      	bpl.n	8009a06 <__sflush_r+0x7e>
 80099fc:	1c42      	adds	r2, r0, #1
 80099fe:	d101      	bne.n	8009a04 <__sflush_r+0x7c>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b903      	cbnz	r3, 8009a06 <__sflush_r+0x7e>
 8009a04:	6560      	str	r0, [r4, #84]	; 0x54
 8009a06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a08:	602f      	str	r7, [r5, #0]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d0c9      	beq.n	80099a2 <__sflush_r+0x1a>
 8009a0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a12:	4299      	cmp	r1, r3
 8009a14:	d002      	beq.n	8009a1c <__sflush_r+0x94>
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7ff fbea 	bl	80091f0 <_free_r>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	6360      	str	r0, [r4, #52]	; 0x34
 8009a20:	e7c0      	b.n	80099a4 <__sflush_r+0x1c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b0      	blx	r6
 8009a28:	1c41      	adds	r1, r0, #1
 8009a2a:	d1c8      	bne.n	80099be <__sflush_r+0x36>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0c5      	beq.n	80099be <__sflush_r+0x36>
 8009a32:	2b1d      	cmp	r3, #29
 8009a34:	d001      	beq.n	8009a3a <__sflush_r+0xb2>
 8009a36:	2b16      	cmp	r3, #22
 8009a38:	d101      	bne.n	8009a3e <__sflush_r+0xb6>
 8009a3a:	602f      	str	r7, [r5, #0]
 8009a3c:	e7b1      	b.n	80099a2 <__sflush_r+0x1a>
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	e7ad      	b.n	80099a4 <__sflush_r+0x1c>
 8009a48:	690f      	ldr	r7, [r1, #16]
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d0a9      	beq.n	80099a2 <__sflush_r+0x1a>
 8009a4e:	0793      	lsls	r3, r2, #30
 8009a50:	680e      	ldr	r6, [r1, #0]
 8009a52:	bf08      	it	eq
 8009a54:	694b      	ldreq	r3, [r1, #20]
 8009a56:	600f      	str	r7, [r1, #0]
 8009a58:	bf18      	it	ne
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	eba6 0807 	sub.w	r8, r6, r7
 8009a60:	608b      	str	r3, [r1, #8]
 8009a62:	f1b8 0f00 	cmp.w	r8, #0
 8009a66:	dd9c      	ble.n	80099a2 <__sflush_r+0x1a>
 8009a68:	6a21      	ldr	r1, [r4, #32]
 8009a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a6c:	4643      	mov	r3, r8
 8009a6e:	463a      	mov	r2, r7
 8009a70:	4628      	mov	r0, r5
 8009a72:	47b0      	blx	r6
 8009a74:	2800      	cmp	r0, #0
 8009a76:	dc06      	bgt.n	8009a86 <__sflush_r+0xfe>
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e78e      	b.n	80099a4 <__sflush_r+0x1c>
 8009a86:	4407      	add	r7, r0
 8009a88:	eba8 0800 	sub.w	r8, r8, r0
 8009a8c:	e7e9      	b.n	8009a62 <__sflush_r+0xda>
 8009a8e:	bf00      	nop
 8009a90:	dfbffffe 	.word	0xdfbffffe

08009a94 <_fflush_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	690b      	ldr	r3, [r1, #16]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b913      	cbnz	r3, 8009aa4 <_fflush_r+0x10>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	b118      	cbz	r0, 8009aae <_fflush_r+0x1a>
 8009aa6:	6a03      	ldr	r3, [r0, #32]
 8009aa8:	b90b      	cbnz	r3, 8009aae <_fflush_r+0x1a>
 8009aaa:	f7ff f9a9 	bl	8008e00 <__sinit>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0f3      	beq.n	8009a9e <_fflush_r+0xa>
 8009ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab8:	07d0      	lsls	r0, r2, #31
 8009aba:	d404      	bmi.n	8009ac6 <_fflush_r+0x32>
 8009abc:	0599      	lsls	r1, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_fflush_r+0x32>
 8009ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac2:	f7ff fb92 	bl	80091ea <__retarget_lock_acquire_recursive>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	4621      	mov	r1, r4
 8009aca:	f7ff ff5d 	bl	8009988 <__sflush_r>
 8009ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad0:	07da      	lsls	r2, r3, #31
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	d4e4      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d4e1      	bmi.n	8009aa0 <_fflush_r+0xc>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f7ff fb85 	bl	80091ec <__retarget_lock_release_recursive>
 8009ae2:	e7dd      	b.n	8009aa0 <_fflush_r+0xc>

08009ae4 <__swhatbuf_r>:
 8009ae4:	b570      	push	{r4, r5, r6, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aec:	2900      	cmp	r1, #0
 8009aee:	b096      	sub	sp, #88	; 0x58
 8009af0:	4615      	mov	r5, r2
 8009af2:	461e      	mov	r6, r3
 8009af4:	da0d      	bge.n	8009b12 <__swhatbuf_r+0x2e>
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009afc:	f04f 0100 	mov.w	r1, #0
 8009b00:	bf0c      	ite	eq
 8009b02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b06:	2340      	movne	r3, #64	; 0x40
 8009b08:	2000      	movs	r0, #0
 8009b0a:	6031      	str	r1, [r6, #0]
 8009b0c:	602b      	str	r3, [r5, #0]
 8009b0e:	b016      	add	sp, #88	; 0x58
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	466a      	mov	r2, sp
 8009b14:	f000 f848 	bl	8009ba8 <_fstat_r>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	dbec      	blt.n	8009af6 <__swhatbuf_r+0x12>
 8009b1c:	9901      	ldr	r1, [sp, #4]
 8009b1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b26:	4259      	negs	r1, r3
 8009b28:	4159      	adcs	r1, r3
 8009b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b2e:	e7eb      	b.n	8009b08 <__swhatbuf_r+0x24>

08009b30 <__smakebuf_r>:
 8009b30:	898b      	ldrh	r3, [r1, #12]
 8009b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b34:	079d      	lsls	r5, r3, #30
 8009b36:	4606      	mov	r6, r0
 8009b38:	460c      	mov	r4, r1
 8009b3a:	d507      	bpl.n	8009b4c <__smakebuf_r+0x1c>
 8009b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	6123      	str	r3, [r4, #16]
 8009b44:	2301      	movs	r3, #1
 8009b46:	6163      	str	r3, [r4, #20]
 8009b48:	b002      	add	sp, #8
 8009b4a:	bd70      	pop	{r4, r5, r6, pc}
 8009b4c:	ab01      	add	r3, sp, #4
 8009b4e:	466a      	mov	r2, sp
 8009b50:	f7ff ffc8 	bl	8009ae4 <__swhatbuf_r>
 8009b54:	9900      	ldr	r1, [sp, #0]
 8009b56:	4605      	mov	r5, r0
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f7ff fbb5 	bl	80092c8 <_malloc_r>
 8009b5e:	b948      	cbnz	r0, 8009b74 <__smakebuf_r+0x44>
 8009b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b64:	059a      	lsls	r2, r3, #22
 8009b66:	d4ef      	bmi.n	8009b48 <__smakebuf_r+0x18>
 8009b68:	f023 0303 	bic.w	r3, r3, #3
 8009b6c:	f043 0302 	orr.w	r3, r3, #2
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	e7e3      	b.n	8009b3c <__smakebuf_r+0xc>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	6020      	str	r0, [r4, #0]
 8009b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	6163      	str	r3, [r4, #20]
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	6120      	str	r0, [r4, #16]
 8009b86:	b15b      	cbz	r3, 8009ba0 <__smakebuf_r+0x70>
 8009b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 f81d 	bl	8009bcc <_isatty_r>
 8009b92:	b128      	cbz	r0, 8009ba0 <__smakebuf_r+0x70>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	431d      	orrs	r5, r3
 8009ba4:	81a5      	strh	r5, [r4, #12]
 8009ba6:	e7cf      	b.n	8009b48 <__smakebuf_r+0x18>

08009ba8 <_fstat_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	; (8009bc8 <_fstat_r+0x20>)
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7f7 fece 	bl	8001956 <_fstat>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d102      	bne.n	8009bc4 <_fstat_r+0x1c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b103      	cbz	r3, 8009bc4 <_fstat_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000508 	.word	0x20000508

08009bcc <_isatty_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d06      	ldr	r5, [pc, #24]	; (8009be8 <_isatty_r+0x1c>)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f7 fecd 	bl	8001976 <_isatty>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_isatty_r+0x1a>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_isatty_r+0x1a>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20000508 	.word	0x20000508

08009bec <_sbrk_r>:
 8009bec:	b538      	push	{r3, r4, r5, lr}
 8009bee:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_sbrk_r+0x1c>)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	4608      	mov	r0, r1
 8009bf6:	602b      	str	r3, [r5, #0]
 8009bf8:	f7f7 fed6 	bl	80019a8 <_sbrk>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_sbrk_r+0x1a>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_sbrk_r+0x1a>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	20000508 	.word	0x20000508

08009c0c <_init>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr

08009c18 <_fini>:
 8009c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1a:	bf00      	nop
 8009c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1e:	bc08      	pop	{r3}
 8009c20:	469e      	mov	lr, r3
 8009c22:	4770      	bx	lr
