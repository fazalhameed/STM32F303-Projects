
led cntrl via SIMModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005280  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005410  08005410  00015410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005618  08005618  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005618  08005618  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005618  08005618  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000002b0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a86a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b62  00000000  00000000  0002a939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000780  00000000  00000000  0002c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005b9  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d164  00000000  00000000  0002d1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b454  00000000  00000000  0004a33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ad349  00000000  00000000  00055791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002570  00000000  00000000  00102adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0010504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053f8 	.word	0x080053f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080053f8 	.word	0x080053f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fafa 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f87a 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f902 	bl	8000494 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000290:	f000 f8d0 	bl	8000434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Wait until getting response OK to AT
  while(!ATisOK)
 8000294:	e02b      	b.n	80002ee <main+0x6e>
  {
    sprintf(ATcommand,"AT\r\n");
 8000296:	4931      	ldr	r1, [pc, #196]	; (800035c <main+0xdc>)
 8000298:	4831      	ldr	r0, [pc, #196]	; (8000360 <main+0xe0>)
 800029a:	f003 ff39 	bl	8004110 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800029e:	4830      	ldr	r0, [pc, #192]	; (8000360 <main+0xe0>)
 80002a0:	f7ff ff96 	bl	80001d0 <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ac:	492c      	ldr	r1, [pc, #176]	; (8000360 <main+0xe0>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <main+0xe4>)
 80002b0:	f002 fafa 	bl	80028a8 <HAL_UART_Transmit>
    HAL_UART_Receive (&huart1, rx_buffer, 100, 100);
 80002b4:	2364      	movs	r3, #100	; 0x64
 80002b6:	2264      	movs	r2, #100	; 0x64
 80002b8:	492b      	ldr	r1, [pc, #172]	; (8000368 <main+0xe8>)
 80002ba:	482a      	ldr	r0, [pc, #168]	; (8000364 <main+0xe4>)
 80002bc:	f002 fb7e 	bl	80029bc <HAL_UART_Receive>
    HAL_Delay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f000 fb40 	bl	8000948 <HAL_Delay>
    if(strstr((char *)rx_buffer,"OK"))
 80002c8:	4928      	ldr	r1, [pc, #160]	; (800036c <main+0xec>)
 80002ca:	4827      	ldr	r0, [pc, #156]	; (8000368 <main+0xe8>)
 80002cc:	f003 ff76 	bl	80041bc <strstr>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d002      	beq.n	80002dc <main+0x5c>
    {
      ATisOK = 1;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <main+0xf0>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(1000);
 80002dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e0:	f000 fb32 	bl	8000948 <HAL_Delay>
    memset(rx_buffer,0,sizeof(rx_buffer));
 80002e4:	2264      	movs	r2, #100	; 0x64
 80002e6:	2100      	movs	r1, #0
 80002e8:	481f      	ldr	r0, [pc, #124]	; (8000368 <main+0xe8>)
 80002ea:	f003 ff5f 	bl	80041ac <memset>
  while(!ATisOK)
 80002ee:	4b20      	ldr	r3, [pc, #128]	; (8000370 <main+0xf0>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0cf      	beq.n	8000296 <main+0x16>
  }
  // Send AT+CMGF=1
  sprintf(ATcommand,"AT+CMGF=1\r\n");
 80002f6:	491f      	ldr	r1, [pc, #124]	; (8000374 <main+0xf4>)
 80002f8:	4819      	ldr	r0, [pc, #100]	; (8000360 <main+0xe0>)
 80002fa:	f003 ff09 	bl	8004110 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 80002fe:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0xe0>)
 8000300:	f7ff ff66 	bl	80001d0 <strlen>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030c:	4914      	ldr	r1, [pc, #80]	; (8000360 <main+0xe0>)
 800030e:	4815      	ldr	r0, [pc, #84]	; (8000364 <main+0xe4>)
 8000310:	f002 faca 	bl	80028a8 <HAL_UART_Transmit>
  HAL_UART_Receive (&huart1, rx_buffer, 100, 100);
 8000314:	2364      	movs	r3, #100	; 0x64
 8000316:	2264      	movs	r2, #100	; 0x64
 8000318:	4913      	ldr	r1, [pc, #76]	; (8000368 <main+0xe8>)
 800031a:	4812      	ldr	r0, [pc, #72]	; (8000364 <main+0xe4>)
 800031c:	f002 fb4e 	bl	80029bc <HAL_UART_Receive>
  HAL_Delay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000324:	f000 fb10 	bl	8000948 <HAL_Delay>
  memset(rx_buffer,0,sizeof(rx_buffer));
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	2100      	movs	r1, #0
 800032c:	480e      	ldr	r0, [pc, #56]	; (8000368 <main+0xe8>)
 800032e:	f003 ff3d 	bl	80041ac <memset>
  // Send AT+CNMI=2,1 to enable notification when SMS arrives
  sprintf(ATcommand,"AT+CNMI=2,1\r\n");
 8000332:	4911      	ldr	r1, [pc, #68]	; (8000378 <main+0xf8>)
 8000334:	480a      	ldr	r0, [pc, #40]	; (8000360 <main+0xe0>)
 8000336:	f003 feeb 	bl	8004110 <siprintf>
  HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),1000);
 800033a:	4809      	ldr	r0, [pc, #36]	; (8000360 <main+0xe0>)
 800033c:	f7ff ff48 	bl	80001d0 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000348:	4905      	ldr	r1, [pc, #20]	; (8000360 <main+0xe0>)
 800034a:	4806      	ldr	r0, [pc, #24]	; (8000364 <main+0xe4>)
 800034c:	f002 faac 	bl	80028a8 <HAL_UART_Transmit>
  // Enabling interrupt receive
  HAL_UART_Receive_IT(&huart1,&rx_data,1);// receive data (one character only)
 8000350:	2201      	movs	r2, #1
 8000352:	490a      	ldr	r1, [pc, #40]	; (800037c <main+0xfc>)
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <main+0xe4>)
 8000356:	f002 fc45 	bl	8002be4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800035a:	e7fe      	b.n	800035a <main+0xda>
 800035c:	08005410 	.word	0x08005410
 8000360:	20000100 	.word	0x20000100
 8000364:	20000078 	.word	0x20000078
 8000368:	20000154 	.word	0x20000154
 800036c:	08005418 	.word	0x08005418
 8000370:	20000150 	.word	0x20000150
 8000374:	0800541c 	.word	0x0800541c
 8000378:	08005428 	.word	0x08005428
 800037c:	200001b9 	.word	0x200001b9

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09e      	sub	sp, #120	; 0x78
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800038a:	2228      	movs	r2, #40	; 0x28
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f003 ff0c 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	223c      	movs	r2, #60	; 0x3c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fefe 	bl	80041ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fdf4 	bl	8000fc4 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003e2:	f000 f92f 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fe1c 	bl	8002040 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800040e:	f000 f919 	bl	8000644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000412:	2301      	movs	r3, #1
 8000414:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	4618      	mov	r0, r3
 800041e:	f002 f845 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000428:	f000 f90c 	bl	8000644 <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3778      	adds	r7, #120	; 0x78
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART1_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART1_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART1_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART1_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_USART1_UART_Init+0x58>)
 8000478:	f002 f9c8 	bl	800280c <HAL_UART_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f8df 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000078 	.word	0x20000078
 8000490:	40013800 	.word	0x40013800

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004aa:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <MX_GPIO_Init+0x90>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <MX_GPIO_Init+0x90>)
 80004b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_GPIO_Init+0x90>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <MX_GPIO_Init+0x90>)
 80004c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MX_GPIO_Init+0x90>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_GPIO_Init+0x90>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MX_GPIO_Init+0x90>)
 80004e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_GPIO_Init+0x90>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2102      	movs	r1, #2
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f000 fd4b 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004fe:	2302      	movs	r3, #2
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2300      	movs	r3, #0
 800050c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	4619      	mov	r1, r3
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f000 fbc2 	bl	8000ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051c:	bf00      	nop
 800051e:	3720      	adds	r7, #32
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a36      	ldr	r2, [pc, #216]	; (8000610 <HAL_UART_RxCpltCallback+0xe8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d166      	bne.n	8000608 <HAL_UART_RxCpltCallback+0xe0>
  {
    // if the character received is other than 'enter' ascii13, save the data in buffer
    if(rx_data!=13)
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <HAL_UART_RxCpltCallback+0xec>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b0d      	cmp	r3, #13
 8000540:	d00b      	beq.n	800055a <HAL_UART_RxCpltCallback+0x32>
    {
      rx_buffer[rx_index++]=rx_data;
 8000542:	4b35      	ldr	r3, [pc, #212]	; (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	b2d1      	uxtb	r1, r2
 800054a:	4a33      	ldr	r2, [pc, #204]	; (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 800054c:	7011      	strb	r1, [r2, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <HAL_UART_RxCpltCallback+0xec>)
 8000552:	7819      	ldrb	r1, [r3, #0]
 8000554:	4b31      	ldr	r3, [pc, #196]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 8000556:	5499      	strb	r1, [r3, r2]
 8000558:	e051      	b.n	80005fe <HAL_UART_RxCpltCallback+0xd6>
    }
    else
    {
      // if new message arrived, read the message
      if( sscanf((char*)rx_buffer, "\n+CMTI: " PREF_SMS_STORAGE ",%hhd", &slot)==1)
 800055a:	4a31      	ldr	r2, [pc, #196]	; (8000620 <HAL_UART_RxCpltCallback+0xf8>)
 800055c:	4931      	ldr	r1, [pc, #196]	; (8000624 <HAL_UART_RxCpltCallback+0xfc>)
 800055e:	482f      	ldr	r0, [pc, #188]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 8000560:	f003 fdf6 	bl	8004150 <siscanf>
 8000564:	4603      	mov	r3, r0
 8000566:	2b01      	cmp	r3, #1
 8000568:	d111      	bne.n	800058e <HAL_UART_RxCpltCallback+0x66>
      {
        sprintf(ATcommand,"AT+CMGR=%d\r\n",slot);
 800056a:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <HAL_UART_RxCpltCallback+0xf8>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	492d      	ldr	r1, [pc, #180]	; (8000628 <HAL_UART_RxCpltCallback+0x100>)
 8000572:	482e      	ldr	r0, [pc, #184]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 8000574:	f003 fdcc 	bl	8004110 <siprintf>
        HAL_UART_Transmit_IT(&huart1,(uint8_t *)ATcommand,strlen(ATcommand));
 8000578:	482c      	ldr	r0, [pc, #176]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	b29b      	uxth	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	4929      	ldr	r1, [pc, #164]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 8000586:	482a      	ldr	r0, [pc, #168]	; (8000630 <HAL_UART_RxCpltCallback+0x108>)
 8000588:	f002 face 	bl	8002b28 <HAL_UART_Transmit_IT>
 800058c:	e01a      	b.n	80005c4 <HAL_UART_RxCpltCallback+0x9c>
      }
      // if message read contains "ledon", switch the LED ON
      else if (strstr((char *)rx_buffer,"ledon"))
 800058e:	4929      	ldr	r1, [pc, #164]	; (8000634 <HAL_UART_RxCpltCallback+0x10c>)
 8000590:	4822      	ldr	r0, [pc, #136]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 8000592:	f003 fe13 	bl	80041bc <strstr>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d006      	beq.n	80005aa <HAL_UART_RxCpltCallback+0x82>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	2102      	movs	r1, #2
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 fcf6 	bl	8000f94 <HAL_GPIO_WritePin>
 80005a8:	e00c      	b.n	80005c4 <HAL_UART_RxCpltCallback+0x9c>
      }
      // if message read contains "ledoff", switch the LED OFF
      else if (strstr((char *)rx_buffer,"ledoff"))
 80005aa:	4923      	ldr	r1, [pc, #140]	; (8000638 <HAL_UART_RxCpltCallback+0x110>)
 80005ac:	481b      	ldr	r0, [pc, #108]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 80005ae:	f003 fe05 	bl	80041bc <strstr>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <HAL_UART_RxCpltCallback+0x9c>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f000 fce8 	bl	8000f94 <HAL_GPIO_WritePin>
      }
      // This will delete all messages in the SIM card. (Is it ok for you?)
      if (strstr((char *)rx_buffer,"READ"))
 80005c4:	491d      	ldr	r1, [pc, #116]	; (800063c <HAL_UART_RxCpltCallback+0x114>)
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 80005c8:	f003 fdf8 	bl	80041bc <strstr>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00d      	beq.n	80005ee <HAL_UART_RxCpltCallback+0xc6>
      {
          sprintf(ATcommand,"AT+CMGD=,4\r\n");
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <HAL_UART_RxCpltCallback+0x118>)
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 80005d6:	f003 fd9b 	bl	8004110 <siprintf>
          HAL_UART_Transmit_IT(&huart1,(uint8_t *)ATcommand,strlen(ATcommand));
 80005da:	4814      	ldr	r0, [pc, #80]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <HAL_UART_RxCpltCallback+0x104>)
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <HAL_UART_RxCpltCallback+0x108>)
 80005ea:	f002 fa9d 	bl	8002b28 <HAL_UART_Transmit_IT>
      }
      rx_index=0;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
      memset(rx_buffer,0,sizeof(rx_buffer));
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	2100      	movs	r1, #0
 80005f8:	4808      	ldr	r0, [pc, #32]	; (800061c <HAL_UART_RxCpltCallback+0xf4>)
 80005fa:	f003 fdd7 	bl	80041ac <memset>
    }
    // Enabling interrupt receive again
    HAL_UART_Receive_IT(&huart1,&rx_data,1); // receive data (one character only)
 80005fe:	2201      	movs	r2, #1
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <HAL_UART_RxCpltCallback+0xec>)
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_UART_RxCpltCallback+0x108>)
 8000604:	f002 faee 	bl	8002be4 <HAL_UART_Receive_IT>
  }
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	200001b9 	.word	0x200001b9
 8000618:	200001b8 	.word	0x200001b8
 800061c:	20000154 	.word	0x20000154
 8000620:	20000151 	.word	0x20000151
 8000624:	08005438 	.word	0x08005438
 8000628:	0800544c 	.word	0x0800544c
 800062c:	20000100 	.word	0x20000100
 8000630:	20000078 	.word	0x20000078
 8000634:	0800545c 	.word	0x0800545c
 8000638:	08005464 	.word	0x08005464
 800063c:	0800546c 	.word	0x0800546c
 8000640:	08005474 	.word	0x08005474

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x44>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <HAL_UART_MspInit+0x8c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12f      	bne.n	800071a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_UART_MspInit+0x90>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ea:	2330      	movs	r3, #48	; 0x30
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006fa:	2307      	movs	r3, #7
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <HAL_UART_MspInit+0x94>)
 8000706:	f000 facb 	bl	8000ca0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2025      	movs	r0, #37	; 0x25
 8000710:	f000 fa19 	bl	8000b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000714:	2025      	movs	r0, #37	; 0x25
 8000716:	f000 fa32 	bl	8000b7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40013800 	.word	0x40013800
 8000728:	40021000 	.word	0x40021000
 800072c:	48000800 	.word	0x48000800

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077c:	f000 f8c4 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <USART1_IRQHandler+0x10>)
 800078a:	f002 fa6f 	bl	8002c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000078 	.word	0x20000078

08000798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <_sbrk+0x5c>)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <_sbrk+0x60>)
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <_sbrk+0x64>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <_sbrk+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d207      	bcs.n	80007d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c8:	f003 fd0e 	bl	80041e8 <__errno>
 80007cc:	4603      	mov	r3, r0
 80007ce:	220c      	movs	r2, #12
 80007d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	e009      	b.n	80007ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <_sbrk+0x64>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <_sbrk+0x64>)
 80007e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ea:	68fb      	ldr	r3, [r7, #12]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000a000 	.word	0x2000a000
 80007f8:	00000400 	.word	0x00000400
 80007fc:	200001bc 	.word	0x200001bc
 8000800:	20000310 	.word	0x20000310

08000804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SystemInit+0x20>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <SystemInit+0x20>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ffea 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f003 fccd 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fd11 	bl	8000280 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800086c:	08005620 	.word	0x08005620
  ldr r2, =_sbss
 8000870:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000874:	2000030c 	.word	0x2000030c

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f94f 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff feda 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f967 	bl	8000b9a <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f92f 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200001c0 	.word	0x200001c0

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200001c0 	.word	0x200001c0

08000948 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000950:	f7ff ffee 	bl	8000930 <HAL_GetTick>
 8000954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000960:	d005      	beq.n	800096e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <HAL_Delay+0x44>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4413      	add	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800096e:	bf00      	nop
 8000970:	f7ff ffde 	bl	8000930 <HAL_GetTick>
 8000974:	4602      	mov	r2, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	429a      	cmp	r2, r3
 800097e:	d8f7      	bhi.n	8000970 <HAL_Delay+0x28>
  {
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <__NVIC_EnableIRQ+0x38>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff29 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff3e 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff31 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffa2 	bl	8000aec <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d008      	beq.n	8000bd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e020      	b.n	8000c18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 020e 	bic.w	r2, r2, #14
 8000be4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0201 	bic.w	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d005      	beq.n	8000c46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e027      	b.n	8000c96 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 020e 	bic.w	r2, r2, #14
 8000c54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0201 	bic.w	r2, r2, #1
 8000c64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
    } 
  }
  return status;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cae:	e154      	b.n	8000f5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8146 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d005      	beq.n	8000ce0 <HAL_GPIO_Init+0x40>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d130      	bne.n	8000d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d16:	2201      	movs	r2, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	091b      	lsrs	r3, r3, #4
 8000d2c:	f003 0201 	and.w	r2, r3, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d017      	beq.n	8000d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d123      	bne.n	8000dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0203 	and.w	r2, r3, #3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80a0 	beq.w	8000f54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <HAL_GPIO_Init+0x2d8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2c:	4a53      	ldr	r2, [pc, #332]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e56:	d019      	beq.n	8000e8c <HAL_GPIO_Init+0x1ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x2e0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x1e8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x2e4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00d      	beq.n	8000e84 <HAL_GPIO_Init+0x1e4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d007      	beq.n	8000e80 <HAL_GPIO_Init+0x1e0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <HAL_GPIO_Init+0x2ec>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d101      	bne.n	8000e7c <HAL_GPIO_Init+0x1dc>
 8000e78:	2304      	movs	r3, #4
 8000e7a:	e008      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e80:	2303      	movs	r3, #3
 8000e82:	e004      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e9e:	4937      	ldr	r1, [pc, #220]	; (8000f7c <HAL_GPIO_Init+0x2dc>)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eac:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_GPIO_Init+0x2f0>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f47f aea3 	bne.w	8000cb0 <HAL_GPIO_Init+0x10>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	48001000 	.word	0x48001000
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f001 b823 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 817d 	beq.w	80012fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001000:	4bbc      	ldr	r3, [pc, #752]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4bb9      	ldr	r3, [pc, #740]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d15c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x10e>
 8001018:	4bb6      	ldr	r3, [pc, #728]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d155      	bne.n	80010d2 <HAL_RCC_OscConfig+0x10e>
 8001026:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001032:	fa93 f3a3 	rbit	r3, r3
 8001036:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800103a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103e:	fab3 f383 	clz	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	095b      	lsrs	r3, r3, #5
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <HAL_RCC_OscConfig+0x94>
 8001052:	4ba8      	ldr	r3, [pc, #672]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	e015      	b.n	8001084 <HAL_RCC_OscConfig+0xc0>
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800106c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001070:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001074:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001080:	4b9c      	ldr	r3, [pc, #624]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001088:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800108c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001090:	fa92 f2a2 	rbit	r2, r2
 8001094:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001098:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800109c:	fab2 f282 	clz	r2, r2
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	f042 0220 	orr.w	r2, r2, #32
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	f002 021f 	and.w	r2, r2, #31
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 811f 	beq.w	80012f8 <HAL_RCC_OscConfig+0x334>
 80010ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8116 	bne.w	80012f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f000 bfaf 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e2:	d106      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12e>
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a82      	ldr	r2, [pc, #520]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e036      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 80010f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x158>
 8001102:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7b      	ldr	r2, [pc, #492]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a78      	ldr	r2, [pc, #480]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e021      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 800111c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x184>
 800112e:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a70      	ldr	r2, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x19c>
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a69      	ldr	r2, [pc, #420]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a66      	ldr	r2, [pc, #408]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001160:	4b64      	ldr	r3, [pc, #400]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	f023 020f 	bic.w	r2, r3, #15
 8001168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	495f      	ldr	r1, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001176:	4313      	orrs	r3, r2
 8001178:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800117e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d059      	beq.n	800123e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fbd1 	bl	8000930 <HAL_GetTick>
 800118e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e00a      	b.n	80011aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fbcc 	bl	8000930 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b64      	cmp	r3, #100	; 0x64
 80011a2:	d902      	bls.n	80011aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	f000 bf43 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	095b      	lsrs	r3, r3, #5
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x218>
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e015      	b.n	8001208 <HAL_RCC_OscConfig+0x244>
 80011dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800120c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001210:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001214:	fa92 f2a2 	rbit	r2, r2
 8001218:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800121c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001220:	fab2 f282 	clz	r2, r2
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f042 0220 	orr.w	r2, r2, #32
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f002 021f 	and.w	r2, r2, #31
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ab      	beq.n	8001194 <HAL_RCC_OscConfig+0x1d0>
 800123c:	e05d      	b.n	80012fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb77 	bl	8000930 <HAL_GetTick>
 8001242:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fb72 	bl	8000930 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d902      	bls.n	800125e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	f000 bee9 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 800125e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001262:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001272:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	095b      	lsrs	r3, r3, #5
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x2cc>
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	e015      	b.n	80012bc <HAL_RCC_OscConfig+0x2f8>
 8001290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001294:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_RCC_OscConfig+0x330>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012c8:	fa92 f2a2 	rbit	r2, r2
 80012cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012d4:	fab2 f282 	clz	r2, r2
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f002 021f 	and.w	r2, r2, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ab      	bne.n	8001248 <HAL_RCC_OscConfig+0x284>
 80012f0:	e003      	b.n	80012fa <HAL_RCC_OscConfig+0x336>
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 817d 	beq.w	800160a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001310:	4ba6      	ldr	r3, [pc, #664]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800131c:	4ba3      	ldr	r3, [pc, #652]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d172      	bne.n	800140e <HAL_RCC_OscConfig+0x44a>
 8001328:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d16c      	bne.n	800140e <HAL_RCC_OscConfig+0x44a>
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001346:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <HAL_RCC_OscConfig+0x3a0>
 800135e:	4b93      	ldr	r3, [pc, #588]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	e013      	b.n	800138c <HAL_RCC_OscConfig+0x3c8>
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800137c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001388:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2202      	movs	r2, #2
 800138e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001392:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800139e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00a      	beq.n	80013d4 <HAL_RCC_OscConfig+0x410>
 80013be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 be2e 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b75      	ldr	r3, [pc, #468]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	21f8      	movs	r1, #248	; 0xf8
 80013ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013f2:	fa91 f1a1 	rbit	r1, r1
 80013f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013fe:	fab1 f181 	clz	r1, r1
 8001402:	b2c9      	uxtb	r1, r1
 8001404:	408b      	lsls	r3, r1
 8001406:	4969      	ldr	r1, [pc, #420]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140c:	e0fd      	b.n	800160a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8088 	beq.w	8001530 <HAL_RCC_OscConfig+0x56c>
 8001420:	2301      	movs	r3, #1
 8001422:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800142a:	fa93 f3a3 	rbit	r3, r3
 800142e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001432:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001436:	fab3 f383 	clz	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001440:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	461a      	mov	r2, r3
 8001448:	2301      	movs	r3, #1
 800144a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fa70 	bl	8000930 <HAL_GetTick>
 8001450:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001456:	f7ff fa6b 	bl	8000930 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d902      	bls.n	800146c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	f000 bde2 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800147e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <HAL_RCC_OscConfig+0x4d8>
 8001496:	4b45      	ldr	r3, [pc, #276]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	e013      	b.n	80014c4 <HAL_RCC_OscConfig+0x500>
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	2202      	movs	r2, #2
 80014c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014ce:	fa92 f2a2 	rbit	r2, r2
 80014d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014da:	fab2 f282 	clz	r2, r2
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f002 021f 	and.w	r2, r2, #31
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0af      	beq.n	8001456 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	21f8      	movs	r1, #248	; 0xf8
 800150c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001514:	fa91 f1a1 	rbit	r1, r1
 8001518:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800151c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001520:	fab1 f181 	clz	r1, r1
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	408b      	lsls	r3, r1
 8001528:	4920      	ldr	r1, [pc, #128]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
 800152e:	e06c      	b.n	800160a <HAL_RCC_OscConfig+0x646>
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001542:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001550:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	461a      	mov	r2, r3
 8001558:	2300      	movs	r3, #0
 800155a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff f9e8 	bl	8000930 <HAL_GetTick>
 8001560:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff f9e3 	bl	8000930 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d902      	bls.n	800157c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	f000 bd5a 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800158e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	095b      	lsrs	r3, r3, #5
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d104      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5ec>
 80015a6:	4b01      	ldr	r3, [pc, #4]	; (80015ac <HAL_RCC_OscConfig+0x5e8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	e015      	b.n	80015d8 <HAL_RCC_OscConfig+0x614>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015d4:	4bc8      	ldr	r3, [pc, #800]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2202      	movs	r2, #2
 80015da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015e2:	fa92 f2a2 	rbit	r2, r2
 80015e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f042 0220 	orr.w	r2, r2, #32
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f002 021f 	and.w	r2, r2, #31
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ad      	bne.n	8001566 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8110 	beq.w	8001840 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d079      	beq.n	8001724 <HAL_RCC_OscConfig+0x760>
 8001630:	2301      	movs	r3, #1
 8001632:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4bab      	ldr	r3, [pc, #684]	; (80018fc <HAL_RCC_OscConfig+0x938>)
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	461a      	mov	r2, r3
 8001656:	2301      	movs	r3, #1
 8001658:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff f969 	bl	8000930 <HAL_GetTick>
 800165e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff f964 	bl	8000930 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d902      	bls.n	800167a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	f000 bcdb 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 80016d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016e0:	2102      	movs	r1, #2
 80016e2:	6019      	str	r1, [r3, #0]
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f1a3 	rbit	r1, r3
 80016f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016fa:	6019      	str	r1, [r3, #0]
  return result;
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0a0      	beq.n	8001664 <HAL_RCC_OscConfig+0x6a0>
 8001722:	e08d      	b.n	8001840 <HAL_RCC_OscConfig+0x87c>
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001734:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001746:	601a      	str	r2, [r3, #0]
  return result;
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001750:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x938>)
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	461a      	mov	r2, r3
 8001762:	2300      	movs	r3, #0
 8001764:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff f8e3 	bl	8000930 <HAL_GetTick>
 800176a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff f8de 	bl	8000930 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d902      	bls.n	8001786 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	f000 bc55 	b.w	8002030 <HAL_RCC_OscConfig+0x106c>
 8001786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800178e:	2202      	movs	r2, #2
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f2a3 	rbit	r2, r3
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fa93 f2a3 	rbit	r2, r3
 80017e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 80017f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017fe:	2102      	movs	r1, #2
 8001800:	6019      	str	r1, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001806:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	fa93 f1a3 	rbit	r1, r3
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001818:	6019      	str	r1, [r3, #0]
  return result;
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d197      	bne.n	8001770 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 81a1 	beq.w	8001b98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	61d3      	str	r3, [r2, #28]
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800188e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x93c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_RCC_OscConfig+0x93c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a16      	ldr	r2, [pc, #88]	; (8001900 <HAL_RCC_OscConfig+0x93c>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ae:	f7ff f83f 	bl	8000930 <HAL_GetTick>
 80018b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	e009      	b.n	80018cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff f83a 	bl	8000930 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e3b1      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_OscConfig+0x93c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_OscConfig+0x940>
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a02      	ldr	r2, [pc, #8]	; (80018f8 <HAL_RCC_OscConfig+0x934>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	e03c      	b.n	8001970 <HAL_RCC_OscConfig+0x9ac>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	10908120 	.word	0x10908120
 8001900:	40007000 	.word	0x40007000
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x96a>
 8001914:	4bc1      	ldr	r3, [pc, #772]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	4ac0      	ldr	r2, [pc, #768]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	6213      	str	r3, [r2, #32]
 8001920:	4bbe      	ldr	r3, [pc, #760]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4abd      	ldr	r2, [pc, #756]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	e020      	b.n	8001970 <HAL_RCC_OscConfig+0x9ac>
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x994>
 800193e:	4bb7      	ldr	r3, [pc, #732]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4ab6      	ldr	r2, [pc, #728]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4bb4      	ldr	r3, [pc, #720]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4ab3      	ldr	r2, [pc, #716]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x9ac>
 8001958:	4bb0      	ldr	r3, [pc, #704]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4aaf      	ldr	r2, [pc, #700]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6213      	str	r3, [r2, #32]
 8001964:	4bad      	ldr	r3, [pc, #692]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4aac      	ldr	r2, [pc, #688]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 800196a:	f023 0304 	bic.w	r3, r3, #4
 800196e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8081 	beq.w	8001a84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7fe ffd5 	bl	8000930 <HAL_GetTick>
 8001986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7fe ffd0 	bl	8000930 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e345      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019ac:	2202      	movs	r2, #2
 80019ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019d0:	2202      	movs	r2, #2
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fa93 f2a3 	rbit	r2, r3
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019ea:	601a      	str	r2, [r3, #0]
  return result;
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_OscConfig+0xa4c>
 8001a0a:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	e013      	b.n	8001a38 <HAL_RCC_OscConfig+0xa74>
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4b79      	ldr	r3, [pc, #484]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a40:	2102      	movs	r1, #2
 8001a42:	6011      	str	r1, [r2, #0]
 8001a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	fa92 f1a2 	rbit	r1, r2
 8001a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a5a:	6011      	str	r1, [r2, #0]
  return result;
 8001a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d084      	beq.n	800198c <HAL_RCC_OscConfig+0x9c8>
 8001a82:	e07f      	b.n	8001b84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe ff54 	bl	8000930 <HAL_GetTick>
 8001a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00b      	b.n	8001aa6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe ff4f 	bl	8000930 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e2c4      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001af6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0xb4e>
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	e013      	b.n	8001b3a <HAL_RCC_OscConfig+0xb76>
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b42:	2102      	movs	r1, #2
 8001b44:	6011      	str	r1, [r2, #0]
 8001b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	fa92 f1a2 	rbit	r1, r2
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b5c:	6011      	str	r1, [r2, #0]
  return result;
 8001b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d184      	bne.n	8001a8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8242 	beq.w	800202e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001baa:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_RCC_OscConfig+0xc58>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	f000 8213 	beq.w	8001fde <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 8162 	bne.w	8001e8e <HAL_RCC_OscConfig+0xeca>
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bee:	601a      	str	r2, [r3, #0]
  return result;
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe fe8e 	bl	8000930 <HAL_GetTick>
 8001c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	e00c      	b.n	8001c34 <HAL_RCC_OscConfig+0xc70>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe fe86 	bl	8000930 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1fd      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c58:	601a      	str	r2, [r3, #0]
  return result;
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	fab3 f383 	clz	r3, r3
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0xcba>
 8001c78:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	e027      	b.n	8001cce <HAL_RCC_OscConfig+0xd0a>
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	4b9c      	ldr	r3, [pc, #624]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cda:	6011      	str	r1, [r2, #0]
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	fa92 f1a2 	rbit	r1, r2
 8001cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cf2:	6011      	str	r1, [r2, #0]
  return result;
 8001cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f042 0220 	orr.w	r2, r2, #32
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f002 021f 	and.w	r2, r2, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d182      	bne.n	8001c20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	497f      	ldr	r1, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	461a      	mov	r2, r3
 8001d84:	2301      	movs	r3, #1
 8001d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fdd2 	bl	8000930 <HAL_GetTick>
 8001d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fdcd 	bl	8000930 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e144      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
 8001da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001daa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001dd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe2c>
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e027      	b.n	8001e40 <HAL_RCC_OscConfig+0xe7c>
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e44:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e48:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e4c:	6011      	str	r1, [r2, #0]
 8001e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e52:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	fa92 f1a2 	rbit	r1, r2
 8001e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e64:	6011      	str	r1, [r2, #0]
  return result;
 8001e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f002 021f 	and.w	r2, r2, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d082      	beq.n	8001d92 <HAL_RCC_OscConfig+0xdce>
 8001e8c:	e0cf      	b.n	800202e <HAL_RCC_OscConfig+0x106a>
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001eb2:	601a      	str	r2, [r3, #0]
  return result;
 8001eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001ebc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ec8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fd2c 	bl	8000930 <HAL_GetTick>
 8001ed8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001edc:	e009      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7fe fd27 	bl	8000930 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e09e      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001efa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f04:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f16:	601a      	str	r2, [r3, #0]
  return result;
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d104      	bne.n	8001f40 <HAL_RCC_OscConfig+0xf7c>
 8001f36:	4b01      	ldr	r3, [pc, #4]	; (8001f3c <HAL_RCC_OscConfig+0xf78>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e029      	b.n	8001f90 <HAL_RCC_OscConfig+0xfcc>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f60:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f78:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	fa93 f2a3 	rbit	r2, r3
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x1078>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f94:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fa2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	fa92 f1a2 	rbit	r1, r2
 8001fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fb0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fb4:	6011      	str	r1, [r2, #0]
  return result;
 8001fb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	fab2 f282 	clz	r2, r2
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	f042 0220 	orr.w	r2, r2, #32
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f002 021f 	and.w	r2, r2, #31
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d180      	bne.n	8001ede <HAL_RCC_OscConfig+0xf1a>
 8001fdc:	e027      	b.n	800202e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01e      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_OscConfig+0x1078>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ffe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	429a      	cmp	r2, r3
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002012:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002016:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b09e      	sub	sp, #120	; 0x78
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e162      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b90      	ldr	r3, [pc, #576]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b8d      	ldr	r3, [pc, #564]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	498b      	ldr	r1, [pc, #556]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e14a      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b82      	ldr	r3, [pc, #520]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	497f      	ldr	r1, [pc, #508]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80dc 	beq.w	800226c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d13c      	bne.n	8002136 <HAL_RCC_ClockConfig+0xf6>
 80020bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d102      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xa6>
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	e00f      	b.n	8002106 <HAL_RCC_ClockConfig+0xc6>
 80020e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	667b      	str	r3, [r7, #100]	; 0x64
 80020f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f8:	663b      	str	r3, [r7, #96]	; 0x60
 80020fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002102:	4b67      	ldr	r3, [pc, #412]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210a:	65ba      	str	r2, [r7, #88]	; 0x58
 800210c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d17b      	bne.n	800222a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0f3      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d13c      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x178>
 800213e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002142:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800214c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d102      	bne.n	8002168 <HAL_RCC_ClockConfig+0x128>
 8002162:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e00f      	b.n	8002188 <HAL_RCC_ClockConfig+0x148>
 8002168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
 8002176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217a:	643b      	str	r3, [r7, #64]	; 0x40
 800217c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218c:	63ba      	str	r2, [r7, #56]	; 0x38
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f202 	lsl.w	r2, r1, r2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d13a      	bne.n	800222a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b2      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
 80021b8:	2302      	movs	r3, #2
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x1a0>
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e00d      	b.n	80021fc <HAL_RCC_ClockConfig+0x1bc>
 80021e0:	2302      	movs	r3, #2
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2202      	movs	r2, #2
 80021fe:	61ba      	str	r2, [r7, #24]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	617a      	str	r2, [r7, #20]
  return result;
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e079      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	491a      	ldr	r1, [pc, #104]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7fe fb78 	bl	8000930 <HAL_GetTick>
 8002240:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe fb74 	bl	8000930 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e061      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_ClockConfig+0x260>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d214      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <HAL_RCC_ClockConfig+0x25c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e040      	b.n	800231e <HAL_RCC_ClockConfig+0x2de>
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_ClockConfig+0x2e8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	491a      	ldr	r1, [pc, #104]	; (8002328 <HAL_RCC_ClockConfig+0x2e8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_RCC_ClockConfig+0x2e8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4912      	ldr	r1, [pc, #72]	; (8002328 <HAL_RCC_ClockConfig+0x2e8>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022e2:	f000 f829 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022e6:	4601      	mov	r1, r0
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_RCC_ClockConfig+0x2e8>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f0:	22f0      	movs	r2, #240	; 0xf0
 80022f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	fa92 f2a2 	rbit	r2, r2
 80022fa:	60fa      	str	r2, [r7, #12]
  return result;
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	fab2 f282 	clz	r2, r2
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	40d3      	lsrs	r3, r2
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x2ec>)
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	fa21 f303 	lsr.w	r3, r1, r3
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_RCC_ClockConfig+0x2f0>)
 8002310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <HAL_RCC_ClockConfig+0x2f4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fac6 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3778      	adds	r7, #120	; 0x78
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	08005490 	.word	0x08005490
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	; 0x2c
 800233c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d002      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x30>
 8002362:	2b08      	cmp	r3, #8
 8002364:	d003      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x36>
 8002366:	e03c      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	e03c      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002374:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002378:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	607a      	str	r2, [r7, #4]
  return result;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_RCC_GetSysClockFreq+0xc8>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	220f      	movs	r2, #15
 800239c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	fa92 f2a2 	rbit	r2, r2
 80023a4:	60fa      	str	r2, [r7, #12]
  return result;
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	40d3      	lsrs	r3, r2
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
 80023d0:	e004      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	623b      	str	r3, [r7, #32]
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80023e4:	623b      	str	r3, [r7, #32]
      break;
 80023e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e8:	6a3b      	ldr	r3, [r7, #32]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	372c      	adds	r7, #44	; 0x2c
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	080054a8 	.word	0x080054a8
 8002404:	080054b8 	.word	0x080054b8
 8002408:	003d0900 	.word	0x003d0900

0800240c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCC_GetHCLKFreq+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000000 	.word	0x20000000

08002424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800242a:	f7ff ffef 	bl	800240c <HAL_RCC_GetHCLKFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002438:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800243c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	fa92 f2a2 	rbit	r2, r2
 8002444:	603a      	str	r2, [r7, #0]
  return result;
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	40d3      	lsrs	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	080054a0 	.word	0x080054a0

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800246e:	f7ff ffcd 	bl	800240c <HAL_RCC_GetHCLKFreq>
 8002472:	4601      	mov	r1, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800247c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002480:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	fa92 f2a2 	rbit	r2, r2
 8002488:	603a      	str	r2, [r7, #0]
  return result;
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	40d3      	lsrs	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	080054a0 	.word	0x080054a0

080024ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b092      	sub	sp, #72	; 0x48
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80d4 	beq.w	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a4a      	ldr	r2, [pc, #296]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	61d3      	str	r3, [r2, #28]
 80024e8:	4b48      	ldr	r3, [pc, #288]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b45      	ldr	r3, [pc, #276]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a41      	ldr	r2, [pc, #260]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002510:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe fa0d 	bl	8000930 <HAL_GetTick>
 8002516:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fa09 	bl	8000930 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e169      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8084 	beq.w	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002554:	429a      	cmp	r2, r3
 8002556:	d07c      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	461a      	mov	r2, r3
 8002582:	2301      	movs	r3, #1
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04b      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe f9b9 	bl	8000930 <HAL_GetTick>
 80025be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe f9b5 	bl	8000930 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e113      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80025d8:	2302      	movs	r3, #2
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	61fb      	str	r3, [r7, #28]
  return result;
 80025f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d108      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002606:	4b01      	ldr	r3, [pc, #4]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	e00d      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
 8002614:	10908100 	.word	0x10908100
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2202      	movs	r2, #2
 800262a:	613a      	str	r2, [r7, #16]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	60fa      	str	r2, [r7, #12]
  return result;
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0b7      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002652:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002664:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b66      	ldr	r3, [pc, #408]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a65      	ldr	r2, [pc, #404]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002684:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f023 0203 	bic.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	495d      	ldr	r1, [pc, #372]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a2:	4b59      	ldr	r3, [pc, #356]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4956      	ldr	r1, [pc, #344]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c0:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	494e      	ldr	r1, [pc, #312]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026de:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f023 0210 	bic.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4947      	ldr	r1, [pc, #284]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800271a:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f023 0220 	bic.w	r2, r3, #32
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4938      	ldr	r1, [pc, #224]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	4930      	ldr	r1, [pc, #192]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4929      	ldr	r1, [pc, #164]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4921      	ldr	r1, [pc, #132]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	491a      	ldr	r1, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027b0:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	4912      	ldr	r1, [pc, #72]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	490b      	ldr	r1, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3748      	adds	r7, #72	; 0x48
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e040      	b.n	80028a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fd ff32 	bl	8000698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	; 0x24
 8002838:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fd14 	bl	8003278 <UART_SetConfig>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fedc 	bl	8003620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 ff63 	bl	8003764 <UART_CheckIdleState>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d178      	bne.n	80029b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_UART_Transmit+0x24>
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e071      	b.n	80029b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2221      	movs	r2, #33	; 0x21
 80028dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028de:	f7fe f827 	bl	8000930 <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d108      	bne.n	8002910 <HAL_UART_Transmit+0x68>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e003      	b.n	8002918 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002918:	e030      	b.n	800297c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 ffc5 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e03c      	b.n	80029b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800294c:	b292      	uxth	r2, r2
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	3302      	adds	r3, #2
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	e008      	b.n	800296a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b292      	uxth	r2, r2
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	3301      	adds	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1c8      	bne.n	800291a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2200      	movs	r2, #0
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 ff8e 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e005      	b.n	80029b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	f040 80a3 	bne.w	8002b1e <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_UART_Receive+0x28>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e09b      	b.n	8002b20 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2222      	movs	r2, #34	; 0x22
 80029f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029fe:	f7fd ff97 	bl	8000930 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	88fa      	ldrh	r2, [r7, #6]
 8002a10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1c:	d10e      	bne.n	8002a3c <HAL_UART_Receive+0x80>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_UART_Receive+0x76>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a30:	e01a      	b.n	8002a68 <HAL_UART_Receive+0xac>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a3a:	e015      	b.n	8002a68 <HAL_UART_Receive+0xac>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10d      	bne.n	8002a60 <HAL_UART_Receive+0xa4>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_UART_Receive+0x9a>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a54:	e008      	b.n	8002a68 <HAL_UART_Receive+0xac>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	227f      	movs	r2, #127	; 0x7f
 8002a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a5e:	e003      	b.n	8002a68 <HAL_UART_Receive+0xac>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a6e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d108      	bne.n	8002a8c <HAL_UART_Receive+0xd0>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e003      	b.n	8002a94 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a94:	e037      	b.n	8002b06 <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 ff07 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e033      	b.n	8002b20 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	8a7b      	ldrh	r3, [r7, #18]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e00d      	b.n	8002af4 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8a7b      	ldrh	r3, [r7, #18]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1c1      	bne.n	8002a96 <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b08b      	sub	sp, #44	; 0x2c
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d147      	bne.n	8002bce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit_IT+0x22>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e040      	b.n	8002bd0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2221      	movs	r2, #33	; 0x21
 8002b76:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b80:	d107      	bne.n	8002b92 <HAL_UART_Transmit_IT+0x6a>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <HAL_UART_Transmit_IT+0xb4>)
 8002b8e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002b90:	e002      	b.n	8002b98 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_UART_Transmit_IT+0xb8>)
 8002b96:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	69f9      	ldr	r1, [r7, #28]
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e6      	bne.n	8002b98 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
  }
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	372c      	adds	r7, #44	; 0x2c
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	08003c99 	.word	0x08003c99
 8002be0:	08003be1 	.word	0x08003be1

08002be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d132      	bne.n	8002c62 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_UART_Receive_IT+0x24>
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e02b      	b.n	8002c64 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d018      	beq.n	8002c52 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	69f9      	ldr	r1, [r7, #28]
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e6      	bne.n	8002c20 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	461a      	mov	r2, r3
 8002c56:	68b9      	ldr	r1, [r7, #8]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fe93 	bl	8003984 <UART_Start_Receive_IT>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	e000      	b.n	8002c64 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002c62:	2302      	movs	r3, #2
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0ba      	sub	sp, #232	; 0xe8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c96:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ca0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d115      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d009      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 82ab 	beq.w	8003220 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
      }
      return;
 8002cd2:	e2a5      	b.n	8003220 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8117 	beq.w	8002f0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_UART_IRQHandler+0x298>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 810a 	beq.w	8002f0c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d011      	beq.n	8002d28 <HAL_UART_IRQHandler+0xbc>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d011      	beq.n	8002d58 <HAL_UART_IRQHandler+0xec>
 8002d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <HAL_UART_IRQHandler+0x11c>
 8002d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2204      	movs	r2, #4
 8002d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d017      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2208      	movs	r2, #8
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dba:	f043 0208 	orr.w	r2, r3, #8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_UART_IRQHandler+0x18a>
 8002dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8211 	beq.w	8003224 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d005      	beq.n	8002e4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04f      	beq.n	8002eee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fe4c 	bl	8003aec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d141      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1d9      	bne.n	8002e62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_UART_IRQHandler+0x29c>)
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd feae 	bl	8000c24 <HAL_DMA_Abort_IT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	e00f      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f9b4 	bl	800324c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee4:	e00b      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f9b0 	bl	800324c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	e007      	b.n	8002efe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9ac 	bl	800324c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002efc:	e192      	b.n	8003224 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efe:	bf00      	nop
    return;
 8002f00:	e190      	b.n	8003224 <HAL_UART_IRQHandler+0x5b8>
 8002f02:	bf00      	nop
 8002f04:	04000120 	.word	0x04000120
 8002f08:	08003bb5 	.word	0x08003bb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	f040 814b 	bne.w	80031ac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8144 	beq.w	80031ac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 813d 	beq.w	80031ac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2210      	movs	r2, #16
 8002f38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	f040 80b5 	bne.w	80030b4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8164 	beq.w	8003228 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	f080 815c 	bcs.w	8003228 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f000 8086 	beq.w	8003092 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1da      	bne.n	8002f86 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3308      	adds	r3, #8
 8002ff0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ff4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ffc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e1      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3308      	adds	r3, #8
 8003012:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003030:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003032:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003036:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800303e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e3      	bne.n	800300c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003062:	f023 0310 	bic.w	r3, r3, #16
 8003066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003074:	65bb      	str	r3, [r7, #88]	; 0x58
 8003076:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800307a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e4      	bne.n	8003052 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fd90 	bl	8000bb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8d7 	bl	8003260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030b2:	e0b9      	b.n	8003228 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80ab 	beq.w	800322c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80030d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80a6 	beq.w	800322c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3308      	adds	r3, #8
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	623b      	str	r3, [r7, #32]
   return(result);
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3308      	adds	r3, #8
 8003136:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800313a:	633a      	str	r2, [r7, #48]	; 0x30
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e3      	bne.n	8003116 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0310 	bic.w	r3, r3, #16
 8003176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	69b9      	ldr	r1, [r7, #24]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	617b      	str	r3, [r7, #20]
   return(result);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e4      	bne.n	8003162 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800319e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f85b 	bl	8003260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031aa:	e03f      	b.n	800322c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <HAL_UART_IRQHandler+0x56a>
 80031b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 ff94 	bl	80040fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031d4:	e02d      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00e      	beq.n	8003200 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01c      	beq.n	8003230 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
    }
    return;
 80031fe:	e017      	b.n	8003230 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x5c6>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fd9d 	bl	8003d58 <UART_EndTransmit_IT>
    return;
 800321e:	e008      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003220:	bf00      	nop
 8003222:	e006      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003224:	bf00      	nop
 8003226:	e004      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
      return;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003230:	bf00      	nop
  }

}
 8003232:	37e8      	adds	r7, #232	; 0xe8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80032a6:	f023 030c 	bic.w	r3, r3, #12
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6979      	ldr	r1, [r7, #20]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4aa7      	ldr	r2, [pc, #668]	; (8003590 <UART_SetConfig+0x318>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d120      	bne.n	800333a <UART_SetConfig+0xc2>
 80032f8:	4ba6      	ldr	r3, [pc, #664]	; (8003594 <UART_SetConfig+0x31c>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d817      	bhi.n	8003334 <UART_SetConfig+0xbc>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x94>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003329 	.word	0x08003329
 8003314:	0800332f 	.word	0x0800332f
 8003318:	08003323 	.word	0x08003323
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0b5      	b.n	800348e <UART_SetConfig+0x216>
 8003322:	2302      	movs	r3, #2
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e0b2      	b.n	800348e <UART_SetConfig+0x216>
 8003328:	2304      	movs	r3, #4
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0af      	b.n	800348e <UART_SetConfig+0x216>
 800332e:	2308      	movs	r3, #8
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e0ac      	b.n	800348e <UART_SetConfig+0x216>
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e0a9      	b.n	800348e <UART_SetConfig+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a96      	ldr	r2, [pc, #600]	; (8003598 <UART_SetConfig+0x320>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d124      	bne.n	800338e <UART_SetConfig+0x116>
 8003344:	4b93      	ldr	r3, [pc, #588]	; (8003594 <UART_SetConfig+0x31c>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800334c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003350:	d011      	beq.n	8003376 <UART_SetConfig+0xfe>
 8003352:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003356:	d817      	bhi.n	8003388 <UART_SetConfig+0x110>
 8003358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800335c:	d011      	beq.n	8003382 <UART_SetConfig+0x10a>
 800335e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003362:	d811      	bhi.n	8003388 <UART_SetConfig+0x110>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <UART_SetConfig+0xf8>
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d006      	beq.n	800337c <UART_SetConfig+0x104>
 800336e:	e00b      	b.n	8003388 <UART_SetConfig+0x110>
 8003370:	2300      	movs	r3, #0
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e08b      	b.n	800348e <UART_SetConfig+0x216>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e088      	b.n	800348e <UART_SetConfig+0x216>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e085      	b.n	800348e <UART_SetConfig+0x216>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e082      	b.n	800348e <UART_SetConfig+0x216>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e07f      	b.n	800348e <UART_SetConfig+0x216>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a82      	ldr	r2, [pc, #520]	; (800359c <UART_SetConfig+0x324>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d124      	bne.n	80033e2 <UART_SetConfig+0x16a>
 8003398:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <UART_SetConfig+0x31c>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033a4:	d011      	beq.n	80033ca <UART_SetConfig+0x152>
 80033a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0x164>
 80033ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b0:	d011      	beq.n	80033d6 <UART_SetConfig+0x15e>
 80033b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033b6:	d811      	bhi.n	80033dc <UART_SetConfig+0x164>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0x14c>
 80033bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033c0:	d006      	beq.n	80033d0 <UART_SetConfig+0x158>
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x164>
 80033c4:	2300      	movs	r3, #0
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e061      	b.n	800348e <UART_SetConfig+0x216>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e05e      	b.n	800348e <UART_SetConfig+0x216>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e05b      	b.n	800348e <UART_SetConfig+0x216>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e058      	b.n	800348e <UART_SetConfig+0x216>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e055      	b.n	800348e <UART_SetConfig+0x216>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <UART_SetConfig+0x328>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d124      	bne.n	8003436 <UART_SetConfig+0x1be>
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <UART_SetConfig+0x31c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x1a6>
 80033fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x1b8>
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003404:	d011      	beq.n	800342a <UART_SetConfig+0x1b2>
 8003406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x1b8>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x1a0>
 8003410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x1ac>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x1b8>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e037      	b.n	800348e <UART_SetConfig+0x216>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e034      	b.n	800348e <UART_SetConfig+0x216>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e031      	b.n	800348e <UART_SetConfig+0x216>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e02e      	b.n	800348e <UART_SetConfig+0x216>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e02b      	b.n	800348e <UART_SetConfig+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5a      	ldr	r2, [pc, #360]	; (80035a4 <UART_SetConfig+0x32c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <UART_SetConfig+0x212>
 8003440:	4b54      	ldr	r3, [pc, #336]	; (8003594 <UART_SetConfig+0x31c>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x1fa>
 800344e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x20c>
 8003454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003458:	d011      	beq.n	800347e <UART_SetConfig+0x206>
 800345a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x20c>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x1f4>
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x200>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x20c>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x216>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e00a      	b.n	800348e <UART_SetConfig+0x216>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e007      	b.n	800348e <UART_SetConfig+0x216>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e004      	b.n	800348e <UART_SetConfig+0x216>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e001      	b.n	800348e <UART_SetConfig+0x216>
 800348a:	2310      	movs	r3, #16
 800348c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003496:	d15b      	bne.n	8003550 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d827      	bhi.n	80034ee <UART_SetConfig+0x276>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <UART_SetConfig+0x22c>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034c9 	.word	0x080034c9
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034ef 	.word	0x080034ef
 80034b4:	080034df 	.word	0x080034df
 80034b8:	080034ef 	.word	0x080034ef
 80034bc:	080034ef 	.word	0x080034ef
 80034c0:	080034ef 	.word	0x080034ef
 80034c4:	080034e7 	.word	0x080034e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c8:	f7fe ffac 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 80034cc:	61b8      	str	r0, [r7, #24]
        break;
 80034ce:	e013      	b.n	80034f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7fe ffca 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 80034d4:	61b8      	str	r0, [r7, #24]
        break;
 80034d6:	e00f      	b.n	80034f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <UART_SetConfig+0x330>)
 80034da:	61bb      	str	r3, [r7, #24]
        break;
 80034dc:	e00c      	b.n	80034f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034de:	f7fe ff2b 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80034e2:	61b8      	str	r0, [r7, #24]
        break;
 80034e4:	e008      	b.n	80034f8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e004      	b.n	80034f8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	77bb      	strb	r3, [r7, #30]
        break;
 80034f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8082 	beq.w	8003604 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	005a      	lsls	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d916      	bls.n	800354a <UART_SetConfig+0x2d2>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d212      	bcs.n	800354a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f023 030f 	bic.w	r3, r3, #15
 800352c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	b29b      	uxth	r3, r3
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	b29a      	uxth	r2, r3
 800353a:	89fb      	ldrh	r3, [r7, #14]
 800353c:	4313      	orrs	r3, r2
 800353e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	89fa      	ldrh	r2, [r7, #14]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e05c      	b.n	8003604 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	77bb      	strb	r3, [r7, #30]
 800354e:	e059      	b.n	8003604 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d835      	bhi.n	80035c2 <UART_SetConfig+0x34a>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <UART_SetConfig+0x2e4>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	080035ad 	.word	0x080035ad
 8003568:	080035c3 	.word	0x080035c3
 800356c:	080035b3 	.word	0x080035b3
 8003570:	080035c3 	.word	0x080035c3
 8003574:	080035c3 	.word	0x080035c3
 8003578:	080035c3 	.word	0x080035c3
 800357c:	080035bb 	.word	0x080035bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7fe ff50 	bl	8002424 <HAL_RCC_GetPCLK1Freq>
 8003584:	61b8      	str	r0, [r7, #24]
        break;
 8003586:	e021      	b.n	80035cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7fe ff6e 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 800358c:	61b8      	str	r0, [r7, #24]
        break;
 800358e:	e01d      	b.n	80035cc <UART_SetConfig+0x354>
 8003590:	40013800 	.word	0x40013800
 8003594:	40021000 	.word	0x40021000
 8003598:	40004400 	.word	0x40004400
 800359c:	40004800 	.word	0x40004800
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40005000 	.word	0x40005000
 80035a8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <UART_SetConfig+0x3a4>)
 80035ae:	61bb      	str	r3, [r7, #24]
        break;
 80035b0:	e00c      	b.n	80035cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7fe fec1 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80035b6:	61b8      	str	r0, [r7, #24]
        break;
 80035b8:	e008      	b.n	80035cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035be:	61bb      	str	r3, [r7, #24]
        break;
 80035c0:	e004      	b.n	80035cc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	77bb      	strb	r3, [r7, #30]
        break;
 80035ca:	bf00      	nop
    }

    if (pclk != 0U)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d018      	beq.n	8003604 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085a      	lsrs	r2, r3, #1
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d909      	bls.n	8003600 <UART_SetConfig+0x388>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d205      	bcs.n	8003600 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	e001      	b.n	8003604 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003610:	7fbb      	ldrb	r3, [r7, #30]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	007a1200 	.word	0x007a1200

08003620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01a      	beq.n	8003736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d10a      	bne.n	8003736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  }
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b098      	sub	sp, #96	; 0x60
 8003768:	af02      	add	r7, sp, #8
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003774:	f7fd f8dc 	bl	8000930 <HAL_GetTick>
 8003778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d12e      	bne.n	80037e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	2200      	movs	r2, #0
 8003792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f88c 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d021      	beq.n	80037e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037b6:	653b      	str	r3, [r7, #80]	; 0x50
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	647b      	str	r3, [r7, #68]	; 0x44
 80037c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e6      	bne.n	80037a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e062      	b.n	80038ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d149      	bne.n	8003888 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fc:	2200      	movs	r2, #0
 80037fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f856 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03c      	beq.n	8003888 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	623b      	str	r3, [r7, #32]
   return(result);
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
 800382e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e6      	bne.n	800380e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3308      	adds	r3, #8
 8003846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003860:	61fa      	str	r2, [r7, #28]
 8003862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	617b      	str	r3, [r7, #20]
   return(result);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e5      	bne.n	8003840 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e011      	b.n	80038ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3758      	adds	r7, #88	; 0x58
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c4:	e049      	b.n	800395a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d045      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fd f82f 	bl	8000930 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e048      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d031      	beq.n	800395a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d110      	bne.n	8003926 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f8ed 	bl	8003aec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2208      	movs	r2, #8
 8003916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e029      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003934:	d111      	bne.n	800395a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800393e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8d3 	bl	8003aec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e00f      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69da      	ldr	r2, [r3, #28]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	bf0c      	ite	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	2300      	movne	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	429a      	cmp	r2, r3
 8003976:	d0a6      	beq.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003984:	b480      	push	{r7}
 8003986:	b097      	sub	sp, #92	; 0x5c
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b6:	d10e      	bne.n	80039d6 <UART_Start_Receive_IT+0x52>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <UART_Start_Receive_IT+0x48>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ca:	e01a      	b.n	8003a02 <UART_Start_Receive_IT+0x7e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d4:	e015      	b.n	8003a02 <UART_Start_Receive_IT+0x7e>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <UART_Start_Receive_IT+0x76>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <UART_Start_Receive_IT+0x6c>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ee:	e008      	b.n	8003a02 <UART_Start_Receive_IT+0x7e>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	227f      	movs	r2, #127	; 0x7f
 80039f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f8:	e003      	b.n	8003a02 <UART_Start_Receive_IT+0x7e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2222      	movs	r2, #34	; 0x22
 8003a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3308      	adds	r3, #8
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	657b      	str	r3, [r7, #84]	; 0x54
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d107      	bne.n	8003a60 <UART_Start_Receive_IT+0xdc>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <UART_Start_Receive_IT+0x160>)
 8003a5c:	669a      	str	r2, [r3, #104]	; 0x68
 8003a5e:	e002      	b.n	8003a66 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <UART_Start_Receive_IT+0x164>)
 8003a64:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d019      	beq.n	8003aa2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e6      	bne.n	8003a6e <UART_Start_Receive_IT+0xea>
 8003aa0:	e018      	b.n	8003ad4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	69f9      	ldr	r1, [r7, #28]
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	375c      	adds	r7, #92	; 0x5c
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	08003f55 	.word	0x08003f55
 8003ae8:	08003dad 	.word	0x08003dad

08003aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b095      	sub	sp, #84	; 0x54
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
 8003b14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e6      	bne.n	8003af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d118      	bne.n	8003b94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	647b      	str	r3, [r7, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ba8:	bf00      	nop
 8003baa:	3754      	adds	r7, #84	; 0x54
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f7ff fb3a 	bl	800324c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b08f      	sub	sp, #60	; 0x3c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bec:	2b21      	cmp	r3, #33	; 0x21
 8003bee:	d14d      	bne.n	8003c8c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d132      	bne.n	8003c62 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e6      	bne.n	8003bfc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e6      	bne.n	8003c2e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c60:	e014      	b.n	8003c8c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	b292      	uxth	r2, r2
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c8c:	bf00      	nop
 8003c8e:	373c      	adds	r7, #60	; 0x3c
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b091      	sub	sp, #68	; 0x44
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ca4:	2b21      	cmp	r3, #33	; 0x21
 8003ca6:	d151      	bne.n	8003d4c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d132      	bne.n	8003d1a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e6      	bne.n	8003cb4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	69b9      	ldr	r1, [r7, #24]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	617b      	str	r3, [r7, #20]
   return(result);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003d18:	e018      	b.n	8003d4c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d4c:	bf00      	nop
 8003d4e:	3744      	adds	r7, #68	; 0x44
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fa4a 	bl	8003238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da4:	bf00      	nop
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b09c      	sub	sp, #112	; 0x70
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc4:	2b22      	cmp	r3, #34	; 0x22
 8003dc6:	f040 80b9 	bne.w	8003f3c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dd8:	b2d9      	uxtb	r1, r3
 8003dda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	400a      	ands	r2, r1
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 809c 	bne.w	8003f4c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e32:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e6      	bne.n	8003e14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3308      	adds	r3, #8
 8003e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e66:	647a      	str	r2, [r7, #68]	; 0x44
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d018      	beq.n	8003ece <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eba:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e6      	bne.n	8003e9c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d12e      	bne.n	8003f34 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0310 	bic.w	r3, r3, #16
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	69b9      	ldr	r1, [r7, #24]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	617b      	str	r3, [r7, #20]
   return(result);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d103      	bne.n	8003f24 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2210      	movs	r2, #16
 8003f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff f997 	bl	8003260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f32:	e00b      	b.n	8003f4c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fc faf7 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8003f3a:	e007      	b.n	8003f4c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0208 	orr.w	r2, r2, #8
 8003f4a:	619a      	str	r2, [r3, #24]
}
 8003f4c:	bf00      	nop
 8003f4e:	3770      	adds	r7, #112	; 0x70
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b09c      	sub	sp, #112	; 0x70
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6c:	2b22      	cmp	r3, #34	; 0x22
 8003f6e:	f040 80b9 	bne.w	80040e4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f82:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003f86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 809c 	bne.w	80040f4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fda:	657b      	str	r3, [r7, #84]	; 0x54
 8003fdc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800400e:	643a      	str	r2, [r7, #64]	; 0x40
 8004010:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d018      	beq.n	8004076 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	61fb      	str	r3, [r7, #28]
   return(result);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004058:	65fb      	str	r3, [r7, #92]	; 0x5c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004064:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e6      	bne.n	8004044 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	2b01      	cmp	r3, #1
 800407c:	d12e      	bne.n	80040dc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	60bb      	str	r3, [r7, #8]
   return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	65bb      	str	r3, [r7, #88]	; 0x58
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6979      	ldr	r1, [r7, #20]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	613b      	str	r3, [r7, #16]
   return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e6      	bne.n	8004084 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d103      	bne.n	80040cc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2210      	movs	r2, #16
 80040ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff f8c3 	bl	8003260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040da:	e00b      	b.n	80040f4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc fa23 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 80040e2:	e007      	b.n	80040f4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	3770      	adds	r7, #112	; 0x70
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <siprintf>:
 8004110:	b40e      	push	{r1, r2, r3}
 8004112:	b500      	push	{lr}
 8004114:	b09c      	sub	sp, #112	; 0x70
 8004116:	ab1d      	add	r3, sp, #116	; 0x74
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	9006      	str	r0, [sp, #24]
 800411c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004120:	4809      	ldr	r0, [pc, #36]	; (8004148 <siprintf+0x38>)
 8004122:	9107      	str	r1, [sp, #28]
 8004124:	9104      	str	r1, [sp, #16]
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <siprintf+0x3c>)
 8004128:	f853 2b04 	ldr.w	r2, [r3], #4
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	6800      	ldr	r0, [r0, #0]
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	a902      	add	r1, sp, #8
 8004134:	f000 f9d6 	bl	80044e4 <_svfiprintf_r>
 8004138:	9b02      	ldr	r3, [sp, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	b01c      	add	sp, #112	; 0x70
 8004140:	f85d eb04 	ldr.w	lr, [sp], #4
 8004144:	b003      	add	sp, #12
 8004146:	4770      	bx	lr
 8004148:	20000058 	.word	0x20000058
 800414c:	ffff0208 	.word	0xffff0208

08004150 <siscanf>:
 8004150:	b40e      	push	{r1, r2, r3}
 8004152:	b510      	push	{r4, lr}
 8004154:	b09f      	sub	sp, #124	; 0x7c
 8004156:	ac21      	add	r4, sp, #132	; 0x84
 8004158:	f44f 7101 	mov.w	r1, #516	; 0x204
 800415c:	f854 2b04 	ldr.w	r2, [r4], #4
 8004160:	9201      	str	r2, [sp, #4]
 8004162:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004166:	9004      	str	r0, [sp, #16]
 8004168:	9008      	str	r0, [sp, #32]
 800416a:	f7fc f831 	bl	80001d0 <strlen>
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <siscanf+0x50>)
 8004170:	9005      	str	r0, [sp, #20]
 8004172:	9009      	str	r0, [sp, #36]	; 0x24
 8004174:	930d      	str	r3, [sp, #52]	; 0x34
 8004176:	480b      	ldr	r0, [pc, #44]	; (80041a4 <siscanf+0x54>)
 8004178:	9a01      	ldr	r2, [sp, #4]
 800417a:	6800      	ldr	r0, [r0, #0]
 800417c:	9403      	str	r4, [sp, #12]
 800417e:	2300      	movs	r3, #0
 8004180:	9311      	str	r3, [sp, #68]	; 0x44
 8004182:	9316      	str	r3, [sp, #88]	; 0x58
 8004184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004188:	f8ad 301e 	strh.w	r3, [sp, #30]
 800418c:	a904      	add	r1, sp, #16
 800418e:	4623      	mov	r3, r4
 8004190:	f000 fb00 	bl	8004794 <__ssvfiscanf_r>
 8004194:	b01f      	add	sp, #124	; 0x7c
 8004196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800419a:	b003      	add	sp, #12
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	20000058 	.word	0x20000058

080041a8 <__seofread>:
 80041a8:	2000      	movs	r0, #0
 80041aa:	4770      	bx	lr

080041ac <memset>:
 80041ac:	4402      	add	r2, r0
 80041ae:	4603      	mov	r3, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <strstr>:
 80041bc:	780a      	ldrb	r2, [r1, #0]
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	b96a      	cbnz	r2, 80041de <strstr+0x22>
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d109      	bne.n	80041dc <strstr+0x20>
 80041c8:	460c      	mov	r4, r1
 80041ca:	4605      	mov	r5, r0
 80041cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f6      	beq.n	80041c2 <strstr+0x6>
 80041d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80041d8:	429e      	cmp	r6, r3
 80041da:	d0f7      	beq.n	80041cc <strstr+0x10>
 80041dc:	3001      	adds	r0, #1
 80041de:	7803      	ldrb	r3, [r0, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ef      	bne.n	80041c4 <strstr+0x8>
 80041e4:	4618      	mov	r0, r3
 80041e6:	e7ec      	b.n	80041c2 <strstr+0x6>

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000058 	.word	0x20000058

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f001 f8f6 	bl	80053f8 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08005618 	.word	0x08005618
 8004230:	08005618 	.word	0x08005618
 8004234:	08005618 	.word	0x08005618
 8004238:	0800561c 	.word	0x0800561c

0800423c <__retarget_lock_acquire_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_release_recursive>:
 800423e:	4770      	bx	lr

08004240 <_free_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	2900      	cmp	r1, #0
 8004244:	d044      	beq.n	80042d0 <_free_r+0x90>
 8004246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424a:	9001      	str	r0, [sp, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f1a1 0404 	sub.w	r4, r1, #4
 8004252:	bfb8      	it	lt
 8004254:	18e4      	addlt	r4, r4, r3
 8004256:	f000 f8df 	bl	8004418 <__malloc_lock>
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <_free_r+0x94>)
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x30>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	b003      	add	sp, #12
 8004268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426c:	f000 b8da 	b.w	8004424 <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x46>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1949      	addeq	r1, r1, r5
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x22>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x50>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x46>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1855      	adds	r5, r2, r1
 8004294:	42a5      	cmp	r5, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x70>
 8004298:	6824      	ldr	r4, [r4, #0]
 800429a:	4421      	add	r1, r4
 800429c:	1854      	adds	r4, r2, r1
 800429e:	42a3      	cmp	r3, r4
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x26>
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	440c      	add	r4, r1
 80042ac:	6014      	str	r4, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x26>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x78>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x26>
 80042b8:	6825      	ldr	r5, [r4, #0]
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1949      	addeq	r1, r1, r5
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x26>
 80042d0:	b003      	add	sp, #12
 80042d2:	bd30      	pop	{r4, r5, pc}
 80042d4:	20000304 	.word	0x20000304

080042d8 <sbrk_aligned>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4e0e      	ldr	r6, [pc, #56]	; (8004314 <sbrk_aligned+0x3c>)
 80042dc:	460c      	mov	r4, r1
 80042de:	6831      	ldr	r1, [r6, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	b911      	cbnz	r1, 80042ea <sbrk_aligned+0x12>
 80042e4:	f000 ff3a 	bl	800515c <_sbrk_r>
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 ff35 	bl	800515c <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d00a      	beq.n	800430c <sbrk_aligned+0x34>
 80042f6:	1cc4      	adds	r4, r0, #3
 80042f8:	f024 0403 	bic.w	r4, r4, #3
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	d007      	beq.n	8004310 <sbrk_aligned+0x38>
 8004300:	1a21      	subs	r1, r4, r0
 8004302:	4628      	mov	r0, r5
 8004304:	f000 ff2a 	bl	800515c <_sbrk_r>
 8004308:	3001      	adds	r0, #1
 800430a:	d101      	bne.n	8004310 <sbrk_aligned+0x38>
 800430c:	f04f 34ff 	mov.w	r4, #4294967295
 8004310:	4620      	mov	r0, r4
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	20000308 	.word	0x20000308

08004318 <_malloc_r>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	1ccd      	adds	r5, r1, #3
 800431e:	f025 0503 	bic.w	r5, r5, #3
 8004322:	3508      	adds	r5, #8
 8004324:	2d0c      	cmp	r5, #12
 8004326:	bf38      	it	cc
 8004328:	250c      	movcc	r5, #12
 800432a:	2d00      	cmp	r5, #0
 800432c:	4607      	mov	r7, r0
 800432e:	db01      	blt.n	8004334 <_malloc_r+0x1c>
 8004330:	42a9      	cmp	r1, r5
 8004332:	d905      	bls.n	8004340 <_malloc_r+0x28>
 8004334:	230c      	movs	r3, #12
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	2600      	movs	r6, #0
 800433a:	4630      	mov	r0, r6
 800433c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004340:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004414 <_malloc_r+0xfc>
 8004344:	f000 f868 	bl	8004418 <__malloc_lock>
 8004348:	f8d8 3000 	ldr.w	r3, [r8]
 800434c:	461c      	mov	r4, r3
 800434e:	bb5c      	cbnz	r4, 80043a8 <_malloc_r+0x90>
 8004350:	4629      	mov	r1, r5
 8004352:	4638      	mov	r0, r7
 8004354:	f7ff ffc0 	bl	80042d8 <sbrk_aligned>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	4604      	mov	r4, r0
 800435c:	d155      	bne.n	800440a <_malloc_r+0xf2>
 800435e:	f8d8 4000 	ldr.w	r4, [r8]
 8004362:	4626      	mov	r6, r4
 8004364:	2e00      	cmp	r6, #0
 8004366:	d145      	bne.n	80043f4 <_malloc_r+0xdc>
 8004368:	2c00      	cmp	r4, #0
 800436a:	d048      	beq.n	80043fe <_malloc_r+0xe6>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	4631      	mov	r1, r6
 8004370:	4638      	mov	r0, r7
 8004372:	eb04 0903 	add.w	r9, r4, r3
 8004376:	f000 fef1 	bl	800515c <_sbrk_r>
 800437a:	4581      	cmp	r9, r0
 800437c:	d13f      	bne.n	80043fe <_malloc_r+0xe6>
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	1a6d      	subs	r5, r5, r1
 8004382:	4629      	mov	r1, r5
 8004384:	4638      	mov	r0, r7
 8004386:	f7ff ffa7 	bl	80042d8 <sbrk_aligned>
 800438a:	3001      	adds	r0, #1
 800438c:	d037      	beq.n	80043fe <_malloc_r+0xe6>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	442b      	add	r3, r5
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	f8d8 3000 	ldr.w	r3, [r8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d038      	beq.n	800440e <_malloc_r+0xf6>
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	42a2      	cmp	r2, r4
 80043a0:	d12b      	bne.n	80043fa <_malloc_r+0xe2>
 80043a2:	2200      	movs	r2, #0
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e00f      	b.n	80043c8 <_malloc_r+0xb0>
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	1b52      	subs	r2, r2, r5
 80043ac:	d41f      	bmi.n	80043ee <_malloc_r+0xd6>
 80043ae:	2a0b      	cmp	r2, #11
 80043b0:	d917      	bls.n	80043e2 <_malloc_r+0xca>
 80043b2:	1961      	adds	r1, r4, r5
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	6059      	strne	r1, [r3, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	bf08      	it	eq
 80043c0:	f8c8 1000 	streq.w	r1, [r8]
 80043c4:	5162      	str	r2, [r4, r5]
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	4638      	mov	r0, r7
 80043ca:	f104 060b 	add.w	r6, r4, #11
 80043ce:	f000 f829 	bl	8004424 <__malloc_unlock>
 80043d2:	f026 0607 	bic.w	r6, r6, #7
 80043d6:	1d23      	adds	r3, r4, #4
 80043d8:	1af2      	subs	r2, r6, r3
 80043da:	d0ae      	beq.n	800433a <_malloc_r+0x22>
 80043dc:	1b9b      	subs	r3, r3, r6
 80043de:	50a3      	str	r3, [r4, r2]
 80043e0:	e7ab      	b.n	800433a <_malloc_r+0x22>
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	6862      	ldr	r2, [r4, #4]
 80043e6:	d1dd      	bne.n	80043a4 <_malloc_r+0x8c>
 80043e8:	f8c8 2000 	str.w	r2, [r8]
 80043ec:	e7ec      	b.n	80043c8 <_malloc_r+0xb0>
 80043ee:	4623      	mov	r3, r4
 80043f0:	6864      	ldr	r4, [r4, #4]
 80043f2:	e7ac      	b.n	800434e <_malloc_r+0x36>
 80043f4:	4634      	mov	r4, r6
 80043f6:	6876      	ldr	r6, [r6, #4]
 80043f8:	e7b4      	b.n	8004364 <_malloc_r+0x4c>
 80043fa:	4613      	mov	r3, r2
 80043fc:	e7cc      	b.n	8004398 <_malloc_r+0x80>
 80043fe:	230c      	movs	r3, #12
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4638      	mov	r0, r7
 8004404:	f000 f80e 	bl	8004424 <__malloc_unlock>
 8004408:	e797      	b.n	800433a <_malloc_r+0x22>
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	e7dc      	b.n	80043c8 <_malloc_r+0xb0>
 800440e:	605b      	str	r3, [r3, #4]
 8004410:	deff      	udf	#255	; 0xff
 8004412:	bf00      	nop
 8004414:	20000304 	.word	0x20000304

08004418 <__malloc_lock>:
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <__malloc_lock+0x8>)
 800441a:	f7ff bf0f 	b.w	800423c <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	20000300 	.word	0x20000300

08004424 <__malloc_unlock>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__malloc_unlock+0x8>)
 8004426:	f7ff bf0a 	b.w	800423e <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	20000300 	.word	0x20000300

08004430 <__ssputs_r>:
 8004430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004434:	688e      	ldr	r6, [r1, #8]
 8004436:	461f      	mov	r7, r3
 8004438:	42be      	cmp	r6, r7
 800443a:	680b      	ldr	r3, [r1, #0]
 800443c:	4682      	mov	sl, r0
 800443e:	460c      	mov	r4, r1
 8004440:	4690      	mov	r8, r2
 8004442:	d82c      	bhi.n	800449e <__ssputs_r+0x6e>
 8004444:	898a      	ldrh	r2, [r1, #12]
 8004446:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800444a:	d026      	beq.n	800449a <__ssputs_r+0x6a>
 800444c:	6965      	ldr	r5, [r4, #20]
 800444e:	6909      	ldr	r1, [r1, #16]
 8004450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004454:	eba3 0901 	sub.w	r9, r3, r1
 8004458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800445c:	1c7b      	adds	r3, r7, #1
 800445e:	444b      	add	r3, r9
 8004460:	106d      	asrs	r5, r5, #1
 8004462:	429d      	cmp	r5, r3
 8004464:	bf38      	it	cc
 8004466:	461d      	movcc	r5, r3
 8004468:	0553      	lsls	r3, r2, #21
 800446a:	d527      	bpl.n	80044bc <__ssputs_r+0x8c>
 800446c:	4629      	mov	r1, r5
 800446e:	f7ff ff53 	bl	8004318 <_malloc_r>
 8004472:	4606      	mov	r6, r0
 8004474:	b360      	cbz	r0, 80044d0 <__ssputs_r+0xa0>
 8004476:	6921      	ldr	r1, [r4, #16]
 8004478:	464a      	mov	r2, r9
 800447a:	f000 fe7f 	bl	800517c <memcpy>
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	6126      	str	r6, [r4, #16]
 800448c:	6165      	str	r5, [r4, #20]
 800448e:	444e      	add	r6, r9
 8004490:	eba5 0509 	sub.w	r5, r5, r9
 8004494:	6026      	str	r6, [r4, #0]
 8004496:	60a5      	str	r5, [r4, #8]
 8004498:	463e      	mov	r6, r7
 800449a:	42be      	cmp	r6, r7
 800449c:	d900      	bls.n	80044a0 <__ssputs_r+0x70>
 800449e:	463e      	mov	r6, r7
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	4632      	mov	r2, r6
 80044a4:	4641      	mov	r1, r8
 80044a6:	f000 fe3e 	bl	8005126 <memmove>
 80044aa:	68a3      	ldr	r3, [r4, #8]
 80044ac:	1b9b      	subs	r3, r3, r6
 80044ae:	60a3      	str	r3, [r4, #8]
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	4433      	add	r3, r6
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2000      	movs	r0, #0
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	462a      	mov	r2, r5
 80044be:	f000 fe6b 	bl	8005198 <_realloc_r>
 80044c2:	4606      	mov	r6, r0
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d1e0      	bne.n	800448a <__ssputs_r+0x5a>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	4650      	mov	r0, sl
 80044cc:	f7ff feb8 	bl	8004240 <_free_r>
 80044d0:	230c      	movs	r3, #12
 80044d2:	f8ca 3000 	str.w	r3, [sl]
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	f04f 30ff 	mov.w	r0, #4294967295
 80044e2:	e7e9      	b.n	80044b8 <__ssputs_r+0x88>

080044e4 <_svfiprintf_r>:
 80044e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e8:	4698      	mov	r8, r3
 80044ea:	898b      	ldrh	r3, [r1, #12]
 80044ec:	061b      	lsls	r3, r3, #24
 80044ee:	b09d      	sub	sp, #116	; 0x74
 80044f0:	4607      	mov	r7, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	d50e      	bpl.n	8004516 <_svfiprintf_r+0x32>
 80044f8:	690b      	ldr	r3, [r1, #16]
 80044fa:	b963      	cbnz	r3, 8004516 <_svfiprintf_r+0x32>
 80044fc:	2140      	movs	r1, #64	; 0x40
 80044fe:	f7ff ff0b 	bl	8004318 <_malloc_r>
 8004502:	6028      	str	r0, [r5, #0]
 8004504:	6128      	str	r0, [r5, #16]
 8004506:	b920      	cbnz	r0, 8004512 <_svfiprintf_r+0x2e>
 8004508:	230c      	movs	r3, #12
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	f04f 30ff 	mov.w	r0, #4294967295
 8004510:	e0d0      	b.n	80046b4 <_svfiprintf_r+0x1d0>
 8004512:	2340      	movs	r3, #64	; 0x40
 8004514:	616b      	str	r3, [r5, #20]
 8004516:	2300      	movs	r3, #0
 8004518:	9309      	str	r3, [sp, #36]	; 0x24
 800451a:	2320      	movs	r3, #32
 800451c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004520:	f8cd 800c 	str.w	r8, [sp, #12]
 8004524:	2330      	movs	r3, #48	; 0x30
 8004526:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046cc <_svfiprintf_r+0x1e8>
 800452a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800452e:	f04f 0901 	mov.w	r9, #1
 8004532:	4623      	mov	r3, r4
 8004534:	469a      	mov	sl, r3
 8004536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800453a:	b10a      	cbz	r2, 8004540 <_svfiprintf_r+0x5c>
 800453c:	2a25      	cmp	r2, #37	; 0x25
 800453e:	d1f9      	bne.n	8004534 <_svfiprintf_r+0x50>
 8004540:	ebba 0b04 	subs.w	fp, sl, r4
 8004544:	d00b      	beq.n	800455e <_svfiprintf_r+0x7a>
 8004546:	465b      	mov	r3, fp
 8004548:	4622      	mov	r2, r4
 800454a:	4629      	mov	r1, r5
 800454c:	4638      	mov	r0, r7
 800454e:	f7ff ff6f 	bl	8004430 <__ssputs_r>
 8004552:	3001      	adds	r0, #1
 8004554:	f000 80a9 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 8004558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455a:	445a      	add	r2, fp
 800455c:	9209      	str	r2, [sp, #36]	; 0x24
 800455e:	f89a 3000 	ldrb.w	r3, [sl]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80a1 	beq.w	80046aa <_svfiprintf_r+0x1c6>
 8004568:	2300      	movs	r3, #0
 800456a:	f04f 32ff 	mov.w	r2, #4294967295
 800456e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004572:	f10a 0a01 	add.w	sl, sl, #1
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	9307      	str	r3, [sp, #28]
 800457a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800457e:	931a      	str	r3, [sp, #104]	; 0x68
 8004580:	4654      	mov	r4, sl
 8004582:	2205      	movs	r2, #5
 8004584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004588:	4850      	ldr	r0, [pc, #320]	; (80046cc <_svfiprintf_r+0x1e8>)
 800458a:	f7fb fe29 	bl	80001e0 <memchr>
 800458e:	9a04      	ldr	r2, [sp, #16]
 8004590:	b9d8      	cbnz	r0, 80045ca <_svfiprintf_r+0xe6>
 8004592:	06d0      	lsls	r0, r2, #27
 8004594:	bf44      	itt	mi
 8004596:	2320      	movmi	r3, #32
 8004598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800459c:	0711      	lsls	r1, r2, #28
 800459e:	bf44      	itt	mi
 80045a0:	232b      	movmi	r3, #43	; 0x2b
 80045a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045a6:	f89a 3000 	ldrb.w	r3, [sl]
 80045aa:	2b2a      	cmp	r3, #42	; 0x2a
 80045ac:	d015      	beq.n	80045da <_svfiprintf_r+0xf6>
 80045ae:	9a07      	ldr	r2, [sp, #28]
 80045b0:	4654      	mov	r4, sl
 80045b2:	2000      	movs	r0, #0
 80045b4:	f04f 0c0a 	mov.w	ip, #10
 80045b8:	4621      	mov	r1, r4
 80045ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045be:	3b30      	subs	r3, #48	; 0x30
 80045c0:	2b09      	cmp	r3, #9
 80045c2:	d94d      	bls.n	8004660 <_svfiprintf_r+0x17c>
 80045c4:	b1b0      	cbz	r0, 80045f4 <_svfiprintf_r+0x110>
 80045c6:	9207      	str	r2, [sp, #28]
 80045c8:	e014      	b.n	80045f4 <_svfiprintf_r+0x110>
 80045ca:	eba0 0308 	sub.w	r3, r0, r8
 80045ce:	fa09 f303 	lsl.w	r3, r9, r3
 80045d2:	4313      	orrs	r3, r2
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	46a2      	mov	sl, r4
 80045d8:	e7d2      	b.n	8004580 <_svfiprintf_r+0x9c>
 80045da:	9b03      	ldr	r3, [sp, #12]
 80045dc:	1d19      	adds	r1, r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	9103      	str	r1, [sp, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bfbb      	ittet	lt
 80045e6:	425b      	neglt	r3, r3
 80045e8:	f042 0202 	orrlt.w	r2, r2, #2
 80045ec:	9307      	strge	r3, [sp, #28]
 80045ee:	9307      	strlt	r3, [sp, #28]
 80045f0:	bfb8      	it	lt
 80045f2:	9204      	strlt	r2, [sp, #16]
 80045f4:	7823      	ldrb	r3, [r4, #0]
 80045f6:	2b2e      	cmp	r3, #46	; 0x2e
 80045f8:	d10c      	bne.n	8004614 <_svfiprintf_r+0x130>
 80045fa:	7863      	ldrb	r3, [r4, #1]
 80045fc:	2b2a      	cmp	r3, #42	; 0x2a
 80045fe:	d134      	bne.n	800466a <_svfiprintf_r+0x186>
 8004600:	9b03      	ldr	r3, [sp, #12]
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	9203      	str	r2, [sp, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	bfb8      	it	lt
 800460c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004610:	3402      	adds	r4, #2
 8004612:	9305      	str	r3, [sp, #20]
 8004614:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046dc <_svfiprintf_r+0x1f8>
 8004618:	7821      	ldrb	r1, [r4, #0]
 800461a:	2203      	movs	r2, #3
 800461c:	4650      	mov	r0, sl
 800461e:	f7fb fddf 	bl	80001e0 <memchr>
 8004622:	b138      	cbz	r0, 8004634 <_svfiprintf_r+0x150>
 8004624:	9b04      	ldr	r3, [sp, #16]
 8004626:	eba0 000a 	sub.w	r0, r0, sl
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	4082      	lsls	r2, r0
 800462e:	4313      	orrs	r3, r2
 8004630:	3401      	adds	r4, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	4825      	ldr	r0, [pc, #148]	; (80046d0 <_svfiprintf_r+0x1ec>)
 800463a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800463e:	2206      	movs	r2, #6
 8004640:	f7fb fdce 	bl	80001e0 <memchr>
 8004644:	2800      	cmp	r0, #0
 8004646:	d038      	beq.n	80046ba <_svfiprintf_r+0x1d6>
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <_svfiprintf_r+0x1f0>)
 800464a:	bb1b      	cbnz	r3, 8004694 <_svfiprintf_r+0x1b0>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	3307      	adds	r3, #7
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	3308      	adds	r3, #8
 8004656:	9303      	str	r3, [sp, #12]
 8004658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800465a:	4433      	add	r3, r6
 800465c:	9309      	str	r3, [sp, #36]	; 0x24
 800465e:	e768      	b.n	8004532 <_svfiprintf_r+0x4e>
 8004660:	fb0c 3202 	mla	r2, ip, r2, r3
 8004664:	460c      	mov	r4, r1
 8004666:	2001      	movs	r0, #1
 8004668:	e7a6      	b.n	80045b8 <_svfiprintf_r+0xd4>
 800466a:	2300      	movs	r3, #0
 800466c:	3401      	adds	r4, #1
 800466e:	9305      	str	r3, [sp, #20]
 8004670:	4619      	mov	r1, r3
 8004672:	f04f 0c0a 	mov.w	ip, #10
 8004676:	4620      	mov	r0, r4
 8004678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800467c:	3a30      	subs	r2, #48	; 0x30
 800467e:	2a09      	cmp	r2, #9
 8004680:	d903      	bls.n	800468a <_svfiprintf_r+0x1a6>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0c6      	beq.n	8004614 <_svfiprintf_r+0x130>
 8004686:	9105      	str	r1, [sp, #20]
 8004688:	e7c4      	b.n	8004614 <_svfiprintf_r+0x130>
 800468a:	fb0c 2101 	mla	r1, ip, r1, r2
 800468e:	4604      	mov	r4, r0
 8004690:	2301      	movs	r3, #1
 8004692:	e7f0      	b.n	8004676 <_svfiprintf_r+0x192>
 8004694:	ab03      	add	r3, sp, #12
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	462a      	mov	r2, r5
 800469a:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <_svfiprintf_r+0x1f4>)
 800469c:	a904      	add	r1, sp, #16
 800469e:	4638      	mov	r0, r7
 80046a0:	f3af 8000 	nop.w
 80046a4:	1c42      	adds	r2, r0, #1
 80046a6:	4606      	mov	r6, r0
 80046a8:	d1d6      	bne.n	8004658 <_svfiprintf_r+0x174>
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	065b      	lsls	r3, r3, #25
 80046ae:	f53f af2d 	bmi.w	800450c <_svfiprintf_r+0x28>
 80046b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046b4:	b01d      	add	sp, #116	; 0x74
 80046b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ba:	ab03      	add	r3, sp, #12
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	462a      	mov	r2, r5
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <_svfiprintf_r+0x1f4>)
 80046c2:	a904      	add	r1, sp, #16
 80046c4:	4638      	mov	r0, r7
 80046c6:	f000 fa4b 	bl	8004b60 <_printf_i>
 80046ca:	e7eb      	b.n	80046a4 <_svfiprintf_r+0x1c0>
 80046cc:	080054c8 	.word	0x080054c8
 80046d0:	080054d2 	.word	0x080054d2
 80046d4:	00000000 	.word	0x00000000
 80046d8:	08004431 	.word	0x08004431
 80046dc:	080054ce 	.word	0x080054ce

080046e0 <_sungetc_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	1c4b      	adds	r3, r1, #1
 80046e4:	4614      	mov	r4, r2
 80046e6:	d103      	bne.n	80046f0 <_sungetc_r+0x10>
 80046e8:	f04f 35ff 	mov.w	r5, #4294967295
 80046ec:	4628      	mov	r0, r5
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	8993      	ldrh	r3, [r2, #12]
 80046f2:	f023 0320 	bic.w	r3, r3, #32
 80046f6:	8193      	strh	r3, [r2, #12]
 80046f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	b2cd      	uxtb	r5, r1
 80046fe:	b18b      	cbz	r3, 8004724 <_sungetc_r+0x44>
 8004700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004702:	4293      	cmp	r3, r2
 8004704:	dd08      	ble.n	8004718 <_sungetc_r+0x38>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	6022      	str	r2, [r4, #0]
 800470c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	3301      	adds	r3, #1
 8004714:	6063      	str	r3, [r4, #4]
 8004716:	e7e9      	b.n	80046ec <_sungetc_r+0xc>
 8004718:	4621      	mov	r1, r4
 800471a:	f000 fcca 	bl	80050b2 <__submore>
 800471e:	2800      	cmp	r0, #0
 8004720:	d0f1      	beq.n	8004706 <_sungetc_r+0x26>
 8004722:	e7e1      	b.n	80046e8 <_sungetc_r+0x8>
 8004724:	6921      	ldr	r1, [r4, #16]
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	b151      	cbz	r1, 8004740 <_sungetc_r+0x60>
 800472a:	4299      	cmp	r1, r3
 800472c:	d208      	bcs.n	8004740 <_sungetc_r+0x60>
 800472e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004732:	42a9      	cmp	r1, r5
 8004734:	d104      	bne.n	8004740 <_sungetc_r+0x60>
 8004736:	3b01      	subs	r3, #1
 8004738:	3201      	adds	r2, #1
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	6062      	str	r2, [r4, #4]
 800473e:	e7d5      	b.n	80046ec <_sungetc_r+0xc>
 8004740:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004748:	6363      	str	r3, [r4, #52]	; 0x34
 800474a:	2303      	movs	r3, #3
 800474c:	63a3      	str	r3, [r4, #56]	; 0x38
 800474e:	4623      	mov	r3, r4
 8004750:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	2301      	movs	r3, #1
 8004758:	e7dc      	b.n	8004714 <_sungetc_r+0x34>

0800475a <__ssrefill_r>:
 800475a:	b510      	push	{r4, lr}
 800475c:	460c      	mov	r4, r1
 800475e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004760:	b169      	cbz	r1, 800477e <__ssrefill_r+0x24>
 8004762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004766:	4299      	cmp	r1, r3
 8004768:	d001      	beq.n	800476e <__ssrefill_r+0x14>
 800476a:	f7ff fd69 	bl	8004240 <_free_r>
 800476e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	2000      	movs	r0, #0
 8004774:	6360      	str	r0, [r4, #52]	; 0x34
 8004776:	b113      	cbz	r3, 800477e <__ssrefill_r+0x24>
 8004778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	bd10      	pop	{r4, pc}
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	f043 0320 	orr.w	r3, r3, #32
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	f04f 30ff 	mov.w	r0, #4294967295
 8004792:	e7f3      	b.n	800477c <__ssrefill_r+0x22>

08004794 <__ssvfiscanf_r>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800479e:	2100      	movs	r1, #0
 80047a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80047a4:	49a6      	ldr	r1, [pc, #664]	; (8004a40 <__ssvfiscanf_r+0x2ac>)
 80047a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80047a8:	f10d 0804 	add.w	r8, sp, #4
 80047ac:	49a5      	ldr	r1, [pc, #660]	; (8004a44 <__ssvfiscanf_r+0x2b0>)
 80047ae:	4fa6      	ldr	r7, [pc, #664]	; (8004a48 <__ssvfiscanf_r+0x2b4>)
 80047b0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004a4c <__ssvfiscanf_r+0x2b8>
 80047b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80047b8:	4606      	mov	r6, r0
 80047ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	7813      	ldrb	r3, [r2, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 815a 	beq.w	8004a7a <__ssvfiscanf_r+0x2e6>
 80047c6:	5cf9      	ldrb	r1, [r7, r3]
 80047c8:	f011 0108 	ands.w	r1, r1, #8
 80047cc:	f102 0501 	add.w	r5, r2, #1
 80047d0:	d019      	beq.n	8004806 <__ssvfiscanf_r+0x72>
 80047d2:	6863      	ldr	r3, [r4, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dd0f      	ble.n	80047f8 <__ssvfiscanf_r+0x64>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	5cba      	ldrb	r2, [r7, r2]
 80047de:	0712      	lsls	r2, r2, #28
 80047e0:	d401      	bmi.n	80047e6 <__ssvfiscanf_r+0x52>
 80047e2:	462a      	mov	r2, r5
 80047e4:	e7eb      	b.n	80047be <__ssvfiscanf_r+0x2a>
 80047e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047e8:	3201      	adds	r2, #1
 80047ea:	9245      	str	r2, [sp, #276]	; 0x114
 80047ec:	6862      	ldr	r2, [r4, #4]
 80047ee:	3301      	adds	r3, #1
 80047f0:	3a01      	subs	r2, #1
 80047f2:	6062      	str	r2, [r4, #4]
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	e7ec      	b.n	80047d2 <__ssvfiscanf_r+0x3e>
 80047f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047fa:	4621      	mov	r1, r4
 80047fc:	4630      	mov	r0, r6
 80047fe:	4798      	blx	r3
 8004800:	2800      	cmp	r0, #0
 8004802:	d0e9      	beq.n	80047d8 <__ssvfiscanf_r+0x44>
 8004804:	e7ed      	b.n	80047e2 <__ssvfiscanf_r+0x4e>
 8004806:	2b25      	cmp	r3, #37	; 0x25
 8004808:	d012      	beq.n	8004830 <__ssvfiscanf_r+0x9c>
 800480a:	469a      	mov	sl, r3
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f340 8091 	ble.w	8004936 <__ssvfiscanf_r+0x1a2>
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	7813      	ldrb	r3, [r2, #0]
 8004818:	4553      	cmp	r3, sl
 800481a:	f040 812e 	bne.w	8004a7a <__ssvfiscanf_r+0x2e6>
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	6063      	str	r3, [r4, #4]
 8004824:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004826:	3201      	adds	r2, #1
 8004828:	3301      	adds	r3, #1
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	9345      	str	r3, [sp, #276]	; 0x114
 800482e:	e7d8      	b.n	80047e2 <__ssvfiscanf_r+0x4e>
 8004830:	9141      	str	r1, [sp, #260]	; 0x104
 8004832:	9143      	str	r1, [sp, #268]	; 0x10c
 8004834:	7853      	ldrb	r3, [r2, #1]
 8004836:	2b2a      	cmp	r3, #42	; 0x2a
 8004838:	bf02      	ittt	eq
 800483a:	2310      	moveq	r3, #16
 800483c:	1c95      	addeq	r5, r2, #2
 800483e:	9341      	streq	r3, [sp, #260]	; 0x104
 8004840:	220a      	movs	r2, #10
 8004842:	46aa      	mov	sl, r5
 8004844:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004848:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800484c:	2b09      	cmp	r3, #9
 800484e:	d91c      	bls.n	800488a <__ssvfiscanf_r+0xf6>
 8004850:	487e      	ldr	r0, [pc, #504]	; (8004a4c <__ssvfiscanf_r+0x2b8>)
 8004852:	2203      	movs	r2, #3
 8004854:	f7fb fcc4 	bl	80001e0 <memchr>
 8004858:	b138      	cbz	r0, 800486a <__ssvfiscanf_r+0xd6>
 800485a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800485c:	eba0 0009 	sub.w	r0, r0, r9
 8004860:	2301      	movs	r3, #1
 8004862:	4083      	lsls	r3, r0
 8004864:	4313      	orrs	r3, r2
 8004866:	9341      	str	r3, [sp, #260]	; 0x104
 8004868:	4655      	mov	r5, sl
 800486a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800486e:	2b78      	cmp	r3, #120	; 0x78
 8004870:	d806      	bhi.n	8004880 <__ssvfiscanf_r+0xec>
 8004872:	2b57      	cmp	r3, #87	; 0x57
 8004874:	d810      	bhi.n	8004898 <__ssvfiscanf_r+0x104>
 8004876:	2b25      	cmp	r3, #37	; 0x25
 8004878:	d0c7      	beq.n	800480a <__ssvfiscanf_r+0x76>
 800487a:	d857      	bhi.n	800492c <__ssvfiscanf_r+0x198>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d065      	beq.n	800494c <__ssvfiscanf_r+0x1b8>
 8004880:	2303      	movs	r3, #3
 8004882:	9347      	str	r3, [sp, #284]	; 0x11c
 8004884:	230a      	movs	r3, #10
 8004886:	9342      	str	r3, [sp, #264]	; 0x108
 8004888:	e076      	b.n	8004978 <__ssvfiscanf_r+0x1e4>
 800488a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800488c:	fb02 1103 	mla	r1, r2, r3, r1
 8004890:	3930      	subs	r1, #48	; 0x30
 8004892:	9143      	str	r1, [sp, #268]	; 0x10c
 8004894:	4655      	mov	r5, sl
 8004896:	e7d4      	b.n	8004842 <__ssvfiscanf_r+0xae>
 8004898:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800489c:	2a20      	cmp	r2, #32
 800489e:	d8ef      	bhi.n	8004880 <__ssvfiscanf_r+0xec>
 80048a0:	a101      	add	r1, pc, #4	; (adr r1, 80048a8 <__ssvfiscanf_r+0x114>)
 80048a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	0800495b 	.word	0x0800495b
 80048ac:	08004881 	.word	0x08004881
 80048b0:	08004881 	.word	0x08004881
 80048b4:	080049b9 	.word	0x080049b9
 80048b8:	08004881 	.word	0x08004881
 80048bc:	08004881 	.word	0x08004881
 80048c0:	08004881 	.word	0x08004881
 80048c4:	08004881 	.word	0x08004881
 80048c8:	08004881 	.word	0x08004881
 80048cc:	08004881 	.word	0x08004881
 80048d0:	08004881 	.word	0x08004881
 80048d4:	080049cf 	.word	0x080049cf
 80048d8:	080049b5 	.word	0x080049b5
 80048dc:	08004933 	.word	0x08004933
 80048e0:	08004933 	.word	0x08004933
 80048e4:	08004933 	.word	0x08004933
 80048e8:	08004881 	.word	0x08004881
 80048ec:	08004971 	.word	0x08004971
 80048f0:	08004881 	.word	0x08004881
 80048f4:	08004881 	.word	0x08004881
 80048f8:	08004881 	.word	0x08004881
 80048fc:	08004881 	.word	0x08004881
 8004900:	080049df 	.word	0x080049df
 8004904:	080049ad 	.word	0x080049ad
 8004908:	08004953 	.word	0x08004953
 800490c:	08004881 	.word	0x08004881
 8004910:	08004881 	.word	0x08004881
 8004914:	080049db 	.word	0x080049db
 8004918:	08004881 	.word	0x08004881
 800491c:	080049b5 	.word	0x080049b5
 8004920:	08004881 	.word	0x08004881
 8004924:	08004881 	.word	0x08004881
 8004928:	0800495b 	.word	0x0800495b
 800492c:	3b45      	subs	r3, #69	; 0x45
 800492e:	2b02      	cmp	r3, #2
 8004930:	d8a6      	bhi.n	8004880 <__ssvfiscanf_r+0xec>
 8004932:	2305      	movs	r3, #5
 8004934:	e01f      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 8004936:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004938:	4621      	mov	r1, r4
 800493a:	4630      	mov	r0, r6
 800493c:	4798      	blx	r3
 800493e:	2800      	cmp	r0, #0
 8004940:	f43f af68 	beq.w	8004814 <__ssvfiscanf_r+0x80>
 8004944:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004946:	2800      	cmp	r0, #0
 8004948:	f040 808d 	bne.w	8004a66 <__ssvfiscanf_r+0x2d2>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e08f      	b.n	8004a72 <__ssvfiscanf_r+0x2de>
 8004952:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004954:	f042 0220 	orr.w	r2, r2, #32
 8004958:	9241      	str	r2, [sp, #260]	; 0x104
 800495a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800495c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004960:	9241      	str	r2, [sp, #260]	; 0x104
 8004962:	2210      	movs	r2, #16
 8004964:	2b6f      	cmp	r3, #111	; 0x6f
 8004966:	9242      	str	r2, [sp, #264]	; 0x108
 8004968:	bf34      	ite	cc
 800496a:	2303      	movcc	r3, #3
 800496c:	2304      	movcs	r3, #4
 800496e:	e002      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 8004970:	2300      	movs	r3, #0
 8004972:	9342      	str	r3, [sp, #264]	; 0x108
 8004974:	2303      	movs	r3, #3
 8004976:	9347      	str	r3, [sp, #284]	; 0x11c
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	dd3d      	ble.n	80049fa <__ssvfiscanf_r+0x266>
 800497e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004980:	0659      	lsls	r1, r3, #25
 8004982:	d404      	bmi.n	800498e <__ssvfiscanf_r+0x1fa>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	5cba      	ldrb	r2, [r7, r2]
 800498a:	0712      	lsls	r2, r2, #28
 800498c:	d43c      	bmi.n	8004a08 <__ssvfiscanf_r+0x274>
 800498e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004990:	2b02      	cmp	r3, #2
 8004992:	dc4b      	bgt.n	8004a2c <__ssvfiscanf_r+0x298>
 8004994:	466b      	mov	r3, sp
 8004996:	4622      	mov	r2, r4
 8004998:	a941      	add	r1, sp, #260	; 0x104
 800499a:	4630      	mov	r0, r6
 800499c:	f000 fa02 	bl	8004da4 <_scanf_chars>
 80049a0:	2801      	cmp	r0, #1
 80049a2:	d06a      	beq.n	8004a7a <__ssvfiscanf_r+0x2e6>
 80049a4:	2802      	cmp	r0, #2
 80049a6:	f47f af1c 	bne.w	80047e2 <__ssvfiscanf_r+0x4e>
 80049aa:	e7cb      	b.n	8004944 <__ssvfiscanf_r+0x1b0>
 80049ac:	2308      	movs	r3, #8
 80049ae:	9342      	str	r3, [sp, #264]	; 0x108
 80049b0:	2304      	movs	r3, #4
 80049b2:	e7e0      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 80049b4:	220a      	movs	r2, #10
 80049b6:	e7d5      	b.n	8004964 <__ssvfiscanf_r+0x1d0>
 80049b8:	4629      	mov	r1, r5
 80049ba:	4640      	mov	r0, r8
 80049bc:	f000 fb40 	bl	8005040 <__sccl>
 80049c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	9341      	str	r3, [sp, #260]	; 0x104
 80049c8:	4605      	mov	r5, r0
 80049ca:	2301      	movs	r3, #1
 80049cc:	e7d3      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 80049ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d4:	9341      	str	r3, [sp, #260]	; 0x104
 80049d6:	2300      	movs	r3, #0
 80049d8:	e7cd      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 80049da:	2302      	movs	r3, #2
 80049dc:	e7cb      	b.n	8004976 <__ssvfiscanf_r+0x1e2>
 80049de:	9841      	ldr	r0, [sp, #260]	; 0x104
 80049e0:	06c3      	lsls	r3, r0, #27
 80049e2:	f53f aefe 	bmi.w	80047e2 <__ssvfiscanf_r+0x4e>
 80049e6:	9b00      	ldr	r3, [sp, #0]
 80049e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049ea:	1d19      	adds	r1, r3, #4
 80049ec:	9100      	str	r1, [sp, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	07c0      	lsls	r0, r0, #31
 80049f2:	bf4c      	ite	mi
 80049f4:	801a      	strhmi	r2, [r3, #0]
 80049f6:	601a      	strpl	r2, [r3, #0]
 80049f8:	e6f3      	b.n	80047e2 <__ssvfiscanf_r+0x4e>
 80049fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80049fc:	4621      	mov	r1, r4
 80049fe:	4630      	mov	r0, r6
 8004a00:	4798      	blx	r3
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d0bb      	beq.n	800497e <__ssvfiscanf_r+0x1ea>
 8004a06:	e79d      	b.n	8004944 <__ssvfiscanf_r+0x1b0>
 8004a08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	9245      	str	r2, [sp, #276]	; 0x114
 8004a0e:	6862      	ldr	r2, [r4, #4]
 8004a10:	3a01      	subs	r2, #1
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	6062      	str	r2, [r4, #4]
 8004a16:	dd02      	ble.n	8004a1e <__ssvfiscanf_r+0x28a>
 8004a18:	3301      	adds	r3, #1
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	e7b2      	b.n	8004984 <__ssvfiscanf_r+0x1f0>
 8004a1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a20:	4621      	mov	r1, r4
 8004a22:	4630      	mov	r0, r6
 8004a24:	4798      	blx	r3
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d0ac      	beq.n	8004984 <__ssvfiscanf_r+0x1f0>
 8004a2a:	e78b      	b.n	8004944 <__ssvfiscanf_r+0x1b0>
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	dc0f      	bgt.n	8004a50 <__ssvfiscanf_r+0x2bc>
 8004a30:	466b      	mov	r3, sp
 8004a32:	4622      	mov	r2, r4
 8004a34:	a941      	add	r1, sp, #260	; 0x104
 8004a36:	4630      	mov	r0, r6
 8004a38:	f000 fa0e 	bl	8004e58 <_scanf_i>
 8004a3c:	e7b0      	b.n	80049a0 <__ssvfiscanf_r+0x20c>
 8004a3e:	bf00      	nop
 8004a40:	080046e1 	.word	0x080046e1
 8004a44:	0800475b 	.word	0x0800475b
 8004a48:	08005517 	.word	0x08005517
 8004a4c:	080054ce 	.word	0x080054ce
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <__ssvfiscanf_r+0x2ec>)
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f43f aec5 	beq.w	80047e2 <__ssvfiscanf_r+0x4e>
 8004a58:	466b      	mov	r3, sp
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	a941      	add	r1, sp, #260	; 0x104
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f3af 8000 	nop.w
 8004a64:	e79c      	b.n	80049a0 <__ssvfiscanf_r+0x20c>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a6c:	bf18      	it	ne
 8004a6e:	f04f 30ff 	movne.w	r0, #4294967295
 8004a72:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004a7c:	e7f9      	b.n	8004a72 <__ssvfiscanf_r+0x2de>
 8004a7e:	bf00      	nop
 8004a80:	00000000 	.word	0x00000000

08004a84 <_printf_common>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	4616      	mov	r6, r2
 8004a8a:	4699      	mov	r9, r3
 8004a8c:	688a      	ldr	r2, [r1, #8]
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bfb8      	it	lt
 8004a98:	4613      	movlt	r3, r2
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b10a      	cbz	r2, 8004aaa <_printf_common+0x26>
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	0699      	lsls	r1, r3, #26
 8004aae:	bf42      	ittt	mi
 8004ab0:	6833      	ldrmi	r3, [r6, #0]
 8004ab2:	3302      	addmi	r3, #2
 8004ab4:	6033      	strmi	r3, [r6, #0]
 8004ab6:	6825      	ldr	r5, [r4, #0]
 8004ab8:	f015 0506 	ands.w	r5, r5, #6
 8004abc:	d106      	bne.n	8004acc <_printf_common+0x48>
 8004abe:	f104 0a19 	add.w	sl, r4, #25
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	6832      	ldr	r2, [r6, #0]
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	dc26      	bgt.n	8004b1a <_printf_common+0x96>
 8004acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ad0:	1e13      	subs	r3, r2, #0
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	2301      	movne	r3, #1
 8004ad8:	0692      	lsls	r2, r2, #26
 8004ada:	d42b      	bmi.n	8004b34 <_printf_common+0xb0>
 8004adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	47c0      	blx	r8
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d01e      	beq.n	8004b28 <_printf_common+0xa4>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	f003 0306 	and.w	r3, r3, #6
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf02      	ittt	eq
 8004af6:	68e5      	ldreq	r5, [r4, #12]
 8004af8:	6833      	ldreq	r3, [r6, #0]
 8004afa:	1aed      	subeq	r5, r5, r3
 8004afc:	68a3      	ldr	r3, [r4, #8]
 8004afe:	bf0c      	ite	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	2500      	movne	r5, #0
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bfc4      	itt	gt
 8004b0a:	1a9b      	subgt	r3, r3, r2
 8004b0c:	18ed      	addgt	r5, r5, r3
 8004b0e:	2600      	movs	r6, #0
 8004b10:	341a      	adds	r4, #26
 8004b12:	42b5      	cmp	r5, r6
 8004b14:	d11a      	bne.n	8004b4c <_printf_common+0xc8>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e008      	b.n	8004b2c <_printf_common+0xa8>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4649      	mov	r1, r9
 8004b20:	4638      	mov	r0, r7
 8004b22:	47c0      	blx	r8
 8004b24:	3001      	adds	r0, #1
 8004b26:	d103      	bne.n	8004b30 <_printf_common+0xac>
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b30:	3501      	adds	r5, #1
 8004b32:	e7c6      	b.n	8004ac2 <_printf_common+0x3e>
 8004b34:	18e1      	adds	r1, r4, r3
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	2030      	movs	r0, #48	; 0x30
 8004b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b3e:	4422      	add	r2, r4
 8004b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b48:	3302      	adds	r3, #2
 8004b4a:	e7c7      	b.n	8004adc <_printf_common+0x58>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4649      	mov	r1, r9
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0e6      	beq.n	8004b28 <_printf_common+0xa4>
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7d9      	b.n	8004b12 <_printf_common+0x8e>
	...

08004b60 <_printf_i>:
 8004b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	7e0f      	ldrb	r7, [r1, #24]
 8004b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b68:	2f78      	cmp	r7, #120	; 0x78
 8004b6a:	4691      	mov	r9, r2
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	469a      	mov	sl, r3
 8004b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b76:	d807      	bhi.n	8004b88 <_printf_i+0x28>
 8004b78:	2f62      	cmp	r7, #98	; 0x62
 8004b7a:	d80a      	bhi.n	8004b92 <_printf_i+0x32>
 8004b7c:	2f00      	cmp	r7, #0
 8004b7e:	f000 80d4 	beq.w	8004d2a <_printf_i+0x1ca>
 8004b82:	2f58      	cmp	r7, #88	; 0x58
 8004b84:	f000 80c0 	beq.w	8004d08 <_printf_i+0x1a8>
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b90:	e03a      	b.n	8004c08 <_printf_i+0xa8>
 8004b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b96:	2b15      	cmp	r3, #21
 8004b98:	d8f6      	bhi.n	8004b88 <_printf_i+0x28>
 8004b9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ba0 <_printf_i+0x40>)
 8004b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004b89 	.word	0x08004b89
 8004bac:	08004b89 	.word	0x08004b89
 8004bb0:	08004b89 	.word	0x08004b89
 8004bb4:	08004b89 	.word	0x08004b89
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004b89 	.word	0x08004b89
 8004bc0:	08004b89 	.word	0x08004b89
 8004bc4:	08004b89 	.word	0x08004b89
 8004bc8:	08004b89 	.word	0x08004b89
 8004bcc:	08004d11 	.word	0x08004d11
 8004bd0:	08004c39 	.word	0x08004c39
 8004bd4:	08004ccb 	.word	0x08004ccb
 8004bd8:	08004b89 	.word	0x08004b89
 8004bdc:	08004b89 	.word	0x08004b89
 8004be0:	08004d33 	.word	0x08004d33
 8004be4:	08004b89 	.word	0x08004b89
 8004be8:	08004c39 	.word	0x08004c39
 8004bec:	08004b89 	.word	0x08004b89
 8004bf0:	08004b89 	.word	0x08004b89
 8004bf4:	08004cd3 	.word	0x08004cd3
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	602a      	str	r2, [r5, #0]
 8004c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e09f      	b.n	8004d4c <_printf_i+0x1ec>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	0607      	lsls	r7, r0, #24
 8004c12:	f103 0104 	add.w	r1, r3, #4
 8004c16:	6029      	str	r1, [r5, #0]
 8004c18:	d501      	bpl.n	8004c1e <_printf_i+0xbe>
 8004c1a:	681e      	ldr	r6, [r3, #0]
 8004c1c:	e003      	b.n	8004c26 <_printf_i+0xc6>
 8004c1e:	0646      	lsls	r6, r0, #25
 8004c20:	d5fb      	bpl.n	8004c1a <_printf_i+0xba>
 8004c22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	da03      	bge.n	8004c32 <_printf_i+0xd2>
 8004c2a:	232d      	movs	r3, #45	; 0x2d
 8004c2c:	4276      	negs	r6, r6
 8004c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c32:	485a      	ldr	r0, [pc, #360]	; (8004d9c <_printf_i+0x23c>)
 8004c34:	230a      	movs	r3, #10
 8004c36:	e012      	b.n	8004c5e <_printf_i+0xfe>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	1d19      	adds	r1, r3, #4
 8004c3e:	6029      	str	r1, [r5, #0]
 8004c40:	0605      	lsls	r5, r0, #24
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0xe8>
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0xee>
 8004c48:	0641      	lsls	r1, r0, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0xe4>
 8004c4c:	881e      	ldrh	r6, [r3, #0]
 8004c4e:	4853      	ldr	r0, [pc, #332]	; (8004d9c <_printf_i+0x23c>)
 8004c50:	2f6f      	cmp	r7, #111	; 0x6f
 8004c52:	bf0c      	ite	eq
 8004c54:	2308      	moveq	r3, #8
 8004c56:	230a      	movne	r3, #10
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5e:	6865      	ldr	r5, [r4, #4]
 8004c60:	60a5      	str	r5, [r4, #8]
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	bfa2      	ittt	ge
 8004c66:	6821      	ldrge	r1, [r4, #0]
 8004c68:	f021 0104 	bicge.w	r1, r1, #4
 8004c6c:	6021      	strge	r1, [r4, #0]
 8004c6e:	b90e      	cbnz	r6, 8004c74 <_printf_i+0x114>
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	d04b      	beq.n	8004d0c <_printf_i+0x1ac>
 8004c74:	4615      	mov	r5, r2
 8004c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c7e:	5dc7      	ldrb	r7, [r0, r7]
 8004c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c84:	4637      	mov	r7, r6
 8004c86:	42bb      	cmp	r3, r7
 8004c88:	460e      	mov	r6, r1
 8004c8a:	d9f4      	bls.n	8004c76 <_printf_i+0x116>
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10b      	bne.n	8004ca8 <_printf_i+0x148>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07de      	lsls	r6, r3, #31
 8004c94:	d508      	bpl.n	8004ca8 <_printf_i+0x148>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	6861      	ldr	r1, [r4, #4]
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	bfde      	ittt	le
 8004c9e:	2330      	movle	r3, #48	; 0x30
 8004ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ca8:	1b52      	subs	r2, r2, r5
 8004caa:	6122      	str	r2, [r4, #16]
 8004cac:	f8cd a000 	str.w	sl, [sp]
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	aa03      	add	r2, sp, #12
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fee4 	bl	8004a84 <_printf_common>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d14a      	bne.n	8004d56 <_printf_i+0x1f6>
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	b004      	add	sp, #16
 8004cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	4833      	ldr	r0, [pc, #204]	; (8004da0 <_printf_i+0x240>)
 8004cd4:	2778      	movs	r7, #120	; 0x78
 8004cd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	6829      	ldr	r1, [r5, #0]
 8004cde:	061f      	lsls	r7, r3, #24
 8004ce0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ce4:	d402      	bmi.n	8004cec <_printf_i+0x18c>
 8004ce6:	065f      	lsls	r7, r3, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b2b6      	uxthmi	r6, r6
 8004cec:	07df      	lsls	r7, r3, #31
 8004cee:	bf48      	it	mi
 8004cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf4:	6029      	str	r1, [r5, #0]
 8004cf6:	bf48      	it	mi
 8004cf8:	6023      	strmi	r3, [r4, #0]
 8004cfa:	b91e      	cbnz	r6, 8004d04 <_printf_i+0x1a4>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f023 0320 	bic.w	r3, r3, #32
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	2310      	movs	r3, #16
 8004d06:	e7a7      	b.n	8004c58 <_printf_i+0xf8>
 8004d08:	4824      	ldr	r0, [pc, #144]	; (8004d9c <_printf_i+0x23c>)
 8004d0a:	e7e4      	b.n	8004cd6 <_printf_i+0x176>
 8004d0c:	4615      	mov	r5, r2
 8004d0e:	e7bd      	b.n	8004c8c <_printf_i+0x12c>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	6826      	ldr	r6, [r4, #0]
 8004d14:	6961      	ldr	r1, [r4, #20]
 8004d16:	1d18      	adds	r0, r3, #4
 8004d18:	6028      	str	r0, [r5, #0]
 8004d1a:	0635      	lsls	r5, r6, #24
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	d501      	bpl.n	8004d24 <_printf_i+0x1c4>
 8004d20:	6019      	str	r1, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <_printf_i+0x1ca>
 8004d24:	0670      	lsls	r0, r6, #25
 8004d26:	d5fb      	bpl.n	8004d20 <_printf_i+0x1c0>
 8004d28:	8019      	strh	r1, [r3, #0]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	4615      	mov	r5, r2
 8004d30:	e7bc      	b.n	8004cac <_printf_i+0x14c>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	1d1a      	adds	r2, r3, #4
 8004d36:	602a      	str	r2, [r5, #0]
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	6862      	ldr	r2, [r4, #4]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f7fb fa4e 	bl	80001e0 <memchr>
 8004d44:	b108      	cbz	r0, 8004d4a <_printf_i+0x1ea>
 8004d46:	1b40      	subs	r0, r0, r5
 8004d48:	6060      	str	r0, [r4, #4]
 8004d4a:	6863      	ldr	r3, [r4, #4]
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d54:	e7aa      	b.n	8004cac <_printf_i+0x14c>
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	462a      	mov	r2, r5
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	47d0      	blx	sl
 8004d60:	3001      	adds	r0, #1
 8004d62:	d0ad      	beq.n	8004cc0 <_printf_i+0x160>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	079b      	lsls	r3, r3, #30
 8004d68:	d413      	bmi.n	8004d92 <_printf_i+0x232>
 8004d6a:	68e0      	ldr	r0, [r4, #12]
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	bfb8      	it	lt
 8004d72:	4618      	movlt	r0, r3
 8004d74:	e7a6      	b.n	8004cc4 <_printf_i+0x164>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	47d0      	blx	sl
 8004d80:	3001      	adds	r0, #1
 8004d82:	d09d      	beq.n	8004cc0 <_printf_i+0x160>
 8004d84:	3501      	adds	r5, #1
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	9903      	ldr	r1, [sp, #12]
 8004d8a:	1a5b      	subs	r3, r3, r1
 8004d8c:	42ab      	cmp	r3, r5
 8004d8e:	dcf2      	bgt.n	8004d76 <_printf_i+0x216>
 8004d90:	e7eb      	b.n	8004d6a <_printf_i+0x20a>
 8004d92:	2500      	movs	r5, #0
 8004d94:	f104 0619 	add.w	r6, r4, #25
 8004d98:	e7f5      	b.n	8004d86 <_printf_i+0x226>
 8004d9a:	bf00      	nop
 8004d9c:	080054d9 	.word	0x080054d9
 8004da0:	080054ea 	.word	0x080054ea

08004da4 <_scanf_chars>:
 8004da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da8:	4615      	mov	r5, r2
 8004daa:	688a      	ldr	r2, [r1, #8]
 8004dac:	4680      	mov	r8, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	b932      	cbnz	r2, 8004dc0 <_scanf_chars+0x1c>
 8004db2:	698a      	ldr	r2, [r1, #24]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2201      	moveq	r2, #1
 8004dba:	f04f 32ff 	movne.w	r2, #4294967295
 8004dbe:	608a      	str	r2, [r1, #8]
 8004dc0:	6822      	ldr	r2, [r4, #0]
 8004dc2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004e54 <_scanf_chars+0xb0>
 8004dc6:	06d1      	lsls	r1, r2, #27
 8004dc8:	bf5f      	itttt	pl
 8004dca:	681a      	ldrpl	r2, [r3, #0]
 8004dcc:	1d11      	addpl	r1, r2, #4
 8004dce:	6019      	strpl	r1, [r3, #0]
 8004dd0:	6816      	ldrpl	r6, [r2, #0]
 8004dd2:	2700      	movs	r7, #0
 8004dd4:	69a0      	ldr	r0, [r4, #24]
 8004dd6:	b188      	cbz	r0, 8004dfc <_scanf_chars+0x58>
 8004dd8:	2801      	cmp	r0, #1
 8004dda:	d107      	bne.n	8004dec <_scanf_chars+0x48>
 8004ddc:	682a      	ldr	r2, [r5, #0]
 8004dde:	7811      	ldrb	r1, [r2, #0]
 8004de0:	6962      	ldr	r2, [r4, #20]
 8004de2:	5c52      	ldrb	r2, [r2, r1]
 8004de4:	b952      	cbnz	r2, 8004dfc <_scanf_chars+0x58>
 8004de6:	2f00      	cmp	r7, #0
 8004de8:	d031      	beq.n	8004e4e <_scanf_chars+0xaa>
 8004dea:	e022      	b.n	8004e32 <_scanf_chars+0x8e>
 8004dec:	2802      	cmp	r0, #2
 8004dee:	d120      	bne.n	8004e32 <_scanf_chars+0x8e>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004df8:	071b      	lsls	r3, r3, #28
 8004dfa:	d41a      	bmi.n	8004e32 <_scanf_chars+0x8e>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	06da      	lsls	r2, r3, #27
 8004e00:	bf5e      	ittt	pl
 8004e02:	682b      	ldrpl	r3, [r5, #0]
 8004e04:	781b      	ldrbpl	r3, [r3, #0]
 8004e06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004e0a:	682a      	ldr	r2, [r5, #0]
 8004e0c:	686b      	ldr	r3, [r5, #4]
 8004e0e:	3201      	adds	r2, #1
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	68a2      	ldr	r2, [r4, #8]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	3a01      	subs	r2, #1
 8004e18:	606b      	str	r3, [r5, #4]
 8004e1a:	3701      	adds	r7, #1
 8004e1c:	60a2      	str	r2, [r4, #8]
 8004e1e:	b142      	cbz	r2, 8004e32 <_scanf_chars+0x8e>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	dcd7      	bgt.n	8004dd4 <_scanf_chars+0x30>
 8004e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4798      	blx	r3
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d0d0      	beq.n	8004dd4 <_scanf_chars+0x30>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	f013 0310 	ands.w	r3, r3, #16
 8004e38:	d105      	bne.n	8004e46 <_scanf_chars+0xa2>
 8004e3a:	68e2      	ldr	r2, [r4, #12]
 8004e3c:	3201      	adds	r2, #1
 8004e3e:	60e2      	str	r2, [r4, #12]
 8004e40:	69a2      	ldr	r2, [r4, #24]
 8004e42:	b102      	cbz	r2, 8004e46 <_scanf_chars+0xa2>
 8004e44:	7033      	strb	r3, [r6, #0]
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	443b      	add	r3, r7
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e52:	bf00      	nop
 8004e54:	08005517 	.word	0x08005517

08004e58 <_scanf_i>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	4698      	mov	r8, r3
 8004e5e:	4b74      	ldr	r3, [pc, #464]	; (8005030 <_scanf_i+0x1d8>)
 8004e60:	460c      	mov	r4, r1
 8004e62:	4682      	mov	sl, r0
 8004e64:	4616      	mov	r6, r2
 8004e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e72:	4b70      	ldr	r3, [pc, #448]	; (8005034 <_scanf_i+0x1dc>)
 8004e74:	69a1      	ldr	r1, [r4, #24]
 8004e76:	4a70      	ldr	r2, [pc, #448]	; (8005038 <_scanf_i+0x1e0>)
 8004e78:	2903      	cmp	r1, #3
 8004e7a:	bf18      	it	ne
 8004e7c:	461a      	movne	r2, r3
 8004e7e:	68a3      	ldr	r3, [r4, #8]
 8004e80:	9201      	str	r2, [sp, #4]
 8004e82:	1e5a      	subs	r2, r3, #1
 8004e84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004e88:	bf88      	it	hi
 8004e8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004e8e:	4627      	mov	r7, r4
 8004e90:	bf82      	ittt	hi
 8004e92:	eb03 0905 	addhi.w	r9, r3, r5
 8004e96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004e9a:	60a3      	strhi	r3, [r4, #8]
 8004e9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004ea0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004ea4:	bf98      	it	ls
 8004ea6:	f04f 0900 	movls.w	r9, #0
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	463d      	mov	r5, r7
 8004eae:	f04f 0b00 	mov.w	fp, #0
 8004eb2:	6831      	ldr	r1, [r6, #0]
 8004eb4:	ab03      	add	r3, sp, #12
 8004eb6:	7809      	ldrb	r1, [r1, #0]
 8004eb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f7fb f98f 	bl	80001e0 <memchr>
 8004ec2:	b328      	cbz	r0, 8004f10 <_scanf_i+0xb8>
 8004ec4:	f1bb 0f01 	cmp.w	fp, #1
 8004ec8:	d159      	bne.n	8004f7e <_scanf_i+0x126>
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	b92a      	cbnz	r2, 8004eda <_scanf_i+0x82>
 8004ece:	6822      	ldr	r2, [r4, #0]
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	6022      	str	r2, [r4, #0]
 8004eda:	6822      	ldr	r2, [r4, #0]
 8004edc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	68a2      	ldr	r2, [r4, #8]
 8004ee4:	1e51      	subs	r1, r2, #1
 8004ee6:	60a1      	str	r1, [r4, #8]
 8004ee8:	b192      	cbz	r2, 8004f10 <_scanf_i+0xb8>
 8004eea:	6832      	ldr	r2, [r6, #0]
 8004eec:	1c51      	adds	r1, r2, #1
 8004eee:	6031      	str	r1, [r6, #0]
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	f805 2b01 	strb.w	r2, [r5], #1
 8004ef6:	6872      	ldr	r2, [r6, #4]
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	2a00      	cmp	r2, #0
 8004efc:	6072      	str	r2, [r6, #4]
 8004efe:	dc07      	bgt.n	8004f10 <_scanf_i+0xb8>
 8004f00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004f04:	4631      	mov	r1, r6
 8004f06:	4650      	mov	r0, sl
 8004f08:	4790      	blx	r2
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f040 8085 	bne.w	800501a <_scanf_i+0x1c2>
 8004f10:	f10b 0b01 	add.w	fp, fp, #1
 8004f14:	f1bb 0f03 	cmp.w	fp, #3
 8004f18:	d1cb      	bne.n	8004eb2 <_scanf_i+0x5a>
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	b90b      	cbnz	r3, 8004f22 <_scanf_i+0xca>
 8004f1e:	230a      	movs	r3, #10
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	6863      	ldr	r3, [r4, #4]
 8004f24:	4945      	ldr	r1, [pc, #276]	; (800503c <_scanf_i+0x1e4>)
 8004f26:	6960      	ldr	r0, [r4, #20]
 8004f28:	1ac9      	subs	r1, r1, r3
 8004f2a:	f000 f889 	bl	8005040 <__sccl>
 8004f2e:	f04f 0b00 	mov.w	fp, #0
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03d      	beq.n	8004fb6 <_scanf_i+0x15e>
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	6960      	ldr	r0, [r4, #20]
 8004f3e:	f891 c000 	ldrb.w	ip, [r1]
 8004f42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d035      	beq.n	8004fb6 <_scanf_i+0x15e>
 8004f4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004f4e:	d124      	bne.n	8004f9a <_scanf_i+0x142>
 8004f50:	0510      	lsls	r0, r2, #20
 8004f52:	d522      	bpl.n	8004f9a <_scanf_i+0x142>
 8004f54:	f10b 0b01 	add.w	fp, fp, #1
 8004f58:	f1b9 0f00 	cmp.w	r9, #0
 8004f5c:	d003      	beq.n	8004f66 <_scanf_i+0x10e>
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6873      	ldr	r3, [r6, #4]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	6073      	str	r3, [r6, #4]
 8004f6e:	dd1b      	ble.n	8004fa8 <_scanf_i+0x150>
 8004f70:	6833      	ldr	r3, [r6, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	68a3      	ldr	r3, [r4, #8]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	60a3      	str	r3, [r4, #8]
 8004f7c:	e7d9      	b.n	8004f32 <_scanf_i+0xda>
 8004f7e:	f1bb 0f02 	cmp.w	fp, #2
 8004f82:	d1ae      	bne.n	8004ee2 <_scanf_i+0x8a>
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004f8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004f8e:	d1bf      	bne.n	8004f10 <_scanf_i+0xb8>
 8004f90:	2310      	movs	r3, #16
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f98:	e7a2      	b.n	8004ee0 <_scanf_i+0x88>
 8004f9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	780b      	ldrb	r3, [r1, #0]
 8004fa2:	f805 3b01 	strb.w	r3, [r5], #1
 8004fa6:	e7de      	b.n	8004f66 <_scanf_i+0x10e>
 8004fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fac:	4631      	mov	r1, r6
 8004fae:	4650      	mov	r0, sl
 8004fb0:	4798      	blx	r3
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d0df      	beq.n	8004f76 <_scanf_i+0x11e>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	05d9      	lsls	r1, r3, #23
 8004fba:	d50d      	bpl.n	8004fd8 <_scanf_i+0x180>
 8004fbc:	42bd      	cmp	r5, r7
 8004fbe:	d909      	bls.n	8004fd4 <_scanf_i+0x17c>
 8004fc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fc8:	4632      	mov	r2, r6
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4798      	blx	r3
 8004fce:	f105 39ff 	add.w	r9, r5, #4294967295
 8004fd2:	464d      	mov	r5, r9
 8004fd4:	42bd      	cmp	r5, r7
 8004fd6:	d028      	beq.n	800502a <_scanf_i+0x1d2>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	f012 0210 	ands.w	r2, r2, #16
 8004fde:	d113      	bne.n	8005008 <_scanf_i+0x1b0>
 8004fe0:	702a      	strb	r2, [r5, #0]
 8004fe2:	6863      	ldr	r3, [r4, #4]
 8004fe4:	9e01      	ldr	r6, [sp, #4]
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	4650      	mov	r0, sl
 8004fea:	47b0      	blx	r6
 8004fec:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff0:	6821      	ldr	r1, [r4, #0]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	f8c8 2000 	str.w	r2, [r8]
 8004ff8:	f011 0f20 	tst.w	r1, #32
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	d00f      	beq.n	8005020 <_scanf_i+0x1c8>
 8005000:	6018      	str	r0, [r3, #0]
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60e3      	str	r3, [r4, #12]
 8005008:	6923      	ldr	r3, [r4, #16]
 800500a:	1bed      	subs	r5, r5, r7
 800500c:	445d      	add	r5, fp
 800500e:	442b      	add	r3, r5
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	2000      	movs	r0, #0
 8005014:	b007      	add	sp, #28
 8005016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501a:	f04f 0b00 	mov.w	fp, #0
 800501e:	e7ca      	b.n	8004fb6 <_scanf_i+0x15e>
 8005020:	07ca      	lsls	r2, r1, #31
 8005022:	bf4c      	ite	mi
 8005024:	8018      	strhmi	r0, [r3, #0]
 8005026:	6018      	strpl	r0, [r3, #0]
 8005028:	e7eb      	b.n	8005002 <_scanf_i+0x1aa>
 800502a:	2001      	movs	r0, #1
 800502c:	e7f2      	b.n	8005014 <_scanf_i+0x1bc>
 800502e:	bf00      	nop
 8005030:	08005484 	.word	0x08005484
 8005034:	080053e5 	.word	0x080053e5
 8005038:	080052fd 	.word	0x080052fd
 800503c:	0800550b 	.word	0x0800550b

08005040 <__sccl>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	780b      	ldrb	r3, [r1, #0]
 8005044:	4604      	mov	r4, r0
 8005046:	2b5e      	cmp	r3, #94	; 0x5e
 8005048:	bf0b      	itete	eq
 800504a:	784b      	ldrbeq	r3, [r1, #1]
 800504c:	1c4a      	addne	r2, r1, #1
 800504e:	1c8a      	addeq	r2, r1, #2
 8005050:	2100      	movne	r1, #0
 8005052:	bf08      	it	eq
 8005054:	2101      	moveq	r1, #1
 8005056:	3801      	subs	r0, #1
 8005058:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800505c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005060:	42a8      	cmp	r0, r5
 8005062:	d1fb      	bne.n	800505c <__sccl+0x1c>
 8005064:	b90b      	cbnz	r3, 800506a <__sccl+0x2a>
 8005066:	1e50      	subs	r0, r2, #1
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	f081 0101 	eor.w	r1, r1, #1
 800506e:	54e1      	strb	r1, [r4, r3]
 8005070:	4610      	mov	r0, r2
 8005072:	4602      	mov	r2, r0
 8005074:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005078:	2d2d      	cmp	r5, #45	; 0x2d
 800507a:	d005      	beq.n	8005088 <__sccl+0x48>
 800507c:	2d5d      	cmp	r5, #93	; 0x5d
 800507e:	d016      	beq.n	80050ae <__sccl+0x6e>
 8005080:	2d00      	cmp	r5, #0
 8005082:	d0f1      	beq.n	8005068 <__sccl+0x28>
 8005084:	462b      	mov	r3, r5
 8005086:	e7f2      	b.n	800506e <__sccl+0x2e>
 8005088:	7846      	ldrb	r6, [r0, #1]
 800508a:	2e5d      	cmp	r6, #93	; 0x5d
 800508c:	d0fa      	beq.n	8005084 <__sccl+0x44>
 800508e:	42b3      	cmp	r3, r6
 8005090:	dcf8      	bgt.n	8005084 <__sccl+0x44>
 8005092:	3002      	adds	r0, #2
 8005094:	461a      	mov	r2, r3
 8005096:	3201      	adds	r2, #1
 8005098:	4296      	cmp	r6, r2
 800509a:	54a1      	strb	r1, [r4, r2]
 800509c:	dcfb      	bgt.n	8005096 <__sccl+0x56>
 800509e:	1af2      	subs	r2, r6, r3
 80050a0:	3a01      	subs	r2, #1
 80050a2:	1c5d      	adds	r5, r3, #1
 80050a4:	42b3      	cmp	r3, r6
 80050a6:	bfa8      	it	ge
 80050a8:	2200      	movge	r2, #0
 80050aa:	18ab      	adds	r3, r5, r2
 80050ac:	e7e1      	b.n	8005072 <__sccl+0x32>
 80050ae:	4610      	mov	r0, r2
 80050b0:	e7da      	b.n	8005068 <__sccl+0x28>

080050b2 <__submore>:
 80050b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	460c      	mov	r4, r1
 80050b8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80050ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050be:	4299      	cmp	r1, r3
 80050c0:	d11d      	bne.n	80050fe <__submore+0x4c>
 80050c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050c6:	f7ff f927 	bl	8004318 <_malloc_r>
 80050ca:	b918      	cbnz	r0, 80050d4 <__submore+0x22>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80050da:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80050de:	6360      	str	r0, [r4, #52]	; 0x34
 80050e0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80050e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050e8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80050ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050f0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80050f4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80050f8:	6020      	str	r0, [r4, #0]
 80050fa:	2000      	movs	r0, #0
 80050fc:	e7e8      	b.n	80050d0 <__submore+0x1e>
 80050fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005100:	0077      	lsls	r7, r6, #1
 8005102:	463a      	mov	r2, r7
 8005104:	f000 f848 	bl	8005198 <_realloc_r>
 8005108:	4605      	mov	r5, r0
 800510a:	2800      	cmp	r0, #0
 800510c:	d0de      	beq.n	80050cc <__submore+0x1a>
 800510e:	eb00 0806 	add.w	r8, r0, r6
 8005112:	4601      	mov	r1, r0
 8005114:	4632      	mov	r2, r6
 8005116:	4640      	mov	r0, r8
 8005118:	f000 f830 	bl	800517c <memcpy>
 800511c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005120:	f8c4 8000 	str.w	r8, [r4]
 8005124:	e7e9      	b.n	80050fa <__submore+0x48>

08005126 <memmove>:
 8005126:	4288      	cmp	r0, r1
 8005128:	b510      	push	{r4, lr}
 800512a:	eb01 0402 	add.w	r4, r1, r2
 800512e:	d902      	bls.n	8005136 <memmove+0x10>
 8005130:	4284      	cmp	r4, r0
 8005132:	4623      	mov	r3, r4
 8005134:	d807      	bhi.n	8005146 <memmove+0x20>
 8005136:	1e43      	subs	r3, r0, #1
 8005138:	42a1      	cmp	r1, r4
 800513a:	d008      	beq.n	800514e <memmove+0x28>
 800513c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005140:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005144:	e7f8      	b.n	8005138 <memmove+0x12>
 8005146:	4402      	add	r2, r0
 8005148:	4601      	mov	r1, r0
 800514a:	428a      	cmp	r2, r1
 800514c:	d100      	bne.n	8005150 <memmove+0x2a>
 800514e:	bd10      	pop	{r4, pc}
 8005150:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005154:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005158:	e7f7      	b.n	800514a <memmove+0x24>
	...

0800515c <_sbrk_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d06      	ldr	r5, [pc, #24]	; (8005178 <_sbrk_r+0x1c>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	602b      	str	r3, [r5, #0]
 8005168:	f7fb fb16 	bl	8000798 <_sbrk>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_sbrk_r+0x1a>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_sbrk_r+0x1a>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	200002fc 	.word	0x200002fc

0800517c <memcpy>:
 800517c:	440a      	add	r2, r1
 800517e:	4291      	cmp	r1, r2
 8005180:	f100 33ff 	add.w	r3, r0, #4294967295
 8005184:	d100      	bne.n	8005188 <memcpy+0xc>
 8005186:	4770      	bx	lr
 8005188:	b510      	push	{r4, lr}
 800518a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800518e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005192:	4291      	cmp	r1, r2
 8005194:	d1f9      	bne.n	800518a <memcpy+0xe>
 8005196:	bd10      	pop	{r4, pc}

08005198 <_realloc_r>:
 8005198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519c:	4680      	mov	r8, r0
 800519e:	4614      	mov	r4, r2
 80051a0:	460e      	mov	r6, r1
 80051a2:	b921      	cbnz	r1, 80051ae <_realloc_r+0x16>
 80051a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	4611      	mov	r1, r2
 80051aa:	f7ff b8b5 	b.w	8004318 <_malloc_r>
 80051ae:	b92a      	cbnz	r2, 80051bc <_realloc_r+0x24>
 80051b0:	f7ff f846 	bl	8004240 <_free_r>
 80051b4:	4625      	mov	r5, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	f000 f914 	bl	80053e8 <_malloc_usable_size_r>
 80051c0:	4284      	cmp	r4, r0
 80051c2:	4607      	mov	r7, r0
 80051c4:	d802      	bhi.n	80051cc <_realloc_r+0x34>
 80051c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051ca:	d812      	bhi.n	80051f2 <_realloc_r+0x5a>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff f8a2 	bl	8004318 <_malloc_r>
 80051d4:	4605      	mov	r5, r0
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d0ed      	beq.n	80051b6 <_realloc_r+0x1e>
 80051da:	42bc      	cmp	r4, r7
 80051dc:	4622      	mov	r2, r4
 80051de:	4631      	mov	r1, r6
 80051e0:	bf28      	it	cs
 80051e2:	463a      	movcs	r2, r7
 80051e4:	f7ff ffca 	bl	800517c <memcpy>
 80051e8:	4631      	mov	r1, r6
 80051ea:	4640      	mov	r0, r8
 80051ec:	f7ff f828 	bl	8004240 <_free_r>
 80051f0:	e7e1      	b.n	80051b6 <_realloc_r+0x1e>
 80051f2:	4635      	mov	r5, r6
 80051f4:	e7df      	b.n	80051b6 <_realloc_r+0x1e>
	...

080051f8 <_strtol_l.constprop.0>:
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051fe:	d001      	beq.n	8005204 <_strtol_l.constprop.0+0xc>
 8005200:	2b24      	cmp	r3, #36	; 0x24
 8005202:	d906      	bls.n	8005212 <_strtol_l.constprop.0+0x1a>
 8005204:	f7fe fff0 	bl	80041e8 <__errno>
 8005208:	2316      	movs	r3, #22
 800520a:	6003      	str	r3, [r0, #0]
 800520c:	2000      	movs	r0, #0
 800520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005212:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052f8 <_strtol_l.constprop.0+0x100>
 8005216:	460d      	mov	r5, r1
 8005218:	462e      	mov	r6, r5
 800521a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800521e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005222:	f017 0708 	ands.w	r7, r7, #8
 8005226:	d1f7      	bne.n	8005218 <_strtol_l.constprop.0+0x20>
 8005228:	2c2d      	cmp	r4, #45	; 0x2d
 800522a:	d132      	bne.n	8005292 <_strtol_l.constprop.0+0x9a>
 800522c:	782c      	ldrb	r4, [r5, #0]
 800522e:	2701      	movs	r7, #1
 8005230:	1cb5      	adds	r5, r6, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d05b      	beq.n	80052ee <_strtol_l.constprop.0+0xf6>
 8005236:	2b10      	cmp	r3, #16
 8005238:	d109      	bne.n	800524e <_strtol_l.constprop.0+0x56>
 800523a:	2c30      	cmp	r4, #48	; 0x30
 800523c:	d107      	bne.n	800524e <_strtol_l.constprop.0+0x56>
 800523e:	782c      	ldrb	r4, [r5, #0]
 8005240:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005244:	2c58      	cmp	r4, #88	; 0x58
 8005246:	d14d      	bne.n	80052e4 <_strtol_l.constprop.0+0xec>
 8005248:	786c      	ldrb	r4, [r5, #1]
 800524a:	2310      	movs	r3, #16
 800524c:	3502      	adds	r5, #2
 800524e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005252:	f108 38ff 	add.w	r8, r8, #4294967295
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	fbb8 f9f3 	udiv	r9, r8, r3
 800525e:	4676      	mov	r6, lr
 8005260:	fb03 8a19 	mls	sl, r3, r9, r8
 8005264:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005268:	f1bc 0f09 	cmp.w	ip, #9
 800526c:	d816      	bhi.n	800529c <_strtol_l.constprop.0+0xa4>
 800526e:	4664      	mov	r4, ip
 8005270:	42a3      	cmp	r3, r4
 8005272:	dd24      	ble.n	80052be <_strtol_l.constprop.0+0xc6>
 8005274:	f1be 3fff 	cmp.w	lr, #4294967295
 8005278:	d008      	beq.n	800528c <_strtol_l.constprop.0+0x94>
 800527a:	45b1      	cmp	r9, r6
 800527c:	d31c      	bcc.n	80052b8 <_strtol_l.constprop.0+0xc0>
 800527e:	d101      	bne.n	8005284 <_strtol_l.constprop.0+0x8c>
 8005280:	45a2      	cmp	sl, r4
 8005282:	db19      	blt.n	80052b8 <_strtol_l.constprop.0+0xc0>
 8005284:	fb06 4603 	mla	r6, r6, r3, r4
 8005288:	f04f 0e01 	mov.w	lr, #1
 800528c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005290:	e7e8      	b.n	8005264 <_strtol_l.constprop.0+0x6c>
 8005292:	2c2b      	cmp	r4, #43	; 0x2b
 8005294:	bf04      	itt	eq
 8005296:	782c      	ldrbeq	r4, [r5, #0]
 8005298:	1cb5      	addeq	r5, r6, #2
 800529a:	e7ca      	b.n	8005232 <_strtol_l.constprop.0+0x3a>
 800529c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80052a0:	f1bc 0f19 	cmp.w	ip, #25
 80052a4:	d801      	bhi.n	80052aa <_strtol_l.constprop.0+0xb2>
 80052a6:	3c37      	subs	r4, #55	; 0x37
 80052a8:	e7e2      	b.n	8005270 <_strtol_l.constprop.0+0x78>
 80052aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80052ae:	f1bc 0f19 	cmp.w	ip, #25
 80052b2:	d804      	bhi.n	80052be <_strtol_l.constprop.0+0xc6>
 80052b4:	3c57      	subs	r4, #87	; 0x57
 80052b6:	e7db      	b.n	8005270 <_strtol_l.constprop.0+0x78>
 80052b8:	f04f 3eff 	mov.w	lr, #4294967295
 80052bc:	e7e6      	b.n	800528c <_strtol_l.constprop.0+0x94>
 80052be:	f1be 3fff 	cmp.w	lr, #4294967295
 80052c2:	d105      	bne.n	80052d0 <_strtol_l.constprop.0+0xd8>
 80052c4:	2322      	movs	r3, #34	; 0x22
 80052c6:	6003      	str	r3, [r0, #0]
 80052c8:	4646      	mov	r6, r8
 80052ca:	b942      	cbnz	r2, 80052de <_strtol_l.constprop.0+0xe6>
 80052cc:	4630      	mov	r0, r6
 80052ce:	e79e      	b.n	800520e <_strtol_l.constprop.0+0x16>
 80052d0:	b107      	cbz	r7, 80052d4 <_strtol_l.constprop.0+0xdc>
 80052d2:	4276      	negs	r6, r6
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	d0f9      	beq.n	80052cc <_strtol_l.constprop.0+0xd4>
 80052d8:	f1be 0f00 	cmp.w	lr, #0
 80052dc:	d000      	beq.n	80052e0 <_strtol_l.constprop.0+0xe8>
 80052de:	1e69      	subs	r1, r5, #1
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	e7f3      	b.n	80052cc <_strtol_l.constprop.0+0xd4>
 80052e4:	2430      	movs	r4, #48	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1b1      	bne.n	800524e <_strtol_l.constprop.0+0x56>
 80052ea:	2308      	movs	r3, #8
 80052ec:	e7af      	b.n	800524e <_strtol_l.constprop.0+0x56>
 80052ee:	2c30      	cmp	r4, #48	; 0x30
 80052f0:	d0a5      	beq.n	800523e <_strtol_l.constprop.0+0x46>
 80052f2:	230a      	movs	r3, #10
 80052f4:	e7ab      	b.n	800524e <_strtol_l.constprop.0+0x56>
 80052f6:	bf00      	nop
 80052f8:	08005517 	.word	0x08005517

080052fc <_strtol_r>:
 80052fc:	f7ff bf7c 	b.w	80051f8 <_strtol_l.constprop.0>

08005300 <_strtoul_l.constprop.0>:
 8005300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005304:	4f36      	ldr	r7, [pc, #216]	; (80053e0 <_strtoul_l.constprop.0+0xe0>)
 8005306:	4686      	mov	lr, r0
 8005308:	460d      	mov	r5, r1
 800530a:	4628      	mov	r0, r5
 800530c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005310:	5d3e      	ldrb	r6, [r7, r4]
 8005312:	f016 0608 	ands.w	r6, r6, #8
 8005316:	d1f8      	bne.n	800530a <_strtoul_l.constprop.0+0xa>
 8005318:	2c2d      	cmp	r4, #45	; 0x2d
 800531a:	d130      	bne.n	800537e <_strtoul_l.constprop.0+0x7e>
 800531c:	782c      	ldrb	r4, [r5, #0]
 800531e:	2601      	movs	r6, #1
 8005320:	1c85      	adds	r5, r0, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d057      	beq.n	80053d6 <_strtoul_l.constprop.0+0xd6>
 8005326:	2b10      	cmp	r3, #16
 8005328:	d109      	bne.n	800533e <_strtoul_l.constprop.0+0x3e>
 800532a:	2c30      	cmp	r4, #48	; 0x30
 800532c:	d107      	bne.n	800533e <_strtoul_l.constprop.0+0x3e>
 800532e:	7828      	ldrb	r0, [r5, #0]
 8005330:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005334:	2858      	cmp	r0, #88	; 0x58
 8005336:	d149      	bne.n	80053cc <_strtoul_l.constprop.0+0xcc>
 8005338:	786c      	ldrb	r4, [r5, #1]
 800533a:	2310      	movs	r3, #16
 800533c:	3502      	adds	r5, #2
 800533e:	f04f 38ff 	mov.w	r8, #4294967295
 8005342:	2700      	movs	r7, #0
 8005344:	fbb8 f8f3 	udiv	r8, r8, r3
 8005348:	fb03 f908 	mul.w	r9, r3, r8
 800534c:	ea6f 0909 	mvn.w	r9, r9
 8005350:	4638      	mov	r0, r7
 8005352:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005356:	f1bc 0f09 	cmp.w	ip, #9
 800535a:	d815      	bhi.n	8005388 <_strtoul_l.constprop.0+0x88>
 800535c:	4664      	mov	r4, ip
 800535e:	42a3      	cmp	r3, r4
 8005360:	dd23      	ble.n	80053aa <_strtoul_l.constprop.0+0xaa>
 8005362:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005366:	d007      	beq.n	8005378 <_strtoul_l.constprop.0+0x78>
 8005368:	4580      	cmp	r8, r0
 800536a:	d31b      	bcc.n	80053a4 <_strtoul_l.constprop.0+0xa4>
 800536c:	d101      	bne.n	8005372 <_strtoul_l.constprop.0+0x72>
 800536e:	45a1      	cmp	r9, r4
 8005370:	db18      	blt.n	80053a4 <_strtoul_l.constprop.0+0xa4>
 8005372:	fb00 4003 	mla	r0, r0, r3, r4
 8005376:	2701      	movs	r7, #1
 8005378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800537c:	e7e9      	b.n	8005352 <_strtoul_l.constprop.0+0x52>
 800537e:	2c2b      	cmp	r4, #43	; 0x2b
 8005380:	bf04      	itt	eq
 8005382:	782c      	ldrbeq	r4, [r5, #0]
 8005384:	1c85      	addeq	r5, r0, #2
 8005386:	e7cc      	b.n	8005322 <_strtoul_l.constprop.0+0x22>
 8005388:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800538c:	f1bc 0f19 	cmp.w	ip, #25
 8005390:	d801      	bhi.n	8005396 <_strtoul_l.constprop.0+0x96>
 8005392:	3c37      	subs	r4, #55	; 0x37
 8005394:	e7e3      	b.n	800535e <_strtoul_l.constprop.0+0x5e>
 8005396:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800539a:	f1bc 0f19 	cmp.w	ip, #25
 800539e:	d804      	bhi.n	80053aa <_strtoul_l.constprop.0+0xaa>
 80053a0:	3c57      	subs	r4, #87	; 0x57
 80053a2:	e7dc      	b.n	800535e <_strtoul_l.constprop.0+0x5e>
 80053a4:	f04f 37ff 	mov.w	r7, #4294967295
 80053a8:	e7e6      	b.n	8005378 <_strtoul_l.constprop.0+0x78>
 80053aa:	1c7b      	adds	r3, r7, #1
 80053ac:	d106      	bne.n	80053bc <_strtoul_l.constprop.0+0xbc>
 80053ae:	2322      	movs	r3, #34	; 0x22
 80053b0:	f8ce 3000 	str.w	r3, [lr]
 80053b4:	4638      	mov	r0, r7
 80053b6:	b932      	cbnz	r2, 80053c6 <_strtoul_l.constprop.0+0xc6>
 80053b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053bc:	b106      	cbz	r6, 80053c0 <_strtoul_l.constprop.0+0xc0>
 80053be:	4240      	negs	r0, r0
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	d0f9      	beq.n	80053b8 <_strtoul_l.constprop.0+0xb8>
 80053c4:	b107      	cbz	r7, 80053c8 <_strtoul_l.constprop.0+0xc8>
 80053c6:	1e69      	subs	r1, r5, #1
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	e7f5      	b.n	80053b8 <_strtoul_l.constprop.0+0xb8>
 80053cc:	2430      	movs	r4, #48	; 0x30
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1b5      	bne.n	800533e <_strtoul_l.constprop.0+0x3e>
 80053d2:	2308      	movs	r3, #8
 80053d4:	e7b3      	b.n	800533e <_strtoul_l.constprop.0+0x3e>
 80053d6:	2c30      	cmp	r4, #48	; 0x30
 80053d8:	d0a9      	beq.n	800532e <_strtoul_l.constprop.0+0x2e>
 80053da:	230a      	movs	r3, #10
 80053dc:	e7af      	b.n	800533e <_strtoul_l.constprop.0+0x3e>
 80053de:	bf00      	nop
 80053e0:	08005517 	.word	0x08005517

080053e4 <_strtoul_r>:
 80053e4:	f7ff bf8c 	b.w	8005300 <_strtoul_l.constprop.0>

080053e8 <_malloc_usable_size_r>:
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f18      	subs	r0, r3, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfbc      	itt	lt
 80053f2:	580b      	ldrlt	r3, [r1, r0]
 80053f4:	18c0      	addlt	r0, r0, r3
 80053f6:	4770      	bx	lr

080053f8 <_init>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

08005404 <_fini>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr
