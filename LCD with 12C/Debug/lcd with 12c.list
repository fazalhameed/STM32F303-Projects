
lcd with 12c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003304  08003304  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003304  08003304  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003304  08003304  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800330c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0000007c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008401  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001974  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000828  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000627  00000000  00000000  0002a630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bf15  00000000  00000000  0002ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000adc6  00000000  00000000  00046b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a5cbe  00000000  00000000  00051932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000205c  00000000  00000000  000f75f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000f964c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003240 	.word	0x08003240

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003240 	.word	0x08003240

080001c8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80001d2:	4a38      	ldr	r2, [pc, #224]	; (80002b4 <HD44780_Init+0xec>)
 80001d4:	79fb      	ldrb	r3, [r7, #7]
 80001d6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80001d8:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <HD44780_Init+0xf0>)
 80001da:	2208      	movs	r2, #8
 80001dc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80001de:	4b37      	ldr	r3, [pc, #220]	; (80002bc <HD44780_Init+0xf4>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80001e4:	4b33      	ldr	r3, [pc, #204]	; (80002b4 <HD44780_Init+0xec>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d907      	bls.n	80001fc <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80001ec:	4b33      	ldr	r3, [pc, #204]	; (80002bc <HD44780_Init+0xf4>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	f043 0308 	orr.w	r3, r3, #8
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4b31      	ldr	r3, [pc, #196]	; (80002bc <HD44780_Init+0xf4>)
 80001f8:	701a      	strb	r2, [r3, #0]
 80001fa:	e006      	b.n	800020a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80001fc:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <HD44780_Init+0xf4>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <HD44780_Init+0xf4>)
 8000208:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800020a:	f000 f9fb 	bl	8000604 <DelayInit>
  HAL_Delay(50);
 800020e:	2032      	movs	r0, #50	; 0x32
 8000210:	f000 fd0a 	bl	8000c28 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000214:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <HD44780_Init+0xf0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f9b9 	bl	8000590 <ExpanderWrite>
  HAL_Delay(1000);
 800021e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000222:	f000 fd01 	bl	8000c28 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000226:	2030      	movs	r0, #48	; 0x30
 8000228:	f000 f9a0 	bl	800056c <Write4Bits>
  DelayUS(4500);
 800022c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000230:	f000 fa12 	bl	8000658 <DelayUS>

  Write4Bits(0x03 << 4);
 8000234:	2030      	movs	r0, #48	; 0x30
 8000236:	f000 f999 	bl	800056c <Write4Bits>
  DelayUS(4500);
 800023a:	f241 1094 	movw	r0, #4500	; 0x1194
 800023e:	f000 fa0b 	bl	8000658 <DelayUS>

  Write4Bits(0x03 << 4);
 8000242:	2030      	movs	r0, #48	; 0x30
 8000244:	f000 f992 	bl	800056c <Write4Bits>
  DelayUS(4500);
 8000248:	f241 1094 	movw	r0, #4500	; 0x1194
 800024c:	f000 fa04 	bl	8000658 <DelayUS>

  Write4Bits(0x02 << 4);
 8000250:	2020      	movs	r0, #32
 8000252:	f000 f98b 	bl	800056c <Write4Bits>
  DelayUS(100);
 8000256:	2064      	movs	r0, #100	; 0x64
 8000258:	f000 f9fe 	bl	8000658 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <HD44780_Init+0xf4>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f943 	bl	80004f2 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <HD44780_Init+0xf8>)
 800026e:	2204      	movs	r2, #4
 8000270:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000272:	f000 f88b 	bl	800038c <HD44780_Display>
  HD44780_Clear();
 8000276:	f000 f82b 	bl	80002d0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <HD44780_Init+0xfc>)
 800027c:	2202      	movs	r2, #2
 800027e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <HD44780_Init+0xfc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	f043 0304 	orr.w	r3, r3, #4
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f931 	bl	80004f2 <SendCommand>
  DelayUS(4500);
 8000290:	f241 1094 	movw	r0, #4500	; 0x1194
 8000294:	f000 f9e0 	bl	8000658 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000298:	490b      	ldr	r1, [pc, #44]	; (80002c8 <HD44780_Init+0x100>)
 800029a:	2000      	movs	r0, #0
 800029c:	f000 f8eb 	bl	8000476 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80002a0:	490a      	ldr	r1, [pc, #40]	; (80002cc <HD44780_Init+0x104>)
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 f8e7 	bl	8000476 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80002a8:	f000 f81d 	bl	80002e6 <HD44780_Home>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000003b 	.word	0x2000003b
 80002b8:	2000003c 	.word	0x2000003c
 80002bc:	20000038 	.word	0x20000038
 80002c0:	20000039 	.word	0x20000039
 80002c4:	2000003a 	.word	0x2000003a
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000008 	.word	0x20000008

080002d0 <HD44780_Clear>:

void HD44780_Clear()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f90c 	bl	80004f2 <SendCommand>
  DelayUS(2000);
 80002da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002de:	f000 f9bb 	bl	8000658 <DelayUS>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <HD44780_Home>:

void HD44780_Home()
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 f901 	bl	80004f2 <SendCommand>
  DelayUS(2000);
 80002f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f4:	f000 f9b0 	bl	8000658 <DelayUS>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b087      	sub	sp, #28
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	460a      	mov	r2, r1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <HD44780_SetCursor+0x5c>)
 800030e:	f107 0408 	add.w	r4, r7, #8
 8000312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <HD44780_SetCursor+0x60>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	79ba      	ldrb	r2, [r7, #6]
 800031e:	429a      	cmp	r2, r3
 8000320:	d303      	bcc.n	800032a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <HD44780_SetCursor+0x60>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	3b01      	subs	r3, #1
 8000328:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800032a:	79bb      	ldrb	r3, [r7, #6]
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	3318      	adds	r3, #24
 8000330:	443b      	add	r3, r7
 8000332:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000336:	b2da      	uxtb	r2, r3
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4413      	add	r3, r2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	b25b      	sxtb	r3, r3
 8000340:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000344:	b25b      	sxtb	r3, r3
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f8d2 	bl	80004f2 <SendCommand>
}
 800034e:	bf00      	nop
 8000350:	371c      	adds	r7, #28
 8000352:	46bd      	mov	sp, r7
 8000354:	bd90      	pop	{r4, r7, pc}
 8000356:	bf00      	nop
 8000358:	08003258 	.word	0x08003258
 800035c:	2000003b 	.word	0x2000003b

08000360 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <HD44780_NoDisplay+0x28>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	f023 0304 	bic.w	r3, r3, #4
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HD44780_NoDisplay+0x28>)
 8000370:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <HD44780_NoDisplay+0x28>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	b2db      	uxtb	r3, r3
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8b8 	bl	80004f2 <SendCommand>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000039 	.word	0x20000039

0800038c <HD44780_Display>:

void HD44780_Display()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HD44780_Display+0x28>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HD44780_Display+0x28>)
 800039c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <HD44780_Display+0x28>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f8a2 	bl	80004f2 <SendCommand>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000039 	.word	0x20000039

080003b8 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <HD44780_NoCursor+0x28>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	f023 0302 	bic.w	r3, r3, #2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HD44780_NoCursor+0x28>)
 80003c8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <HD44780_NoCursor+0x28>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f88c 	bl	80004f2 <SendCommand>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000039 	.word	0x20000039

080003e4 <HD44780_Cursor>:

void HD44780_Cursor()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <HD44780_Cursor+0x28>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <HD44780_Cursor+0x28>)
 80003f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <HD44780_Cursor+0x28>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f876 	bl	80004f2 <SendCommand>
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000039 	.word	0x20000039

08000410 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HD44780_NoBlink+0x28>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	f023 0301 	bic.w	r3, r3, #1
 800041c:	b2da      	uxtb	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HD44780_NoBlink+0x28>)
 8000420:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <HD44780_NoBlink+0x28>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f860 	bl	80004f2 <SendCommand>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000039 	.word	0x20000039

0800043c <HD44780_Blink>:

void HD44780_Blink()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <HD44780_Blink+0x28>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <HD44780_Blink+0x28>)
 800044c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <HD44780_Blink+0x28>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f84a 	bl	80004f2 <SendCommand>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000039 	.word	0x20000039

08000468 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 800046c:	2018      	movs	r0, #24
 800046e:	f000 f840 	bl	80004f2 <SendCommand>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}

08000476 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b084      	sub	sp, #16
 800047a:	af00      	add	r7, sp, #0
 800047c:	4603      	mov	r3, r0
 800047e:	6039      	str	r1, [r7, #0]
 8000480:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 0307 	and.w	r3, r3, #7
 8000488:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	b25b      	sxtb	r3, r3
 8000490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000494:	b25b      	sxtb	r3, r3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f82a 	bl	80004f2 <SendCommand>
  for (int i=0; i<8; i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	e009      	b.n	80004b8 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	4413      	add	r3, r2
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f82e 	bl	800050e <SendChar>
  for (int i=0; i<8; i++)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	3301      	adds	r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2b07      	cmp	r3, #7
 80004bc:	ddf2      	ble.n	80004a4 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80004d0:	e006      	b.n	80004e0 <HD44780_PrintStr+0x18>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 f817 	bl	800050e <SendChar>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1f4      	bne.n	80004d2 <HD44780_PrintStr+0xa>
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f812 	bl	800052a <Send>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <SendChar>:

static void SendChar(uint8_t ch)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2101      	movs	r1, #1
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f804 	bl	800052a <Send>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	460a      	mov	r2, r1
 8000534:	71fb      	strb	r3, [r7, #7]
 8000536:	4613      	mov	r3, r2
 8000538:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f023 030f 	bic.w	r3, r3, #15
 8000540:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000548:	7bfa      	ldrb	r2, [r7, #15]
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	4313      	orrs	r3, r2
 800054e:	b2db      	uxtb	r3, r3
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f80b 	bl	800056c <Write4Bits>
  Write4Bits((lownib)|mode);
 8000556:	7bba      	ldrb	r2, [r7, #14]
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	4313      	orrs	r3, r2
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f804 	bl	800056c <Write4Bits>
}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f809 	bl	8000590 <ExpanderWrite>
  PulseEnable(value);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f821 	bl	80005c8 <PulseEnable>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <ExpanderWrite+0x30>)
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80005a6:	f107 020f 	add.w	r2, r7, #15
 80005aa:	230a      	movs	r3, #10
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	214e      	movs	r1, #78	; 0x4e
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <ExpanderWrite+0x34>)
 80005b4:	f000 fe4c 	bl	8001250 <HAL_I2C_Master_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000003c 	.word	0x2000003c
 80005c4:	20000040 	.word	0x20000040

080005c8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ffd8 	bl	8000590 <ExpanderWrite>
  DelayUS(20);
 80005e0:	2014      	movs	r0, #20
 80005e2:	f000 f839 	bl	8000658 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f023 0304 	bic.w	r3, r3, #4
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffce 	bl	8000590 <ExpanderWrite>
  DelayUS(20);
 80005f4:	2014      	movs	r0, #20
 80005f6:	f000 f82f 	bl	8000658 <DelayUS>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <DelayInit>:

static void DelayInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <DelayInit+0x4c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a10      	ldr	r2, [pc, #64]	; (8000650 <DelayInit+0x4c>)
 800060e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000612:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <DelayInit+0x4c>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <DelayInit+0x4c>)
 800061a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800061e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <DelayInit+0x50>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <DelayInit+0x50>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <DelayInit+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <DelayInit+0x50>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <DelayInit+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800063e:	bf00      	nop
  __ASM volatile ("NOP");
 8000640:	bf00      	nop
  __ASM volatile ("NOP");
 8000642:	bf00      	nop
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000edf0 	.word	0xe000edf0
 8000654:	e0001000 	.word	0xe0001000

08000658 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <DelayUS+0x44>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <DelayUS+0x48>)
 8000666:	fba2 2303 	umull	r2, r3, r2, r3
 800066a:	0c9a      	lsrs	r2, r3, #18
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <DelayUS+0x4c>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <DelayUS+0x4c>)
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f6      	bhi.n	800067a <DelayUS+0x22>
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000010 	.word	0x20000010
 80006a0:	431bde83 	.word	0x431bde83
 80006a4:	e0001000 	.word	0xe0001000

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fa55 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f895 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f92f 	bl	8000918 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ba:	f000 f8ed 	bl	8000898 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 80006be:	2002      	movs	r0, #2
 80006c0:	f7ff fd82 	bl	80001c8 <HD44780_Init>
   HD44780_Clear();
 80006c4:	f7ff fe04 	bl	80002d0 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80006c8:	2100      	movs	r1, #0
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe16 	bl	80002fc <HD44780_SetCursor>
   HD44780_PrintStr("HELLO");
 80006d0:	483e      	ldr	r0, [pc, #248]	; (80007cc <main+0x124>)
 80006d2:	f7ff fef9 	bl	80004c8 <HD44780_PrintStr>
   HD44780_SetCursor(10,1);
 80006d6:	2101      	movs	r1, #1
 80006d8:	200a      	movs	r0, #10
 80006da:	f7ff fe0f 	bl	80002fc <HD44780_SetCursor>
   HD44780_PrintStr("WORLD");
 80006de:	483c      	ldr	r0, [pc, #240]	; (80007d0 <main+0x128>)
 80006e0:	f7ff fef2 	bl	80004c8 <HD44780_PrintStr>
   HAL_Delay(2000);
 80006e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e8:	f000 fa9e 	bl	8000c28 <HAL_Delay>

   HD44780_Clear();
 80006ec:	f7ff fdf0 	bl	80002d0 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2000      	movs	r0, #0
 80006f4:	f7ff fe02 	bl	80002fc <HD44780_SetCursor>
   HD44780_PrintStr("ENGR_Fazal");
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <main+0x12c>)
 80006fa:	f7ff fee5 	bl	80004c8 <HD44780_PrintStr>
   HD44780_SetCursor(10,1);
 80006fe:	2101      	movs	r1, #1
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fdfb 	bl	80002fc <HD44780_SetCursor>
   HD44780_PrintStr("Hameed");
 8000706:	4834      	ldr	r0, [pc, #208]	; (80007d8 <main+0x130>)
 8000708:	f7ff fede 	bl	80004c8 <HD44780_PrintStr>
   //HD44780_NoBacklight();
   //HAL_Delay(2000);
   //HD44780_Backlight();

   HAL_Delay(2000);
 800070c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000710:	f000 fa8a 	bl	8000c28 <HAL_Delay>
   HD44780_Cursor();
 8000714:	f7ff fe66 	bl	80003e4 <HD44780_Cursor>
   HAL_Delay(2000);
 8000718:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800071c:	f000 fa84 	bl	8000c28 <HAL_Delay>
   HD44780_Blink();
 8000720:	f7ff fe8c 	bl	800043c <HD44780_Blink>
   HAL_Delay(5000);
 8000724:	f241 3088 	movw	r0, #5000	; 0x1388
 8000728:	f000 fa7e 	bl	8000c28 <HAL_Delay>
   HD44780_NoBlink();
 800072c:	f7ff fe70 	bl	8000410 <HD44780_NoBlink>
   HAL_Delay(2000);
 8000730:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000734:	f000 fa78 	bl	8000c28 <HAL_Delay>
   HD44780_NoCursor();
 8000738:	f7ff fe3e 	bl	80003b8 <HD44780_NoCursor>
   HAL_Delay(2000);
 800073c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000740:	f000 fa72 	bl	8000c28 <HAL_Delay>

   HD44780_NoDisplay();
 8000744:	f7ff fe0c 	bl	8000360 <HD44780_NoDisplay>
   HAL_Delay(2000);
 8000748:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074c:	f000 fa6c 	bl	8000c28 <HAL_Delay>
   HD44780_Display();
 8000750:	f7ff fe1c 	bl	800038c <HD44780_Display>

   HD44780_Clear();
 8000754:	f7ff fdbc 	bl	80002d0 <HD44780_Clear>
   HD44780_SetCursor(0,0);
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff fdce 	bl	80002fc <HD44780_SetCursor>
   HD44780_PrintStr("(-:Chip Soul SMC PVT LTD :-)");
 8000760:	481e      	ldr	r0, [pc, #120]	; (80007dc <main+0x134>)
 8000762:	f7ff feb1 	bl	80004c8 <HD44780_PrintStr>
   HAL_Delay(2000);
 8000766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076a:	f000 fa5d 	bl	8000c28 <HAL_Delay>

   int x;
   for(int x=0; x<40; x=x+1)
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e008      	b.n	8000786 <main+0xde>
   {
     HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000774:	f7ff fe78 	bl	8000468 <HD44780_ScrollDisplayLeft>
     HAL_Delay(800);
 8000778:	f44f 7048 	mov.w	r0, #800	; 0x320
 800077c:	f000 fa54 	bl	8000c28 <HAL_Delay>
   for(int x=0; x<40; x=x+1)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b27      	cmp	r3, #39	; 0x27
 800078a:	ddf3      	ble.n	8000774 <main+0xcc>
   }

   char snum[5];
   for ( int x = 1; x <= 400 ; x++ )
 800078c:	2301      	movs	r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	e016      	b.n	80007c0 <main+0x118>
   {
     itoa(x, snum, 10);
 8000792:	463b      	mov	r3, r7
 8000794:	220a      	movs	r2, #10
 8000796:	4619      	mov	r1, r3
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f002 fce1 	bl	8003160 <itoa>
     HD44780_Clear();
 800079e:	f7ff fd97 	bl	80002d0 <HD44780_Clear>
     HD44780_SetCursor(0,0);
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fda9 	bl	80002fc <HD44780_SetCursor>
     HD44780_PrintStr(snum);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fe8b 	bl	80004c8 <HD44780_PrintStr>
     HAL_Delay (1000);
 80007b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b6:	f000 fa37 	bl	8000c28 <HAL_Delay>
   for ( int x = 1; x <= 400 ; x++ )
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3301      	adds	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007c6:	dde4      	ble.n	8000792 <main+0xea>
   }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x120>
 80007ca:	bf00      	nop
 80007cc:	08003268 	.word	0x08003268
 80007d0:	08003270 	.word	0x08003270
 80007d4:	08003278 	.word	0x08003278
 80007d8:	08003284 	.word	0x08003284
 80007dc:	0800328c 	.word	0x0800328c

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09e      	sub	sp, #120	; 0x78
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fcfa 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	223c      	movs	r2, #60	; 0x3c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f002 fcec 	bl	80031e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000810:	2303      	movs	r3, #3
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081e:	2301      	movs	r3, #1
 8000820:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000822:	2310      	movs	r3, #16
 8000824:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000830:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000834:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800083a:	4618      	mov	r0, r3
 800083c:	f001 f8a4 	bl	8001988 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000846:	f000 f897 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f8cc 	bl	8002a04 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000872:	f000 f881 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000876:	2320      	movs	r3, #32
 8000878:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4618      	mov	r0, r3
 8000882:	f002 faa5 	bl	8002dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800088c:	f000 f874 	bl	8000978 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3778      	adds	r7, #120	; 0x78
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_I2C1_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <MX_I2C1_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_I2C1_Init+0x74>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <MX_I2C1_Init+0x7c>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_I2C1_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_I2C1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_I2C1_Init+0x74>)
 80008d4:	f000 fc2c 	bl	8001130 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 f84b 	bl	8000978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <MX_I2C1_Init+0x74>)
 80008e6:	f000 ffb7 	bl	8001858 <HAL_I2CEx_ConfigAnalogFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 f842 	bl	8000978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2C1_Init+0x74>)
 80008f8:	f000 fff9 	bl	80018ee <HAL_I2CEx_ConfigDigitalFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f839 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000040 	.word	0x20000040
 8000910:	40005400 	.word	0x40005400
 8000914:	2000090e 	.word	0x2000090e

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_GPIO_Init+0x5c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <MX_GPIO_Init+0x5c>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	6153      	str	r3, [r2, #20]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <MX_GPIO_Init+0x5c>)
 8000954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_GPIO_Init+0x5c>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x44>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_MspInit+0x44>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x44>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_MspInit+0x44>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_MspInit+0x44>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <HAL_I2C_MspInit+0xb8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d145      	bne.n	8000a7a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a25      	ldr	r2, [pc, #148]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 f9fd 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a46:	2312      	movs	r3, #18
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <HAL_I2C_MspInit+0xc0>)
 8000a5e:	f000 f9ed 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000400 	.word	0x48000400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f884 	bl	8000be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b0c:	f7ff ffea 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fb5f 	bl	80031f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3a:	f7ff fdb5 	bl	80006a8 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b4c:	0800330c 	.word	0x0800330c
  ldr r2, =_sbss
 8000b50:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b54:	20000098 	.word	0x20000098

08000b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_2_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x28>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f931 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f808 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff ff04 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40022000 	.word	0x40022000

08000b88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_InitTick+0x54>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x58>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f93b 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00e      	b.n	8000bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d80a      	bhi.n	8000bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f911 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <HAL_InitTick+0x5c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	20000018 	.word	0x20000018
 8000be4:	20000014 	.word	0x20000014

08000be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x20>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x24>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_IncTick+0x24>)
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000018 	.word	0x20000018
 8000c0c:	20000094 	.word	0x20000094

08000c10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <HAL_GetTick+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000094 	.word	0x20000094

08000c28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff ffee 	bl	8000c10 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffde 	bl	8000c10 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000018 	.word	0x20000018

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff47 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff5c 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff8e 	bl	8000d28 <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5d 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffb0 	bl	8000d90 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e154      	b.n	80010f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8146 	beq.w	80010f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80a0 	beq.w	80010f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a57      	ldr	r2, [pc, #348]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b55      	ldr	r3, [pc, #340]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <HAL_GPIO_Init+0x2dc>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff2:	d019      	beq.n	8001028 <HAL_GPIO_Init+0x1ec>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2e0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1e0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2ec>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1dc>
 8001014:	2304      	movs	r3, #4
 8001016:	e008      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001018:	2305      	movs	r3, #5
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 800101c:	2303      	movs	r3, #3
 800101e:	e004      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001020:	2302      	movs	r3, #2
 8001022:	e002      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <HAL_GPIO_Init+0x1ee>
 8001028:	2300      	movs	r3, #0
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	f002 0203 	and.w	r2, r2, #3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	4093      	lsls	r3, r2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103a:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2dc>)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800106c:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001096:	4a25      	ldr	r2, [pc, #148]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_GPIO_Init+0x2f0>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_GPIO_Init+0x2f0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	f47f aea3 	bne.w	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e081      	b.n	8001246 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d106      	bne.n	800115c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fc38 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001180:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001190:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d104      	bne.n	80011ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69d9      	ldr	r1, [r3, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1a      	ldr	r2, [r3, #32]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2220      	movs	r2, #32
 8001232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	460b      	mov	r3, r1
 800125e:	817b      	strh	r3, [r7, #10]
 8001260:	4613      	mov	r3, r2
 8001262:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b20      	cmp	r3, #32
 800126e:	f040 80da 	bne.w	8001426 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_I2C_Master_Transmit+0x30>
 800127c:	2302      	movs	r3, #2
 800127e:	e0d3      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001288:	f7ff fcc2 	bl	8000c10 <HAL_GetTick>
 800128c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2319      	movs	r3, #25
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f8f0 	bl	8001480 <I2C_WaitOnFlagUntilTimeout>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0be      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2221      	movs	r2, #33	; 0x21
 80012ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2210      	movs	r2, #16
 80012b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	893a      	ldrh	r2, [r7, #8]
 80012ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2bff      	cmp	r3, #255	; 0xff
 80012da:	d90e      	bls.n	80012fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	8979      	ldrh	r1, [r7, #10]
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <HAL_I2C_Master_Transmit+0x1e0>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 fa7e 	bl	80017f4 <I2C_TransferConfig>
 80012f8:	e06c      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	b2da      	uxtb	r2, r3
 800130a:	8979      	ldrh	r1, [r7, #10]
 800130c:	4b48      	ldr	r3, [pc, #288]	; (8001430 <HAL_I2C_Master_Transmit+0x1e0>)
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f000 fa6d 	bl	80017f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800131a:	e05b      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	6a39      	ldr	r1, [r7, #32]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f8fc 	bl	800151e <I2C_WaitOnTXISFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e07b      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	3b01      	subs	r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d034      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0x184>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800136e:	2b00      	cmp	r3, #0
 8001370:	d130      	bne.n	80013d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2200      	movs	r2, #0
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f87f 	bl	8001480 <I2C_WaitOnFlagUntilTimeout>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e04d      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001390:	b29b      	uxth	r3, r3
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d90e      	bls.n	80013b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	22ff      	movs	r2, #255	; 0xff
 800139a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	8979      	ldrh	r1, [r7, #10]
 80013a4:	2300      	movs	r3, #0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 fa21 	bl	80017f4 <I2C_TransferConfig>
 80013b2:	e00f      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	8979      	ldrh	r1, [r7, #10]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fa10 	bl	80017f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d19e      	bne.n	800131c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	6a39      	ldr	r1, [r7, #32]
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 f8e2 	bl	80015ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e01a      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2220      	movs	r2, #32
 80013f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6859      	ldr	r1, [r3, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_I2C_Master_Transmit+0x1e4>)
 8001406:	400b      	ands	r3, r1
 8001408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
  }
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	80002000 	.word	0x80002000
 8001434:	fe00e800 	.word	0xfe00e800

08001438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b02      	cmp	r3, #2
 800144c:	d103      	bne.n	8001456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d007      	beq.n	8001474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	619a      	str	r2, [r3, #24]
  }
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001490:	e031      	b.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d02d      	beq.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149a:	f7ff fbb9 	bl	8000c10 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d302      	bcc.n	80014b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d122      	bne.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4013      	ands	r3, r2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d113      	bne.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4013      	ands	r3, r2
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	bf0c      	ite	eq
 8001506:	2301      	moveq	r3, #1
 8001508:	2300      	movne	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	429a      	cmp	r2, r3
 8001512:	d0be      	beq.n	8001492 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800152a:	e033      	b.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 f87f 	bl	8001634 <I2C_IsErrorOccurred>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e031      	b.n	80015a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d025      	beq.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001548:	f7ff fb62 	bl	8000c10 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d302      	bcc.n	800155e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11a      	bne.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b02      	cmp	r3, #2
 800156a:	d013      	beq.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e007      	b.n	80015a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d1c4      	bne.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015b8:	e02f      	b.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 f838 	bl	8001634 <I2C_IsErrorOccurred>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e02d      	b.n	800162a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ce:	f7ff fb1f 	bl	8000c10 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d302      	bcc.n	80015e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11a      	bne.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d013      	beq.n	800161a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f043 0220 	orr.w	r2, r3, #32
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e007      	b.n	800162a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b20      	cmp	r3, #32
 8001626:	d1c8      	bne.n	80015ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b00      	cmp	r3, #0
 800165e:	d068      	beq.n	8001732 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2210      	movs	r2, #16
 8001666:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001668:	e049      	b.n	80016fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d045      	beq.n	80016fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001672:	f7ff facd 	bl	8000c10 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	429a      	cmp	r2, r3
 8001680:	d302      	bcc.n	8001688 <I2C_IsErrorOccurred+0x54>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d13a      	bne.n	80016fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800169a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016aa:	d121      	bne.n	80016f0 <I2C_IsErrorOccurred+0xbc>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b2:	d01d      	beq.n	80016f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80016b4:	7cfb      	ldrb	r3, [r7, #19]
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	d01a      	beq.n	80016f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016ca:	f7ff faa1 	bl	8000c10 <HAL_GetTick>
 80016ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d0:	e00e      	b.n	80016f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016d2:	f7ff fa9d 	bl	8000c10 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b19      	cmp	r3, #25
 80016de:	d907      	bls.n	80016f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f043 0320 	orr.w	r3, r3, #32
 80016e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80016ee:	e006      	b.n	80016fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d1e9      	bne.n	80016d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b20      	cmp	r3, #32
 800170a:	d003      	beq.n	8001714 <I2C_IsErrorOccurred+0xe0>
 800170c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0aa      	beq.n	800166a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001718:	2b00      	cmp	r3, #0
 800171a:	d103      	bne.n	8001724 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2220      	movs	r2, #32
 8001722:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01c      	beq.n	80017e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7ff fe45 	bl	8001438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <I2C_IsErrorOccurred+0x1bc>)
 80017ba:	400b      	ands	r3, r1
 80017bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80017e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	fe00e800 	.word	0xfe00e800

080017f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	817b      	strh	r3, [r7, #10]
 8001802:	4613      	mov	r3, r2
 8001804:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800180c:	7a7b      	ldrb	r3, [r7, #9]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001814:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	4313      	orrs	r3, r2
 800181e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001822:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	0d5b      	lsrs	r3, r3, #21
 800182e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <I2C_TransferConfig+0x60>)
 8001834:	430b      	orrs	r3, r1
 8001836:	43db      	mvns	r3, r3
 8001838:	ea02 0103 	and.w	r1, r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	03ff63ff 	.word	0x03ff63ff

08001858 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b20      	cmp	r3, #32
 800186c:	d138      	bne.n	80018e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001878:	2302      	movs	r3, #2
 800187a:	e032      	b.n	80018e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	; 0x24
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
  }
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b20      	cmp	r3, #32
 8001902:	d139      	bne.n	8001978 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800190e:	2302      	movs	r3, #2
 8001910:	e033      	b.n	800197a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2224      	movs	r2, #36	; 0x24
 800191e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001940:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	e000      	b.n	800197a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001978:	2302      	movs	r3, #2
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800198e:	af00      	add	r7, sp, #0
 8001990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001998:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f001 b823 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 817d 	beq.w	8001cbe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019c4:	4bbc      	ldr	r3, [pc, #752]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4bb9      	ldr	r3, [pc, #740]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d15c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x10e>
 80019dc:	4bb6      	ldr	r3, [pc, #728]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d155      	bne.n	8001a96 <HAL_RCC_OscConfig+0x10e>
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d102      	bne.n	8001a1c <HAL_RCC_OscConfig+0x94>
 8001a16:	4ba8      	ldr	r3, [pc, #672]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e015      	b.n	8001a48 <HAL_RCC_OscConfig+0xc0>
 8001a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a44:	4b9c      	ldr	r3, [pc, #624]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a54:	fa92 f2a2 	rbit	r2, r2
 8001a58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 811f 	beq.w	8001cbc <HAL_RCC_OscConfig+0x334>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8116 	bne.w	8001cbc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f000 bfaf 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
 8001aa8:	4b83      	ldr	r3, [pc, #524]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a82      	ldr	r2, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e036      	b.n	8001b24 <HAL_RCC_OscConfig+0x19c>
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x158>
 8001ac6:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7b      	ldr	r2, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a78      	ldr	r2, [pc, #480]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e021      	b.n	8001b24 <HAL_RCC_OscConfig+0x19c>
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x184>
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a70      	ldr	r2, [pc, #448]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6d      	ldr	r2, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x19c>
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	f023 020f 	bic.w	r2, r3, #15
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	495f      	ldr	r1, [pc, #380]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d059      	beq.n	8001c02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f85f 	bl	8000c10 <HAL_GetTick>
 8001b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f85a 	bl	8000c10 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	; 0x64
 8001b66:	d902      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f000 bf43 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 8001b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b7a:	fa93 f3a3 	rbit	r3, r3
 8001b7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x218>
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_OscConfig+0x244>
 8001ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bd8:	fa92 f2a2 	rbit	r2, r2
 8001bdc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001be0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ab      	beq.n	8001b58 <HAL_RCC_OscConfig+0x1d0>
 8001c00:	e05d      	b.n	8001cbe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f805 	bl	8000c10 <HAL_GetTick>
 8001c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff f800 	bl	8000c10 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d902      	bls.n	8001c22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	f000 bee9 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 8001c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2cc>
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	e015      	b.n	8001c80 <HAL_RCC_OscConfig+0x2f8>
 8001c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_RCC_OscConfig+0x330>)
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c8c:	fa92 f2a2 	rbit	r2, r2
 8001c90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c98:	fab2 f282 	clz	r2, r2
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f002 021f 	and.w	r2, r2, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ab      	bne.n	8001c0c <HAL_RCC_OscConfig+0x284>
 8001cb4:	e003      	b.n	8001cbe <HAL_RCC_OscConfig+0x336>
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 817d 	beq.w	8001fce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cd4:	4ba6      	ldr	r3, [pc, #664]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ce0:	4ba3      	ldr	r3, [pc, #652]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d172      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
 8001cec:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d16c      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x44a>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d102      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3a0>
 8001d22:	4b93      	ldr	r3, [pc, #588]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e013      	b.n	8001d50 <HAL_RCC_OscConfig+0x3c8>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d32:	fa93 f3a3 	rbit	r3, r3
 8001d36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2202      	movs	r2, #2
 8001d52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d5a:	fa92 f2a2 	rbit	r2, r2
 8001d5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f042 0220 	orr.w	r2, r2, #32
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f002 021f 	and.w	r2, r2, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_RCC_OscConfig+0x410>
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f000 be2e 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b75      	ldr	r3, [pc, #468]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	21f8      	movs	r1, #248	; 0xf8
 8001dae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001db6:	fa91 f1a1 	rbit	r1, r1
 8001dba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dc2:	fab1 f181 	clz	r1, r1
 8001dc6:	b2c9      	uxtb	r1, r1
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	4969      	ldr	r1, [pc, #420]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd0:	e0fd      	b.n	8001fce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8088 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x56c>
 8001de4:	2301      	movs	r3, #1
 8001de6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001df6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fefe 	bl	8000c10 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7fe fef9 	bl	8000c10 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d902      	bls.n	8001e30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f000 bde2 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4d8>
 8001e5a:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x500>
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e84:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f002 021f 	and.w	r2, r2, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0af      	beq.n	8001e1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	21f8      	movs	r1, #248	; 0xf8
 8001ed0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ed8:	fa91 f1a1 	rbit	r1, r1
 8001edc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ee0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ee4:	fab1 f181 	clz	r1, r1
 8001ee8:	b2c9      	uxtb	r1, r1
 8001eea:	408b      	lsls	r3, r1
 8001eec:	4920      	ldr	r1, [pc, #128]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
 8001ef2:	e06c      	b.n	8001fce <HAL_RCC_OscConfig+0x646>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe76 	bl	8000c10 <HAL_GetTick>
 8001f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe fe71 	bl	8000c10 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d902      	bls.n	8001f40 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	f000 bd5a 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d104      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5ec>
 8001f6a:	4b01      	ldr	r3, [pc, #4]	; (8001f70 <HAL_RCC_OscConfig+0x5e8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_OscConfig+0x614>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f98:	4bc8      	ldr	r3, [pc, #800]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fa2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fa6:	fa92 f2a2 	rbit	r2, r2
 8001faa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ad      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8110 	beq.w	8002204 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d079      	beq.n	80020e8 <HAL_RCC_OscConfig+0x760>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4bab      	ldr	r3, [pc, #684]	; (80022c0 <HAL_RCC_OscConfig+0x938>)
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	461a      	mov	r2, r3
 800201a:	2301      	movs	r3, #1
 800201c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201e:	f7fe fdf7 	bl	8000c10 <HAL_GetTick>
 8002022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fdf2 	bl	8000c10 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d902      	bls.n	800203e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	f000 bcdb 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002058:	2202      	movs	r2, #2
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800207c:	2202      	movs	r2, #2
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f2a3 	rbit	r2, r3
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002096:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002098:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 800209a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020a4:	2102      	movs	r1, #2
 80020a6:	6019      	str	r1, [r3, #0]
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f1a3 	rbit	r1, r3
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020be:	6019      	str	r1, [r3, #0]
  return result;
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0a0      	beq.n	8002028 <HAL_RCC_OscConfig+0x6a0>
 80020e6:	e08d      	b.n	8002204 <HAL_RCC_OscConfig+0x87c>
 80020e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800210a:	601a      	str	r2, [r3, #0]
  return result;
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002114:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x938>)
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	461a      	mov	r2, r3
 8002126:	2300      	movs	r3, #0
 8002128:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7fe fd71 	bl	8000c10 <HAL_GetTick>
 800212e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002132:	e00a      	b.n	800214a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002134:	f7fe fd6c 	bl	8000c10 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d902      	bls.n	800214a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	f000 bc55 	b.w	80029f4 <HAL_RCC_OscConfig+0x106c>
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002152:	2202      	movs	r2, #2
 8002154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	fa93 f2a3 	rbit	r2, r3
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002176:	2202      	movs	r2, #2
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800219a:	2202      	movs	r2, #2
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f2a3 	rbit	r2, r3
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80021b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 80021b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021c2:	2102      	movs	r1, #2
 80021c4:	6019      	str	r1, [r3, #0]
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f1a3 	rbit	r1, r3
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021dc:	6019      	str	r1, [r3, #0]
  return result;
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d197      	bne.n	8002134 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 81a1 	beq.w	800255c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d116      	bne.n	800225a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	61d3      	str	r3, [r2, #28]
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002244:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002252:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_RCC_OscConfig+0x93c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11a      	bne.n	800229c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x93c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_RCC_OscConfig+0x93c>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7fe fccd 	bl	8000c10 <HAL_GetTick>
 8002276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	e009      	b.n	8002290 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fcc8 	bl	8000c10 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e3b1      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_RCC_OscConfig+0x93c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0ef      	beq.n	800227c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10d      	bne.n	80022c8 <HAL_RCC_OscConfig+0x940>
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCC_OscConfig+0x934>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e03c      	b.n	8002334 <HAL_RCC_OscConfig+0x9ac>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	10908120 	.word	0x10908120
 80022c4:	40007000 	.word	0x40007000
 80022c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x96a>
 80022d8:	4bc1      	ldr	r3, [pc, #772]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4ac0      	ldr	r2, [pc, #768]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4bbe      	ldr	r3, [pc, #760]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4abd      	ldr	r2, [pc, #756]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e020      	b.n	8002334 <HAL_RCC_OscConfig+0x9ac>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b05      	cmp	r3, #5
 8002300:	d10c      	bne.n	800231c <HAL_RCC_OscConfig+0x994>
 8002302:	4bb7      	ldr	r3, [pc, #732]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4ab6      	ldr	r2, [pc, #728]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	4bb4      	ldr	r3, [pc, #720]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4ab3      	ldr	r2, [pc, #716]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	e00b      	b.n	8002334 <HAL_RCC_OscConfig+0x9ac>
 800231c:	4bb0      	ldr	r3, [pc, #704]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4aaf      	ldr	r2, [pc, #700]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6213      	str	r3, [r2, #32]
 8002328:	4bad      	ldr	r3, [pc, #692]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4aac      	ldr	r2, [pc, #688]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 800232e:	f023 0304 	bic.w	r3, r3, #4
 8002332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8081 	beq.w	8002448 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe fc63 	bl	8000c10 <HAL_GetTick>
 800234a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fc5e 	bl	8000c10 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e345      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	fa93 f2a3 	rbit	r2, r3
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002390:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002394:	2202      	movs	r2, #2
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023ae:	601a      	str	r2, [r3, #0]
  return result;
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80023b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0xa4c>
 80023ce:	4b84      	ldr	r3, [pc, #528]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	e013      	b.n	80023fc <HAL_RCC_OscConfig+0xa74>
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002400:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002404:	2102      	movs	r1, #2
 8002406:	6011      	str	r1, [r2, #0]
 8002408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800240c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	fa92 f1a2 	rbit	r1, r2
 8002416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800241a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800241e:	6011      	str	r1, [r2, #0]
  return result;
 8002420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002424:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d084      	beq.n	8002350 <HAL_RCC_OscConfig+0x9c8>
 8002446:	e07f      	b.n	8002548 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fbe2 	bl	8000c10 <HAL_GetTick>
 800244c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fbdd 	bl	8000c10 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e2c4      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
 800246a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002488:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002496:	2202      	movs	r2, #2
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024b0:	601a      	str	r2, [r3, #0]
  return result;
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80024ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0xb4e>
 80024d0:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	e013      	b.n	80024fe <HAL_RCC_OscConfig+0xb76>
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024de:	2202      	movs	r2, #2
 80024e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002502:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002506:	2102      	movs	r1, #2
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800250e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fa92 f1a2 	rbit	r1, r2
 8002518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002520:	6011      	str	r1, [r2, #0]
  return result;
 8002522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002526:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f002 021f 	and.w	r2, r2, #31
 800253c:	2101      	movs	r1, #1
 800253e:	fa01 f202 	lsl.w	r2, r1, r2
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d184      	bne.n	8002452 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002548:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002550:	4b23      	ldr	r3, [pc, #140]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8242 	beq.w	80029f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_RCC_OscConfig+0xc58>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b08      	cmp	r3, #8
 8002578:	f000 8213 	beq.w	80029a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	f040 8162 	bne.w	8002852 <HAL_RCC_OscConfig+0xeca>
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025b2:	601a      	str	r2, [r3, #0]
  return result;
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80025bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	461a      	mov	r2, r3
 80025d0:	2300      	movs	r3, #0
 80025d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb1c 	bl	8000c10 <HAL_GetTick>
 80025d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e00c      	b.n	80025f8 <HAL_RCC_OscConfig+0xc70>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fb14 	bl	8000c10 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1fd      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002626:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_OscConfig+0xcba>
 800263c:	4bb0      	ldr	r3, [pc, #704]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e027      	b.n	8002692 <HAL_RCC_OscConfig+0xd0a>
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800264a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4b9c      	ldr	r3, [pc, #624]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002696:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800269a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800269e:	6011      	str	r1, [r2, #0]
 80026a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	fa92 f1a2 	rbit	r1, r2
 80026ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026b6:	6011      	str	r1, [r2, #0]
  return result;
 80026b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d182      	bne.n	80025e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	430b      	orrs	r3, r1
 8002700:	497f      	ldr	r1, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800270e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800272a:	601a      	str	r2, [r3, #0]
  return result;
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002734:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	461a      	mov	r2, r3
 8002748:	2301      	movs	r3, #1
 800274a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fa60 	bl	8000c10 <HAL_GetTick>
 8002750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	e009      	b.n	800276a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fa5b 	bl	8000c10 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e144      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800278e:	601a      	str	r2, [r3, #0]
  return result;
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0xe2c>
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e027      	b.n	8002804 <HAL_RCC_OscConfig+0xe7c>
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002808:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800280c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002810:	6011      	str	r1, [r2, #0]
 8002812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002816:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fa92 f1a2 	rbit	r1, r2
 8002820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002824:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002828:	6011      	str	r1, [r2, #0]
  return result;
 800282a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800282e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	fab2 f282 	clz	r2, r2
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	f042 0220 	orr.w	r2, r2, #32
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	f002 021f 	and.w	r2, r2, #31
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d082      	beq.n	8002756 <HAL_RCC_OscConfig+0xdce>
 8002850:	e0cf      	b.n	80029f2 <HAL_RCC_OscConfig+0x106a>
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800285a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800285e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	fa93 f2a3 	rbit	r2, r3
 800286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002872:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002880:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800288c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	461a      	mov	r2, r3
 8002894:	2300      	movs	r3, #0
 8002896:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe f9ba 	bl	8000c10 <HAL_GetTick>
 800289c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fe f9b5 	bl	8000c10 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e09e      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80028e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d104      	bne.n	8002904 <HAL_RCC_OscConfig+0xf7c>
 80028fa:	4b01      	ldr	r3, [pc, #4]	; (8002900 <HAL_RCC_OscConfig+0xf78>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e029      	b.n	8002954 <HAL_RCC_OscConfig+0xfcc>
 8002900:	40021000 	.word	0x40021000
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800290c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x1078>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002958:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800295c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002960:	6011      	str	r1, [r2, #0]
 8002962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002966:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fa92 f1a2 	rbit	r1, r2
 8002970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002974:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002978:	6011      	str	r1, [r2, #0]
  return result;
 800297a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800297e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	f042 0220 	orr.w	r2, r2, #32
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	f002 021f 	and.w	r2, r2, #31
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d180      	bne.n	80028a2 <HAL_RCC_OscConfig+0xf1a>
 80029a0:	e027      	b.n	80029f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e01e      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_OscConfig+0x1078>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d10b      	bne.n	80029ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80029d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80029da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b09e      	sub	sp, #120	; 0x78
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e162      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d910      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	498b      	ldr	r1, [pc, #556]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e14a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b82      	ldr	r3, [pc, #520]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	497f      	ldr	r1, [pc, #508]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80dc 	beq.w	8002c30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d13c      	bne.n	8002afa <HAL_RCC_ClockConfig+0xf6>
 8002a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xa6>
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	e00f      	b.n	8002aca <HAL_RCC_ClockConfig+0xc6>
 8002aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abc:	663b      	str	r3, [r7, #96]	; 0x60
 8002abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ada:	fab2 f282 	clz	r2, r2
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f042 0220 	orr.w	r2, r2, #32
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	f002 021f 	and.w	r2, r2, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d17b      	bne.n	8002bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0f3      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d13c      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x178>
 8002b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x128>
 8002b26:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e00f      	b.n	8002b4c <HAL_RCC_ClockConfig+0x148>
 8002b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b50:	63ba      	str	r2, [r7, #56]	; 0x38
 8002b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f042 0220 	orr.w	r2, r2, #32
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f002 021f 	and.w	r2, r2, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d13a      	bne.n	8002bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b2      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	e00d      	b.n	8002bc0 <HAL_RCC_ClockConfig+0x1bc>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	61ba      	str	r2, [r7, #24]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	fa92 f2a2 	rbit	r2, r2
 8002bca:	617a      	str	r2, [r7, #20]
  return result;
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	fab2 f282 	clz	r2, r2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f042 0220 	orr.w	r2, r2, #32
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f002 021f 	and.w	r2, r2, #31
 8002bde:	2101      	movs	r1, #1
 8002be0:	fa01 f202 	lsl.w	r2, r1, r2
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e079      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	491a      	ldr	r1, [pc, #104]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe f806 	bl	8000c10 <HAL_GetTick>
 8002c04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe f802 	bl	8000c10 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e061      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_ClockConfig+0x260>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d214      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4906      	ldr	r1, [pc, #24]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_RCC_ClockConfig+0x25c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e040      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x2de>
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_ClockConfig+0x2e8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	491a      	ldr	r1, [pc, #104]	; (8002cec <HAL_RCC_ClockConfig+0x2e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x2e8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4912      	ldr	r1, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x2e8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ca6:	f000 f829 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_RCC_ClockConfig+0x2e8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb4:	22f0      	movs	r2, #240	; 0xf0
 8002cb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	fa92 f2a2 	rbit	r2, r2
 8002cbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	fab2 f282 	clz	r2, r2
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	40d3      	lsrs	r3, r2
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x2ec>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	fa21 f303 	lsr.w	r3, r1, r3
 8002cd2:	4a08      	ldr	r2, [pc, #32]	; (8002cf4 <HAL_RCC_ClockConfig+0x2f0>)
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <HAL_RCC_ClockConfig+0x2f4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd ff54 	bl	8000b88 <HAL_InitTick>
  
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3778      	adds	r7, #120	; 0x78
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	080032ac 	.word	0x080032ac
 8002cf4:	20000010 	.word	0x20000010
 8002cf8:	20000014 	.word	0x20000014

08002cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b08b      	sub	sp, #44	; 0x2c
 8002d00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x30>
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x36>
 8002d2a:	e03c      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2e:	623b      	str	r3, [r7, #32]
      break;
 8002d30:	e03c      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002d38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002d3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	fa92 f2a2 	rbit	r2, r2
 8002d44:	607a      	str	r2, [r7, #4]
  return result;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	fab2 f282 	clz	r2, r2
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	40d3      	lsrs	r3, r2
 8002d50:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	220f      	movs	r2, #15
 8002d60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	fa92 f2a2 	rbit	r2, r2
 8002d68:	60fa      	str	r2, [r7, #12]
  return result;
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	40d3      	lsrs	r3, r2
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4a0c      	ldr	r2, [pc, #48]	; (8002dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	623b      	str	r3, [r7, #32]
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002da8:	623b      	str	r3, [r7, #32]
      break;
 8002daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	372c      	adds	r7, #44	; 0x2c
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	007a1200 	.word	0x007a1200
 8002dc4:	080032bc 	.word	0x080032bc
 8002dc8:	080032cc 	.word	0x080032cc
 8002dcc:	003d0900 	.word	0x003d0900

08002dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b092      	sub	sp, #72	; 0x48
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80d4 	beq.w	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df4:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a4a      	ldr	r2, [pc, #296]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fd feeb 	bl	8000c10 <HAL_GetTick>
 8002e3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fd fee7 	bl	8000c10 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b64      	cmp	r3, #100	; 0x64
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e169      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8084 	beq.w	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d07c      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eba:	fab3 f383 	clz	r3, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d04b      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fd fe97 	bl	8000c10 <HAL_GetTick>
 8002ee2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee6:	f7fd fe93 	bl	8000c10 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e113      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002efc:	2302      	movs	r3, #2
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	2302      	movs	r3, #2
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	61fb      	str	r3, [r7, #28]
  return result;
 8002f14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f043 0302 	orr.w	r3, r3, #2
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d108      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f2a:	4b01      	ldr	r3, [pc, #4]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	e00d      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	10908100 	.word	0x10908100
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	4b78      	ldr	r3, [pc, #480]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	613a      	str	r2, [r7, #16]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	fa92 f2a2 	rbit	r2, r2
 8002f56:	60fa      	str	r2, [r7, #12]
  return result;
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	fab2 f282 	clz	r2, r2
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 021f 	and.w	r2, r2, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0b7      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	496a      	ldr	r1, [pc, #424]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	f023 0203 	bic.w	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	495d      	ldr	r1, [pc, #372]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4956      	ldr	r1, [pc, #344]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fe4:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	494e      	ldr	r1, [pc, #312]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f023 0210 	bic.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4947      	ldr	r1, [pc, #284]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003010:	4313      	orrs	r3, r2
 8003012:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	493f      	ldr	r1, [pc, #252]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f023 0220 	bic.w	r2, r3, #32
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4938      	ldr	r1, [pc, #224]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800305c:	4b33      	ldr	r3, [pc, #204]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4930      	ldr	r1, [pc, #192]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	4929      	ldr	r1, [pc, #164]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003088:	4313      	orrs	r3, r2
 800308a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	4921      	ldr	r1, [pc, #132]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	491a      	ldr	r1, [pc, #104]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	490b      	ldr	r1, [pc, #44]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003100:	4313      	orrs	r3, r2
 8003102:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3748      	adds	r7, #72	; 0x48
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000

08003130 <__itoa>:
 8003130:	1e93      	subs	r3, r2, #2
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	b510      	push	{r4, lr}
 8003136:	460c      	mov	r4, r1
 8003138:	d904      	bls.n	8003144 <__itoa+0x14>
 800313a:	2300      	movs	r3, #0
 800313c:	700b      	strb	r3, [r1, #0]
 800313e:	461c      	mov	r4, r3
 8003140:	4620      	mov	r0, r4
 8003142:	bd10      	pop	{r4, pc}
 8003144:	2a0a      	cmp	r2, #10
 8003146:	d109      	bne.n	800315c <__itoa+0x2c>
 8003148:	2800      	cmp	r0, #0
 800314a:	da07      	bge.n	800315c <__itoa+0x2c>
 800314c:	232d      	movs	r3, #45	; 0x2d
 800314e:	700b      	strb	r3, [r1, #0]
 8003150:	4240      	negs	r0, r0
 8003152:	2101      	movs	r1, #1
 8003154:	4421      	add	r1, r4
 8003156:	f000 f805 	bl	8003164 <__utoa>
 800315a:	e7f1      	b.n	8003140 <__itoa+0x10>
 800315c:	2100      	movs	r1, #0
 800315e:	e7f9      	b.n	8003154 <__itoa+0x24>

08003160 <itoa>:
 8003160:	f7ff bfe6 	b.w	8003130 <__itoa>

08003164 <__utoa>:
 8003164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003166:	4c1f      	ldr	r4, [pc, #124]	; (80031e4 <__utoa+0x80>)
 8003168:	b08b      	sub	sp, #44	; 0x2c
 800316a:	4605      	mov	r5, r0
 800316c:	460b      	mov	r3, r1
 800316e:	466e      	mov	r6, sp
 8003170:	f104 0c20 	add.w	ip, r4, #32
 8003174:	6820      	ldr	r0, [r4, #0]
 8003176:	6861      	ldr	r1, [r4, #4]
 8003178:	4637      	mov	r7, r6
 800317a:	c703      	stmia	r7!, {r0, r1}
 800317c:	3408      	adds	r4, #8
 800317e:	4564      	cmp	r4, ip
 8003180:	463e      	mov	r6, r7
 8003182:	d1f7      	bne.n	8003174 <__utoa+0x10>
 8003184:	7921      	ldrb	r1, [r4, #4]
 8003186:	7139      	strb	r1, [r7, #4]
 8003188:	1e91      	subs	r1, r2, #2
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	6038      	str	r0, [r7, #0]
 800318e:	2922      	cmp	r1, #34	; 0x22
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	d904      	bls.n	80031a0 <__utoa+0x3c>
 8003196:	7019      	strb	r1, [r3, #0]
 8003198:	460b      	mov	r3, r1
 800319a:	4618      	mov	r0, r3
 800319c:	b00b      	add	sp, #44	; 0x2c
 800319e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	4684      	mov	ip, r0
 80031a4:	fbb5 f7f2 	udiv	r7, r5, r2
 80031a8:	fb02 5617 	mls	r6, r2, r7, r5
 80031ac:	3628      	adds	r6, #40	; 0x28
 80031ae:	446e      	add	r6, sp
 80031b0:	460c      	mov	r4, r1
 80031b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80031b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80031ba:	462e      	mov	r6, r5
 80031bc:	42b2      	cmp	r2, r6
 80031be:	f101 0101 	add.w	r1, r1, #1
 80031c2:	463d      	mov	r5, r7
 80031c4:	d9ee      	bls.n	80031a4 <__utoa+0x40>
 80031c6:	2200      	movs	r2, #0
 80031c8:	545a      	strb	r2, [r3, r1]
 80031ca:	1919      	adds	r1, r3, r4
 80031cc:	1aa5      	subs	r5, r4, r2
 80031ce:	42aa      	cmp	r2, r5
 80031d0:	dae3      	bge.n	800319a <__utoa+0x36>
 80031d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80031d6:	780e      	ldrb	r6, [r1, #0]
 80031d8:	7006      	strb	r6, [r0, #0]
 80031da:	3201      	adds	r2, #1
 80031dc:	f801 5901 	strb.w	r5, [r1], #-1
 80031e0:	e7f4      	b.n	80031cc <__utoa+0x68>
 80031e2:	bf00      	nop
 80031e4:	080032dc 	.word	0x080032dc

080031e8 <memset>:
 80031e8:	4402      	add	r2, r0
 80031ea:	4603      	mov	r3, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <__libc_init_array>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4d0d      	ldr	r5, [pc, #52]	; (8003230 <__libc_init_array+0x38>)
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <__libc_init_array+0x3c>)
 80031fe:	1b64      	subs	r4, r4, r5
 8003200:	10a4      	asrs	r4, r4, #2
 8003202:	2600      	movs	r6, #0
 8003204:	42a6      	cmp	r6, r4
 8003206:	d109      	bne.n	800321c <__libc_init_array+0x24>
 8003208:	4d0b      	ldr	r5, [pc, #44]	; (8003238 <__libc_init_array+0x40>)
 800320a:	4c0c      	ldr	r4, [pc, #48]	; (800323c <__libc_init_array+0x44>)
 800320c:	f000 f818 	bl	8003240 <_init>
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	2600      	movs	r6, #0
 8003216:	42a6      	cmp	r6, r4
 8003218:	d105      	bne.n	8003226 <__libc_init_array+0x2e>
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003220:	4798      	blx	r3
 8003222:	3601      	adds	r6, #1
 8003224:	e7ee      	b.n	8003204 <__libc_init_array+0xc>
 8003226:	f855 3b04 	ldr.w	r3, [r5], #4
 800322a:	4798      	blx	r3
 800322c:	3601      	adds	r6, #1
 800322e:	e7f2      	b.n	8003216 <__libc_init_array+0x1e>
 8003230:	08003304 	.word	0x08003304
 8003234:	08003304 	.word	0x08003304
 8003238:	08003304 	.word	0x08003304
 800323c:	08003308 	.word	0x08003308

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
