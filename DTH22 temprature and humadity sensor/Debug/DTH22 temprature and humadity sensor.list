
DTH22 temprature and humadity sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000497c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08005908  08005908  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005908  08005908  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000648  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ac  200006ac  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d79c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000212a  00000000  00000000  0002d873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000dd8  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac8  00000000  00000000  00030778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001df4b  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012040  00000000  00000000  0004f18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b39b6  00000000  00000000  000611cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f28  00000000  00000000  00114b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00118aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004af4 	.word	0x08004af4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004af4 	.word	0x08004af4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <microDelay>:
float RH = 0;
uint8_t RHI, RHD, TCI, TCD, TFI, TFD;
char strCopy[15];

void microDelay (uint16_t delay)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <microDelay+0x30>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2200      	movs	r2, #0
 8000280:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000282:	bf00      	nop
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <microDelay+0x30>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3f9      	bcc.n	8000284 <microDelay+0x14>
}
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	200000d4 	.word	0x200000d4

080002a4 <DHT22_Start>:

uint8_t DHT22_Start (void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80002ae:	463b      	mov	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT22_PIN;
 80002bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80002ce:	463b      	mov	r3, r7
 80002d0:	4619      	mov	r1, r3
 80002d2:	482d      	ldr	r0, [pc, #180]	; (8000388 <DHT22_Start+0xe4>)
 80002d4:	f001 f98a 	bl	80015ec <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002de:	482a      	ldr	r0, [pc, #168]	; (8000388 <DHT22_Start+0xe4>)
 80002e0:	f001 fb16 	bl	8001910 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 80002e4:	f240 5014 	movw	r0, #1300	; 0x514
 80002e8:	f7ff ffc2 	bl	8000270 <microDelay>
  HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4825      	ldr	r0, [pc, #148]	; (8000388 <DHT22_Start+0xe4>)
 80002f4:	f001 fb0c 	bl	8001910 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80002f8:	201e      	movs	r0, #30
 80002fa:	f7ff ffb9 	bl	8000270 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000302:	2301      	movs	r3, #1
 8000304:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000306:	463b      	mov	r3, r7
 8000308:	4619      	mov	r1, r3
 800030a:	481f      	ldr	r0, [pc, #124]	; (8000388 <DHT22_Start+0xe4>)
 800030c:	f001 f96e 	bl	80015ec <HAL_GPIO_Init>
  microDelay (40);
 8000310:	2028      	movs	r0, #40	; 0x28
 8000312:	f7ff ffad 	bl	8000270 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	481b      	ldr	r0, [pc, #108]	; (8000388 <DHT22_Start+0xe4>)
 800031c:	f001 fae0 	bl	80018e0 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10c      	bne.n	8000340 <DHT22_Start+0x9c>
  {
    microDelay (80);
 8000326:	2050      	movs	r0, #80	; 0x50
 8000328:	f7ff ffa2 	bl	8000270 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;
 800032c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000330:	4815      	ldr	r0, [pc, #84]	; (8000388 <DHT22_Start+0xe4>)
 8000332:	f001 fad5 	bl	80018e0 <HAL_GPIO_ReadPin>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <DHT22_Start+0x9c>
 800033c:	2301      	movs	r3, #1
 800033e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000340:	f001 f83e 	bl	80013c0 <HAL_GetTick>
 8000344:	4603      	mov	r3, r0
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <DHT22_Start+0xe8>)
 8000348:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 800034a:	f001 f839 	bl	80013c0 <HAL_GetTick>
 800034e:	4603      	mov	r3, r0
 8000350:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <DHT22_Start+0xec>)
 8000352:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000354:	e004      	b.n	8000360 <DHT22_Start+0xbc>
  {
    cMillis = HAL_GetTick();
 8000356:	f001 f833 	bl	80013c0 <HAL_GetTick>
 800035a:	4603      	mov	r3, r0
 800035c:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <DHT22_Start+0xec>)
 800035e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 8000360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000364:	4808      	ldr	r0, [pc, #32]	; (8000388 <DHT22_Start+0xe4>)
 8000366:	f001 fabb 	bl	80018e0 <HAL_GPIO_ReadPin>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d006      	beq.n	800037e <DHT22_Start+0xda>
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <DHT22_Start+0xe8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1c9a      	adds	r2, r3, #2
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <DHT22_Start+0xec>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	429a      	cmp	r2, r3
 800037c:	d8eb      	bhi.n	8000356 <DHT22_Start+0xb2>
  }
  return Response;
 800037e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000380:	4618      	mov	r0, r3
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	48000400 	.word	0x48000400
 800038c:	20000128 	.word	0x20000128
 8000390:	2000012c 	.word	0x2000012c

08000394 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800039a:	2300      	movs	r3, #0
 800039c:	71fb      	strb	r3, [r7, #7]
 800039e:	e066      	b.n	800046e <DHT22_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80003a0:	f001 f80e 	bl	80013c0 <HAL_GetTick>
 80003a4:	4603      	mov	r3, r0
 80003a6:	4a36      	ldr	r2, [pc, #216]	; (8000480 <DHT22_Read+0xec>)
 80003a8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80003aa:	f001 f809 	bl	80013c0 <HAL_GetTick>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4a34      	ldr	r2, [pc, #208]	; (8000484 <DHT22_Read+0xf0>)
 80003b2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80003b4:	e004      	b.n	80003c0 <DHT22_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80003b6:	f001 f803 	bl	80013c0 <HAL_GetTick>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a31      	ldr	r2, [pc, #196]	; (8000484 <DHT22_Read+0xf0>)
 80003be:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	4830      	ldr	r0, [pc, #192]	; (8000488 <DHT22_Read+0xf4>)
 80003c6:	f001 fa8b 	bl	80018e0 <HAL_GPIO_ReadPin>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d106      	bne.n	80003de <DHT22_Read+0x4a>
 80003d0:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <DHT22_Read+0xec>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	1c9a      	adds	r2, r3, #2
 80003d6:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <DHT22_Read+0xf0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d8eb      	bhi.n	80003b6 <DHT22_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80003de:	2028      	movs	r0, #40	; 0x28
 80003e0:	f7ff ff46 	bl	8000270 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80003e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e8:	4827      	ldr	r0, [pc, #156]	; (8000488 <DHT22_Read+0xf4>)
 80003ea:	f001 fa79 	bl	80018e0 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10e      	bne.n	8000412 <DHT22_Read+0x7e>
      b&= ~(1<<(7-a));
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	f1c3 0307 	rsb	r3, r3, #7
 80003fa:	2201      	movs	r2, #1
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	b25b      	sxtb	r3, r3
 8000402:	43db      	mvns	r3, r3
 8000404:	b25a      	sxtb	r2, r3
 8000406:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800040a:	4013      	ands	r3, r2
 800040c:	b25b      	sxtb	r3, r3
 800040e:	71bb      	strb	r3, [r7, #6]
 8000410:	e00b      	b.n	800042a <DHT22_Read+0x96>
    else
      b|= (1<<(7-a));
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f1c3 0307 	rsb	r3, r3, #7
 8000418:	2201      	movs	r2, #1
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	b25a      	sxtb	r2, r3
 8000420:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000424:	4313      	orrs	r3, r2
 8000426:	b25b      	sxtb	r3, r3
 8000428:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800042a:	f000 ffc9 	bl	80013c0 <HAL_GetTick>
 800042e:	4603      	mov	r3, r0
 8000430:	4a13      	ldr	r2, [pc, #76]	; (8000480 <DHT22_Read+0xec>)
 8000432:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000434:	f000 ffc4 	bl	80013c0 <HAL_GetTick>
 8000438:	4603      	mov	r3, r0
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <DHT22_Read+0xf0>)
 800043c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800043e:	e004      	b.n	800044a <DHT22_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000440:	f000 ffbe 	bl	80013c0 <HAL_GetTick>
 8000444:	4603      	mov	r3, r0
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <DHT22_Read+0xf0>)
 8000448:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis)
 800044a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044e:	480e      	ldr	r0, [pc, #56]	; (8000488 <DHT22_Read+0xf4>)
 8000450:	f001 fa46 	bl	80018e0 <HAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d006      	beq.n	8000468 <DHT22_Read+0xd4>
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <DHT22_Read+0xec>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	1c9a      	adds	r2, r3, #2
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <DHT22_Read+0xf0>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	429a      	cmp	r2, r3
 8000466:	d8eb      	bhi.n	8000440 <DHT22_Read+0xac>
  for (a=0;a<8;a++)
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	3301      	adds	r3, #1
 800046c:	71fb      	strb	r3, [r7, #7]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b07      	cmp	r3, #7
 8000472:	d995      	bls.n	80003a0 <DHT22_Read+0xc>
    }
  }
  return b;
 8000474:	79bb      	ldrb	r3, [r7, #6]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000128 	.word	0x20000128
 8000484:	2000012c 	.word	0x2000012c
 8000488:	48000400 	.word	0x48000400

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 ff3b 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f9f1 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 fae3 	bl	8000a64 <MX_GPIO_Init>
  MX_TIM1_Init();
 800049e:	f000 fa8d 	bl	80009bc <MX_TIM1_Init>
  MX_I2C1_Init();
 80004a2:	f000 fa4b 	bl	800093c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80004a6:	48ba      	ldr	r0, [pc, #744]	; (8000790 <main+0x304>)
 80004a8:	f003 fbaa 	bl	8003c00 <HAL_TIM_Base_Start>
  SSD1306_Init();
 80004ac:	f000 fb2c 	bl	8000b08 <SSD1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

	  {
	      if(DHT22_Start())
 80004b0:	f7ff fef8 	bl	80002a4 <DHT22_Start>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	f000 81cf 	beq.w	800085a <main+0x3ce>
	      {
	        RH1 = DHT22_Read(); // First 8bits of humidity
 80004bc:	f7ff ff6a 	bl	8000394 <DHT22_Read>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	4bb3      	ldr	r3, [pc, #716]	; (8000794 <main+0x308>)
 80004c6:	701a      	strb	r2, [r3, #0]
	        RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 80004c8:	f7ff ff64 	bl	8000394 <DHT22_Read>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4bb1      	ldr	r3, [pc, #708]	; (8000798 <main+0x30c>)
 80004d2:	701a      	strb	r2, [r3, #0]
	        TC1 = DHT22_Read(); // First 8bits of Celsius
 80004d4:	f7ff ff5e 	bl	8000394 <DHT22_Read>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4baf      	ldr	r3, [pc, #700]	; (800079c <main+0x310>)
 80004de:	701a      	strb	r2, [r3, #0]
	        TC2 = DHT22_Read(); // Second 8bits of Celsius
 80004e0:	f7ff ff58 	bl	8000394 <DHT22_Read>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461a      	mov	r2, r3
 80004e8:	4bad      	ldr	r3, [pc, #692]	; (80007a0 <main+0x314>)
 80004ea:	701a      	strb	r2, [r3, #0]
	        SUM = DHT22_Read(); // Check sum
 80004ec:	f7ff ff52 	bl	8000394 <DHT22_Read>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	4bab      	ldr	r3, [pc, #684]	; (80007a4 <main+0x318>)
 80004f6:	701a      	strb	r2, [r3, #0]
	        CHECK = RH1 + RH2 + TC1 + TC2;
 80004f8:	4ba6      	ldr	r3, [pc, #664]	; (8000794 <main+0x308>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4ba6      	ldr	r3, [pc, #664]	; (8000798 <main+0x30c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4413      	add	r3, r2
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4ba5      	ldr	r3, [pc, #660]	; (800079c <main+0x310>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4413      	add	r3, r2
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4ba4      	ldr	r3, [pc, #656]	; (80007a0 <main+0x314>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4413      	add	r3, r2
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4ba4      	ldr	r3, [pc, #656]	; (80007a8 <main+0x31c>)
 8000516:	701a      	strb	r2, [r3, #0]
	        if (CHECK == SUM)
 8000518:	4ba3      	ldr	r3, [pc, #652]	; (80007a8 <main+0x31c>)
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	4ba1      	ldr	r3, [pc, #644]	; (80007a4 <main+0x318>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	f040 819a 	bne.w	800085a <main+0x3ce>
	        {
	          if (TC1>127) // If TC1=10000000, negative temperature
 8000526:	4b9d      	ldr	r3, [pc, #628]	; (800079c <main+0x310>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b25b      	sxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	da0f      	bge.n	8000550 <main+0xc4>
	          {
	            tCelsius = (float)TC2/10*(-1);
 8000530:	4b9b      	ldr	r3, [pc, #620]	; (80007a0 <main+0x314>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	ee07 3a90 	vmov	s15, r3
 8000538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800053c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000544:	eef1 7a67 	vneg.f32	s15, s15
 8000548:	4b98      	ldr	r3, [pc, #608]	; (80007ac <main+0x320>)
 800054a:	edc3 7a00 	vstr	s15, [r3]
 800054e:	e010      	b.n	8000572 <main+0xe6>
	          }
	          else
	          {
	            tCelsius = (float)((TC1<<8)|TC2)/10;
 8000550:	4b92      	ldr	r3, [pc, #584]	; (800079c <main+0x310>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	021b      	lsls	r3, r3, #8
 8000556:	4a92      	ldr	r2, [pc, #584]	; (80007a0 <main+0x314>)
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	4313      	orrs	r3, r2
 800055c:	ee07 3a90 	vmov	s15, r3
 8000560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000564:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800056c:	4b8f      	ldr	r3, [pc, #572]	; (80007ac <main+0x320>)
 800056e:	edc3 7a00 	vstr	s15, [r3]
	          }
	          tFahrenheit = tCelsius * 9/5 + 32;
 8000572:	4b8e      	ldr	r3, [pc, #568]	; (80007ac <main+0x320>)
 8000574:	edd3 7a00 	vldr	s15, [r3]
 8000578:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800057c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000580:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000588:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80007b0 <main+0x324>
 800058c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000590:	4b88      	ldr	r3, [pc, #544]	; (80007b4 <main+0x328>)
 8000592:	edc3 7a00 	vstr	s15, [r3]
	          RH = (float) ((RH1<<8)|RH2)/10;
 8000596:	4b7f      	ldr	r3, [pc, #508]	; (8000794 <main+0x308>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	4a7e      	ldr	r2, [pc, #504]	; (8000798 <main+0x30c>)
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	ee07 3a90 	vmov	s15, r3
 80005a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005aa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80005ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b2:	4b81      	ldr	r3, [pc, #516]	; (80007b8 <main+0x32c>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]
	          SSD1306_GotoXY (0, 0);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fc0e 	bl	8000ddc <SSD1306_GotoXY>
	          RHI = RH;  // Relative humidity integral
 80005c0:	4b7d      	ldr	r3, [pc, #500]	; (80007b8 <main+0x32c>)
 80005c2:	edd3 7a00 	vldr	s15, [r3]
 80005c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80005ce:	793b      	ldrb	r3, [r7, #4]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b7a      	ldr	r3, [pc, #488]	; (80007bc <main+0x330>)
 80005d4:	701a      	strb	r2, [r3, #0]
	          RHD = RH*10-RHI*10; // Relative humidity decimal
 80005d6:	4b78      	ldr	r3, [pc, #480]	; (80007b8 <main+0x32c>)
 80005d8:	edd3 7a00 	vldr	s15, [r3]
 80005dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80005e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005e4:	4b75      	ldr	r3, [pc, #468]	; (80007bc <main+0x330>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	ee07 3a90 	vmov	s15, r3
 80005f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000602:	edc7 7a01 	vstr	s15, [r7, #4]
 8000606:	793b      	ldrb	r3, [r7, #4]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b6d      	ldr	r3, [pc, #436]	; (80007c0 <main+0x334>)
 800060c:	701a      	strb	r2, [r3, #0]
	          sprintf(strCopy,"%d.%d %%  ", RHI, RHD);
 800060e:	4b6b      	ldr	r3, [pc, #428]	; (80007bc <main+0x330>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4b6a      	ldr	r3, [pc, #424]	; (80007c0 <main+0x334>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	496a      	ldr	r1, [pc, #424]	; (80007c4 <main+0x338>)
 800061a:	486b      	ldr	r0, [pc, #428]	; (80007c8 <main+0x33c>)
 800061c:	f003 fdc6 	bl	80041ac <siprintf>
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	496a      	ldr	r1, [pc, #424]	; (80007cc <main+0x340>)
 8000624:	4868      	ldr	r0, [pc, #416]	; (80007c8 <main+0x33c>)
 8000626:	f000 fc6f 	bl	8000f08 <SSD1306_Puts>
	          SSD1306_GotoXY (0, 20);
 800062a:	2114      	movs	r1, #20
 800062c:	2000      	movs	r0, #0
 800062e:	f000 fbd5 	bl	8000ddc <SSD1306_GotoXY>
	          if (tCelsius < 0)
 8000632:	4b5e      	ldr	r3, [pc, #376]	; (80007ac <main+0x320>)
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800063c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000640:	d532      	bpl.n	80006a8 <main+0x21c>
	          {
	            TCI = tCelsius *(-1);  // Celsius integral
 8000642:	4b5a      	ldr	r3, [pc, #360]	; (80007ac <main+0x320>)
 8000644:	edd3 7a00 	vldr	s15, [r3]
 8000648:	eef1 7a67 	vneg.f32	s15, s15
 800064c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000650:	edc7 7a01 	vstr	s15, [r7, #4]
 8000654:	793b      	ldrb	r3, [r7, #4]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b5d      	ldr	r3, [pc, #372]	; (80007d0 <main+0x344>)
 800065a:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*(-10)-TCI*10; // Celsius decimal
 800065c:	4b53      	ldr	r3, [pc, #332]	; (80007ac <main+0x320>)
 800065e:	edd3 7a00 	vldr	s15, [r3]
 8000662:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000666:	ee27 7a87 	vmul.f32	s14, s15, s14
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <main+0x344>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	ee07 3a90 	vmov	s15, r3
 800067c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000688:	edc7 7a01 	vstr	s15, [r7, #4]
 800068c:	793b      	ldrb	r3, [r7, #4]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <main+0x348>)
 8000692:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"-%d.%d C   ", TCI, TCD);
 8000694:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <main+0x344>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b4e      	ldr	r3, [pc, #312]	; (80007d4 <main+0x348>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	494e      	ldr	r1, [pc, #312]	; (80007d8 <main+0x34c>)
 80006a0:	4849      	ldr	r0, [pc, #292]	; (80007c8 <main+0x33c>)
 80006a2:	f003 fd83 	bl	80041ac <siprintf>
 80006a6:	e02f      	b.n	8000708 <main+0x27c>
	          }
	          else
	          {
	            TCI = tCelsius;  // Celsius integral
 80006a8:	4b40      	ldr	r3, [pc, #256]	; (80007ac <main+0x320>)
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80006b6:	793b      	ldrb	r3, [r7, #4]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <main+0x344>)
 80006bc:	701a      	strb	r2, [r3, #0]
	            TCD = tCelsius*10-TCI*10; // Celsius decimal
 80006be:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <main+0x320>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80006c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <main+0x344>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80006ee:	793b      	ldrb	r3, [r7, #4]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <main+0x348>)
 80006f4:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"%d.%d C   ", TCI, TCD);
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <main+0x344>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <main+0x348>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4936      	ldr	r1, [pc, #216]	; (80007dc <main+0x350>)
 8000702:	4831      	ldr	r0, [pc, #196]	; (80007c8 <main+0x33c>)
 8000704:	f003 fd52 	bl	80041ac <siprintf>
	          }
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	4930      	ldr	r1, [pc, #192]	; (80007cc <main+0x340>)
 800070c:	482e      	ldr	r0, [pc, #184]	; (80007c8 <main+0x33c>)
 800070e:	f000 fbfb 	bl	8000f08 <SSD1306_Puts>
	          SSD1306_GotoXY (0, 40);
 8000712:	2128      	movs	r1, #40	; 0x28
 8000714:	2000      	movs	r0, #0
 8000716:	f000 fb61 	bl	8000ddc <SSD1306_GotoXY>
	          if(tFahrenheit < 0)
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <main+0x328>)
 800071c:	edd3 7a00 	vldr	s15, [r3]
 8000720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	d560      	bpl.n	80007ec <main+0x360>
	          {
	            TFI = tFahrenheit*(-1);  // Fahrenheit integral
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <main+0x328>)
 800072c:	edd3 7a00 	vldr	s15, [r3]
 8000730:	eef1 7a67 	vneg.f32	s15, s15
 8000734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000738:	edc7 7a01 	vstr	s15, [r7, #4]
 800073c:	793b      	ldrb	r3, [r7, #4]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <main+0x354>)
 8000742:	701a      	strb	r2, [r3, #0]
	            TFD = tFahrenheit*(-10)-TFI*10; // Fahrenheit decimal
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <main+0x328>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800074e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <main+0x354>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000770:	edc7 7a01 	vstr	s15, [r7, #4]
 8000774:	793b      	ldrb	r3, [r7, #4]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <main+0x358>)
 800077a:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"-%d.%d F   ", TFI, TFD);
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <main+0x354>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <main+0x358>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4918      	ldr	r1, [pc, #96]	; (80007e8 <main+0x35c>)
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <main+0x33c>)
 800078a:	f003 fd0f 	bl	80041ac <siprintf>
 800078e:	e05d      	b.n	800084c <main+0x3c0>
 8000790:	200000d4 	.word	0x200000d4
 8000794:	20000120 	.word	0x20000120
 8000798:	20000121 	.word	0x20000121
 800079c:	20000122 	.word	0x20000122
 80007a0:	20000123 	.word	0x20000123
 80007a4:	20000124 	.word	0x20000124
 80007a8:	20000125 	.word	0x20000125
 80007ac:	20000130 	.word	0x20000130
 80007b0:	42000000 	.word	0x42000000
 80007b4:	20000134 	.word	0x20000134
 80007b8:	20000138 	.word	0x20000138
 80007bc:	2000013c 	.word	0x2000013c
 80007c0:	2000013d 	.word	0x2000013d
 80007c4:	08004b0c 	.word	0x08004b0c
 80007c8:	20000144 	.word	0x20000144
 80007cc:	20000000 	.word	0x20000000
 80007d0:	2000013e 	.word	0x2000013e
 80007d4:	2000013f 	.word	0x2000013f
 80007d8:	08004b18 	.word	0x08004b18
 80007dc:	08004b24 	.word	0x08004b24
 80007e0:	20000140 	.word	0x20000140
 80007e4:	20000141 	.word	0x20000141
 80007e8:	08004b30 	.word	0x08004b30
	          }
	          else
	          {
	            TFI = tFahrenheit;  // Fahrenheit integral
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <main+0x3d8>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80007fa:	793b      	ldrb	r3, [r7, #4]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <main+0x3dc>)
 8000800:	701a      	strb	r2, [r3, #0]
	            TFD = tFahrenheit*10-TFI*10; // Fahrenheit decimal
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x3d8>)
 8000804:	edd3 7a00 	vldr	s15, [r3]
 8000808:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800080c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <main+0x3dc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800082a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <main+0x3e0>)
 8000838:	701a      	strb	r2, [r3, #0]
	            sprintf(strCopy,"%d.%d F   ", TFI, TFD);
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <main+0x3dc>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <main+0x3e0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	490a      	ldr	r1, [pc, #40]	; (8000870 <main+0x3e4>)
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <main+0x3e8>)
 8000848:	f003 fcb0 	bl	80041ac <siprintf>
	          }
	          SSD1306_Puts (strCopy, &Font_11x18, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	490a      	ldr	r1, [pc, #40]	; (8000878 <main+0x3ec>)
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <main+0x3e8>)
 8000852:	f000 fb59 	bl	8000f08 <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 8000856:	f000 fa1b 	bl	8000c90 <SSD1306_UpdateScreen>
	        }
	      }
	      HAL_Delay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085e:	f000 fdbb 	bl	80013d8 <HAL_Delay>
	      if(DHT22_Start())
 8000862:	e625      	b.n	80004b0 <main+0x24>
 8000864:	20000134 	.word	0x20000134
 8000868:	20000140 	.word	0x20000140
 800086c:	20000141 	.word	0x20000141
 8000870:	08004b3c 	.word	0x08004b3c
 8000874:	20000144 	.word	0x20000144
 8000878:	20000000 	.word	0x20000000

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09e      	sub	sp, #120	; 0x78
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000886:	2228      	movs	r2, #40	; 0x28
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fcae 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	223c      	movs	r2, #60	; 0x3c
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fca0 	bl	80041ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008ac:	2303      	movs	r3, #3
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2310      	movs	r3, #16
 80008c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fd66 	bl	80023a8 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f90b 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000900:	2102      	movs	r1, #2
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fd8e 	bl	8003424 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090e:	f000 f8f5 	bl	8000afc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
 8000912:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000916:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ff64 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800092e:	f000 f8e5 	bl	8000afc <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3778      	adds	r7, #120	; 0x78
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000978:	f000 ffe2 	bl	8001940 <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 f8bb 	bl	8000afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x74>)
 800098a:	f001 fc75 	bl	8002278 <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 f8b2 	bl	8000afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2C1_Init+0x74>)
 800099c:	f001 fcb7 	bl	800230e <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 f8a9 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000080 	.word	0x20000080
 80009b4:	40005400 	.word	0x40005400
 80009b8:	2000090e 	.word	0x2000090e

080009bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009dc:	4a20      	ldr	r2, [pc, #128]	; (8000a60 <MX_TIM1_Init+0xa4>)
 80009de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009e2:	2247      	movs	r2, #71	; 0x47
 80009e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM1_Init+0xa0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a06:	4815      	ldr	r0, [pc, #84]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a08:	f003 f8a2 	bl	8003b50 <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a12:	f000 f873 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a24:	f003 f94e 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a2e:	f000 f865 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM1_Init+0xa0>)
 8000a44:	f003 fb32 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a4e:	f000 f855 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200000d4 	.word	0x200000d4
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x90>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <MX_GPIO_Init+0x94>)
 8000aca:	f000 ff21 	bl	8001910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_GPIO_Init+0x94>)
 8000ae8:	f000 fd80 	bl	80015ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b0e:	f000 fa21 	bl	8000f54 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b12:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b16:	2201      	movs	r2, #1
 8000b18:	2178      	movs	r1, #120	; 0x78
 8000b1a:	485b      	ldr	r0, [pc, #364]	; (8000c88 <SSD1306_Init+0x180>)
 8000b1c:	f001 f894 	bl	8001c48 <HAL_I2C_IsDeviceReady>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e0a9      	b.n	8000c7e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000b2a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b30:	e002      	b.n	8000b38 <SSD1306_Init+0x30>
		p--;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f9      	bne.n	8000b32 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b3e:	22ae      	movs	r2, #174	; 0xae
 8000b40:	2100      	movs	r1, #0
 8000b42:	2078      	movs	r0, #120	; 0x78
 8000b44:	f000 fa82 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000b48:	2220      	movs	r2, #32
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2078      	movs	r0, #120	; 0x78
 8000b4e:	f000 fa7d 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b52:	2210      	movs	r2, #16
 8000b54:	2100      	movs	r1, #0
 8000b56:	2078      	movs	r0, #120	; 0x78
 8000b58:	f000 fa78 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b5c:	22b0      	movs	r2, #176	; 0xb0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2078      	movs	r0, #120	; 0x78
 8000b62:	f000 fa73 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b66:	22c8      	movs	r2, #200	; 0xc8
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	; 0x78
 8000b6c:	f000 fa6e 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	; 0x78
 8000b76:	f000 fa69 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 fa64 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 fa5f 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000b8e:	2281      	movs	r2, #129	; 0x81
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 fa5a 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f000 fa55 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ba2:	22a1      	movs	r2, #161	; 0xa1
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 fa50 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000bac:	22a6      	movs	r2, #166	; 0xa6
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 fa4b 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000bb6:	22a8      	movs	r2, #168	; 0xa8
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 fa46 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000bc0:	223f      	movs	r2, #63	; 0x3f
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f000 fa41 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bca:	22a4      	movs	r2, #164	; 0xa4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 fa3c 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000bd4:	22d3      	movs	r2, #211	; 0xd3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 fa37 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 fa32 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000be8:	22d5      	movs	r2, #213	; 0xd5
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 fa2d 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000bf2:	22f0      	movs	r2, #240	; 0xf0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	; 0x78
 8000bf8:	f000 fa28 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000bfc:	22d9      	movs	r2, #217	; 0xd9
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f000 fa23 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c06:	2222      	movs	r2, #34	; 0x22
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 fa1e 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c10:	22da      	movs	r2, #218	; 0xda
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	; 0x78
 8000c16:	f000 fa19 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c1a:	2212      	movs	r2, #18
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	; 0x78
 8000c20:	f000 fa14 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c24:	22db      	movs	r2, #219	; 0xdb
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 fa0f 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c2e:	2220      	movs	r2, #32
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	; 0x78
 8000c34:	f000 fa0a 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c38:	228d      	movs	r2, #141	; 0x8d
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	; 0x78
 8000c3e:	f000 fa05 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c42:	2214      	movs	r2, #20
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	; 0x78
 8000c48:	f000 fa00 	bl	800104c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c4c:	22af      	movs	r2, #175	; 0xaf
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 f9fb 	bl	800104c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c56:	222e      	movs	r2, #46	; 0x2e
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	; 0x78
 8000c5c:	f000 f9f6 	bl	800104c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f843 	bl	8000cec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000c66:	f000 f813 	bl	8000c90 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <SSD1306_Init+0x184>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SSD1306_Init+0x184>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SSD1306_Init+0x184>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	20000554 	.word	0x20000554

08000c90 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	e01d      	b.n	8000cd8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	3b50      	subs	r3, #80	; 0x50
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2078      	movs	r0, #120	; 0x78
 8000ca8:	f000 f9d0 	bl	800104c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2078      	movs	r0, #120	; 0x78
 8000cb2:	f000 f9cb 	bl	800104c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	; 0x78
 8000cbc:	f000 f9c6 	bl	800104c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	01db      	lsls	r3, r3, #7
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <SSD1306_UpdateScreen+0x58>)
 8000cc6:	441a      	add	r2, r3
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f000 f957 	bl	8000f80 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d9de      	bls.n	8000c9c <SSD1306_UpdateScreen+0xc>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000154 	.word	0x20000154

08000cec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <SSD1306_Fill+0x14>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e000      	b.n	8000d02 <SSD1306_Fill+0x16>
 8000d00:	23ff      	movs	r3, #255	; 0xff
 8000d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d06:	4619      	mov	r1, r3
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <SSD1306_Fill+0x2c>)
 8000d0a:	f003 fa6f 	bl	80041ec <memset>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000154 	.word	0x20000154

08000d1c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	460b      	mov	r3, r1
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b7f      	cmp	r3, #127	; 0x7f
 8000d32:	d848      	bhi.n	8000dc6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	2b3f      	cmp	r3, #63	; 0x3f
 8000d38:	d845      	bhi.n	8000dc6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <SSD1306_DrawPixel+0xb8>)
 8000d3c:	791b      	ldrb	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf0c      	ite	eq
 8000d48:	2301      	moveq	r3, #1
 8000d4a:	2300      	movne	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d11a      	bne.n	8000d8c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	88bb      	ldrh	r3, [r7, #4]
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	b298      	uxth	r0, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	4413      	add	r3, r2
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d66:	5cd3      	ldrb	r3, [r2, r3]
 8000d68:	b25a      	sxtb	r2, r3
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b259      	sxtb	r1, r3
 8000d7c:	88fa      	ldrh	r2, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	01db      	lsls	r3, r3, #7
 8000d82:	4413      	add	r3, r2
 8000d84:	b2c9      	uxtb	r1, r1
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d88:	54d1      	strb	r1, [r2, r3]
 8000d8a:	e01d      	b.n	8000dc8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	b298      	uxth	r0, r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	01db      	lsls	r3, r3, #7
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	4013      	ands	r3, r2
 8000db4:	b259      	sxtb	r1, r3
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	4603      	mov	r3, r0
 8000dba:	01db      	lsls	r3, r3, #7
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2c9      	uxtb	r1, r1
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SSD1306_DrawPixel+0xbc>)
 8000dc2:	54d1      	strb	r1, [r2, r3]
 8000dc4:	e000      	b.n	8000dc8 <SSD1306_DrawPixel+0xac>
		return;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000554 	.word	0x20000554
 8000dd8:	20000154 	.word	0x20000154

08000ddc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	80fb      	strh	r3, [r7, #6]
 8000de8:	4613      	mov	r3, r2
 8000dea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SSD1306_GotoXY+0x28>)
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <SSD1306_GotoXY+0x28>)
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	8053      	strh	r3, [r2, #2]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	20000554 	.word	0x20000554

08000e08 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e18:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
	if (
 8000e24:	2b7f      	cmp	r3, #127	; 0x7f
 8000e26:	dc07      	bgt.n	8000e38 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000e2a:	885b      	ldrh	r3, [r3, #2]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e34:	2b3f      	cmp	r3, #63	; 0x3f
 8000e36:	dd01      	ble.n	8000e3c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e05e      	b.n	8000efa <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e04b      	b.n	8000eda <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3b20      	subs	r3, #32
 8000e4a:	6839      	ldr	r1, [r7, #0]
 8000e4c:	7849      	ldrb	r1, [r1, #1]
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	440b      	add	r3, r1
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	e030      	b.n	8000ec8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d010      	beq.n	8000e98 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b298      	uxth	r0, r3
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000e84:	885a      	ldrh	r2, [r3, #2]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	79ba      	ldrb	r2, [r7, #6]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff ff43 	bl	8000d1c <SSD1306_DrawPixel>
 8000e96:	e014      	b.n	8000ec2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000e9a:	881a      	ldrh	r2, [r3, #0]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b298      	uxth	r0, r3
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000ea6:	885a      	ldrh	r2, [r3, #2]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b299      	uxth	r1, r3
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f7ff ff2d 	bl	8000d1c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d3c8      	bcc.n	8000e66 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ad      	bcc.n	8000e42 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000ee8:	881a      	ldrh	r2, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <SSD1306_Putc+0xfc>)
 8000ef6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000554 	.word	0x20000554

08000f08 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f16:	e012      	b.n	8000f3e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff71 	bl	8000e08 <SSD1306_Putc>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d002      	beq.n	8000f38 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	e008      	b.n	8000f4a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1e8      	bne.n	8000f18 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <ssd1306_I2C_Init+0x28>)
 8000f5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f5e:	e002      	b.n	8000f66 <ssd1306_I2C_Init+0x12>
		p--;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f9      	bne.n	8000f60 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	0003d090 	.word	0x0003d090

08000f80 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b0c7      	sub	sp, #284	; 0x11c
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f8e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f92:	600a      	str	r2, [r1, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f9a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	701a      	strb	r2, [r3, #0]
 8000fa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fa6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000faa:	4602      	mov	r2, r0
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fc2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fc6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fd4:	e015      	b.n	8001002 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000fd6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fde:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fea:	3301      	adds	r3, #1
 8000fec:	7811      	ldrb	r1, [r2, #0]
 8000fee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ff2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000ff6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ff8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001002:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001006:	b29b      	uxth	r3, r3
 8001008:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800100c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001010:	8812      	ldrh	r2, [r2, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d8df      	bhi.n	8000fd6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800101a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	b299      	uxth	r1, r3
 8001022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	200a      	movs	r0, #10
 8001036:	9000      	str	r0, [sp, #0]
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <ssd1306_I2C_WriteMulti+0xc8>)
 800103a:	f000 fd11 	bl	8001a60 <HAL_I2C_Master_Transmit>
}
 800103e:	bf00      	nop
 8001040:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	20000080 	.word	0x20000080

0800104c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	460b      	mov	r3, r1
 8001058:	71bb      	strb	r3, [r7, #6]
 800105a:	4613      	mov	r3, r2
 800105c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	b299      	uxth	r1, r3
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	230a      	movs	r3, #10
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2302      	movs	r3, #2
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ssd1306_I2C_Write+0x38>)
 8001076:	f000 fcf3 	bl	8001a60 <HAL_I2C_Master_Transmit>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000080 	.word	0x20000080

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a26      	ldr	r2, [pc, #152]	; (8001188 <HAL_I2C_MspInit+0xb8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d145      	bne.n	800117e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_I2C_MspInit+0xbc>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a25      	ldr	r2, [pc, #148]	; (800118c <HAL_I2C_MspInit+0xbc>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_I2C_MspInit+0xbc>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_I2C_MspInit+0xbc>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_I2C_MspInit+0xbc>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <HAL_I2C_MspInit+0xbc>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001134:	2304      	movs	r3, #4
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f000 fa53 	bl	80015ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <HAL_I2C_MspInit+0xc0>)
 8001162:	f000 fa43 	bl	80015ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_I2C_MspInit+0xbc>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_I2C_MspInit+0xbc>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_I2C_MspInit+0xbc>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005400 	.word	0x40005400
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_TIM_Base_MspInit+0x38>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_TIM_Base_MspInit+0x3c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40012c00 	.word	0x40012c00
 80011d0:	40021000 	.word	0x40021000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f8ba 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f002 ffd0 	bl	80041fc <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000a000 	.word	0x2000a000
 8001288:	00000400 	.word	0x00000400
 800128c:	2000055c 	.word	0x2000055c
 8001290:	200006b0 	.word	0x200006b0

08001294 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012bc:	f7ff ffea 	bl	8001294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c2:	490d      	ldr	r1, [pc, #52]	; (80012f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <LoopForever+0xe>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d8:	4c0a      	ldr	r4, [pc, #40]	; (8001304 <LoopForever+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012e6:	f002 ff8f 	bl	8004208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff f8cf 	bl	800048c <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80012fc:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8001300:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001304:	200006ac 	.word	0x200006ac

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f931 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff feae 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f93b 	bl	80015d2 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f911 	bl	800159a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000008 	.word	0x20000008
 8001390:	20000010 	.word	0x20000010
 8001394:	2000000c 	.word	0x2000000c

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000010 	.word	0x20000010
 80013bc:	20000560 	.word	0x20000560

080013c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000560 	.word	0x20000560

080013d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000010 	.word	0x20000010

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff47 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff5c 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffb0 	bl	8001540 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fa:	e154      	b.n	80018a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2101      	movs	r1, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8146 	beq.w	80018a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d005      	beq.n	800162c <HAL_GPIO_Init+0x40>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d130      	bne.n	800168e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001662:	2201      	movs	r2, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4013      	ands	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 0201 	and.w	r2, r3, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b03      	cmp	r3, #3
 8001698:	d017      	beq.n	80016ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d123      	bne.n	800171e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	08da      	lsrs	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3208      	adds	r2, #8
 80016de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	6939      	ldr	r1, [r7, #16]
 800171a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0203 	and.w	r2, r3, #3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a0 	beq.w	80018a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001760:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_GPIO_Init+0x2d8>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <HAL_GPIO_Init+0x2d8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <HAL_GPIO_Init+0x2d8>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001778:	4a53      	ldr	r2, [pc, #332]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a2:	d019      	beq.n	80017d8 <HAL_GPIO_Init+0x1ec>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a49      	ldr	r2, [pc, #292]	; (80018cc <HAL_GPIO_Init+0x2e0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d013      	beq.n	80017d4 <HAL_GPIO_Init+0x1e8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a48      	ldr	r2, [pc, #288]	; (80018d0 <HAL_GPIO_Init+0x2e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1e4>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a47      	ldr	r2, [pc, #284]	; (80018d4 <HAL_GPIO_Init+0x2e8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1e0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a46      	ldr	r2, [pc, #280]	; (80018d8 <HAL_GPIO_Init+0x2ec>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1dc>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e008      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017c8:	2305      	movs	r3, #5
 80017ca:	e006      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e004      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e002      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <HAL_GPIO_Init+0x1ee>
 80017d8:	2300      	movs	r3, #0
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	f002 0203 	and.w	r2, r2, #3
 80017e0:	0092      	lsls	r2, r2, #2
 80017e2:	4093      	lsls	r3, r2
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ea:	4937      	ldr	r1, [pc, #220]	; (80018c8 <HAL_GPIO_Init+0x2dc>)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800181c:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001846:	4a25      	ldr	r2, [pc, #148]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_GPIO_Init+0x2f0>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f47f aea3 	bne.w	80015fc <HAL_GPIO_Init+0x10>
  }
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	48000400 	.word	0x48000400
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000c00 	.word	0x48000c00
 80018d8:	48001000 	.word	0x48001000
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001920:	787b      	ldrb	r3, [r7, #1]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800192c:	e002      	b.n	8001934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e081      	b.n	8001a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fbb2 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e006      	b.n	80019c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d104      	bne.n	80019da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69d9      	ldr	r1, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	817b      	strh	r3, [r7, #10]
 8001a70:	4613      	mov	r3, r2
 8001a72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	f040 80da 	bne.w	8001c36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_Master_Transmit+0x30>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0d3      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a98:	f7ff fc92 	bl	80013c0 <HAL_GetTick>
 8001a9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2319      	movs	r3, #25
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f9f9 	bl	8001ea2 <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0be      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2221      	movs	r2, #33	; 0x21
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d90e      	bls.n	8001b0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	22ff      	movs	r2, #255	; 0xff
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	8979      	ldrh	r1, [r7, #10]
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fb86 	bl	8002214 <I2C_TransferConfig>
 8001b08:	e06c      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fb75 	bl	8002214 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b2a:	e05b      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	6a39      	ldr	r1, [r7, #32]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa05 	bl	8001f40 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e07b      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d034      	beq.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d130      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f988 	bl	8001ea2 <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e04d      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d90e      	bls.n	8001bc4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	8979      	ldrh	r1, [r7, #10]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 fb29 	bl	8002214 <I2C_TransferConfig>
 8001bc2:	e00f      	b.n	8001be4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	8979      	ldrh	r1, [r7, #10]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fb18 	bl	8002214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d19e      	bne.n	8001b2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	6a39      	ldr	r1, [r7, #32]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f9eb 	bl	8001fce <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e01a      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2220      	movs	r2, #32
 8001c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c16:	400b      	ands	r3, r1
 8001c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	80002000 	.word	0x80002000
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	f040 80f3 	bne.w	8001e50 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0e9      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d101      	bne.n	8001c8c <HAL_I2C_IsDeviceReady+0x44>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e0e2      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_I2C_IsDeviceReady+0x72>
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cb8:	e006      	b.n	8001cc8 <HAL_I2C_IsDeviceReady+0x80>
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb77 	bl	80013c0 <HAL_GetTick>
 8001cd2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d00:	e034      	b.n	8001d6c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01a      	beq.n	8001d40 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7ff fb59 	bl	80013c0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <HAL_I2C_IsDeviceReady+0xd8>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f043 0220 	orr.w	r2, r3, #32
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e088      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_I2C_IsDeviceReady+0x130>
 8001d72:	7fbb      	ldrb	r3, [r7, #30]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0c4      	beq.n	8001d02 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d01a      	beq.n	8001dbc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2120      	movs	r1, #32
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 f886 	bl	8001ea2 <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e058      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e04a      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2120      	movs	r1, #32
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f86b 	bl	8001ea2 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e03d      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2210      	movs	r2, #16
 8001ddc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d118      	bne.n	8001e20 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dfc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2120      	movs	r1, #32
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f84a 	bl	8001ea2 <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e01c      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	f63f af39 	bhi.w	8001ca2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f043 0220 	orr.w	r2, r3, #32
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d103      	bne.n	8001e78 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d007      	beq.n	8001e96 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	619a      	str	r2, [r3, #24]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb2:	e031      	b.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d02d      	beq.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff fa80 	bl	80013c0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d122      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4013      	ands	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f043 0220 	orr.w	r2, r3, #32
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00f      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	4013      	ands	r3, r2
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d0be      	beq.n	8001eb4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	e033      	b.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f87e 	bl	8002054 <I2C_IsErrorOccurred>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e031      	b.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d025      	beq.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7ff fa29 	bl	80013c0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11a      	bne.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d013      	beq.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e007      	b.n	8001fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d1c4      	bne.n	8001f4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fda:	e02f      	b.n	800203c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f837 	bl	8002054 <I2C_IsErrorOccurred>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e02d      	b.n	800204c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7ff f9e6 	bl	80013c0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d302      	bcc.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11a      	bne.n	800203c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d013      	beq.n	800203c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f043 0220 	orr.w	r2, r3, #32
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d1c8      	bne.n	8001fdc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d068      	beq.n	8002152 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2210      	movs	r2, #16
 8002086:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002088:	e049      	b.n	800211e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d045      	beq.n	800211e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff f995 	bl	80013c0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_IsErrorOccurred+0x54>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d13a      	bne.n	800211e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ca:	d121      	bne.n	8002110 <I2C_IsErrorOccurred+0xbc>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d2:	d01d      	beq.n	8002110 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d01a      	beq.n	8002110 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020ea:	f7ff f969 	bl	80013c0 <HAL_GetTick>
 80020ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f0:	e00e      	b.n	8002110 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020f2:	f7ff f965 	bl	80013c0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b19      	cmp	r3, #25
 80020fe:	d907      	bls.n	8002110 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	f043 0320 	orr.w	r3, r3, #32
 8002106:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800210e:	e006      	b.n	800211e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b20      	cmp	r3, #32
 800211c:	d1e9      	bne.n	80020f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b20      	cmp	r3, #32
 800212a:	d003      	beq.n	8002134 <I2C_IsErrorOccurred+0xe0>
 800212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0aa      	beq.n	800208a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2220      	movs	r2, #32
 8002142:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00b      	beq.n	800217c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff fe46 	bl	8001e5a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <I2C_IsErrorOccurred+0x1bc>)
 80021da:	400b      	ands	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002206:	4618      	mov	r0, r3
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	fe00e800 	.word	0xfe00e800

08002214 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	4613      	mov	r3, r2
 8002224:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800222c:	7a7b      	ldrb	r3, [r7, #9]
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002234:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	4313      	orrs	r3, r2
 800223e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002242:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	0d5b      	lsrs	r3, r3, #21
 800224e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <I2C_TransferConfig+0x60>)
 8002254:	430b      	orrs	r3, r1
 8002256:	43db      	mvns	r3, r3
 8002258:	ea02 0103 	and.w	r1, r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002266:	bf00      	nop
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	03ff63ff 	.word	0x03ff63ff

08002278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	d138      	bne.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002298:	2302      	movs	r3, #2
 800229a:	e032      	b.n	8002302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d139      	bne.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232e:	2302      	movs	r3, #2
 8002330:	e033      	b.n	800239a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2224      	movs	r2, #36	; 0x24
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f001 b823 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 817d 	beq.w	80026de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e4:	4bbc      	ldr	r3, [pc, #752]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4bb9      	ldr	r3, [pc, #740]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d15c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x10e>
 80023fc:	4bb6      	ldr	r3, [pc, #728]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d155      	bne.n	80024b6 <HAL_RCC_OscConfig+0x10e>
 800240a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_RCC_OscConfig+0x94>
 8002436:	4ba8      	ldr	r3, [pc, #672]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	e015      	b.n	8002468 <HAL_RCC_OscConfig+0xc0>
 800243c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002440:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002450:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002454:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002458:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002464:	4b9c      	ldr	r3, [pc, #624]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800246c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002470:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800247c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002480:	fab2 f282 	clz	r2, r2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f042 0220 	orr.w	r2, r2, #32
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f002 021f 	and.w	r2, r2, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f202 	lsl.w	r2, r1, r2
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 811f 	beq.w	80026dc <HAL_RCC_OscConfig+0x334>
 800249e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8116 	bne.w	80026dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f000 bfaf 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12e>
 80024c8:	4b83      	ldr	r3, [pc, #524]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a82      	ldr	r2, [pc, #520]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e036      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x158>
 80024e6:	4b7c      	ldr	r3, [pc, #496]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7b      	ldr	r2, [pc, #492]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e021      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x184>
 8002512:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a70      	ldr	r2, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6e      	ldr	r3, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6d      	ldr	r2, [pc, #436]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x19c>
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a69      	ldr	r2, [pc, #420]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a66      	ldr	r2, [pc, #408]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002544:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f023 020f 	bic.w	r2, r3, #15
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	495f      	ldr	r1, [pc, #380]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800255a:	4313      	orrs	r3, r2
 800255c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d059      	beq.n	8002622 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe ff27 	bl	80013c0 <HAL_GetTick>
 8002572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe ff22 	bl	80013c0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b64      	cmp	r3, #100	; 0x64
 8002586:	d902      	bls.n	800258e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	f000 bf43 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 800258e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002592:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_RCC_OscConfig+0x218>
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x244>
 80025c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025f8:	fa92 f2a2 	rbit	r2, r2
 80025fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002600:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ab      	beq.n	8002578 <HAL_RCC_OscConfig+0x1d0>
 8002620:	e05d      	b.n	80026de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fecd 	bl	80013c0 <HAL_GetTick>
 8002626:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe fec8 	bl	80013c0 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d902      	bls.n	8002642 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	f000 bee9 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002656:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x2cc>
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e015      	b.n	80026a0 <HAL_RCC_OscConfig+0x2f8>
 8002674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002678:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002688:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800268c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002690:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ab      	bne.n	800262c <HAL_RCC_OscConfig+0x284>
 80026d4:	e003      	b.n	80026de <HAL_RCC_OscConfig+0x336>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 817d 	beq.w	80029ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f4:	4ba6      	ldr	r3, [pc, #664]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002700:	4ba3      	ldr	r3, [pc, #652]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d172      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 800270c:	4ba0      	ldr	r3, [pc, #640]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d16c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800272a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x3a0>
 8002742:	4b93      	ldr	r3, [pc, #588]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	e013      	b.n	8002770 <HAL_RCC_OscConfig+0x3c8>
 8002748:	2302      	movs	r3, #2
 800274a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002760:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800276c:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	2202      	movs	r2, #2
 8002772:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002776:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002782:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f042 0220 	orr.w	r2, r2, #32
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	f002 021f 	and.w	r2, r2, #31
 8002796:	2101      	movs	r1, #1
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCC_OscConfig+0x410>
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f000 be2e 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	21f8      	movs	r1, #248	; 0xf8
 80027ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027d6:	fa91 f1a1 	rbit	r1, r1
 80027da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027e2:	fab1 f181 	clz	r1, r1
 80027e6:	b2c9      	uxtb	r1, r1
 80027e8:	408b      	lsls	r3, r1
 80027ea:	4969      	ldr	r1, [pc, #420]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f0:	e0fd      	b.n	80029ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8088 	beq.w	8002914 <HAL_RCC_OscConfig+0x56c>
 8002804:	2301      	movs	r3, #1
 8002806:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002816:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fdc6 	bl	80013c0 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fdc1 	bl	80013c0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	f000 bde2 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002862:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x4d8>
 800287a:	4b45      	ldr	r3, [pc, #276]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e013      	b.n	80028a8 <HAL_RCC_OscConfig+0x500>
 8002880:	2302      	movs	r3, #2
 8002882:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002892:	2302      	movs	r3, #2
 8002894:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002898:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2202      	movs	r2, #2
 80028aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028b2:	fa92 f2a2 	rbit	r2, r2
 80028b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0af      	beq.n	800283a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	21f8      	movs	r1, #248	; 0xf8
 80028f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028f8:	fa91 f1a1 	rbit	r1, r1
 80028fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002900:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002904:	fab1 f181 	clz	r1, r1
 8002908:	b2c9      	uxtb	r1, r1
 800290a:	408b      	lsls	r3, r1
 800290c:	4920      	ldr	r1, [pc, #128]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
 8002912:	e06c      	b.n	80029ee <HAL_RCC_OscConfig+0x646>
 8002914:	2301      	movs	r3, #1
 8002916:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002926:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002934:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	461a      	mov	r2, r3
 800293c:	2300      	movs	r3, #0
 800293e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe fd3e 	bl	80013c0 <HAL_GetTick>
 8002944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294a:	f7fe fd39 	bl	80013c0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d902      	bls.n	8002960 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	f000 bd5a 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002960:	2302      	movs	r3, #2
 8002962:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d104      	bne.n	8002994 <HAL_RCC_OscConfig+0x5ec>
 800298a:	4b01      	ldr	r3, [pc, #4]	; (8002990 <HAL_RCC_OscConfig+0x5e8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e015      	b.n	80029bc <HAL_RCC_OscConfig+0x614>
 8002990:	40021000 	.word	0x40021000
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029a6:	2302      	movs	r3, #2
 80029a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029b8:	4bc8      	ldr	r3, [pc, #800]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2202      	movs	r2, #2
 80029be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029c6:	fa92 f2a2 	rbit	r2, r2
 80029ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f042 0220 	orr.w	r2, r2, #32
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f002 021f 	and.w	r2, r2, #31
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ad      	bne.n	800294a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8110 	beq.w	8002c24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d079      	beq.n	8002b08 <HAL_RCC_OscConfig+0x760>
 8002a14:	2301      	movs	r3, #1
 8002a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4bab      	ldr	r3, [pc, #684]	; (8002ce0 <HAL_RCC_OscConfig+0x938>)
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fcbf 	bl	80013c0 <HAL_GetTick>
 8002a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fcba 	bl	80013c0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d902      	bls.n	8002a5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f000 bcdb 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a78:	2202      	movs	r2, #2
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab8:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	6019      	str	r1, [r3, #0]
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	fa93 f1a3 	rbit	r1, r3
 8002ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ada:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ade:	6019      	str	r1, [r3, #0]
  return result;
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0a0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x6a0>
 8002b06:	e08d      	b.n	8002c24 <HAL_RCC_OscConfig+0x87c>
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	fa93 f2a3 	rbit	r2, r3
 8002b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b2a:	601a      	str	r2, [r3, #0]
  return result;
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCC_OscConfig+0x938>)
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	461a      	mov	r2, r3
 8002b46:	2300      	movs	r3, #0
 8002b48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe fc39 	bl	80013c0 <HAL_GetTick>
 8002b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fc34 	bl	80013c0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d902      	bls.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f000 bc55 	b.w	8003414 <HAL_RCC_OscConfig+0x106c>
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b72:	2202      	movs	r2, #2
 8002b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b96:	2202      	movs	r2, #2
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002be2:	2102      	movs	r1, #2
 8002be4:	6019      	str	r1, [r3, #0]
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	fa93 f1a3 	rbit	r1, r3
 8002bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bfc:	6019      	str	r1, [r3, #0]
  return result;
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d197      	bne.n	8002b54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 81a1 	beq.w	8002f7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c40:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	61d3      	str	r3, [r2, #28]
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11a      	bne.n	8002cbc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fb95 	bl	80013c0 <HAL_GetTick>
 8002c96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	e009      	b.n	8002cb0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe fb90 	bl	80013c0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e3b1      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x93c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d10d      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x940>
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a02      	ldr	r2, [pc, #8]	; (8002cdc <HAL_RCC_OscConfig+0x934>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	e03c      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	10908120 	.word	0x10908120
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x96a>
 8002cf8:	4bc1      	ldr	r3, [pc, #772]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4ac0      	ldr	r2, [pc, #768]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	4bbe      	ldr	r3, [pc, #760]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4abd      	ldr	r2, [pc, #756]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	e020      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x994>
 8002d22:	4bb7      	ldr	r3, [pc, #732]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4ab6      	ldr	r2, [pc, #728]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4bb4      	ldr	r3, [pc, #720]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4ab3      	ldr	r2, [pc, #716]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0x9ac>
 8002d3c:	4bb0      	ldr	r3, [pc, #704]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	4aaf      	ldr	r2, [pc, #700]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6213      	str	r3, [r2, #32]
 8002d48:	4bad      	ldr	r3, [pc, #692]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4aac      	ldr	r2, [pc, #688]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	f023 0304 	bic.w	r3, r3, #4
 8002d52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8081 	beq.w	8002e68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fb2b 	bl	80013c0 <HAL_GetTick>
 8002d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f7fe fb26 	bl	80013c0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e345      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d90:	2202      	movs	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db4:	2202      	movs	r2, #2
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dce:	601a      	str	r2, [r3, #0]
  return result;
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0302 	orr.w	r3, r3, #2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0xa4c>
 8002dee:	4b84      	ldr	r3, [pc, #528]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	e013      	b.n	8002e1c <HAL_RCC_OscConfig+0xa74>
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	4b79      	ldr	r3, [pc, #484]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e24:	2102      	movs	r1, #2
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	fa92 f1a2 	rbit	r1, r2
 8002e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e3e:	6011      	str	r1, [r2, #0]
  return result;
 8002e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f002 021f 	and.w	r2, r2, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d084      	beq.n	8002d70 <HAL_RCC_OscConfig+0x9c8>
 8002e66:	e07f      	b.n	8002f68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe faaa 	bl	80013c0 <HAL_GetTick>
 8002e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe faa5 	bl	80013c0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e2c4      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e92:	2202      	movs	r2, #2
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	fa93 f2a3 	rbit	r2, r3
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed0:	601a      	str	r2, [r3, #0]
  return result;
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002eda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d102      	bne.n	8002ef6 <HAL_RCC_OscConfig+0xb4e>
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	e013      	b.n	8002f1e <HAL_RCC_OscConfig+0xb76>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002efe:	2202      	movs	r2, #2
 8002f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	fa93 f2a3 	rbit	r2, r3
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b39      	ldr	r3, [pc, #228]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f26:	2102      	movs	r1, #2
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	fa92 f1a2 	rbit	r1, r2
 8002f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f40:	6011      	str	r1, [r2, #0]
  return result;
 8002f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f002 021f 	and.w	r2, r2, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d184      	bne.n	8002e72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8242 	beq.w	8003412 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_RCC_OscConfig+0xc58>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	f000 8213 	beq.w	80033c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	f040 8162 	bne.w	8003272 <HAL_RCC_OscConfig+0xeca>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f9e4 	bl	80013c0 <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	e00c      	b.n	8003018 <HAL_RCC_OscConfig+0xc70>
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe f9dc 	bl	80013c0 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1fd      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	fa93 f2a3 	rbit	r2, r3
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800303c:	601a      	str	r2, [r3, #0]
  return result;
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003046:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_RCC_OscConfig+0xcba>
 800305c:	4bb0      	ldr	r3, [pc, #704]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e027      	b.n	80030b2 <HAL_RCC_OscConfig+0xd0a>
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800306a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800306e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	fa93 f2a3 	rbit	r2, r3
 80030a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	4b9c      	ldr	r3, [pc, #624]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030be:	6011      	str	r1, [r2, #0]
 80030c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	fa92 f1a2 	rbit	r1, r2
 80030ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030d6:	6011      	str	r1, [r2, #0]
  return result;
 80030d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d182      	bne.n	8003004 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	430b      	orrs	r3, r1
 8003120:	497f      	ldr	r1, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003122:	4313      	orrs	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800312e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800314a:	601a      	str	r2, [r3, #0]
  return result;
 800314c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003150:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003154:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003160:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	461a      	mov	r2, r3
 8003168:	2301      	movs	r3, #1
 800316a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe f928 	bl	80013c0 <HAL_GetTick>
 8003170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	e009      	b.n	800318a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe f923 	bl	80013c0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e144      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	fa93 f2a3 	rbit	r2, r3
 80031a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031ae:	601a      	str	r2, [r3, #0]
  return result;
 80031b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0xe2c>
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e027      	b.n	8003224 <HAL_RCC_OscConfig+0xe7c>
 80031d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	fa93 f2a3 	rbit	r2, r3
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	4b3f      	ldr	r3, [pc, #252]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003228:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800322c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003236:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	fa92 f1a2 	rbit	r1, r2
 8003240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003244:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003248:	6011      	str	r1, [r2, #0]
  return result;
 800324a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800324e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d082      	beq.n	8003176 <HAL_RCC_OscConfig+0xdce>
 8003270:	e0cf      	b.n	8003412 <HAL_RCC_OscConfig+0x106a>
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800327a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800327e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	fa93 f2a3 	rbit	r2, r3
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003296:	601a      	str	r2, [r3, #0]
  return result;
 8003298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	461a      	mov	r2, r3
 80032b4:	2300      	movs	r3, #0
 80032b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe f882 	bl	80013c0 <HAL_GetTick>
 80032bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe f87d 	bl	80013c0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e09e      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
 80032d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	fa93 f2a3 	rbit	r2, r3
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fa:	601a      	str	r2, [r3, #0]
  return result;
 80032fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003300:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d104      	bne.n	8003324 <HAL_RCC_OscConfig+0xf7c>
 800331a:	4b01      	ldr	r3, [pc, #4]	; (8003320 <HAL_RCC_OscConfig+0xf78>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	e029      	b.n	8003374 <HAL_RCC_OscConfig+0xfcc>
 8003320:	40021000 	.word	0x40021000
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800332c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x1078>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003378:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800337c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003386:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	fa92 f1a2 	rbit	r1, r2
 8003390:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003394:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003398:	6011      	str	r1, [r2, #0]
  return result;
 800339a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fab2 f282 	clz	r2, r2
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f002 021f 	and.w	r2, r2, #31
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d180      	bne.n	80032c2 <HAL_RCC_OscConfig+0xf1a>
 80033c0:	e027      	b.n	8003412 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01e      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_OscConfig+0x1078>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800340a:	429a      	cmp	r2, r3
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b09e      	sub	sp, #120	; 0x78
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e162      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b90      	ldr	r3, [pc, #576]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d910      	bls.n	800346c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b8d      	ldr	r3, [pc, #564]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 0207 	bic.w	r2, r3, #7
 8003452:	498b      	ldr	r1, [pc, #556]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b89      	ldr	r3, [pc, #548]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e14a      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	497f      	ldr	r1, [pc, #508]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003486:	4313      	orrs	r3, r2
 8003488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80dc 	beq.w	8003650 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d13c      	bne.n	800351a <HAL_RCC_ClockConfig+0xf6>
 80034a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_ClockConfig+0xa6>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e00f      	b.n	80034ea <HAL_RCC_ClockConfig+0xc6>
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	667b      	str	r3, [r7, #100]	; 0x64
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80034f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034f2:	fa92 f2a2 	rbit	r2, r2
 80034f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d17b      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0f3      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d13c      	bne.n	800359c <HAL_RCC_ClockConfig+0x178>
 8003522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_ClockConfig+0x128>
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e00f      	b.n	800356c <HAL_RCC_ClockConfig+0x148>
 800354c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
 800355a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003570:	63ba      	str	r2, [r7, #56]	; 0x38
 8003572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003574:	fa92 f2a2 	rbit	r2, r2
 8003578:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800357a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357c:	fab2 f282 	clz	r2, r2
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	f042 0220 	orr.w	r2, r2, #32
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	f002 021f 	and.w	r2, r2, #31
 800358c:	2101      	movs	r1, #1
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d13a      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b2      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 800359c:	2302      	movs	r3, #2
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x1a0>
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e00d      	b.n	80035e0 <HAL_RCC_ClockConfig+0x1bc>
 80035c4:	2302      	movs	r3, #2
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	2302      	movs	r3, #2
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	61ba      	str	r2, [r7, #24]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	fa92 f2a2 	rbit	r2, r2
 80035ea:	617a      	str	r2, [r7, #20]
  return result;
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	fab2 f282 	clz	r2, r2
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	f042 0220 	orr.w	r2, r2, #32
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f002 021f 	and.w	r2, r2, #31
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e079      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	491a      	ldr	r1, [pc, #104]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fece 	bl	80013c0 <HAL_GetTick>
 8003624:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd feca 	bl	80013c0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e061      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_ClockConfig+0x260>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d214      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 0207 	bic.w	r2, r3, #7
 8003666:	4906      	ldr	r1, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_RCC_ClockConfig+0x25c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e040      	b.n	8003702 <HAL_RCC_ClockConfig+0x2de>
 8003680:	40022000 	.word	0x40022000
 8003684:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	491a      	ldr	r1, [pc, #104]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4912      	ldr	r1, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036c6:	f000 f829 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4b0f      	ldr	r3, [pc, #60]	; (800370c <HAL_RCC_ClockConfig+0x2e8>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d4:	22f0      	movs	r2, #240	; 0xf0
 80036d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	fa92 f2a2 	rbit	r2, r2
 80036de:	60fa      	str	r2, [r7, #12]
  return result;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	40d3      	lsrs	r3, r2
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x2ec>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	fa21 f303 	lsr.w	r3, r1, r3
 80036f2:	4a08      	ldr	r2, [pc, #32]	; (8003714 <HAL_RCC_ClockConfig+0x2f0>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <HAL_RCC_ClockConfig+0x2f4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd fe1c 	bl	8001338 <HAL_InitTick>
  
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3778      	adds	r7, #120	; 0x78
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	080058a4 	.word	0x080058a4
 8003714:	20000008 	.word	0x20000008
 8003718:	2000000c 	.word	0x2000000c

0800371c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b08b      	sub	sp, #44	; 0x2c
 8003720:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b04      	cmp	r3, #4
 8003744:	d002      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x30>
 8003746:	2b08      	cmp	r3, #8
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0x36>
 800374a:	e03c      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	e03c      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003758:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800375c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	fa92 f2a2 	rbit	r2, r2
 8003764:	607a      	str	r2, [r7, #4]
  return result;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	40d3      	lsrs	r3, r2
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003772:	5cd3      	ldrb	r3, [r2, r3]
 8003774:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	220f      	movs	r2, #15
 8003780:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa92 f2a2 	rbit	r2, r2
 8003788:	60fa      	str	r2, [r7, #12]
  return result;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	40d3      	lsrs	r3, r2
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	e004      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	623b      	str	r3, [r7, #32]
      break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037c8:	623b      	str	r3, [r7, #32]
      break;
 80037ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	080058b4 	.word	0x080058b4
 80037e8:	080058c4 	.word	0x080058c4
 80037ec:	003d0900 	.word	0x003d0900

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b092      	sub	sp, #72	; 0x48
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80d4 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003814:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10e      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	61d3      	str	r3, [r2, #28]
 800382c:	4b48      	ldr	r3, [pc, #288]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b45      	ldr	r3, [pc, #276]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fd fdb3 	bl	80013c0 <HAL_GetTick>
 800385a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fd fdaf 	bl	80013c0 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e169      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8084 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003898:	429a      	cmp	r2, r3
 800389a:	d07c      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	461a      	mov	r2, r3
 80038c6:	2301      	movs	r3, #1
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038e4:	4413      	add	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	461a      	mov	r2, r3
 80038ea:	2300      	movs	r3, #0
 80038ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d04b      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fd5f 	bl	80013c0 <HAL_GetTick>
 8003902:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fd5b 	bl	80013c0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e113      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800391c:	2302      	movs	r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
  return result;
 8003934:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d108      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800394a:	4b01      	ldr	r3, [pc, #4]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	e00d      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003950:	40021000 	.word	0x40021000
 8003954:	40007000 	.word	0x40007000
 8003958:	10908100 	.word	0x10908100
 800395c:	2302      	movs	r3, #2
 800395e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2202      	movs	r2, #2
 800396e:	613a      	str	r2, [r7, #16]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	fa92 f2a2 	rbit	r2, r2
 8003976:	60fa      	str	r2, [r7, #12]
  return result;
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	fab2 f282 	clz	r2, r2
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	f002 021f 	and.w	r2, r2, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f202 	lsl.w	r2, r1, r2
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0b7      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	496a      	ldr	r1, [pc, #424]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	f023 0203 	bic.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	495d      	ldr	r1, [pc, #372]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	4956      	ldr	r1, [pc, #344]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a04:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	494e      	ldr	r1, [pc, #312]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f023 0210 	bic.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4947      	ldr	r1, [pc, #284]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a40:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	493f      	ldr	r1, [pc, #252]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f023 0220 	bic.w	r2, r3, #32
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4938      	ldr	r1, [pc, #224]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a7c:	4b33      	ldr	r3, [pc, #204]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	4930      	ldr	r1, [pc, #192]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	4929      	ldr	r1, [pc, #164]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4921      	ldr	r1, [pc, #132]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	491a      	ldr	r1, [pc, #104]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003af4:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	4912      	ldr	r1, [pc, #72]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	490b      	ldr	r1, [pc, #44]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3748      	adds	r7, #72	; 0x48
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e049      	b.n	8003bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fb0c 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f000 f962 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d001      	beq.n	8003c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e042      	b.n	8003c9e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_TIM_Base_Start+0xac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_TIM_Base_Start+0x5c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c32:	d013      	beq.n	8003c5c <HAL_TIM_Base_Start+0x5c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <HAL_TIM_Base_Start+0xb0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_TIM_Base_Start+0x5c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_TIM_Base_Start+0xb4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_TIM_Base_Start+0x5c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	; (8003cb8 <HAL_TIM_Base_Start+0xb8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_Base_Start+0x5c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_TIM_Base_Start+0xbc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d115      	bne.n	8003c88 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_TIM_Base_Start+0xc0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d015      	beq.n	8003c9a <HAL_TIM_Base_Start+0x9a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d011      	beq.n	8003c9a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	e008      	b.n	8003c9a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e000      	b.n	8003c9c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	00010007 	.word	0x00010007

08003cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0b6      	b.n	8003e4e <HAL_TIM_ConfigClockSource+0x18a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1c:	d03e      	beq.n	8003d9c <HAL_TIM_ConfigClockSource+0xd8>
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	f200 8087 	bhi.w	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	f000 8086 	beq.w	8003e3a <HAL_TIM_ConfigClockSource+0x176>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d87f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d34:	2b70      	cmp	r3, #112	; 0x70
 8003d36:	d01a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0xaa>
 8003d38:	2b70      	cmp	r3, #112	; 0x70
 8003d3a:	d87b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d3c:	2b60      	cmp	r3, #96	; 0x60
 8003d3e:	d050      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x11e>
 8003d40:	2b60      	cmp	r3, #96	; 0x60
 8003d42:	d877      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d44:	2b50      	cmp	r3, #80	; 0x50
 8003d46:	d03c      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xfe>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d873      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	2b40      	cmp	r3, #64	; 0x40
 8003d4e:	d058      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x13e>
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d86f      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d064      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d58:	2b30      	cmp	r3, #48	; 0x30
 8003d5a:	d86b      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d060      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d867      	bhi.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d05a      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x15e>
 8003d6c:	e062      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d7e:	f000 f975 	bl	800406c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	609a      	str	r2, [r3, #8]
      break;
 8003d9a:	e04f      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dac:	f000 f95e 	bl	800406c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbe:	609a      	str	r2, [r3, #8]
      break;
 8003dc0:	e03c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 f8d2 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2150      	movs	r1, #80	; 0x50
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f92b 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e02c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dee:	461a      	mov	r2, r3
 8003df0:	f000 f8f1 	bl	8003fd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2160      	movs	r1, #96	; 0x60
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f91b 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e01c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 f8b2 	bl	8003f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f90b 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f000 f902 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3c      	ldr	r2, [pc, #240]	; (8003f5c <TIM_Base_SetConfig+0x104>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00f      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a39      	ldr	r2, [pc, #228]	; (8003f60 <TIM_Base_SetConfig+0x108>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <TIM_Base_SetConfig+0x10c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a37      	ldr	r2, [pc, #220]	; (8003f68 <TIM_Base_SetConfig+0x110>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <TIM_Base_SetConfig+0x104>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d01b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d017      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0x108>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0x10c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0x110>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <TIM_Base_SetConfig+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <TIM_Base_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <TIM_Base_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <TIM_Base_SetConfig+0x104>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <TIM_Base_SetConfig+0xe8>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <TIM_Base_SetConfig+0x110>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_Base_SetConfig+0xe8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_Base_SetConfig+0xe8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0f      	ldr	r2, [pc, #60]	; (8003f70 <TIM_Base_SetConfig+0x118>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0xe8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <TIM_Base_SetConfig+0x11c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d103      	bne.n	8003f48 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0201 	bic.w	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 030a 	bic.w	r3, r3, #10
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b087      	sub	sp, #28
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0210 	bic.w	r2, r3, #16
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	031b      	lsls	r3, r3, #12
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	f043 0307 	orr.w	r3, r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	021a      	lsls	r2, r3, #8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	431a      	orrs	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	4313      	orrs	r3, r2
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	609a      	str	r2, [r3, #8]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e063      	b.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d108      	bne.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004136:	d013      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40014000 	.word	0x40014000

080041ac <siprintf>:
 80041ac:	b40e      	push	{r1, r2, r3}
 80041ae:	b500      	push	{lr}
 80041b0:	b09c      	sub	sp, #112	; 0x70
 80041b2:	ab1d      	add	r3, sp, #116	; 0x74
 80041b4:	9002      	str	r0, [sp, #8]
 80041b6:	9006      	str	r0, [sp, #24]
 80041b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041bc:	4809      	ldr	r0, [pc, #36]	; (80041e4 <siprintf+0x38>)
 80041be:	9107      	str	r1, [sp, #28]
 80041c0:	9104      	str	r1, [sp, #16]
 80041c2:	4909      	ldr	r1, [pc, #36]	; (80041e8 <siprintf+0x3c>)
 80041c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	a902      	add	r1, sp, #8
 80041d0:	f000 f992 	bl	80044f8 <_svfiprintf_r>
 80041d4:	9b02      	ldr	r3, [sp, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	b01c      	add	sp, #112	; 0x70
 80041dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041e0:	b003      	add	sp, #12
 80041e2:	4770      	bx	lr
 80041e4:	20000060 	.word	0x20000060
 80041e8:	ffff0208 	.word	0xffff0208

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <__errno>:
 80041fc:	4b01      	ldr	r3, [pc, #4]	; (8004204 <__errno+0x8>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000060 	.word	0x20000060

08004208 <__libc_init_array>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4d0d      	ldr	r5, [pc, #52]	; (8004240 <__libc_init_array+0x38>)
 800420c:	4c0d      	ldr	r4, [pc, #52]	; (8004244 <__libc_init_array+0x3c>)
 800420e:	1b64      	subs	r4, r4, r5
 8004210:	10a4      	asrs	r4, r4, #2
 8004212:	2600      	movs	r6, #0
 8004214:	42a6      	cmp	r6, r4
 8004216:	d109      	bne.n	800422c <__libc_init_array+0x24>
 8004218:	4d0b      	ldr	r5, [pc, #44]	; (8004248 <__libc_init_array+0x40>)
 800421a:	4c0c      	ldr	r4, [pc, #48]	; (800424c <__libc_init_array+0x44>)
 800421c:	f000 fc6a 	bl	8004af4 <_init>
 8004220:	1b64      	subs	r4, r4, r5
 8004222:	10a4      	asrs	r4, r4, #2
 8004224:	2600      	movs	r6, #0
 8004226:	42a6      	cmp	r6, r4
 8004228:	d105      	bne.n	8004236 <__libc_init_array+0x2e>
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004230:	4798      	blx	r3
 8004232:	3601      	adds	r6, #1
 8004234:	e7ee      	b.n	8004214 <__libc_init_array+0xc>
 8004236:	f855 3b04 	ldr.w	r3, [r5], #4
 800423a:	4798      	blx	r3
 800423c:	3601      	adds	r6, #1
 800423e:	e7f2      	b.n	8004226 <__libc_init_array+0x1e>
 8004240:	08005908 	.word	0x08005908
 8004244:	08005908 	.word	0x08005908
 8004248:	08005908 	.word	0x08005908
 800424c:	0800590c 	.word	0x0800590c

08004250 <__retarget_lock_acquire_recursive>:
 8004250:	4770      	bx	lr

08004252 <__retarget_lock_release_recursive>:
 8004252:	4770      	bx	lr

08004254 <_free_r>:
 8004254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004256:	2900      	cmp	r1, #0
 8004258:	d044      	beq.n	80042e4 <_free_r+0x90>
 800425a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425e:	9001      	str	r0, [sp, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f1a1 0404 	sub.w	r4, r1, #4
 8004266:	bfb8      	it	lt
 8004268:	18e4      	addlt	r4, r4, r3
 800426a:	f000 f8df 	bl	800442c <__malloc_lock>
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <_free_r+0x94>)
 8004270:	9801      	ldr	r0, [sp, #4]
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	b933      	cbnz	r3, 8004284 <_free_r+0x30>
 8004276:	6063      	str	r3, [r4, #4]
 8004278:	6014      	str	r4, [r2, #0]
 800427a:	b003      	add	sp, #12
 800427c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004280:	f000 b8da 	b.w	8004438 <__malloc_unlock>
 8004284:	42a3      	cmp	r3, r4
 8004286:	d908      	bls.n	800429a <_free_r+0x46>
 8004288:	6825      	ldr	r5, [r4, #0]
 800428a:	1961      	adds	r1, r4, r5
 800428c:	428b      	cmp	r3, r1
 800428e:	bf01      	itttt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	1949      	addeq	r1, r1, r5
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	e7ed      	b.n	8004276 <_free_r+0x22>
 800429a:	461a      	mov	r2, r3
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b10b      	cbz	r3, 80042a4 <_free_r+0x50>
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d9fa      	bls.n	800429a <_free_r+0x46>
 80042a4:	6811      	ldr	r1, [r2, #0]
 80042a6:	1855      	adds	r5, r2, r1
 80042a8:	42a5      	cmp	r5, r4
 80042aa:	d10b      	bne.n	80042c4 <_free_r+0x70>
 80042ac:	6824      	ldr	r4, [r4, #0]
 80042ae:	4421      	add	r1, r4
 80042b0:	1854      	adds	r4, r2, r1
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	6011      	str	r1, [r2, #0]
 80042b6:	d1e0      	bne.n	800427a <_free_r+0x26>
 80042b8:	681c      	ldr	r4, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	6053      	str	r3, [r2, #4]
 80042be:	440c      	add	r4, r1
 80042c0:	6014      	str	r4, [r2, #0]
 80042c2:	e7da      	b.n	800427a <_free_r+0x26>
 80042c4:	d902      	bls.n	80042cc <_free_r+0x78>
 80042c6:	230c      	movs	r3, #12
 80042c8:	6003      	str	r3, [r0, #0]
 80042ca:	e7d6      	b.n	800427a <_free_r+0x26>
 80042cc:	6825      	ldr	r5, [r4, #0]
 80042ce:	1961      	adds	r1, r4, r5
 80042d0:	428b      	cmp	r3, r1
 80042d2:	bf04      	itt	eq
 80042d4:	6819      	ldreq	r1, [r3, #0]
 80042d6:	685b      	ldreq	r3, [r3, #4]
 80042d8:	6063      	str	r3, [r4, #4]
 80042da:	bf04      	itt	eq
 80042dc:	1949      	addeq	r1, r1, r5
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	6054      	str	r4, [r2, #4]
 80042e2:	e7ca      	b.n	800427a <_free_r+0x26>
 80042e4:	b003      	add	sp, #12
 80042e6:	bd30      	pop	{r4, r5, pc}
 80042e8:	200006a4 	.word	0x200006a4

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0e      	ldr	r6, [pc, #56]	; (8004328 <sbrk_aligned+0x3c>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f000 fba6 	bl	8004a48 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 fba1 	bl	8004a48 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d00a      	beq.n	8004320 <sbrk_aligned+0x34>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d007      	beq.n	8004324 <sbrk_aligned+0x38>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4628      	mov	r0, r5
 8004318:	f000 fb96 	bl	8004a48 <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d101      	bne.n	8004324 <sbrk_aligned+0x38>
 8004320:	f04f 34ff 	mov.w	r4, #4294967295
 8004324:	4620      	mov	r0, r4
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	200006a8 	.word	0x200006a8

0800432c <_malloc_r>:
 800432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004330:	1ccd      	adds	r5, r1, #3
 8004332:	f025 0503 	bic.w	r5, r5, #3
 8004336:	3508      	adds	r5, #8
 8004338:	2d0c      	cmp	r5, #12
 800433a:	bf38      	it	cc
 800433c:	250c      	movcc	r5, #12
 800433e:	2d00      	cmp	r5, #0
 8004340:	4607      	mov	r7, r0
 8004342:	db01      	blt.n	8004348 <_malloc_r+0x1c>
 8004344:	42a9      	cmp	r1, r5
 8004346:	d905      	bls.n	8004354 <_malloc_r+0x28>
 8004348:	230c      	movs	r3, #12
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	2600      	movs	r6, #0
 800434e:	4630      	mov	r0, r6
 8004350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004428 <_malloc_r+0xfc>
 8004358:	f000 f868 	bl	800442c <__malloc_lock>
 800435c:	f8d8 3000 	ldr.w	r3, [r8]
 8004360:	461c      	mov	r4, r3
 8004362:	bb5c      	cbnz	r4, 80043bc <_malloc_r+0x90>
 8004364:	4629      	mov	r1, r5
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff ffc0 	bl	80042ec <sbrk_aligned>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	4604      	mov	r4, r0
 8004370:	d155      	bne.n	800441e <_malloc_r+0xf2>
 8004372:	f8d8 4000 	ldr.w	r4, [r8]
 8004376:	4626      	mov	r6, r4
 8004378:	2e00      	cmp	r6, #0
 800437a:	d145      	bne.n	8004408 <_malloc_r+0xdc>
 800437c:	2c00      	cmp	r4, #0
 800437e:	d048      	beq.n	8004412 <_malloc_r+0xe6>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	4631      	mov	r1, r6
 8004384:	4638      	mov	r0, r7
 8004386:	eb04 0903 	add.w	r9, r4, r3
 800438a:	f000 fb5d 	bl	8004a48 <_sbrk_r>
 800438e:	4581      	cmp	r9, r0
 8004390:	d13f      	bne.n	8004412 <_malloc_r+0xe6>
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	1a6d      	subs	r5, r5, r1
 8004396:	4629      	mov	r1, r5
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff ffa7 	bl	80042ec <sbrk_aligned>
 800439e:	3001      	adds	r0, #1
 80043a0:	d037      	beq.n	8004412 <_malloc_r+0xe6>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	442b      	add	r3, r5
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	f8d8 3000 	ldr.w	r3, [r8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d038      	beq.n	8004422 <_malloc_r+0xf6>
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d12b      	bne.n	800440e <_malloc_r+0xe2>
 80043b6:	2200      	movs	r2, #0
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	e00f      	b.n	80043dc <_malloc_r+0xb0>
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	1b52      	subs	r2, r2, r5
 80043c0:	d41f      	bmi.n	8004402 <_malloc_r+0xd6>
 80043c2:	2a0b      	cmp	r2, #11
 80043c4:	d917      	bls.n	80043f6 <_malloc_r+0xca>
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	6025      	str	r5, [r4, #0]
 80043cc:	bf18      	it	ne
 80043ce:	6059      	strne	r1, [r3, #4]
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	bf08      	it	eq
 80043d4:	f8c8 1000 	streq.w	r1, [r8]
 80043d8:	5162      	str	r2, [r4, r5]
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	4638      	mov	r0, r7
 80043de:	f104 060b 	add.w	r6, r4, #11
 80043e2:	f000 f829 	bl	8004438 <__malloc_unlock>
 80043e6:	f026 0607 	bic.w	r6, r6, #7
 80043ea:	1d23      	adds	r3, r4, #4
 80043ec:	1af2      	subs	r2, r6, r3
 80043ee:	d0ae      	beq.n	800434e <_malloc_r+0x22>
 80043f0:	1b9b      	subs	r3, r3, r6
 80043f2:	50a3      	str	r3, [r4, r2]
 80043f4:	e7ab      	b.n	800434e <_malloc_r+0x22>
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	d1dd      	bne.n	80043b8 <_malloc_r+0x8c>
 80043fc:	f8c8 2000 	str.w	r2, [r8]
 8004400:	e7ec      	b.n	80043dc <_malloc_r+0xb0>
 8004402:	4623      	mov	r3, r4
 8004404:	6864      	ldr	r4, [r4, #4]
 8004406:	e7ac      	b.n	8004362 <_malloc_r+0x36>
 8004408:	4634      	mov	r4, r6
 800440a:	6876      	ldr	r6, [r6, #4]
 800440c:	e7b4      	b.n	8004378 <_malloc_r+0x4c>
 800440e:	4613      	mov	r3, r2
 8004410:	e7cc      	b.n	80043ac <_malloc_r+0x80>
 8004412:	230c      	movs	r3, #12
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4638      	mov	r0, r7
 8004418:	f000 f80e 	bl	8004438 <__malloc_unlock>
 800441c:	e797      	b.n	800434e <_malloc_r+0x22>
 800441e:	6025      	str	r5, [r4, #0]
 8004420:	e7dc      	b.n	80043dc <_malloc_r+0xb0>
 8004422:	605b      	str	r3, [r3, #4]
 8004424:	deff      	udf	#255	; 0xff
 8004426:	bf00      	nop
 8004428:	200006a4 	.word	0x200006a4

0800442c <__malloc_lock>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__malloc_lock+0x8>)
 800442e:	f7ff bf0f 	b.w	8004250 <__retarget_lock_acquire_recursive>
 8004432:	bf00      	nop
 8004434:	200006a0 	.word	0x200006a0

08004438 <__malloc_unlock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_unlock+0x8>)
 800443a:	f7ff bf0a 	b.w	8004252 <__retarget_lock_release_recursive>
 800443e:	bf00      	nop
 8004440:	200006a0 	.word	0x200006a0

08004444 <__ssputs_r>:
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	688e      	ldr	r6, [r1, #8]
 800444a:	461f      	mov	r7, r3
 800444c:	42be      	cmp	r6, r7
 800444e:	680b      	ldr	r3, [r1, #0]
 8004450:	4682      	mov	sl, r0
 8004452:	460c      	mov	r4, r1
 8004454:	4690      	mov	r8, r2
 8004456:	d82c      	bhi.n	80044b2 <__ssputs_r+0x6e>
 8004458:	898a      	ldrh	r2, [r1, #12]
 800445a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800445e:	d026      	beq.n	80044ae <__ssputs_r+0x6a>
 8004460:	6965      	ldr	r5, [r4, #20]
 8004462:	6909      	ldr	r1, [r1, #16]
 8004464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004468:	eba3 0901 	sub.w	r9, r3, r1
 800446c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004470:	1c7b      	adds	r3, r7, #1
 8004472:	444b      	add	r3, r9
 8004474:	106d      	asrs	r5, r5, #1
 8004476:	429d      	cmp	r5, r3
 8004478:	bf38      	it	cc
 800447a:	461d      	movcc	r5, r3
 800447c:	0553      	lsls	r3, r2, #21
 800447e:	d527      	bpl.n	80044d0 <__ssputs_r+0x8c>
 8004480:	4629      	mov	r1, r5
 8004482:	f7ff ff53 	bl	800432c <_malloc_r>
 8004486:	4606      	mov	r6, r0
 8004488:	b360      	cbz	r0, 80044e4 <__ssputs_r+0xa0>
 800448a:	6921      	ldr	r1, [r4, #16]
 800448c:	464a      	mov	r2, r9
 800448e:	f000 faeb 	bl	8004a68 <memcpy>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	6126      	str	r6, [r4, #16]
 80044a0:	6165      	str	r5, [r4, #20]
 80044a2:	444e      	add	r6, r9
 80044a4:	eba5 0509 	sub.w	r5, r5, r9
 80044a8:	6026      	str	r6, [r4, #0]
 80044aa:	60a5      	str	r5, [r4, #8]
 80044ac:	463e      	mov	r6, r7
 80044ae:	42be      	cmp	r6, r7
 80044b0:	d900      	bls.n	80044b4 <__ssputs_r+0x70>
 80044b2:	463e      	mov	r6, r7
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	4632      	mov	r2, r6
 80044b8:	4641      	mov	r1, r8
 80044ba:	f000 faab 	bl	8004a14 <memmove>
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	1b9b      	subs	r3, r3, r6
 80044c2:	60a3      	str	r3, [r4, #8]
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	4433      	add	r3, r6
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	2000      	movs	r0, #0
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	462a      	mov	r2, r5
 80044d2:	f000 fad7 	bl	8004a84 <_realloc_r>
 80044d6:	4606      	mov	r6, r0
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1e0      	bne.n	800449e <__ssputs_r+0x5a>
 80044dc:	6921      	ldr	r1, [r4, #16]
 80044de:	4650      	mov	r0, sl
 80044e0:	f7ff feb8 	bl	8004254 <_free_r>
 80044e4:	230c      	movs	r3, #12
 80044e6:	f8ca 3000 	str.w	r3, [sl]
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f0:	81a3      	strh	r3, [r4, #12]
 80044f2:	f04f 30ff 	mov.w	r0, #4294967295
 80044f6:	e7e9      	b.n	80044cc <__ssputs_r+0x88>

080044f8 <_svfiprintf_r>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	4698      	mov	r8, r3
 80044fe:	898b      	ldrh	r3, [r1, #12]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	b09d      	sub	sp, #116	; 0x74
 8004504:	4607      	mov	r7, r0
 8004506:	460d      	mov	r5, r1
 8004508:	4614      	mov	r4, r2
 800450a:	d50e      	bpl.n	800452a <_svfiprintf_r+0x32>
 800450c:	690b      	ldr	r3, [r1, #16]
 800450e:	b963      	cbnz	r3, 800452a <_svfiprintf_r+0x32>
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	f7ff ff0b 	bl	800432c <_malloc_r>
 8004516:	6028      	str	r0, [r5, #0]
 8004518:	6128      	str	r0, [r5, #16]
 800451a:	b920      	cbnz	r0, 8004526 <_svfiprintf_r+0x2e>
 800451c:	230c      	movs	r3, #12
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	e0d0      	b.n	80046c8 <_svfiprintf_r+0x1d0>
 8004526:	2340      	movs	r3, #64	; 0x40
 8004528:	616b      	str	r3, [r5, #20]
 800452a:	2300      	movs	r3, #0
 800452c:	9309      	str	r3, [sp, #36]	; 0x24
 800452e:	2320      	movs	r3, #32
 8004530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004534:	f8cd 800c 	str.w	r8, [sp, #12]
 8004538:	2330      	movs	r3, #48	; 0x30
 800453a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80046e0 <_svfiprintf_r+0x1e8>
 800453e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004542:	f04f 0901 	mov.w	r9, #1
 8004546:	4623      	mov	r3, r4
 8004548:	469a      	mov	sl, r3
 800454a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800454e:	b10a      	cbz	r2, 8004554 <_svfiprintf_r+0x5c>
 8004550:	2a25      	cmp	r2, #37	; 0x25
 8004552:	d1f9      	bne.n	8004548 <_svfiprintf_r+0x50>
 8004554:	ebba 0b04 	subs.w	fp, sl, r4
 8004558:	d00b      	beq.n	8004572 <_svfiprintf_r+0x7a>
 800455a:	465b      	mov	r3, fp
 800455c:	4622      	mov	r2, r4
 800455e:	4629      	mov	r1, r5
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff ff6f 	bl	8004444 <__ssputs_r>
 8004566:	3001      	adds	r0, #1
 8004568:	f000 80a9 	beq.w	80046be <_svfiprintf_r+0x1c6>
 800456c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800456e:	445a      	add	r2, fp
 8004570:	9209      	str	r2, [sp, #36]	; 0x24
 8004572:	f89a 3000 	ldrb.w	r3, [sl]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80a1 	beq.w	80046be <_svfiprintf_r+0x1c6>
 800457c:	2300      	movs	r3, #0
 800457e:	f04f 32ff 	mov.w	r2, #4294967295
 8004582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004586:	f10a 0a01 	add.w	sl, sl, #1
 800458a:	9304      	str	r3, [sp, #16]
 800458c:	9307      	str	r3, [sp, #28]
 800458e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004592:	931a      	str	r3, [sp, #104]	; 0x68
 8004594:	4654      	mov	r4, sl
 8004596:	2205      	movs	r2, #5
 8004598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459c:	4850      	ldr	r0, [pc, #320]	; (80046e0 <_svfiprintf_r+0x1e8>)
 800459e:	f7fb fe17 	bl	80001d0 <memchr>
 80045a2:	9a04      	ldr	r2, [sp, #16]
 80045a4:	b9d8      	cbnz	r0, 80045de <_svfiprintf_r+0xe6>
 80045a6:	06d0      	lsls	r0, r2, #27
 80045a8:	bf44      	itt	mi
 80045aa:	2320      	movmi	r3, #32
 80045ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b0:	0711      	lsls	r1, r2, #28
 80045b2:	bf44      	itt	mi
 80045b4:	232b      	movmi	r3, #43	; 0x2b
 80045b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ba:	f89a 3000 	ldrb.w	r3, [sl]
 80045be:	2b2a      	cmp	r3, #42	; 0x2a
 80045c0:	d015      	beq.n	80045ee <_svfiprintf_r+0xf6>
 80045c2:	9a07      	ldr	r2, [sp, #28]
 80045c4:	4654      	mov	r4, sl
 80045c6:	2000      	movs	r0, #0
 80045c8:	f04f 0c0a 	mov.w	ip, #10
 80045cc:	4621      	mov	r1, r4
 80045ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045d2:	3b30      	subs	r3, #48	; 0x30
 80045d4:	2b09      	cmp	r3, #9
 80045d6:	d94d      	bls.n	8004674 <_svfiprintf_r+0x17c>
 80045d8:	b1b0      	cbz	r0, 8004608 <_svfiprintf_r+0x110>
 80045da:	9207      	str	r2, [sp, #28]
 80045dc:	e014      	b.n	8004608 <_svfiprintf_r+0x110>
 80045de:	eba0 0308 	sub.w	r3, r0, r8
 80045e2:	fa09 f303 	lsl.w	r3, r9, r3
 80045e6:	4313      	orrs	r3, r2
 80045e8:	9304      	str	r3, [sp, #16]
 80045ea:	46a2      	mov	sl, r4
 80045ec:	e7d2      	b.n	8004594 <_svfiprintf_r+0x9c>
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	1d19      	adds	r1, r3, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	9103      	str	r1, [sp, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bfbb      	ittet	lt
 80045fa:	425b      	neglt	r3, r3
 80045fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004600:	9307      	strge	r3, [sp, #28]
 8004602:	9307      	strlt	r3, [sp, #28]
 8004604:	bfb8      	it	lt
 8004606:	9204      	strlt	r2, [sp, #16]
 8004608:	7823      	ldrb	r3, [r4, #0]
 800460a:	2b2e      	cmp	r3, #46	; 0x2e
 800460c:	d10c      	bne.n	8004628 <_svfiprintf_r+0x130>
 800460e:	7863      	ldrb	r3, [r4, #1]
 8004610:	2b2a      	cmp	r3, #42	; 0x2a
 8004612:	d134      	bne.n	800467e <_svfiprintf_r+0x186>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	9203      	str	r2, [sp, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	bfb8      	it	lt
 8004620:	f04f 33ff 	movlt.w	r3, #4294967295
 8004624:	3402      	adds	r4, #2
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80046f0 <_svfiprintf_r+0x1f8>
 800462c:	7821      	ldrb	r1, [r4, #0]
 800462e:	2203      	movs	r2, #3
 8004630:	4650      	mov	r0, sl
 8004632:	f7fb fdcd 	bl	80001d0 <memchr>
 8004636:	b138      	cbz	r0, 8004648 <_svfiprintf_r+0x150>
 8004638:	9b04      	ldr	r3, [sp, #16]
 800463a:	eba0 000a 	sub.w	r0, r0, sl
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	4082      	lsls	r2, r0
 8004642:	4313      	orrs	r3, r2
 8004644:	3401      	adds	r4, #1
 8004646:	9304      	str	r3, [sp, #16]
 8004648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464c:	4825      	ldr	r0, [pc, #148]	; (80046e4 <_svfiprintf_r+0x1ec>)
 800464e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004652:	2206      	movs	r2, #6
 8004654:	f7fb fdbc 	bl	80001d0 <memchr>
 8004658:	2800      	cmp	r0, #0
 800465a:	d038      	beq.n	80046ce <_svfiprintf_r+0x1d6>
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <_svfiprintf_r+0x1f0>)
 800465e:	bb1b      	cbnz	r3, 80046a8 <_svfiprintf_r+0x1b0>
 8004660:	9b03      	ldr	r3, [sp, #12]
 8004662:	3307      	adds	r3, #7
 8004664:	f023 0307 	bic.w	r3, r3, #7
 8004668:	3308      	adds	r3, #8
 800466a:	9303      	str	r3, [sp, #12]
 800466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466e:	4433      	add	r3, r6
 8004670:	9309      	str	r3, [sp, #36]	; 0x24
 8004672:	e768      	b.n	8004546 <_svfiprintf_r+0x4e>
 8004674:	fb0c 3202 	mla	r2, ip, r2, r3
 8004678:	460c      	mov	r4, r1
 800467a:	2001      	movs	r0, #1
 800467c:	e7a6      	b.n	80045cc <_svfiprintf_r+0xd4>
 800467e:	2300      	movs	r3, #0
 8004680:	3401      	adds	r4, #1
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	4619      	mov	r1, r3
 8004686:	f04f 0c0a 	mov.w	ip, #10
 800468a:	4620      	mov	r0, r4
 800468c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004690:	3a30      	subs	r2, #48	; 0x30
 8004692:	2a09      	cmp	r2, #9
 8004694:	d903      	bls.n	800469e <_svfiprintf_r+0x1a6>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0c6      	beq.n	8004628 <_svfiprintf_r+0x130>
 800469a:	9105      	str	r1, [sp, #20]
 800469c:	e7c4      	b.n	8004628 <_svfiprintf_r+0x130>
 800469e:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a2:	4604      	mov	r4, r0
 80046a4:	2301      	movs	r3, #1
 80046a6:	e7f0      	b.n	800468a <_svfiprintf_r+0x192>
 80046a8:	ab03      	add	r3, sp, #12
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	462a      	mov	r2, r5
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <_svfiprintf_r+0x1f4>)
 80046b0:	a904      	add	r1, sp, #16
 80046b2:	4638      	mov	r0, r7
 80046b4:	f3af 8000 	nop.w
 80046b8:	1c42      	adds	r2, r0, #1
 80046ba:	4606      	mov	r6, r0
 80046bc:	d1d6      	bne.n	800466c <_svfiprintf_r+0x174>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	065b      	lsls	r3, r3, #25
 80046c2:	f53f af2d 	bmi.w	8004520 <_svfiprintf_r+0x28>
 80046c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c8:	b01d      	add	sp, #116	; 0x74
 80046ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ce:	ab03      	add	r3, sp, #12
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	462a      	mov	r2, r5
 80046d4:	4b05      	ldr	r3, [pc, #20]	; (80046ec <_svfiprintf_r+0x1f4>)
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	4638      	mov	r0, r7
 80046da:	f000 f879 	bl	80047d0 <_printf_i>
 80046de:	e7eb      	b.n	80046b8 <_svfiprintf_r+0x1c0>
 80046e0:	080058d4 	.word	0x080058d4
 80046e4:	080058de 	.word	0x080058de
 80046e8:	00000000 	.word	0x00000000
 80046ec:	08004445 	.word	0x08004445
 80046f0:	080058da 	.word	0x080058da

080046f4 <_printf_common>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	4616      	mov	r6, r2
 80046fa:	4699      	mov	r9, r3
 80046fc:	688a      	ldr	r2, [r1, #8]
 80046fe:	690b      	ldr	r3, [r1, #16]
 8004700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004704:	4293      	cmp	r3, r2
 8004706:	bfb8      	it	lt
 8004708:	4613      	movlt	r3, r2
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004710:	4607      	mov	r7, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b10a      	cbz	r2, 800471a <_printf_common+0x26>
 8004716:	3301      	adds	r3, #1
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	0699      	lsls	r1, r3, #26
 800471e:	bf42      	ittt	mi
 8004720:	6833      	ldrmi	r3, [r6, #0]
 8004722:	3302      	addmi	r3, #2
 8004724:	6033      	strmi	r3, [r6, #0]
 8004726:	6825      	ldr	r5, [r4, #0]
 8004728:	f015 0506 	ands.w	r5, r5, #6
 800472c:	d106      	bne.n	800473c <_printf_common+0x48>
 800472e:	f104 0a19 	add.w	sl, r4, #25
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	6832      	ldr	r2, [r6, #0]
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	42ab      	cmp	r3, r5
 800473a:	dc26      	bgt.n	800478a <_printf_common+0x96>
 800473c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004740:	1e13      	subs	r3, r2, #0
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	bf18      	it	ne
 8004746:	2301      	movne	r3, #1
 8004748:	0692      	lsls	r2, r2, #26
 800474a:	d42b      	bmi.n	80047a4 <_printf_common+0xb0>
 800474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004750:	4649      	mov	r1, r9
 8004752:	4638      	mov	r0, r7
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d01e      	beq.n	8004798 <_printf_common+0xa4>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	6922      	ldr	r2, [r4, #16]
 800475e:	f003 0306 	and.w	r3, r3, #6
 8004762:	2b04      	cmp	r3, #4
 8004764:	bf02      	ittt	eq
 8004766:	68e5      	ldreq	r5, [r4, #12]
 8004768:	6833      	ldreq	r3, [r6, #0]
 800476a:	1aed      	subeq	r5, r5, r3
 800476c:	68a3      	ldr	r3, [r4, #8]
 800476e:	bf0c      	ite	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	2500      	movne	r5, #0
 8004776:	4293      	cmp	r3, r2
 8004778:	bfc4      	itt	gt
 800477a:	1a9b      	subgt	r3, r3, r2
 800477c:	18ed      	addgt	r5, r5, r3
 800477e:	2600      	movs	r6, #0
 8004780:	341a      	adds	r4, #26
 8004782:	42b5      	cmp	r5, r6
 8004784:	d11a      	bne.n	80047bc <_printf_common+0xc8>
 8004786:	2000      	movs	r0, #0
 8004788:	e008      	b.n	800479c <_printf_common+0xa8>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4649      	mov	r1, r9
 8004790:	4638      	mov	r0, r7
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d103      	bne.n	80047a0 <_printf_common+0xac>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7c6      	b.n	8004732 <_printf_common+0x3e>
 80047a4:	18e1      	adds	r1, r4, r3
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	2030      	movs	r0, #48	; 0x30
 80047aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ae:	4422      	add	r2, r4
 80047b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b8:	3302      	adds	r3, #2
 80047ba:	e7c7      	b.n	800474c <_printf_common+0x58>
 80047bc:	2301      	movs	r3, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d0e6      	beq.n	8004798 <_printf_common+0xa4>
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7d9      	b.n	8004782 <_printf_common+0x8e>
	...

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	7e0f      	ldrb	r7, [r1, #24]
 80047d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047d8:	2f78      	cmp	r7, #120	; 0x78
 80047da:	4691      	mov	r9, r2
 80047dc:	4680      	mov	r8, r0
 80047de:	460c      	mov	r4, r1
 80047e0:	469a      	mov	sl, r3
 80047e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	; 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d4 	beq.w	800499a <_printf_i+0x1ca>
 80047f2:	2f58      	cmp	r7, #88	; 0x58
 80047f4:	f000 80c0 	beq.w	8004978 <_printf_i+0x1a8>
 80047f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a101      	add	r1, pc, #4	; (adr r1, 8004810 <_printf_i+0x40>)
 800480c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	08004981 	.word	0x08004981
 8004840:	080048a9 	.word	0x080048a9
 8004844:	0800493b 	.word	0x0800493b
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049a3 	.word	0x080049a3
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048a9 	.word	0x080048a9
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004943 	.word	0x08004943
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	602a      	str	r2, [r5, #0]
 8004870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e09f      	b.n	80049bc <_printf_i+0x1ec>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	682b      	ldr	r3, [r5, #0]
 8004880:	0607      	lsls	r7, r0, #24
 8004882:	f103 0104 	add.w	r1, r3, #4
 8004886:	6029      	str	r1, [r5, #0]
 8004888:	d501      	bpl.n	800488e <_printf_i+0xbe>
 800488a:	681e      	ldr	r6, [r3, #0]
 800488c:	e003      	b.n	8004896 <_printf_i+0xc6>
 800488e:	0646      	lsls	r6, r0, #25
 8004890:	d5fb      	bpl.n	800488a <_printf_i+0xba>
 8004892:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004896:	2e00      	cmp	r6, #0
 8004898:	da03      	bge.n	80048a2 <_printf_i+0xd2>
 800489a:	232d      	movs	r3, #45	; 0x2d
 800489c:	4276      	negs	r6, r6
 800489e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a2:	485a      	ldr	r0, [pc, #360]	; (8004a0c <_printf_i+0x23c>)
 80048a4:	230a      	movs	r3, #10
 80048a6:	e012      	b.n	80048ce <_printf_i+0xfe>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	6820      	ldr	r0, [r4, #0]
 80048ac:	1d19      	adds	r1, r3, #4
 80048ae:	6029      	str	r1, [r5, #0]
 80048b0:	0605      	lsls	r5, r0, #24
 80048b2:	d501      	bpl.n	80048b8 <_printf_i+0xe8>
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	e002      	b.n	80048be <_printf_i+0xee>
 80048b8:	0641      	lsls	r1, r0, #25
 80048ba:	d5fb      	bpl.n	80048b4 <_printf_i+0xe4>
 80048bc:	881e      	ldrh	r6, [r3, #0]
 80048be:	4853      	ldr	r0, [pc, #332]	; (8004a0c <_printf_i+0x23c>)
 80048c0:	2f6f      	cmp	r7, #111	; 0x6f
 80048c2:	bf0c      	ite	eq
 80048c4:	2308      	moveq	r3, #8
 80048c6:	230a      	movne	r3, #10
 80048c8:	2100      	movs	r1, #0
 80048ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ce:	6865      	ldr	r5, [r4, #4]
 80048d0:	60a5      	str	r5, [r4, #8]
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	bfa2      	ittt	ge
 80048d6:	6821      	ldrge	r1, [r4, #0]
 80048d8:	f021 0104 	bicge.w	r1, r1, #4
 80048dc:	6021      	strge	r1, [r4, #0]
 80048de:	b90e      	cbnz	r6, 80048e4 <_printf_i+0x114>
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	d04b      	beq.n	800497c <_printf_i+0x1ac>
 80048e4:	4615      	mov	r5, r2
 80048e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80048ea:	fb03 6711 	mls	r7, r3, r1, r6
 80048ee:	5dc7      	ldrb	r7, [r0, r7]
 80048f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048f4:	4637      	mov	r7, r6
 80048f6:	42bb      	cmp	r3, r7
 80048f8:	460e      	mov	r6, r1
 80048fa:	d9f4      	bls.n	80048e6 <_printf_i+0x116>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d10b      	bne.n	8004918 <_printf_i+0x148>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	07de      	lsls	r6, r3, #31
 8004904:	d508      	bpl.n	8004918 <_printf_i+0x148>
 8004906:	6923      	ldr	r3, [r4, #16]
 8004908:	6861      	ldr	r1, [r4, #4]
 800490a:	4299      	cmp	r1, r3
 800490c:	bfde      	ittt	le
 800490e:	2330      	movle	r3, #48	; 0x30
 8004910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004918:	1b52      	subs	r2, r2, r5
 800491a:	6122      	str	r2, [r4, #16]
 800491c:	f8cd a000 	str.w	sl, [sp]
 8004920:	464b      	mov	r3, r9
 8004922:	aa03      	add	r2, sp, #12
 8004924:	4621      	mov	r1, r4
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fee4 	bl	80046f4 <_printf_common>
 800492c:	3001      	adds	r0, #1
 800492e:	d14a      	bne.n	80049c6 <_printf_i+0x1f6>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	b004      	add	sp, #16
 8004936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	f043 0320 	orr.w	r3, r3, #32
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	4833      	ldr	r0, [pc, #204]	; (8004a10 <_printf_i+0x240>)
 8004944:	2778      	movs	r7, #120	; 0x78
 8004946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	061f      	lsls	r7, r3, #24
 8004950:	f851 6b04 	ldr.w	r6, [r1], #4
 8004954:	d402      	bmi.n	800495c <_printf_i+0x18c>
 8004956:	065f      	lsls	r7, r3, #25
 8004958:	bf48      	it	mi
 800495a:	b2b6      	uxthmi	r6, r6
 800495c:	07df      	lsls	r7, r3, #31
 800495e:	bf48      	it	mi
 8004960:	f043 0320 	orrmi.w	r3, r3, #32
 8004964:	6029      	str	r1, [r5, #0]
 8004966:	bf48      	it	mi
 8004968:	6023      	strmi	r3, [r4, #0]
 800496a:	b91e      	cbnz	r6, 8004974 <_printf_i+0x1a4>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	f023 0320 	bic.w	r3, r3, #32
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2310      	movs	r3, #16
 8004976:	e7a7      	b.n	80048c8 <_printf_i+0xf8>
 8004978:	4824      	ldr	r0, [pc, #144]	; (8004a0c <_printf_i+0x23c>)
 800497a:	e7e4      	b.n	8004946 <_printf_i+0x176>
 800497c:	4615      	mov	r5, r2
 800497e:	e7bd      	b.n	80048fc <_printf_i+0x12c>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	6826      	ldr	r6, [r4, #0]
 8004984:	6961      	ldr	r1, [r4, #20]
 8004986:	1d18      	adds	r0, r3, #4
 8004988:	6028      	str	r0, [r5, #0]
 800498a:	0635      	lsls	r5, r6, #24
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	d501      	bpl.n	8004994 <_printf_i+0x1c4>
 8004990:	6019      	str	r1, [r3, #0]
 8004992:	e002      	b.n	800499a <_printf_i+0x1ca>
 8004994:	0670      	lsls	r0, r6, #25
 8004996:	d5fb      	bpl.n	8004990 <_printf_i+0x1c0>
 8004998:	8019      	strh	r1, [r3, #0]
 800499a:	2300      	movs	r3, #0
 800499c:	6123      	str	r3, [r4, #16]
 800499e:	4615      	mov	r5, r2
 80049a0:	e7bc      	b.n	800491c <_printf_i+0x14c>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	1d1a      	adds	r2, r3, #4
 80049a6:	602a      	str	r2, [r5, #0]
 80049a8:	681d      	ldr	r5, [r3, #0]
 80049aa:	6862      	ldr	r2, [r4, #4]
 80049ac:	2100      	movs	r1, #0
 80049ae:	4628      	mov	r0, r5
 80049b0:	f7fb fc0e 	bl	80001d0 <memchr>
 80049b4:	b108      	cbz	r0, 80049ba <_printf_i+0x1ea>
 80049b6:	1b40      	subs	r0, r0, r5
 80049b8:	6060      	str	r0, [r4, #4]
 80049ba:	6863      	ldr	r3, [r4, #4]
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	2300      	movs	r3, #0
 80049c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c4:	e7aa      	b.n	800491c <_printf_i+0x14c>
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	462a      	mov	r2, r5
 80049ca:	4649      	mov	r1, r9
 80049cc:	4640      	mov	r0, r8
 80049ce:	47d0      	blx	sl
 80049d0:	3001      	adds	r0, #1
 80049d2:	d0ad      	beq.n	8004930 <_printf_i+0x160>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	079b      	lsls	r3, r3, #30
 80049d8:	d413      	bmi.n	8004a02 <_printf_i+0x232>
 80049da:	68e0      	ldr	r0, [r4, #12]
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	4298      	cmp	r0, r3
 80049e0:	bfb8      	it	lt
 80049e2:	4618      	movlt	r0, r3
 80049e4:	e7a6      	b.n	8004934 <_printf_i+0x164>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4632      	mov	r2, r6
 80049ea:	4649      	mov	r1, r9
 80049ec:	4640      	mov	r0, r8
 80049ee:	47d0      	blx	sl
 80049f0:	3001      	adds	r0, #1
 80049f2:	d09d      	beq.n	8004930 <_printf_i+0x160>
 80049f4:	3501      	adds	r5, #1
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	9903      	ldr	r1, [sp, #12]
 80049fa:	1a5b      	subs	r3, r3, r1
 80049fc:	42ab      	cmp	r3, r5
 80049fe:	dcf2      	bgt.n	80049e6 <_printf_i+0x216>
 8004a00:	e7eb      	b.n	80049da <_printf_i+0x20a>
 8004a02:	2500      	movs	r5, #0
 8004a04:	f104 0619 	add.w	r6, r4, #25
 8004a08:	e7f5      	b.n	80049f6 <_printf_i+0x226>
 8004a0a:	bf00      	nop
 8004a0c:	080058e5 	.word	0x080058e5
 8004a10:	080058f6 	.word	0x080058f6

08004a14 <memmove>:
 8004a14:	4288      	cmp	r0, r1
 8004a16:	b510      	push	{r4, lr}
 8004a18:	eb01 0402 	add.w	r4, r1, r2
 8004a1c:	d902      	bls.n	8004a24 <memmove+0x10>
 8004a1e:	4284      	cmp	r4, r0
 8004a20:	4623      	mov	r3, r4
 8004a22:	d807      	bhi.n	8004a34 <memmove+0x20>
 8004a24:	1e43      	subs	r3, r0, #1
 8004a26:	42a1      	cmp	r1, r4
 8004a28:	d008      	beq.n	8004a3c <memmove+0x28>
 8004a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a32:	e7f8      	b.n	8004a26 <memmove+0x12>
 8004a34:	4402      	add	r2, r0
 8004a36:	4601      	mov	r1, r0
 8004a38:	428a      	cmp	r2, r1
 8004a3a:	d100      	bne.n	8004a3e <memmove+0x2a>
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a46:	e7f7      	b.n	8004a38 <memmove+0x24>

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc fbe8 	bl	8001228 <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	2000069c 	.word	0x2000069c

08004a68 <memcpy>:
 8004a68:	440a      	add	r2, r1
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xc>
 8004a72:	4770      	bx	lr
 8004a74:	b510      	push	{r4, lr}
 8004a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7e:	4291      	cmp	r1, r2
 8004a80:	d1f9      	bne.n	8004a76 <memcpy+0xe>
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <_realloc_r>:
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	4680      	mov	r8, r0
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	460e      	mov	r6, r1
 8004a8e:	b921      	cbnz	r1, 8004a9a <_realloc_r+0x16>
 8004a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a94:	4611      	mov	r1, r2
 8004a96:	f7ff bc49 	b.w	800432c <_malloc_r>
 8004a9a:	b92a      	cbnz	r2, 8004aa8 <_realloc_r+0x24>
 8004a9c:	f7ff fbda 	bl	8004254 <_free_r>
 8004aa0:	4625      	mov	r5, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa8:	f000 f81b 	bl	8004ae2 <_malloc_usable_size_r>
 8004aac:	4284      	cmp	r4, r0
 8004aae:	4607      	mov	r7, r0
 8004ab0:	d802      	bhi.n	8004ab8 <_realloc_r+0x34>
 8004ab2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ab6:	d812      	bhi.n	8004ade <_realloc_r+0x5a>
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fc36 	bl	800432c <_malloc_r>
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0ed      	beq.n	8004aa2 <_realloc_r+0x1e>
 8004ac6:	42bc      	cmp	r4, r7
 8004ac8:	4622      	mov	r2, r4
 8004aca:	4631      	mov	r1, r6
 8004acc:	bf28      	it	cs
 8004ace:	463a      	movcs	r2, r7
 8004ad0:	f7ff ffca 	bl	8004a68 <memcpy>
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f7ff fbbc 	bl	8004254 <_free_r>
 8004adc:	e7e1      	b.n	8004aa2 <_realloc_r+0x1e>
 8004ade:	4635      	mov	r5, r6
 8004ae0:	e7df      	b.n	8004aa2 <_realloc_r+0x1e>

08004ae2 <_malloc_usable_size_r>:
 8004ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae6:	1f18      	subs	r0, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfbc      	itt	lt
 8004aec:	580b      	ldrlt	r3, [r1, r0]
 8004aee:	18c0      	addlt	r0, r0, r3
 8004af0:	4770      	bx	lr
	...

08004af4 <_init>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr

08004b00 <_fini>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr
