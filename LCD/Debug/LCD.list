
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b74  08002b74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000927e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001853  00000000  00000000  000292fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009e0  00000000  00000000  0002ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000798  00000000  00000000  0002b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c8cc  00000000  00000000  0002bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c44f  00000000  00000000  00048594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ae562  00000000  00000000  000549e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002888  00000000  00000000  00102f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  001057d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b04 	.word	0x08002b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b04 	.word	0x08002b04

080001c8 <send_to_lcd>:


/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	b2db      	uxtb	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001de:	4823      	ldr	r0, [pc, #140]	; (800026c <send_to_lcd+0xa4>)
 80001e0:	f000 fdae 	bl	8000d40 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	08db      	lsrs	r3, r3, #3
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	461a      	mov	r2, r3
 80001f2:	2102      	movs	r1, #2
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fda2 	bl	8000d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	089b      	lsrs	r3, r3, #2
 8000200:	b2db      	uxtb	r3, r3
 8000202:	f003 0301 	and.w	r3, r3, #1
 8000206:	b2db      	uxtb	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	2108      	movs	r1, #8
 800020c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000210:	f000 fd96 	bl	8000d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	085b      	lsrs	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	461a      	mov	r2, r3
 8000222:	2180      	movs	r1, #128	; 0x80
 8000224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000228:	f000 fd8a 	bl	8000d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	b2db      	uxtb	r3, r3
 8000234:	461a      	mov	r2, r3
 8000236:	2120      	movs	r1, #32
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023c:	f000 fd80 	bl	8000d40 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000246:	4809      	ldr	r0, [pc, #36]	; (800026c <send_to_lcd+0xa4>)
 8000248:	f000 fd7a 	bl	8000d40 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 faf3 	bl	8000838 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <send_to_lcd+0xa4>)
 800025a:	f000 fd71 	bl	8000d40 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800025e:	2032      	movs	r0, #50	; 0x32
 8000260:	f000 faea 	bl	8000838 <HAL_Delay>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	48000c00 	.word	0x48000c00

08000270 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	091b      	lsrs	r3, r3, #4
 800027e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff9f 	bl	80001c8 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 030f 	and.w	r3, r3, #15
 8000290:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff96 	bl	80001c8 <send_to_lcd>
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	091b      	lsrs	r3, r3, #4
 80002b2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	2101      	movs	r1, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff85 	bl	80001c8 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	2101      	movs	r1, #1
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff7c 	bl	80001c8 <send_to_lcd>
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <lcd_clear>:

void lcd_clear (void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ffc7 	bl	8000270 <lcd_send_cmd>
	HAL_Delay(2);
 80002e2:	2002      	movs	r0, #2
 80002e4:	f000 faa8 	bl	8000838 <HAL_Delay>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
    switch (row)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d003      	beq.n	8000304 <lcd_put_cur+0x18>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d005      	beq.n	800030e <lcd_put_cur+0x22>
 8000302:	e009      	b.n	8000318 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	603b      	str	r3, [r7, #0]
            break;
 800030c:	e004      	b.n	8000318 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000314:	603b      	str	r3, [r7, #0]
            break;
 8000316:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffa7 	bl	8000270 <lcd_send_cmd>

}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <lcd_init>:


void lcd_init (void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	af00      	add	r7, sp, #0
//	    lcd_send_cmd (0x30);
//	    HAL_Delay(10);
//	    lcd_send_cmd (0x20);  // 4bit mode
//	    HAL_Delay(10);

	HAL_Delay(10);
 800032e:	200a      	movs	r0, #10
 8000330:	f000 fa82 	bl	8000838 <HAL_Delay>
	lcd_send_cmd (0x02);
 8000334:	2002      	movs	r0, #2
 8000336:	f7ff ff9b 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800033a:	2028      	movs	r0, #40	; 0x28
 800033c:	f7ff ff98 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000340:	2008      	movs	r0, #8
 8000342:	f7ff ff95 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x01);  // clear display
 8000346:	2001      	movs	r0, #1
 8000348:	f7ff ff92 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800034c:	2006      	movs	r0, #6
 800034e:	f7ff ff8f 	bl	8000270 <lcd_send_cmd>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000352:	200c      	movs	r0, #12
 8000354:	f7ff ff8c 	bl	8000270 <lcd_send_cmd>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000364:	e006      	b.n	8000374 <lcd_send_string+0x18>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff98 	bl	80002a4 <lcd_send_data>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1f4      	bne.n	8000366 <lcd_send_string+0xa>

}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 f9ee 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f82a 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 f8d8 	bl	8000548 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000398:	f000 f882 	bl	80004a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  lcd_init();
 800039c:	f7ff ffc5 	bl	800032a <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_put_cur(0, 0);
 80003a0:	2100      	movs	r1, #0
 80003a2:	2000      	movs	r0, #0
 80003a4:	f7ff ffa2 	bl	80002ec <lcd_put_cur>
	 		 	   lcd_send_string("Hello ");
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <main+0x50>)
 80003aa:	f7ff ffd7 	bl	800035c <lcd_send_string>
	 		 	   lcd_send_string("Engr ");
 80003ae:	480b      	ldr	r0, [pc, #44]	; (80003dc <main+0x54>)
 80003b0:	f7ff ffd4 	bl	800035c <lcd_send_string>
	 		 	  lcd_send_string("Fazal ");
 80003b4:	480a      	ldr	r0, [pc, #40]	; (80003e0 <main+0x58>)
 80003b6:	f7ff ffd1 	bl	800035c <lcd_send_string>
	 		 	   lcd_put_cur(1, 0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2001      	movs	r0, #1
 80003be:	f7ff ff95 	bl	80002ec <lcd_put_cur>
	 		 	   lcd_send_string("Chip Soul SMC");
 80003c2:	4808      	ldr	r0, [pc, #32]	; (80003e4 <main+0x5c>)
 80003c4:	f7ff ffca 	bl	800035c <lcd_send_string>
	 		 	   HAL_Delay(3000);
 80003c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80003cc:	f000 fa34 	bl	8000838 <HAL_Delay>
	 		 	 lcd_clear();
 80003d0:	f7ff ff82 	bl	80002d8 <lcd_clear>
	  lcd_put_cur(0, 0);
 80003d4:	e7e4      	b.n	80003a0 <main+0x18>
 80003d6:	bf00      	nop
 80003d8:	08002b1c 	.word	0x08002b1c
 80003dc:	08002b24 	.word	0x08002b24
 80003e0:	08002b2c 	.word	0x08002b2c
 80003e4:	08002b34 	.word	0x08002b34

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b09e      	sub	sp, #120	; 0x78
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fb58 	bl	8002aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	463b      	mov	r3, r7
 800040e:	223c      	movs	r2, #60	; 0x3c
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fb4a 	bl	8002aac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000418:	2301      	movs	r3, #1
 800041a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	2301      	movs	r3, #1
 8000428:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000434:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000438:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fc96 	bl	8000d70 <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044a:	f000 f8df 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	230f      	movs	r3, #15
 8000450:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2302      	movs	r3, #2
 8000454:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fcbe 	bl	8001dec <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000476:	f000 f8c9 	bl	800060c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800047a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000480:	2300      	movs	r3, #0
 8000482:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fe96 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000492:	f000 f8bb 	bl	800060c <Error_Handler>
  }
}
 8000496:	bf00      	nop
 8000498:	3778      	adds	r7, #120	; 0x78
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004c0:	4a20      	ldr	r2, [pc, #128]	; (8000544 <MX_TIM1_Init+0xa4>)
 80004c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004c6:	2247      	movs	r2, #71	; 0x47
 80004c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80004d0:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80004d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004de:	4b18      	ldr	r3, [pc, #96]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004ea:	4815      	ldr	r0, [pc, #84]	; (8000540 <MX_TIM1_Init+0xa0>)
 80004ec:	f002 f814 	bl	8002518 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80004f6:	f000 f889 	bl	800060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_TIM1_Init+0xa0>)
 8000508:	f002 f85d 	bl	80025c6 <HAL_TIM_ConfigClockSource>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000512:	f000 f87b 	bl	800060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <MX_TIM1_Init+0xa0>)
 8000528:	f002 fa40 	bl	80029ac <HAL_TIMEx_MasterConfigSynchronization>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000532:	f000 f86b 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	3720      	adds	r7, #32
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028
 8000544:	40012c00 	.word	0x40012c00

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a28      	ldr	r2, [pc, #160]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <MX_GPIO_Init+0xbc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <MX_GPIO_Init+0xbc>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_GPIO_Init+0xbc>)
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_GPIO_Init+0xbc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	21aa      	movs	r1, #170	; 0xaa
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f000 fbc7 	bl	8000d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 80005b8:	4813      	ldr	r0, [pc, #76]	; (8000608 <MX_GPIO_Init+0xc0>)
 80005ba:	f000 fbc1 	bl	8000d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 80005be:	23aa      	movs	r3, #170	; 0xaa
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 fa38 	bl	8000a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80005dc:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0xc0>)
 80005f6:	f000 fa29 	bl	8000a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	48000c00 	.word	0x48000c00

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	e7fe      	b.n	8000614 <Error_Handler+0x8>
	...

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_MspInit+0x44>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_MspInit+0x44>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_MspInit+0x44>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x44>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x44>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x44>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_TIM_Base_MspInit+0x38>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d10b      	bne.n	800068a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_TIM_Base_MspInit+0x3c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <HAL_TIM_Base_MspInit+0x3c>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <HAL_TIM_Base_MspInit+0x3c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40012c00 	.word	0x40012c00
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f884 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SystemInit+0x20>)
 80006fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <SystemInit+0x20>)
 8000700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000750 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff ffea 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f002 f9b9 	bl	8002abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074a:	f7ff fe1d 	bl	8000388 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000750:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	08002b7c 	.word	0x08002b7c
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	20000078 	.word	0x20000078

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f931 	bl	80009e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f808 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff ff46 	bl	8000618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x54>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f93b 	bl	8000a32 <HAL_SYSTICK_Config>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00e      	b.n	80007e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d80a      	bhi.n	80007e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f911 	bl	80009fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_InitTick+0x5c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000074 	.word	0x20000074

08000820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;  
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000074 	.word	0x20000074

08000838 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffde 	bl	8000820 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	f003 0307 	and.w	r3, r3, #7
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009b0:	d301      	bcc.n	80009b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00f      	b.n	80009d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SysTick_Config+0x40>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009be:	210f      	movs	r1, #15
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f7ff ff8e 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <SysTick_Config+0x40>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Config+0x40>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	e000e010 	.word	0xe000e010

080009e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff47 	bl	8000880 <__NVIC_SetPriorityGrouping>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0c:	f7ff ff5c 	bl	80008c8 <__NVIC_GetPriorityGrouping>
 8000a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff ff8e 	bl	8000938 <NVIC_EncodePriority>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff5d 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ffb0 	bl	80009a0 <SysTick_Config>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e154      	b.n	8000d06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8146 	beq.w	8000d00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d005      	beq.n	8000a8c <HAL_GPIO_Init+0x40>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d130      	bne.n	8000aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	091b      	lsrs	r3, r3, #4
 8000ad8:	f003 0201 	and.w	r2, r3, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d017      	beq.n	8000b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d123      	bne.n	8000b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	08da      	lsrs	r2, r3, #3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691a      	ldr	r2, [r3, #16]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	08da      	lsrs	r2, r3, #3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3208      	adds	r2, #8
 8000b78:	6939      	ldr	r1, [r7, #16]
 8000b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0203 	and.w	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80a0 	beq.w	8000d00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a57      	ldr	r2, [pc, #348]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b55      	ldr	r3, [pc, #340]	; (8000d24 <HAL_GPIO_Init+0x2d8>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd8:	4a53      	ldr	r2, [pc, #332]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	089b      	lsrs	r3, r3, #2
 8000bde:	3302      	adds	r3, #2
 8000be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c02:	d019      	beq.n	8000c38 <HAL_GPIO_Init+0x1ec>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_GPIO_Init+0x2e0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d013      	beq.n	8000c34 <HAL_GPIO_Init+0x1e8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2e4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1e4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_GPIO_Init+0x2e8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1e0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_GPIO_Init+0x2ec>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1dc>
 8000c24:	2304      	movs	r3, #4
 8000c26:	e008      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c28:	2305      	movs	r3, #5
 8000c2a:	e006      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e004      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_Init+0x1ee>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c4a:	4937      	ldr	r1, [pc, #220]	; (8000d28 <HAL_GPIO_Init+0x2dc>)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c7c:	4a2f      	ldr	r2, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_GPIO_Init+0x2f0>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3301      	adds	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f47f aea3 	bne.w	8000a5c <HAL_GPIO_Init+0x10>
  }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000c00 	.word	0x48000c00
 8000d38:	48001000 	.word	0x48001000
 8000d3c:	40010400 	.word	0x40010400

08000d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d50:	787b      	ldrb	r3, [r7, #1]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d80:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	f001 b823 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 817d 	beq.w	80010a6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dac:	4bbc      	ldr	r3, [pc, #752]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00c      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db8:	4bb9      	ldr	r3, [pc, #740]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d15c      	bne.n	8000e7e <HAL_RCC_OscConfig+0x10e>
 8000dc4:	4bb6      	ldr	r3, [pc, #728]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd0:	d155      	bne.n	8000e7e <HAL_RCC_OscConfig+0x10e>
 8000dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000de6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d102      	bne.n	8000e04 <HAL_RCC_OscConfig+0x94>
 8000dfe:	4ba8      	ldr	r3, [pc, #672]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	e015      	b.n	8000e30 <HAL_RCC_OscConfig+0xc0>
 8000e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e08:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e0c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e10:	fa93 f3a3 	rbit	r3, r3
 8000e14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e20:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e24:	fa93 f3a3 	rbit	r3, r3
 8000e28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e2c:	4b9c      	ldr	r3, [pc, #624]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e34:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e38:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e3c:	fa92 f2a2 	rbit	r2, r2
 8000e40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e44:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e48:	fab2 f282 	clz	r2, r2
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	f042 0220 	orr.w	r2, r2, #32
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	f002 021f 	and.w	r2, r2, #31
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 811f 	beq.w	80010a4 <HAL_RCC_OscConfig+0x334>
 8000e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 8116 	bne.w	80010a4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f000 bfaf 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12e>
 8000e90:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a82      	ldr	r2, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e036      	b.n	8000f0c <HAL_RCC_OscConfig+0x19c>
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x158>
 8000eae:	4b7c      	ldr	r3, [pc, #496]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7b      	ldr	r2, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a78      	ldr	r2, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e021      	b.n	8000f0c <HAL_RCC_OscConfig+0x19c>
 8000ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ecc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x184>
 8000eda:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a70      	ldr	r2, [pc, #448]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a6d      	ldr	r2, [pc, #436]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e00b      	b.n	8000f0c <HAL_RCC_OscConfig+0x19c>
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a66      	ldr	r2, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f0c:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	f023 020f 	bic.w	r2, r3, #15
 8000f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	495f      	ldr	r1, [pc, #380]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d059      	beq.n	8000fea <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fc73 	bl	8000820 <HAL_GetTick>
 8000f3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	e00a      	b.n	8000f56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc6e 	bl	8000820 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b64      	cmp	r3, #100	; 0x64
 8000f4e:	d902      	bls.n	8000f56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	f000 bf43 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	fab3 f383 	clz	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	095b      	lsrs	r3, r3, #5
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <HAL_RCC_OscConfig+0x218>
 8000f82:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	e015      	b.n	8000fb4 <HAL_RCC_OscConfig+0x244>
 8000f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fa4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fb0:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fbc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fc0:	fa92 f2a2 	rbit	r2, r2
 8000fc4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fc8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fcc:	fab2 f282 	clz	r2, r2
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	f042 0220 	orr.w	r2, r2, #32
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	f002 021f 	and.w	r2, r2, #31
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0ab      	beq.n	8000f40 <HAL_RCC_OscConfig+0x1d0>
 8000fe8:	e05d      	b.n	80010a6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fc19 	bl	8000820 <HAL_GetTick>
 8000fee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc14 	bl	8000820 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d902      	bls.n	800100a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	f000 bee9 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800101e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	095b      	lsrs	r3, r3, #5
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x2cc>
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x2f8>
 800103c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001040:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001054:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001058:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_RCC_OscConfig+0x330>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001070:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001074:	fa92 f2a2 	rbit	r2, r2
 8001078:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800107c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f002 021f 	and.w	r2, r2, #31
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ab      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x284>
 800109c:	e003      	b.n	80010a6 <HAL_RCC_OscConfig+0x336>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 817d 	beq.w	80013b6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010bc:	4ba6      	ldr	r3, [pc, #664]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00b      	beq.n	80010e0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010c8:	4ba3      	ldr	r3, [pc, #652]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d172      	bne.n	80011ba <HAL_RCC_OscConfig+0x44a>
 80010d4:	4ba0      	ldr	r3, [pc, #640]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d16c      	bne.n	80011ba <HAL_RCC_OscConfig+0x44a>
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_RCC_OscConfig+0x3a0>
 800110a:	4b93      	ldr	r3, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	e013      	b.n	8001138 <HAL_RCC_OscConfig+0x3c8>
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001128:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001134:	4b88      	ldr	r3, [pc, #544]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	2202      	movs	r2, #2
 800113a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800113e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001142:	fa92 f2a2 	rbit	r2, r2
 8001146:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800114a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	f042 0220 	orr.w	r2, r2, #32
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	f002 021f 	and.w	r2, r2, #31
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00a      	beq.n	8001180 <HAL_RCC_OscConfig+0x410>
 800116a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d002      	beq.n	8001180 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	f000 be2e 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b75      	ldr	r3, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	21f8      	movs	r1, #248	; 0xf8
 8001196:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800119e:	fa91 f1a1 	rbit	r1, r1
 80011a2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011a6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011aa:	fab1 f181 	clz	r1, r1
 80011ae:	b2c9      	uxtb	r1, r1
 80011b0:	408b      	lsls	r3, r1
 80011b2:	4969      	ldr	r1, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b8:	e0fd      	b.n	80013b6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8088 	beq.w	80012dc <HAL_RCC_OscConfig+0x56c>
 80011cc:	2301      	movs	r3, #1
 80011ce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011d6:	fa93 f3a3 	rbit	r3, r3
 80011da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e2:	fab3 f383 	clz	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	461a      	mov	r2, r3
 80011f4:	2301      	movs	r3, #1
 80011f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb12 	bl	8000820 <HAL_GetTick>
 80011fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e00a      	b.n	8001218 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fb0d 	bl	8000820 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d902      	bls.n	8001218 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	f000 bde2 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800122a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	fab3 f383 	clz	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x4d8>
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	e013      	b.n	8001270 <HAL_RCC_OscConfig+0x500>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001260:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001264:	fa93 f3a3 	rbit	r3, r3
 8001268:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800126c:	4b3a      	ldr	r3, [pc, #232]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	2202      	movs	r2, #2
 8001272:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001276:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800127a:	fa92 f2a2 	rbit	r2, r2
 800127e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001282:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f002 021f 	and.w	r2, r2, #31
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0af      	beq.n	8001202 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	21f8      	movs	r1, #248	; 0xf8
 80012b8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012c0:	fa91 f1a1 	rbit	r1, r1
 80012c4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012cc:	fab1 f181 	clz	r1, r1
 80012d0:	b2c9      	uxtb	r1, r1
 80012d2:	408b      	lsls	r3, r1
 80012d4:	4920      	ldr	r1, [pc, #128]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
 80012da:	e06c      	b.n	80013b6 <HAL_RCC_OscConfig+0x646>
 80012dc:	2301      	movs	r3, #1
 80012de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	461a      	mov	r2, r3
 8001304:	2300      	movs	r3, #0
 8001306:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa8a 	bl	8000820 <HAL_GetTick>
 800130c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fa85 	bl	8000820 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d902      	bls.n	8001328 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	f000 bd5a 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001328:	2302      	movs	r3, #2
 800132a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800133a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d104      	bne.n	800135c <HAL_RCC_OscConfig+0x5ec>
 8001352:	4b01      	ldr	r3, [pc, #4]	; (8001358 <HAL_RCC_OscConfig+0x5e8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	e015      	b.n	8001384 <HAL_RCC_OscConfig+0x614>
 8001358:	40021000 	.word	0x40021000
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001374:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001380:	4bc8      	ldr	r3, [pc, #800]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2202      	movs	r2, #2
 8001386:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800138a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800138e:	fa92 f2a2 	rbit	r2, r2
 8001392:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001396:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800139a:	fab2 f282 	clz	r2, r2
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f042 0220 	orr.w	r2, r2, #32
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	f002 021f 	and.w	r2, r2, #31
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ad      	bne.n	8001312 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8110 	beq.w	80015ec <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d079      	beq.n	80014d0 <HAL_RCC_OscConfig+0x760>
 80013dc:	2301      	movs	r3, #1
 80013de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4bab      	ldr	r3, [pc, #684]	; (80016a8 <HAL_RCC_OscConfig+0x938>)
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	461a      	mov	r2, r3
 8001402:	2301      	movs	r3, #1
 8001404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fa0b 	bl	8000820 <HAL_GetTick>
 800140a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fa06 	bl	8000820 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d902      	bls.n	8001426 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	f000 bcdb 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001448:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800147e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 8001482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800148c:	2102      	movs	r1, #2
 800148e:	6019      	str	r1, [r3, #0]
 8001490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001494:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f1a3 	rbit	r1, r3
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014a6:	6019      	str	r1, [r3, #0]
  return result;
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0a0      	beq.n	8001410 <HAL_RCC_OscConfig+0x6a0>
 80014ce:	e08d      	b.n	80015ec <HAL_RCC_OscConfig+0x87c>
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014f2:	601a      	str	r2, [r3, #0]
  return result;
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014fc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x938>)
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	461a      	mov	r2, r3
 800150e:	2300      	movs	r3, #0
 8001510:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff f985 	bl	8000820 <HAL_GetTick>
 8001516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff f980 	bl	8000820 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d902      	bls.n	8001532 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	f000 bc55 	b.w	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155e:	2202      	movs	r2, #2
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001566:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001582:	2202      	movs	r2, #2
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fa93 f2a3 	rbit	r2, r3
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800159c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 80015a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015aa:	2102      	movs	r1, #2
 80015ac:	6019      	str	r1, [r3, #0]
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f1a3 	rbit	r1, r3
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015c4:	6019      	str	r1, [r3, #0]
  return result;
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d197      	bne.n	800151c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 81a1 	beq.w	8001944 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d116      	bne.n	8001642 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800163a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800163c:	2301      	movs	r3, #1
 800163e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_RCC_OscConfig+0x93c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_RCC_OscConfig+0x93c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x93c>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff f8e1 	bl	8000820 <HAL_GetTick>
 800165e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	e009      	b.n	8001678 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001664:	f7ff f8dc 	bl	8000820 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e3b1      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_RCC_OscConfig+0x93c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0ef      	beq.n	8001664 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x940>
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x934>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e03c      	b.n	800171c <HAL_RCC_OscConfig+0x9ac>
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	10908120 	.word	0x10908120
 80016ac:	40007000 	.word	0x40007000
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10c      	bne.n	80016da <HAL_RCC_OscConfig+0x96a>
 80016c0:	4bc1      	ldr	r3, [pc, #772]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4ac0      	ldr	r2, [pc, #768]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	4bbe      	ldr	r3, [pc, #760]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4abd      	ldr	r2, [pc, #756]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e020      	b.n	800171c <HAL_RCC_OscConfig+0x9ac>
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x994>
 80016ea:	4bb7      	ldr	r3, [pc, #732]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4ab6      	ldr	r2, [pc, #728]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	4bb4      	ldr	r3, [pc, #720]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4ab3      	ldr	r2, [pc, #716]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x9ac>
 8001704:	4bb0      	ldr	r3, [pc, #704]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4aaf      	ldr	r2, [pc, #700]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4bad      	ldr	r3, [pc, #692]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4aac      	ldr	r2, [pc, #688]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8081 	beq.w	8001830 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff f877 	bl	8000820 <HAL_GetTick>
 8001732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff f872 	bl	8000820 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e345      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001754:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001758:	2202      	movs	r2, #2
 800175a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fa93 f2a3 	rbit	r2, r3
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800177c:	2202      	movs	r2, #2
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001784:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001796:	601a      	str	r2, [r3, #0]
  return result;
 8001798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80017a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0xa4c>
 80017b6:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	e013      	b.n	80017e4 <HAL_RCC_OscConfig+0xa74>
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017c4:	2202      	movs	r2, #2
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017ec:	2102      	movs	r1, #2
 80017ee:	6011      	str	r1, [r2, #0]
 80017f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	fa92 f1a2 	rbit	r1, r2
 80017fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001802:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001806:	6011      	str	r1, [r2, #0]
  return result;
 8001808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800180c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	fab2 f282 	clz	r2, r2
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f002 021f 	and.w	r2, r2, #31
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f202 	lsl.w	r2, r1, r2
 8001828:	4013      	ands	r3, r2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d084      	beq.n	8001738 <HAL_RCC_OscConfig+0x9c8>
 800182e:	e07f      	b.n	8001930 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7fe fff6 	bl	8000820 <HAL_GetTick>
 8001834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7fe fff1 	bl	8000820 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e2c4      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800185a:	2202      	movs	r2, #2
 800185c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001886:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001898:	601a      	str	r2, [r3, #0]
  return result;
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0xb4e>
 80018b8:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	e013      	b.n	80018e6 <HAL_RCC_OscConfig+0xb76>
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018c6:	2202      	movs	r2, #2
 80018c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018ee:	2102      	movs	r1, #2
 80018f0:	6011      	str	r1, [r2, #0]
 80018f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	fa92 f1a2 	rbit	r1, r2
 8001900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001904:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001908:	6011      	str	r1, [r2, #0]
  return result;
 800190a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	fab2 f282 	clz	r2, r2
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f002 021f 	and.w	r2, r2, #31
 8001924:	2101      	movs	r1, #1
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d184      	bne.n	800183a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001930:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8242 	beq.w	8001dda <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_RCC_OscConfig+0xc58>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	f000 8213 	beq.w	8001d8a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b02      	cmp	r3, #2
 8001972:	f040 8162 	bne.w	8001c3a <HAL_RCC_OscConfig+0xeca>
 8001976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800197e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800199a:	601a      	str	r2, [r3, #0]
  return result;
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80019a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	461a      	mov	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7fe ff30 	bl	8000820 <HAL_GetTick>
 80019c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e00c      	b.n	80019e0 <HAL_RCC_OscConfig+0xc70>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7fe ff28 	bl	8000820 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1fd      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a04:	601a      	str	r2, [r3, #0]
  return result;
 8001a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0xcba>
 8001a24:	4bb0      	ldr	r3, [pc, #704]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	e027      	b.n	8001a7a <HAL_RCC_OscConfig+0xd0a>
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a70:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	4b9c      	ldr	r3, [pc, #624]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a82:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a86:	6011      	str	r1, [r2, #0]
 8001a88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a8c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	fa92 f1a2 	rbit	r1, r2
 8001a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a9a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a9e:	6011      	str	r1, [r2, #0]
  return result;
 8001aa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f042 0220 	orr.w	r2, r2, #32
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f002 021f 	and.w	r2, r2, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d182      	bne.n	80019cc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	497f      	ldr	r1, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b12:	601a      	str	r2, [r3, #0]
  return result;
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b1c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2301      	movs	r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7fe fe74 	bl	8000820 <HAL_GetTick>
 8001b38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3e:	f7fe fe6f 	bl	8000820 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e144      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b76:	601a      	str	r2, [r3, #0]
  return result;
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0xe2c>
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e027      	b.n	8001bec <HAL_RCC_OscConfig+0xe7c>
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bf4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	fa92 f1a2 	rbit	r1, r2
 8001c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c0c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c10:	6011      	str	r1, [r2, #0]
  return result;
 8001c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c16:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d082      	beq.n	8001b3e <HAL_RCC_OscConfig+0xdce>
 8001c38:	e0cf      	b.n	8001dda <HAL_RCC_OscConfig+0x106a>
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c5e:	601a      	str	r2, [r3, #0]
  return result;
 8001c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c64:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7fe fdce 	bl	8000820 <HAL_GetTick>
 8001c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7fe fdc9 	bl	8000820 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e09e      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cc2:	601a      	str	r2, [r3, #0]
  return result;
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ccc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d104      	bne.n	8001cec <HAL_RCC_OscConfig+0xf7c>
 8001ce2:	4b01      	ldr	r3, [pc, #4]	; (8001ce8 <HAL_RCC_OscConfig+0xf78>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e029      	b.n	8001d3c <HAL_RCC_OscConfig+0xfcc>
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d32:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <HAL_RCC_OscConfig+0x1078>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d40:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	fa92 f1a2 	rbit	r1, r2
 8001d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d60:	6011      	str	r1, [r2, #0]
  return result;
 8001d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	fab2 f282 	clz	r2, r2
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	f042 0220 	orr.w	r2, r2, #32
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f002 021f 	and.w	r2, r2, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d180      	bne.n	8001c8a <HAL_RCC_OscConfig+0xf1a>
 8001d88:	e027      	b.n	8001dda <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e01e      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_RCC_OscConfig+0x1078>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001daa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09e      	sub	sp, #120	; 0x78
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e162      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b90      	ldr	r3, [pc, #576]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 0207 	bic.w	r2, r3, #7
 8001e1a:	498b      	ldr	r1, [pc, #556]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e14a      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	497f      	ldr	r1, [pc, #508]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80dc 	beq.w	8002018 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d13c      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xf6>
 8001e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xa6>
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e00f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
 8001e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eae:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d17b      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0f3      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d13c      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x178>
 8001eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d102      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x128>
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e00f      	b.n	8001f34 <HAL_RCC_ClockConfig+0x148>
 8001f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
 8001f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
 8001f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f30:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f38:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13a      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b2      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x1a0>
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e00d      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1bc>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
 8001f98:	2302      	movs	r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2202      	movs	r2, #2
 8001faa:	61ba      	str	r2, [r7, #24]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	617a      	str	r2, [r7, #20]
  return result;
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	fab2 f282 	clz	r2, r2
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	f042 0220 	orr.w	r2, r2, #32
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f002 021f 	and.w	r2, r2, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e079      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	491a      	ldr	r1, [pc, #104]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fc1a 	bl	8000820 <HAL_GetTick>
 8001fec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fc16 	bl	8000820 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e061      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_RCC_ClockConfig+0x260>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d214      	bcs.n	8002050 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4906      	ldr	r1, [pc, #24]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCC_ClockConfig+0x25c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e040      	b.n	80020ca <HAL_RCC_ClockConfig+0x2de>
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	491a      	ldr	r1, [pc, #104]	; (80020d4 <HAL_RCC_ClockConfig+0x2e8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_RCC_ClockConfig+0x2e8>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4912      	ldr	r1, [pc, #72]	; (80020d4 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800208e:	f000 f829 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002092:	4601      	mov	r1, r0
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_RCC_ClockConfig+0x2e8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800209c:	22f0      	movs	r2, #240	; 0xf0
 800209e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	60fa      	str	r2, [r7, #12]
  return result;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	fab2 f282 	clz	r2, r2
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	40d3      	lsrs	r3, r2
 80020b2:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <HAL_RCC_ClockConfig+0x2ec>)
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_RCC_ClockConfig+0x2f0>)
 80020bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_RCC_ClockConfig+0x2f4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fb68 	bl	8000798 <HAL_InitTick>
  
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3778      	adds	r7, #120	; 0x78
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08002b44 	.word	0x08002b44
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b04      	cmp	r3, #4
 800210c:	d002      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x30>
 800210e:	2b08      	cmp	r3, #8
 8002110:	d003      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0x36>
 8002112:	e03c      	b.n	800218e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	e03c      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002120:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002124:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	fa92 f2a2 	rbit	r2, r2
 800212c:	607a      	str	r2, [r7, #4]
  return result;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	40d3      	lsrs	r3, r2
 8002138:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	220f      	movs	r2, #15
 8002148:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	60fa      	str	r2, [r7, #12]
  return result;
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	fbb2 f2f3 	udiv	r2, r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
 800217c:	e004      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	623b      	str	r3, [r7, #32]
      break;
 800218c:	e002      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002190:	623b      	str	r3, [r7, #32]
      break;
 8002192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002194:	6a3b      	ldr	r3, [r7, #32]
}
 8002196:	4618      	mov	r0, r3
 8002198:	372c      	adds	r7, #44	; 0x2c
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002b54 	.word	0x08002b54
 80021b0:	08002b64 	.word	0x08002b64
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b092      	sub	sp, #72	; 0x48
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80d4 	beq.w	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10e      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a4a      	ldr	r2, [pc, #296]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b45      	ldr	r3, [pc, #276]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a41      	ldr	r2, [pc, #260]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe faff 	bl	8000820 <HAL_GetTick>
 8002222:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe fafb 	bl	8000820 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e169      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002244:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800224e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8084 	beq.w	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002260:	429a      	cmp	r2, r3
 8002262:	d07c      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800226e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	461a      	mov	r2, r3
 800228e:	2301      	movs	r3, #1
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022b6:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe faab 	bl	8000820 <HAL_GetTick>
 80022ca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe faa7 	bl	8000820 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e113      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80022e4:	2302      	movs	r3, #2
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	61fb      	str	r3, [r7, #28]
  return result;
 80022fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d108      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002312:	4b01      	ldr	r3, [pc, #4]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	e00d      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	10908100 	.word	0x10908100
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2202      	movs	r2, #2
 8002336:	613a      	str	r2, [r7, #16]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	60fa      	str	r2, [r7, #12]
  return result;
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f002 021f 	and.w	r2, r2, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0b7      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	496a      	ldr	r1, [pc, #424]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002382:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	f023 0203 	bic.w	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	495d      	ldr	r1, [pc, #372]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ae:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4956      	ldr	r1, [pc, #344]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023cc:	4b51      	ldr	r3, [pc, #324]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	494e      	ldr	r1, [pc, #312]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f023 0210 	bic.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4947      	ldr	r1, [pc, #284]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002408:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	493f      	ldr	r1, [pc, #252]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f023 0220 	bic.w	r2, r3, #32
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4938      	ldr	r1, [pc, #224]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4930      	ldr	r1, [pc, #192]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4929      	ldr	r1, [pc, #164]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4921      	ldr	r1, [pc, #132]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	491a      	ldr	r1, [pc, #104]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	4912      	ldr	r1, [pc, #72]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	490b      	ldr	r1, [pc, #44]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	4903      	ldr	r1, [pc, #12]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3748      	adds	r7, #72	; 0x48
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e049      	b.n	80025be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe f88e 	bl	8000660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 f8fe 	bl	8002758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_ConfigClockSource+0x1c>
 80025de:	2302      	movs	r3, #2
 80025e0:	e0b6      	b.n	8002750 <HAL_TIM_ConfigClockSource+0x18a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2202      	movs	r2, #2
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002604:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261e:	d03e      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xd8>
 8002620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002624:	f200 8087 	bhi.w	8002736 <HAL_TIM_ConfigClockSource+0x170>
 8002628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262c:	f000 8086 	beq.w	800273c <HAL_TIM_ConfigClockSource+0x176>
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002634:	d87f      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 8002636:	2b70      	cmp	r3, #112	; 0x70
 8002638:	d01a      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0xaa>
 800263a:	2b70      	cmp	r3, #112	; 0x70
 800263c:	d87b      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 800263e:	2b60      	cmp	r3, #96	; 0x60
 8002640:	d050      	beq.n	80026e4 <HAL_TIM_ConfigClockSource+0x11e>
 8002642:	2b60      	cmp	r3, #96	; 0x60
 8002644:	d877      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 8002646:	2b50      	cmp	r3, #80	; 0x50
 8002648:	d03c      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0xfe>
 800264a:	2b50      	cmp	r3, #80	; 0x50
 800264c:	d873      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d058      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x13e>
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d86f      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d064      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x15e>
 800265a:	2b30      	cmp	r3, #48	; 0x30
 800265c:	d86b      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 800265e:	2b20      	cmp	r3, #32
 8002660:	d060      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x15e>
 8002662:	2b20      	cmp	r3, #32
 8002664:	d867      	bhi.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d05c      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x15e>
 800266a:	2b10      	cmp	r3, #16
 800266c:	d05a      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0x15e>
 800266e:	e062      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	f000 f974 	bl	800296c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002692:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e04f      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ae:	f000 f95d 	bl	800296c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c0:	609a      	str	r2, [r3, #8]
      break;
 80026c2:	e03c      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 f8d1 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2150      	movs	r1, #80	; 0x50
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f92a 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 80026e2:	e02c      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f0:	461a      	mov	r2, r3
 80026f2:	f000 f8f0 	bl	80028d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2160      	movs	r1, #96	; 0x60
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f91a 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002702:	e01c      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002710:	461a      	mov	r2, r3
 8002712:	f000 f8b1 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2140      	movs	r1, #64	; 0x40
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f90a 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002722:	e00c      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 f901 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002734:	e003      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      break;
 800273a:	e000      	b.n	800273e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800273c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <TIM_Base_SetConfig+0x104>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00f      	beq.n	8002790 <TIM_Base_SetConfig+0x38>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002776:	d00b      	beq.n	8002790 <TIM_Base_SetConfig+0x38>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <TIM_Base_SetConfig+0x108>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <TIM_Base_SetConfig+0x38>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a38      	ldr	r2, [pc, #224]	; (8002864 <TIM_Base_SetConfig+0x10c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d003      	beq.n	8002790 <TIM_Base_SetConfig+0x38>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a37      	ldr	r2, [pc, #220]	; (8002868 <TIM_Base_SetConfig+0x110>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d108      	bne.n	80027a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a2d      	ldr	r2, [pc, #180]	; (800285c <TIM_Base_SetConfig+0x104>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01b      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d017      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a2a      	ldr	r2, [pc, #168]	; (8002860 <TIM_Base_SetConfig+0x108>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a29      	ldr	r2, [pc, #164]	; (8002864 <TIM_Base_SetConfig+0x10c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00f      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a28      	ldr	r2, [pc, #160]	; (8002868 <TIM_Base_SetConfig+0x110>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00b      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <TIM_Base_SetConfig+0x114>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <TIM_Base_SetConfig+0x118>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d003      	beq.n	80027e2 <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d108      	bne.n	80027f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <TIM_Base_SetConfig+0x104>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00f      	beq.n	8002840 <TIM_Base_SetConfig+0xe8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <TIM_Base_SetConfig+0x110>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0xe8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <TIM_Base_SetConfig+0x114>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0xe8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <TIM_Base_SetConfig+0x118>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0xe8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <TIM_Base_SetConfig+0x11c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40013400 	.word	0x40013400
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800

08002878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f023 030a 	bic.w	r3, r3, #10
 80028b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b087      	sub	sp, #28
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f023 0210 	bic.w	r2, r3, #16
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 0307 	orr.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	431a      	orrs	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e063      	b.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d108      	bne.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80029fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1b      	ldr	r2, [pc, #108]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d018      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a36:	d013      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10c      	bne.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40013400 	.word	0x40013400
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40014000 	.word	0x40014000

08002aac <memset>:
 8002aac:	4402      	add	r2, r0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <memset+0xa>
 8002ab4:	4770      	bx	lr
 8002ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aba:	e7f9      	b.n	8002ab0 <memset+0x4>

08002abc <__libc_init_array>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4d0d      	ldr	r5, [pc, #52]	; (8002af4 <__libc_init_array+0x38>)
 8002ac0:	4c0d      	ldr	r4, [pc, #52]	; (8002af8 <__libc_init_array+0x3c>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	42a6      	cmp	r6, r4
 8002aca:	d109      	bne.n	8002ae0 <__libc_init_array+0x24>
 8002acc:	4d0b      	ldr	r5, [pc, #44]	; (8002afc <__libc_init_array+0x40>)
 8002ace:	4c0c      	ldr	r4, [pc, #48]	; (8002b00 <__libc_init_array+0x44>)
 8002ad0:	f000 f818 	bl	8002b04 <_init>
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	2600      	movs	r6, #0
 8002ada:	42a6      	cmp	r6, r4
 8002adc:	d105      	bne.n	8002aea <__libc_init_array+0x2e>
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
 8002ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae4:	4798      	blx	r3
 8002ae6:	3601      	adds	r6, #1
 8002ae8:	e7ee      	b.n	8002ac8 <__libc_init_array+0xc>
 8002aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aee:	4798      	blx	r3
 8002af0:	3601      	adds	r6, #1
 8002af2:	e7f2      	b.n	8002ada <__libc_init_array+0x1e>
 8002af4:	08002b74 	.word	0x08002b74
 8002af8:	08002b74 	.word	0x08002b74
 8002afc:	08002b74 	.word	0x08002b74
 8002b00:	08002b78 	.word	0x08002b78

08002b04 <_init>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr

08002b10 <_fini>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr
